(ns portkey.aws.ec2.-2016-09-15 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "ec2", :region "us-gov-east-1"},
    :ssl-common-name "ec2.us-gov-east-1.amazonaws.com",
    :endpoint "https://ec2.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope {:service "ec2", :region "ap-northeast-1"},
    :ssl-common-name "ec2.ap-northeast-1.amazonaws.com",
    :endpoint "https://ec2.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "ec2", :region "eu-west-1"},
    :ssl-common-name "ec2.eu-west-1.amazonaws.com",
    :endpoint "https://ec2.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "ec2", :region "us-east-2"},
    :ssl-common-name "ec2.us-east-2.amazonaws.com",
    :endpoint "https://ec2.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "ec2", :region "ap-southeast-2"},
    :ssl-common-name "ec2.ap-southeast-2.amazonaws.com",
    :endpoint "https://ec2.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "ec2", :region "cn-north-1"},
    :ssl-common-name "ec2.cn-north-1.amazonaws.com.cn",
    :endpoint "https://ec2.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "ec2", :region "sa-east-1"},
    :ssl-common-name "ec2.sa-east-1.amazonaws.com",
    :endpoint "https://ec2.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "ec2", :region "ap-southeast-1"},
    :ssl-common-name "ec2.ap-southeast-1.amazonaws.com",
    :endpoint "https://ec2.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "ec2", :region "cn-northwest-1"},
    :ssl-common-name "ec2.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://ec2.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "ec2", :region "ap-northeast-2"},
    :ssl-common-name "ec2.ap-northeast-2.amazonaws.com",
    :endpoint "https://ec2.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "ec2", :region "eu-west-3"},
    :ssl-common-name "ec2.eu-west-3.amazonaws.com",
    :endpoint "https://ec2.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "ec2", :region "ca-central-1"},
    :ssl-common-name "ec2.ca-central-1.amazonaws.com",
    :endpoint "https://ec2.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "ec2", :region "eu-central-1"},
    :ssl-common-name "ec2.eu-central-1.amazonaws.com",
    :endpoint "https://ec2.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "ec2", :region "eu-west-2"},
    :ssl-common-name "ec2.eu-west-2.amazonaws.com",
    :endpoint "https://ec2.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "ec2", :region "us-gov-west-1"},
    :ssl-common-name "ec2.us-gov-west-1.amazonaws.com",
    :endpoint "https://ec2.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "ec2", :region "us-west-2"},
    :ssl-common-name "ec2.us-west-2.amazonaws.com",
    :endpoint "https://ec2.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "ec2", :region "us-east-1"},
    :ssl-common-name "ec2.us-east-1.amazonaws.com",
    :endpoint "https://ec2.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "ec2", :region "us-west-1"},
    :ssl-common-name "ec2.us-west-1.amazonaws.com",
    :endpoint "https://ec2.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "ec2", :region "ap-south-1"},
    :ssl-common-name "ec2.ap-south-1.amazonaws.com",
    :endpoint "https://ec2.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "ec2", :region "eu-north-1"},
    :ssl-common-name "ec2.eu-north-1.amazonaws.com",
    :endpoint "https://ec2.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-zone-name-string-list)

(clojure.core/declare ser-scheduled-instances-monitoring)

(clojure.core/declare ser-permission-group)

(clojure.core/declare ser-double)

(clojure.core/declare ser-private-ip-address-config-set)

(clojure.core/declare ser-ebs-instance-block-device-specification)

(clojure.core/declare ser-storage)

(clojure.core/declare ser-value-string-list)

(clojure.core/declare ser-peering-connection-options-request)

(clojure.core/declare ser-customer-gateway-id-string-list)

(clojure.core/declare ser-public-ip-string-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-export-task-id-string-list)

(clojure.core/declare ser-host-reservation-id-set)

(clojure.core/declare ser-vpc-classic-link-id-list)

(clojure.core/declare ser-prefix-list-id)

(clojure.core/declare ser-spot-instance-request-id-list)

(clojure.core/declare ser-security-group-string-list)

(clojure.core/declare ser-vpn-connection-id-string-list)

(clojure.core/declare ser-architecture-values)

(clojure.core/declare ser-blob-attribute-value)

(clojure.core/declare ser-export-environment)

(clojure.core/declare ser-scheduled-instances-private-ip-address-config)

(clojure.core/declare ser-product-code-string-list)

(clojure.core/declare ser-spot-placement)

(clojure.core/declare ser-occurrence-day-request-set)

(clojure.core/declare ser-spot-instance-type)

(clojure.core/declare ser-ebs-block-device)

(clojure.core/declare ser-new-dhcp-configuration)

(clojure.core/declare ser-placement)

(clojure.core/declare ser-network-interface-id-list)

(clojure.core/declare ser-request-host-id-set)

(clojure.core/declare ser-reserved-instances-configuration)

(clojure.core/declare ser-vpn-connection-options-specification)

(clojure.core/declare ser-tenancy)

(clojure.core/declare ser-reserved-instances-offering-id-string-list)

(clojure.core/declare ser-scheduled-instances-security-group-id-set)

(clojure.core/declare ser-affinity)

(clojure.core/declare ser-group-name-string-list)

(clojure.core/declare ser-scheduled-instances-placement)

(clojure.core/declare ser-key-name-string-list)

(clojure.core/declare ser-scheduled-instances-block-device-mapping)

(clojure.core/declare ser-account-attribute-name)

(clojure.core/declare ser-instance-type)

(clojure.core/declare ser-instance-type-list)

(clojure.core/declare ser-instance-id-string-list)

(clojure.core/declare ser-image-attribute-name)

(clojure.core/declare ser-create-volume-permission)

(clojure.core/declare ser-iam-instance-profile-specification)

(clojure.core/declare ser-placement-group-string-list)

(clojure.core/declare ser-volume-detail)

(clojure.core/declare ser-host-tenancy)

(clojure.core/declare ser-icmp-type-code)

(clojure.core/declare ser-volume-attribute-name)

(clojure.core/declare ser-scheduled-instance-id-request-set)

(clojure.core/declare ser-attribute-boolean-value)

(clojure.core/declare ser-vpc-id-string-list)

(clojure.core/declare ser-price-schedule-specification)

(clojure.core/declare ser-export-to-s-3-task-specification)

(clojure.core/declare ser-rule-action)

(clojure.core/declare ser-fleet-type)

(clojure.core/declare ser-group-identifier-list)

(clojure.core/declare ser-price-schedule-specification-list)

(clojure.core/declare ser-traffic-type)

(clojure.core/declare ser-allocation-id-list)

(clojure.core/declare ser-create-volume-permission-list)

(clojure.core/declare ser-image-disk-container-list)

(clojure.core/declare ser-event-type)

(clojure.core/declare ser-restorable-by-string-list)

(clojure.core/declare ser-next-token)

(clojure.core/declare ser-slot-start-time-range-request)

(clojure.core/declare ser-excess-capacity-termination-policy)

(clojure.core/declare ser-spot-fleet-monitoring)

(clojure.core/declare ser-instance-block-device-mapping-specification)

(clojure.core/declare ser-group-ids)

(clojure.core/declare ser-user-id-group-pair-list)

(clojure.core/declare ser-s-3-storage)

(clojure.core/declare ser-launch-permission-list)

(clojure.core/declare ser-reserved-instances-id-string-list)

(clojure.core/declare ser-group-identifier)

(clojure.core/declare ser-run-instances-monitoring-enabled)

(clojure.core/declare ser-disk-image-list)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-client-data)

(clojure.core/declare ser-image-disk-container)

(clojure.core/declare ser-spot-fleet-request-config-data)

(clojure.core/declare ser-conversion-id-string-list)

(clojure.core/declare ser-allocation-strategy)

(clojure.core/declare ser-attribute-value)

(clojure.core/declare ser-private-ip-address-specification-list)

(clojure.core/declare ser-auto-placement)

(clojure.core/declare ser-prefix-list-id-list)

(clojure.core/declare ser-vpc-attribute-name)

(clojure.core/declare ser-instance-block-device-mapping-specification-list)

(clojure.core/declare ser-placement-strategy)

(clojure.core/declare ser-user-group-string-list)

(clojure.core/declare ser-scheduled-instances-ebs)

(clojure.core/declare ser-target-configuration-request-set)

(clojure.core/declare ser-volume-id-string-list)

(clojure.core/declare ser-dhcp-options-id-string-list)

(clojure.core/declare serscope)

(clojure.core/declare ser-reset-image-attribute-name)

(clojure.core/declare ser-scheduled-instances-launch-specification)

(clojure.core/declare ser-product-description-list)

(clojure.core/declare ser-group-id-string-list)

(clojure.core/declare ser-snapshot-disk-container)

(clojure.core/declare ser-launch-specs-list)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-ip-permission)

(clojure.core/declare ser-ip-permission-list)

(clojure.core/declare ser-slot-date-time-range-request)

(clojure.core/declare ser-ri-product-description)

(clojure.core/declare ser-reserved-instance-id-set)

(clojure.core/declare ser-disk-image-format)

(clojure.core/declare ser-scheduled-instances-network-interface-set)

(clojure.core/declare ser-security-group-id-string-list)

(clojure.core/declare ser-domain-type)

(clojure.core/declare ser-flow-logs-resource-type)

(clojure.core/declare ser-operation-type)

(clojure.core/declare ser-snapshot-attribute-name)

(clojure.core/declare ser-currency-code-values)

(clojure.core/declare ser-network-interface-attribute)

(clojure.core/declare ser-report-instance-reason-codes)

(clojure.core/declare ser-bundle-id-string-list)

(clojure.core/declare ser-volume-type)

(clojure.core/declare ser-account-attribute-name-string-list)

(clojure.core/declare ser-launch-permission-modifications)

(clojure.core/declare ser-long)

(clojure.core/declare ser-subnet-id-string-list)

(clojure.core/declare ser-reserved-instance-limit-price)

(clojure.core/declare ser-region-name-string-list)

(clojure.core/declare ser-scheduled-instance-recurrence-request)

(clojure.core/declare ser-user-bucket)

(clojure.core/declare ser-scheduled-instances-network-interface)

(clojure.core/declare ser-target-configuration-request)

(clojure.core/declare ser-reserved-instances-configuration-list)

(clojure.core/declare ser-instance-network-interface-specification-list)

(clojure.core/declare ser-block-device-mapping)

(clojure.core/declare ser-max-results)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-user-id-string-list)

(clojure.core/declare ser-executable-by-string-list)

(clojure.core/declare ser-platform-values)

(clojure.core/declare ser-disk-image)

(clojure.core/declare ser-port-range)

(clojure.core/declare ser-spot-fleet-launch-specification)

(clojure.core/declare ser-ip-range)

(clojure.core/declare ser-block-device-mapping-request-list)

(clojure.core/declare ser-container-format)

(clojure.core/declare ser-purchase-request-set)

(clojure.core/declare ser-new-dhcp-configuration-list)

(clojure.core/declare ser-block-device-mapping-list)

(clojure.core/declare ser-blob)

(clojure.core/declare ser-gateway-type)

(clojure.core/declare ser-scheduled-instances-iam-instance-profile)

(clojure.core/declare ser-report-status-type)

(clojure.core/declare ser-ip-range-list)

(clojure.core/declare ser-import-instance-launch-specification)

(clojure.core/declare ser-scheduled-instances-block-device-mapping-set)

(clojure.core/declare ser-purchase-request)

(clojure.core/declare ser-reserved-instances-modification-id-string-list)

(clojure.core/declare ser-resource-id-list)

(clojure.core/declare ser-offering-class-type)

(clojure.core/declare ser-request-host-id-list)

(clojure.core/declare ser-image-id-string-list)

(clojure.core/declare ser-instance-attribute-name)

(clojure.core/declare ser-disk-image-detail)

(clojure.core/declare ser-user-data)

(clojure.core/declare ser-offering-type-values)

(clojure.core/declare ser-network-interface-attachment-changes)

(clojure.core/declare ser-private-ip-address-string-list)

(clojure.core/declare ser-owner-string-list)

(clojure.core/declare ser-create-volume-permission-modifications)

(clojure.core/declare ser-reason-codes-list)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-launch-permission)

(clojure.core/declare ser-vpn-gateway-id-string-list)

(clojure.core/declare ser-private-ip-address-specification)

(clojure.core/declare ser-request-spot-launch-specification)

(clojure.core/declare ser-user-id-group-pair)

(clojure.core/declare ser-import-task-id-list)

(clojure.core/declare ser-date-time)

(clojure.core/declare ser-snapshot-id-string-list)

(clojure.core/declare ser-shutdown-behavior)

(clojure.core/declare ser-boolean)

(clojure.core/declare ser-instance-network-interface-specification)

(clojure.core/defn- ser-zone-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ZoneName"}))) input), :shape "ZoneNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-monitoring [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesMonitoring", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean"}))))

(clojure.core/defn- ser-permission-group [input] #:http.request.field{:value (clojure.core/get {"all" "all", :all "all"} input), :shape "PermissionGroup"})

(clojure.core/defn- ser-double [input] #:http.request.field{:value input, :shape "Double"})

(clojure.core/defn- ser-private-ip-address-config-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-private-ip-address-config coll) #:http.request.field{:shape "ScheduledInstancesPrivateIpAddressConfig", :location-name "PrivateIpAddressConfigSet"}))) input), :shape "PrivateIpAddressConfigSet", :type "list"})

(clojure.core/defn- ser-ebs-instance-block-device-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "EbsInstanceBlockDeviceSpecification", :type "structure"} (clojure.core/contains? input :volume-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String", :location-name "volumeId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"}))))

(clojure.core/defn- ser-storage [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Storage", :type "structure"} (clojure.core/contains? input :s-3) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-s-3-storage (input :s-3)) #:http.request.field{:name "S3", :shape "S3Storage"}))))

(clojure.core/defn- ser-value-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ValueStringList", :type "list"})

(clojure.core/defn- ser-peering-connection-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PeeringConnectionOptionsRequest", :type "structure"} (clojure.core/contains? input :allow-egress-from-local-classic-link-to-remote-vpc) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-egress-from-local-classic-link-to-remote-vpc)) #:http.request.field{:name "AllowEgressFromLocalClassicLinkToRemoteVpc", :shape "Boolean"})) (clojure.core/contains? input :allow-egress-from-local-vpc-to-remote-classic-link) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-egress-from-local-vpc-to-remote-classic-link)) #:http.request.field{:name "AllowEgressFromLocalVpcToRemoteClassicLink", :shape "Boolean"})) (clojure.core/contains? input :allow-dns-resolution-from-remote-vpc) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-dns-resolution-from-remote-vpc)) #:http.request.field{:name "AllowDnsResolutionFromRemoteVpc", :shape "Boolean"}))))

(clojure.core/defn- ser-customer-gateway-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CustomerGatewayId"}))) input), :shape "CustomerGatewayIdStringList", :type "list"})

(clojure.core/defn- ser-public-ip-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PublicIp"}))) input), :shape "PublicIpStringList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Filter", :type "structure"} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :values)) #:http.request.field{:name "Values", :shape "ValueStringList", :location-name "Value"}))))

(clojure.core/defn- ser-export-task-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ExportTaskId"}))) input), :shape "ExportTaskIdStringList", :type "list"})

(clojure.core/defn- ser-host-reservation-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "HostReservationIdSet", :type "list"})

(clojure.core/defn- ser-vpc-classic-link-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcId"}))) input), :shape "VpcClassicLinkIdList", :type "list"})

(clojure.core/defn- ser-prefix-list-id [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PrefixListId", :type "structure"} (clojure.core/contains? input :prefix-list-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix-list-id)) #:http.request.field{:name "PrefixListId", :shape "String", :location-name "prefixListId"}))))

(clojure.core/defn- ser-spot-instance-request-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SpotInstanceRequestId"}))) input), :shape "SpotInstanceRequestIdList", :type "list"})

(clojure.core/defn- ser-security-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroup"}))) input), :shape "SecurityGroupStringList", :type "list"})

(clojure.core/defn- ser-vpn-connection-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpnConnectionId"}))) input), :shape "VpnConnectionIdStringList", :type "list"})

(clojure.core/defn- ser-architecture-values [input] #:http.request.field{:value (clojure.core/get {"i386" "i386", :i-386 "i386", "x86_64" "x86_64", :x-86-64 "x86_64"} input), :shape "ArchitectureValues"})

(clojure.core/defn- ser-blob-attribute-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BlobAttributeValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob (input :value)) #:http.request.field{:name "Value", :shape "Blob", :location-name "value"}))))

(clojure.core/defn- ser-export-environment [input] #:http.request.field{:value (clojure.core/get {"citrix" "citrix", :citrix "citrix", "vmware" "vmware", :vmware "vmware", "microsoft" "microsoft", :microsoft "microsoft"} input), :shape "ExportEnvironment"})

(clojure.core/defn- ser-scheduled-instances-private-ip-address-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesPrivateIpAddressConfig", :type "structure"} (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String"})) (clojure.core/contains? input :primary) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :primary)) #:http.request.field{:name "Primary", :shape "Boolean"}))))

(clojure.core/defn- ser-product-code-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ProductCode"}))) input), :shape "ProductCodeStringList", :type "list"})

(clojure.core/defn- ser-spot-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotPlacement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"}))))

(clojure.core/defn- ser-occurrence-day-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-integer coll) #:http.request.field{:shape "Integer", :location-name "OccurenceDay"}))) input), :shape "OccurrenceDayRequestSet", :type "list"})

(clojure.core/defn- ser-spot-instance-type [input] #:http.request.field{:value (clojure.core/get {"one-time" "one-time", :onetime "one-time", "persistent" "persistent", :persistent "persistent"} input), :shape "SpotInstanceType"})

(clojure.core/defn- ser-ebs-block-device [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "EbsBlockDevice", :type "structure"} (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String", :location-name "snapshotId"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer", :location-name "volumeSize"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType", :location-name "volumeType"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer", :location-name "iops"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"}))))

(clojure.core/defn- ser-new-dhcp-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NewDhcpConfiguration", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String", :location-name "key"})) (clojure.core/contains? input :values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :values)) #:http.request.field{:name "Values", :shape "ValueStringList", :location-name "Value"}))))

(clojure.core/defn- ser-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Placement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "Tenancy", :location-name "tenancy"})) (clojure.core/contains? input :host-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-id)) #:http.request.field{:name "HostId", :shape "String", :location-name "hostId"})) (clojure.core/contains? input :affinity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :affinity)) #:http.request.field{:name "Affinity", :shape "String", :location-name "affinity"}))))

(clojure.core/defn- ser-network-interface-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "NetworkInterfaceIdList", :type "list"})

(clojure.core/defn- ser-request-host-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "RequestHostIdSet", :type "list"})

(clojure.core/defn- ser-reserved-instances-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReservedInstancesConfiguration", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :platform) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :platform)) #:http.request.field{:name "Platform", :shape "String", :location-name "platform"})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :scope) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serscope (input :scope)) #:http.request.field{:name "Scope", :shape "scope", :location-name "scope"}))))

(clojure.core/defn- ser-vpn-connection-options-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "VpnConnectionOptionsSpecification", :type "structure"} (clojure.core/contains? input :static-routes-only) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :static-routes-only)) #:http.request.field{:name "StaticRoutesOnly", :shape "Boolean", :location-name "staticRoutesOnly"}))))

(clojure.core/defn- ser-tenancy [input] #:http.request.field{:value (clojure.core/get {"default" "default", :default "default", "dedicated" "dedicated", :dedicated "dedicated", "host" "host", :host "host"} input), :shape "Tenancy"})

(clojure.core/defn- ser-reserved-instances-offering-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ReservedInstancesOfferingIdStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-security-group-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "ScheduledInstancesSecurityGroupIdSet", :type "list"})

(clojure.core/defn- ser-affinity [input] #:http.request.field{:value (clojure.core/get {"default" "default", :default "default", "host" "host", :host "host"} input), :shape "Affinity"})

(clojure.core/defn- ser-group-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "GroupName"}))) input), :shape "GroupNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesPlacement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"}))))

(clojure.core/defn- ser-key-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "KeyName"}))) input), :shape "KeyNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-block-device-mapping [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesBlockDeviceMapping", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-ebs (input :ebs)) #:http.request.field{:name "Ebs", :shape "ScheduledInstancesEbs"}))))

(clojure.core/defn- ser-account-attribute-name [input] #:http.request.field{:value (clojure.core/get {"supported-platforms" "supported-platforms", :supportedplatforms "supported-platforms", "default-vpc" "default-vpc", :defaultvpc "default-vpc"} input), :shape "AccountAttributeName"})

(clojure.core/defn- ser-instance-type [input] #:http.request.field{:value (clojure.core/get {:r-3large "r3.large", :c-4xlarge "c4.xlarge", "m1.large" "m1.large", :c-3xlarge "c3.xlarge", "cc1.4xlarge" "cc1.4xlarge", :cg-14xlarge "cg1.4xlarge", :i-28xlarge "i2.8xlarge", :t-2small "t2.small", :c-1xlarge "c1.xlarge", "c1.medium" "c1.medium", :c-48xlarge "c4.8xlarge", "r3.8xlarge" "r3.8xlarge", "d2.xlarge" "d2.xlarge", "m3.2xlarge" "m3.2xlarge", "i2.8xlarge" "i2.8xlarge", "g2.2xlarge" "g2.2xlarge", "c3.8xlarge" "c3.8xlarge", "t2.large" "t2.large", :m-42xlarge "m4.2xlarge", "p2.16xlarge" "p2.16xlarge", "m1.xlarge" "m1.xlarge", "d2.8xlarge" "d2.8xlarge", "m4.4xlarge" "m4.4xlarge", :t-2large "t2.large", :c-34xlarge "c3.4xlarge", :x-116xlarge "x1.16xlarge", "cr1.8xlarge" "cr1.8xlarge", "t1.micro" "t1.micro", :d-28xlarge "d2.8xlarge", :r-34xlarge "r3.4xlarge", :m-32xlarge "m3.2xlarge", "c3.2xlarge" "c3.2xlarge", "g2.8xlarge" "g2.8xlarge", "c4.8xlarge" "c4.8xlarge", :g-22xlarge "g2.2xlarge", :c-3large "c3.large", "m2.xlarge" "m2.xlarge", "m1.small" "m1.small", "i2.4xlarge" "i2.4xlarge", "c3.4xlarge" "c3.4xlarge", :t-2micro "t2.micro", :c-38xlarge "c3.8xlarge", "t2.micro" "t2.micro", "d2.2xlarge" "d2.2xlarge", "x1.32xlarge" "x1.32xlarge", :r-38xlarge "r3.8xlarge", "m4.2xlarge" "m4.2xlarge", :r-32xlarge "r3.2xlarge", "m4.10xlarge" "m4.10xlarge", "m1.medium" "m1.medium", :cc-14xlarge "cc1.4xlarge", "c4.4xlarge" "c4.4xlarge", "hi1.4xlarge" "hi1.4xlarge", :d-2xlarge "d2.xlarge", :i-2xlarge "i2.xlarge", "r3.xlarge" "r3.xlarge", :c-44xlarge "c4.4xlarge", :m-22xlarge "m2.2xlarge", :t-2medium "t2.medium", :r-3xlarge "r3.xlarge", "c4.2xlarge" "c4.2xlarge", :m-416xlarge "m4.16xlarge", :i-22xlarge "i2.2xlarge", "t2.small" "t2.small", :m-1small "m1.small", :m-3large "m3.large", "m3.xlarge" "m3.xlarge", "r3.2xlarge" "r3.2xlarge", :c-32xlarge "c3.2xlarge", "cg1.4xlarge" "cg1.4xlarge", :c-42xlarge "c4.2xlarge", "r3.4xlarge" "r3.4xlarge", :p-2xlarge "p2.xlarge", :hs-18xlarge "hs1.8xlarge", :t-2nano "t2.nano", :m-44xlarge "m4.4xlarge", :m-24xlarge "m2.4xlarge", "c4.xlarge" "c4.xlarge", "m2.2xlarge" "m2.2xlarge", "p2.8xlarge" "p2.8xlarge", "x1.16xlarge" "x1.16xlarge", "m4.large" "m4.large", :m-410xlarge "m4.10xlarge", "m4.16xlarge" "m4.16xlarge", "r3.large" "r3.large", "d2.4xlarge" "d2.4xlarge", "c4.large" "c4.large", :d-24xlarge "d2.4xlarge", :m-3medium "m3.medium", :g-28xlarge "g2.8xlarge", :m-1xlarge "m1.xlarge", "m4.xlarge" "m4.xlarge", "i2.2xlarge" "i2.2xlarge", :c-4large "c4.large", :cc-28xlarge "cc2.8xlarge", :i-24xlarge "i2.4xlarge", :m-4xlarge "m4.xlarge", :m-3xlarge "m3.xlarge", "t2.nano" "t2.nano", "m2.4xlarge" "m2.4xlarge", "c3.xlarge" "c3.xlarge", :m-4large "m4.large", "p2.xlarge" "p2.xlarge", :m-1medium "m1.medium", :m-1large "m1.large", "t2.medium" "t2.medium", "c3.large" "c3.large", :c-1medium "c1.medium", "m3.medium" "m3.medium", :cr-18xlarge "cr1.8xlarge", "i2.xlarge" "i2.xlarge", "cc2.8xlarge" "cc2.8xlarge", "hs1.8xlarge" "hs1.8xlarge", :x-132xlarge "x1.32xlarge", "m3.large" "m3.large", :p-216xlarge "p2.16xlarge", "c1.xlarge" "c1.xlarge", :t-1micro "t1.micro", :d-22xlarge "d2.2xlarge", :m-2xlarge "m2.xlarge", :p-28xlarge "p2.8xlarge", :hi-14xlarge "hi1.4xlarge"} input), :shape "InstanceType"})

(clojure.core/defn- ser-instance-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-type coll) #:http.request.field{:shape "InstanceType"}))) input), :shape "InstanceTypeList", :type "list"})

(clojure.core/defn- ser-instance-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "InstanceId"}))) input), :shape "InstanceIdStringList", :type "list"})

(clojure.core/defn- ser-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {:description "description", "kernel" "kernel", "productCodes" "productCodes", "blockDeviceMapping" "blockDeviceMapping", :ramdisk "ramdisk", :product-codes "productCodes", "launchPermission" "launchPermission", :block-device-mapping "blockDeviceMapping", "ramdisk" "ramdisk", :sriov-net-support "sriovNetSupport", :kernel "kernel", :launch-permission "launchPermission", "description" "description", "sriovNetSupport" "sriovNetSupport"} input), :shape "ImageAttributeName"})

(clojure.core/defn- ser-create-volume-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CreateVolumePermission", :type "structure"} (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"})) (clojure.core/contains? input :group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission-group (input :group)) #:http.request.field{:name "Group", :shape "PermissionGroup", :location-name "group"}))))

(clojure.core/defn- ser-iam-instance-profile-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IamInstanceProfileSpecification", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String", :location-name "arn"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"}))))

(clojure.core/defn- ser-placement-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "PlacementGroupStringList", :type "list"})

(clojure.core/defn- ser-volume-detail [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-long (:size input)) #:http.request.field{:name "Size", :shape "Long", :location-name "size"})], :shape "VolumeDetail", :type "structure"}))

(clojure.core/defn- ser-host-tenancy [input] #:http.request.field{:value (clojure.core/get {"dedicated" "dedicated", :dedicated "dedicated", "host" "host", :host "host"} input), :shape "HostTenancy"})

(clojure.core/defn- ser-icmp-type-code [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IcmpTypeCode", :type "structure"} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :type)) #:http.request.field{:name "Type", :shape "Integer", :location-name "type"})) (clojure.core/contains? input :code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :code)) #:http.request.field{:name "Code", :shape "Integer", :location-name "code"}))))

(clojure.core/defn- ser-volume-attribute-name [input] #:http.request.field{:value (clojure.core/get {"autoEnableIO" "autoEnableIO", :auto-enable-io "autoEnableIO", "productCodes" "productCodes", :product-codes "productCodes"} input), :shape "VolumeAttributeName"})

(clojure.core/defn- ser-scheduled-instance-id-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ScheduledInstanceId"}))) input), :shape "ScheduledInstanceIdRequestSet", :type "list"})

(clojure.core/defn- ser-attribute-boolean-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AttributeBooleanValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :value)) #:http.request.field{:name "Value", :shape "Boolean", :location-name "value"}))))

(clojure.core/defn- ser-vpc-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcId"}))) input), :shape "VpcIdStringList", :type "list"})

(clojure.core/defn- ser-price-schedule-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PriceScheduleSpecification", :type "structure"} (clojure.core/contains? input :term) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :term)) #:http.request.field{:name "Term", :shape "Long", :location-name "term"})) (clojure.core/contains? input :price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :price)) #:http.request.field{:name "Price", :shape "Double", :location-name "price"})) (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues", :location-name "currencyCode"}))))

(clojure.core/defn- ser-export-to-s-3-task-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ExportToS3TaskSpecification", :type "structure"} (clojure.core/contains? input :disk-image-format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-format (input :disk-image-format)) #:http.request.field{:name "DiskImageFormat", :shape "DiskImageFormat", :location-name "diskImageFormat"})) (clojure.core/contains? input :container-format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-container-format (input :container-format)) #:http.request.field{:name "ContainerFormat", :shape "ContainerFormat", :location-name "containerFormat"})) (clojure.core/contains? input :s-3-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-bucket)) #:http.request.field{:name "S3Bucket", :shape "String", :location-name "s3Bucket"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String", :location-name "s3Prefix"}))))

(clojure.core/defn- ser-rule-action [input] #:http.request.field{:value (clojure.core/get {"allow" "allow", :allow "allow", "deny" "deny", :deny "deny"} input), :shape "RuleAction"})

(clojure.core/defn- ser-fleet-type [input] #:http.request.field{:value (clojure.core/get {"request" "request", :request "request", "maintain" "maintain", :maintain "maintain"} input), :shape "FleetType"})

(clojure.core/defn- ser-group-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-group-identifier coll) #:http.request.field{:shape "GroupIdentifier", :location-name "item"}))) input), :shape "GroupIdentifierList", :type "list"})

(clojure.core/defn- ser-price-schedule-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-price-schedule-specification coll) #:http.request.field{:shape "PriceScheduleSpecification", :location-name "item"}))) input), :shape "PriceScheduleSpecificationList", :type "list"})

(clojure.core/defn- ser-traffic-type [input] #:http.request.field{:value (clojure.core/get {"ACCEPT" "ACCEPT", :accept "ACCEPT", "REJECT" "REJECT", :reject "REJECT", "ALL" "ALL", :all "ALL"} input), :shape "TrafficType"})

(clojure.core/defn- ser-allocation-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AllocationId"}))) input), :shape "AllocationIdList", :type "list"})

(clojure.core/defn- ser-create-volume-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-create-volume-permission coll) #:http.request.field{:shape "CreateVolumePermission", :location-name "item"}))) input), :shape "CreateVolumePermissionList", :type "list"})

(clojure.core/defn- ser-image-disk-container-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-image-disk-container coll) #:http.request.field{:shape "ImageDiskContainer", :location-name "item"}))) input), :shape "ImageDiskContainerList", :type "list"})

(clojure.core/defn- ser-event-type [input] #:http.request.field{:value (clojure.core/get {"instanceChange" "instanceChange", :instance-change "instanceChange", "fleetRequestChange" "fleetRequestChange", :fleet-request-change "fleetRequestChange", "error" "error", :error "error"} input), :shape "EventType"})

(clojure.core/defn- ser-restorable-by-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "RestorableByStringList", :type "list"})

(clojure.core/defn- ser-next-token [input] #:http.request.field{:value input, :shape "NextToken"})

(clojure.core/defn- ser-slot-start-time-range-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SlotStartTimeRangeRequest", :type "structure"} (clojure.core/contains? input :earliest-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :earliest-time)) #:http.request.field{:name "EarliestTime", :shape "DateTime"})) (clojure.core/contains? input :latest-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :latest-time)) #:http.request.field{:name "LatestTime", :shape "DateTime"}))))

(clojure.core/defn- ser-excess-capacity-termination-policy [input] #:http.request.field{:value (clojure.core/get {"noTermination" "noTermination", :no-termination "noTermination", "default" "default", :default "default"} input), :shape "ExcessCapacityTerminationPolicy"})

(clojure.core/defn- ser-spot-fleet-monitoring [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotFleetMonitoring", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean", :location-name "enabled"}))))

(clojure.core/defn- ser-instance-block-device-mapping-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceBlockDeviceMappingSpecification", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String", :location-name "deviceName"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ebs-instance-block-device-specification (input :ebs)) #:http.request.field{:name "Ebs", :shape "EbsInstanceBlockDeviceSpecification", :location-name "ebs"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String", :location-name "virtualName"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String", :location-name "noDevice"}))))

(clojure.core/defn- ser-group-ids [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "GroupIds", :type "list"})

(clojure.core/defn- ser-user-id-group-pair-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-user-id-group-pair coll) #:http.request.field{:shape "UserIdGroupPair", :location-name "item"}))) input), :shape "UserIdGroupPairList", :type "list"})

(clojure.core/defn- ser-s-3-storage [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "S3Storage", :type "structure"} (clojure.core/contains? input :bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :bucket)) #:http.request.field{:name "Bucket", :shape "String", :location-name "bucket"})) (clojure.core/contains? input :prefix) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix)) #:http.request.field{:name "Prefix", :shape "String", :location-name "prefix"})) (clojure.core/contains? input :aws-access-key-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :aws-access-key-id)) #:http.request.field{:name "AWSAccessKeyId", :shape "String"})) (clojure.core/contains? input :upload-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob (input :upload-policy)) #:http.request.field{:name "UploadPolicy", :shape "Blob", :location-name "uploadPolicy"})) (clojure.core/contains? input :upload-policy-signature) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :upload-policy-signature)) #:http.request.field{:name "UploadPolicySignature", :shape "String", :location-name "uploadPolicySignature"}))))

(clojure.core/defn- ser-launch-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-permission coll) #:http.request.field{:shape "LaunchPermission", :location-name "item"}))) input), :shape "LaunchPermissionList", :type "list"})

(clojure.core/defn- ser-reserved-instances-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstancesId"}))) input), :shape "ReservedInstancesIdStringList", :type "list"})

(clojure.core/defn- ser-group-identifier [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "GroupIdentifier", :type "structure"} (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"}))))

(clojure.core/defn- ser-run-instances-monitoring-enabled [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-boolean (:enabled input)) #:http.request.field{:name "Enabled", :shape "Boolean", :location-name "enabled"})], :shape "RunInstancesMonitoringEnabled", :type "structure"}))

(clojure.core/defn- ser-disk-image-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-disk-image coll) #:http.request.field{:shape "DiskImage"}))) input), :shape "DiskImageList", :type "list"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "item"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-client-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ClientData", :type "structure"} (clojure.core/contains? input :upload-start) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :upload-start)) #:http.request.field{:name "UploadStart", :shape "DateTime"})) (clojure.core/contains? input :upload-end) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :upload-end)) #:http.request.field{:name "UploadEnd", :shape "DateTime"})) (clojure.core/contains? input :upload-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :upload-size)) #:http.request.field{:name "UploadSize", :shape "Double"})) (clojure.core/contains? input :comment) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :comment)) #:http.request.field{:name "Comment", :shape "String"}))))

(clojure.core/defn- ser-image-disk-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ImageDiskContainer", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :format)) #:http.request.field{:name "Format", :shape "String"})) (clojure.core/contains? input :url) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :url)) #:http.request.field{:name "Url", :shape "String"})) (clojure.core/contains? input :user-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-bucket (input :user-bucket)) #:http.request.field{:name "UserBucket", :shape "UserBucket"})) (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"}))))

(clojure.core/defn- ser-spot-fleet-request-config-data [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:spot-price input)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"}) (clojure.core/into (ser-integer (:target-capacity input)) #:http.request.field{:name "TargetCapacity", :shape "Integer", :location-name "targetCapacity"}) (clojure.core/into (ser-string (:iam-fleet-role input)) #:http.request.field{:name "IamFleetRole", :shape "String", :location-name "iamFleetRole"}) (clojure.core/into (ser-launch-specs-list (:launch-specifications input)) #:http.request.field{:name "LaunchSpecifications", :shape "LaunchSpecsList", :location-name "launchSpecifications"})], :shape "SpotFleetRequestConfigData", :type "structure"} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-type (input :type)) #:http.request.field{:name "Type", :shape "FleetType", :location-name "type"})) (clojure.core/contains? input :valid-from) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-from)) #:http.request.field{:name "ValidFrom", :shape "DateTime", :location-name "validFrom"})) (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "ExcessCapacityTerminationPolicy", :location-name "excessCapacityTerminationPolicy"})) (clojure.core/contains? input :allocation-strategy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allocation-strategy (input :allocation-strategy)) #:http.request.field{:name "AllocationStrategy", :shape "AllocationStrategy", :location-name "allocationStrategy"})) (clojure.core/contains? input :fulfilled-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :fulfilled-capacity)) #:http.request.field{:name "FulfilledCapacity", :shape "Double", :location-name "fulfilledCapacity"})) (clojure.core/contains? input :terminate-instances-with-expiration) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :terminate-instances-with-expiration)) #:http.request.field{:name "TerminateInstancesWithExpiration", :shape "Boolean", :location-name "terminateInstancesWithExpiration"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime", :location-name "validUntil"}))))

(clojure.core/defn- ser-conversion-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ConversionIdStringList", :type "list"})

(clojure.core/defn- ser-allocation-strategy [input] #:http.request.field{:value (clojure.core/get {"lowestPrice" "lowestPrice", :lowest-price "lowestPrice", "diversified" "diversified", :diversified "diversified"} input), :shape "AllocationStrategy"})

(clojure.core/defn- ser-attribute-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AttributeValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"}))))

(clojure.core/defn- ser-private-ip-address-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-private-ip-address-specification coll) #:http.request.field{:shape "PrivateIpAddressSpecification", :location-name "item"}))) input), :shape "PrivateIpAddressSpecificationList", :type "list"})

(clojure.core/defn- ser-auto-placement [input] #:http.request.field{:value (clojure.core/get {"on" "on", :on "on", "off" "off", :off "off"} input), :shape "AutoPlacement"})

(clojure.core/defn- ser-prefix-list-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-prefix-list-id coll) #:http.request.field{:shape "PrefixListId", :location-name "item"}))) input), :shape "PrefixListIdList", :type "list"})

(clojure.core/defn- ser-vpc-attribute-name [input] #:http.request.field{:value (clojure.core/get {"enableDnsSupport" "enableDnsSupport", :enable-dns-support "enableDnsSupport", "enableDnsHostnames" "enableDnsHostnames", :enable-dns-hostnames "enableDnsHostnames"} input), :shape "VpcAttributeName"})

(clojure.core/defn- ser-instance-block-device-mapping-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-block-device-mapping-specification coll) #:http.request.field{:shape "InstanceBlockDeviceMappingSpecification", :location-name "item"}))) input), :shape "InstanceBlockDeviceMappingSpecificationList", :type "list"})

(clojure.core/defn- ser-placement-strategy [input] #:http.request.field{:value (clojure.core/get {"cluster" "cluster", :cluster "cluster"} input), :shape "PlacementStrategy"})

(clojure.core/defn- ser-user-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "UserGroup"}))) input), :shape "UserGroupStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-ebs [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesEbs", :type "structure"} (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean"}))))

(clojure.core/defn- ser-target-configuration-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-target-configuration-request coll) #:http.request.field{:shape "TargetConfigurationRequest", :location-name "TargetConfigurationRequest"}))) input), :shape "TargetConfigurationRequestSet", :type "list"})

(clojure.core/defn- ser-volume-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VolumeId"}))) input), :shape "VolumeIdStringList", :type "list"})

(clojure.core/defn- ser-dhcp-options-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DhcpOptionsId"}))) input), :shape "DhcpOptionsIdStringList", :type "list"})

(clojure.core/defn- serscope [input] #:http.request.field{:value (clojure.core/get {"Availability Zone" "Availability Zone", :availability-zone "Availability Zone", "Region" "Region", :region "Region"} input), :shape "scope"})

(clojure.core/defn- ser-reset-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {"launchPermission" "launchPermission", :launch-permission "launchPermission"} input), :shape "ResetImageAttributeName"})

(clojure.core/defn- ser-scheduled-instances-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:image-id input)) #:http.request.field{:name "ImageId", :shape "String"})], :shape "ScheduledInstancesLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-security-group-id-set (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "ScheduledInstancesSecurityGroupIdSet", :location-name "SecurityGroupId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-placement (input :placement)) #:http.request.field{:name "Placement", :shape "ScheduledInstancesPlacement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-monitoring (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "ScheduledInstancesMonitoring"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-block-device-mapping-set (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "ScheduledInstancesBlockDeviceMappingSet", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-iam-instance-profile (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "ScheduledInstancesIamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-network-interface-set (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "ScheduledInstancesNetworkInterfaceSet", :location-name "NetworkInterface"}))))

(clojure.core/defn- ser-product-description-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ProductDescriptionList", :type "list"})

(clojure.core/defn- ser-group-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "groupId"}))) input), :shape "GroupIdStringList", :type "list"})

(clojure.core/defn- ser-snapshot-disk-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SnapshotDiskContainer", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :format)) #:http.request.field{:name "Format", :shape "String"})) (clojure.core/contains? input :url) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :url)) #:http.request.field{:name "Url", :shape "String"})) (clojure.core/contains? input :user-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-bucket (input :user-bucket)) #:http.request.field{:name "UserBucket", :shape "UserBucket"}))))

(clojure.core/defn- ser-launch-specs-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-spot-fleet-launch-specification coll) #:http.request.field{:shape "SpotFleetLaunchSpecification", :location-name "item"}))) input), :shape "LaunchSpecsList", :type "list", :min 1})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-ip-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IpPermission", :type "structure"} (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :user-id-group-pairs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-group-pair-list (input :user-id-group-pairs)) #:http.request.field{:name "UserIdGroupPairs", :shape "UserIdGroupPairList", :location-name "groups"})) (clojure.core/contains? input :ip-ranges) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-range-list (input :ip-ranges)) #:http.request.field{:name "IpRanges", :shape "IpRangeList", :location-name "ipRanges"})) (clojure.core/contains? input :prefix-list-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-prefix-list-id-list (input :prefix-list-ids)) #:http.request.field{:name "PrefixListIds", :shape "PrefixListIdList", :location-name "prefixListIds"}))))

(clojure.core/defn- ser-ip-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-ip-permission coll) #:http.request.field{:shape "IpPermission", :location-name "item"}))) input), :shape "IpPermissionList", :type "list"})

(clojure.core/defn- ser-slot-date-time-range-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-date-time (:earliest-time input)) #:http.request.field{:name "EarliestTime", :shape "DateTime"}) (clojure.core/into (ser-date-time (:latest-time input)) #:http.request.field{:name "LatestTime", :shape "DateTime"})], :shape "SlotDateTimeRangeRequest", :type "structure"}))

(clojure.core/defn- ser-ri-product-description [input] #:http.request.field{:value (clojure.core/get {"Linux/UNIX" "Linux/UNIX", :linux-unix "Linux/UNIX", "Linux/UNIX (Amazon VPC)" "Linux/UNIX (Amazon VPC)", :linux-unix-amazon-vpc "Linux/UNIX (Amazon VPC)", "Windows" "Windows", :windows "Windows", "Windows (Amazon VPC)" "Windows (Amazon VPC)", :windows-amazon-vpc "Windows (Amazon VPC)"} input), :shape "RIProductDescription"})

(clojure.core/defn- ser-reserved-instance-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstanceId"}))) input), :shape "ReservedInstanceIdSet", :type "list"})

(clojure.core/defn- ser-disk-image-format [input] #:http.request.field{:value (clojure.core/get {"VMDK" "VMDK", :vmdk "VMDK", "RAW" "RAW", :raw "RAW", "VHD" "VHD", :vhd "VHD"} input), :shape "DiskImageFormat"})

(clojure.core/defn- ser-scheduled-instances-network-interface-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-network-interface coll) #:http.request.field{:shape "ScheduledInstancesNetworkInterface", :location-name "NetworkInterface"}))) input), :shape "ScheduledInstancesNetworkInterfaceSet", :type "list"})

(clojure.core/defn- ser-security-group-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "SecurityGroupIdStringList", :type "list"})

(clojure.core/defn- ser-domain-type [input] #:http.request.field{:value (clojure.core/get {"vpc" "vpc", :vpc "vpc", "standard" "standard", :standard "standard"} input), :shape "DomainType"})

(clojure.core/defn- ser-flow-logs-resource-type [input] #:http.request.field{:value (clojure.core/get {"VPC" "VPC", :vpc "VPC", "Subnet" "Subnet", :subnet "Subnet", "NetworkInterface" "NetworkInterface", :network-interface "NetworkInterface"} input), :shape "FlowLogsResourceType"})

(clojure.core/defn- ser-operation-type [input] #:http.request.field{:value (clojure.core/get {"add" "add", :add "add", "remove" "remove", :remove "remove"} input), :shape "OperationType"})

(clojure.core/defn- ser-snapshot-attribute-name [input] #:http.request.field{:value (clojure.core/get {"productCodes" "productCodes", :product-codes "productCodes", "createVolumePermission" "createVolumePermission", :create-volume-permission "createVolumePermission"} input), :shape "SnapshotAttributeName"})

(clojure.core/defn- ser-currency-code-values [input] #:http.request.field{:value (clojure.core/get {"USD" "USD", :usd "USD"} input), :shape "CurrencyCodeValues"})

(clojure.core/defn- ser-network-interface-attribute [input] #:http.request.field{:value (clojure.core/get {"description" "description", :description "description", "groupSet" "groupSet", :group-set "groupSet", "sourceDestCheck" "sourceDestCheck", :source-dest-check "sourceDestCheck", "attachment" "attachment", :attachment "attachment"} input), :shape "NetworkInterfaceAttribute"})

(clojure.core/defn- ser-report-instance-reason-codes [input] #:http.request.field{:value (clojure.core/get {"password-not-available" "password-not-available", "performance-instance-store" "performance-instance-store", :other "other", :performancenetwork "performance-network", :performanceebsvolume "performance-ebs-volume", "not-accepting-credentials" "not-accepting-credentials", "unresponsive" "unresponsive", :performanceother "performance-other", :passwordnotavailable "password-not-available", "other" "other", "performance-ebs-volume" "performance-ebs-volume", :notacceptingcredentials "not-accepting-credentials", "instance-stuck-in-state" "instance-stuck-in-state", :performanceinstancestore "performance-instance-store", "performance-network" "performance-network", :instancestuckinstate "instance-stuck-in-state", :unresponsive "unresponsive", "performance-other" "performance-other"} input), :shape "ReportInstanceReasonCodes"})

(clojure.core/defn- ser-bundle-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "BundleId"}))) input), :shape "BundleIdStringList", :type "list"})

(clojure.core/defn- ser-volume-type [input] #:http.request.field{:value (clojure.core/get {"standard" "standard", "sc1" "sc1", "io1" "io1", :sc-1 "sc1", :st-1 "st1", "gp2" "gp2", "st1" "st1", :io-1 "io1", :standard "standard", :gp-2 "gp2"} input), :shape "VolumeType"})

(clojure.core/defn- ser-account-attribute-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-account-attribute-name coll) #:http.request.field{:shape "AccountAttributeName", :location-name "attributeName"}))) input), :shape "AccountAttributeNameStringList", :type "list"})

(clojure.core/defn- ser-launch-permission-modifications [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchPermissionModifications", :type "structure"} (clojure.core/contains? input :add) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-list (input :add)) #:http.request.field{:name "Add", :shape "LaunchPermissionList"})) (clojure.core/contains? input :remove) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-list (input :remove)) #:http.request.field{:name "Remove", :shape "LaunchPermissionList"}))))

(clojure.core/defn- ser-long [input] #:http.request.field{:value input, :shape "Long"})

(clojure.core/defn- ser-subnet-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetId"}))) input), :shape "SubnetIdStringList", :type "list"})

(clojure.core/defn- ser-reserved-instance-limit-price [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReservedInstanceLimitPrice", :type "structure"} (clojure.core/contains? input :amount) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :amount)) #:http.request.field{:name "Amount", :shape "Double", :location-name "amount"})) (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues", :location-name "currencyCode"}))))

(clojure.core/defn- ser-region-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "RegionName"}))) input), :shape "RegionNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instance-recurrence-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstanceRecurrenceRequest", :type "structure"} (clojure.core/contains? input :frequency) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :frequency)) #:http.request.field{:name "Frequency", :shape "String"})) (clojure.core/contains? input :interval) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :interval)) #:http.request.field{:name "Interval", :shape "Integer"})) (clojure.core/contains? input :occurrence-days) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-occurrence-day-request-set (input :occurrence-days)) #:http.request.field{:name "OccurrenceDays", :shape "OccurrenceDayRequestSet", :location-name "OccurrenceDay"})) (clojure.core/contains? input :occurrence-relative-to-end) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :occurrence-relative-to-end)) #:http.request.field{:name "OccurrenceRelativeToEnd", :shape "Boolean"})) (clojure.core/contains? input :occurrence-unit) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :occurrence-unit)) #:http.request.field{:name "OccurrenceUnit", :shape "String"}))))

(clojure.core/defn- ser-user-bucket [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserBucket", :type "structure"} (clojure.core/contains? input :s-3-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-bucket)) #:http.request.field{:name "S3Bucket", :shape "String"})) (clojure.core/contains? input :s-3-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-key)) #:http.request.field{:name "S3Key", :shape "String"}))))

(clojure.core/defn- ser-scheduled-instances-network-interface [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesNetworkInterface", :type "structure"} (clojure.core/contains? input :associate-public-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :associate-public-ip-address)) #:http.request.field{:name "AssociatePublicIpAddress", :shape "Boolean"})) (clojure.core/contains? input :private-ip-address-configs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-config-set (input :private-ip-address-configs)) #:http.request.field{:name "PrivateIpAddressConfigs", :shape "PrivateIpAddressConfigSet", :location-name "PrivateIpAddressConfig"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String"})) (clojure.core/contains? input :device-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-security-group-id-set (input :groups)) #:http.request.field{:name "Groups", :shape "ScheduledInstancesSecurityGroupIdSet", :location-name "Group"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String"}))))

(clojure.core/defn- ser-target-configuration-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:offering-id input)) #:http.request.field{:name "OfferingId", :shape "String"})], :shape "TargetConfigurationRequest", :type "structure"} (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"}))))

(clojure.core/defn- ser-reserved-instances-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-reserved-instances-configuration coll) #:http.request.field{:shape "ReservedInstancesConfiguration", :location-name "item"}))) input), :shape "ReservedInstancesConfigurationList", :type "list"})

(clojure.core/defn- ser-instance-network-interface-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-network-interface-specification coll) #:http.request.field{:shape "InstanceNetworkInterfaceSpecification", :location-name "item"}))) input), :shape "InstanceNetworkInterfaceSpecificationList", :type "list"})

(clojure.core/defn- ser-block-device-mapping [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BlockDeviceMapping", :type "structure"} (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String", :location-name "virtualName"})) (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String", :location-name "deviceName"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ebs-block-device (input :ebs)) #:http.request.field{:name "Ebs", :shape "EbsBlockDevice", :location-name "ebs"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String", :location-name "noDevice"}))))

(clojure.core/defn- ser-max-results [input] #:http.request.field{:value input, :shape "MaxResults"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String", :location-name "key"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"}))))

(clojure.core/defn- ser-user-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "UserId"}))) input), :shape "UserIdStringList", :type "list"})

(clojure.core/defn- ser-executable-by-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ExecutableBy"}))) input), :shape "ExecutableByStringList", :type "list"})

(clojure.core/defn- ser-platform-values [input] #:http.request.field{:value (clojure.core/get {"Windows" "Windows", :windows "Windows"} input), :shape "PlatformValues"})

(clojure.core/defn- ser-disk-image [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DiskImage", :type "structure"} (clojure.core/contains? input :image) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-detail (input :image)) #:http.request.field{:name "Image", :shape "DiskImageDetail"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :volume) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-detail (input :volume)) #:http.request.field{:name "Volume", :shape "VolumeDetail"}))))

(clojure.core/defn- ser-port-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PortRange", :type "structure"} (clojure.core/contains? input :from) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from)) #:http.request.field{:name "From", :shape "Integer", :location-name "from"})) (clojure.core/contains? input :to) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to)) #:http.request.field{:name "To", :shape "Integer", :location-name "to"}))))

(clojure.core/defn- ser-spot-fleet-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotFleetLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String", :location-name "imageId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-placement (input :placement)) #:http.request.field{:name "Placement", :shape "SpotPlacement", :location-name "placement"})) (clojure.core/contains? input :addressing-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :addressing-type)) #:http.request.field{:name "AddressingType", :shape "String", :location-name "addressingType"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-identifier-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "GroupIdentifierList", :location-name "groupSet"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"})) (clojure.core/contains? input :spot-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-fleet-monitoring (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "SpotFleetMonitoring", :location-name "monitoring"})) (clojure.core/contains? input :weighted-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :weighted-capacity)) #:http.request.field{:name "WeightedCapacity", :shape "Double", :location-name "weightedCapacity"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String", :location-name "userData"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "networkInterfaceSet"}))))

(clojure.core/defn- ser-ip-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IpRange", :type "structure"} (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- ser-block-device-mapping-request-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-block-device-mapping coll) #:http.request.field{:shape "BlockDeviceMapping", :location-name "BlockDeviceMapping"}))) input), :shape "BlockDeviceMappingRequestList", :type "list"})

(clojure.core/defn- ser-container-format [input] #:http.request.field{:value (clojure.core/get {"ova" "ova", :ova "ova"} input), :shape "ContainerFormat"})

(clojure.core/defn- ser-purchase-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-purchase-request coll) #:http.request.field{:shape "PurchaseRequest", :location-name "PurchaseRequest"}))) input), :shape "PurchaseRequestSet", :type "list", :min 1})

(clojure.core/defn- ser-new-dhcp-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-new-dhcp-configuration coll) #:http.request.field{:shape "NewDhcpConfiguration", :location-name "item"}))) input), :shape "NewDhcpConfigurationList", :type "list"})

(clojure.core/defn- ser-block-device-mapping-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-block-device-mapping coll) #:http.request.field{:shape "BlockDeviceMapping", :location-name "item"}))) input), :shape "BlockDeviceMappingList", :type "list"})

(clojure.core/defn- ser-blob [input] #:http.request.field{:value (portkey.aws/base64-encode input), :shape "Blob"})

(clojure.core/defn- ser-gateway-type [input] #:http.request.field{:value (clojure.core/get {"ipsec.1" "ipsec.1", :ipsec-1 "ipsec.1"} input), :shape "GatewayType"})

(clojure.core/defn- ser-scheduled-instances-iam-instance-profile [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesIamInstanceProfile", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-report-status-type [input] #:http.request.field{:value (clojure.core/get {"ok" "ok", :ok "ok", "impaired" "impaired", :impaired "impaired"} input), :shape "ReportStatusType"})

(clojure.core/defn- ser-ip-range-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-ip-range coll) #:http.request.field{:shape "IpRange", :location-name "item"}))) input), :shape "IpRangeList", :type "list"})

(clojure.core/defn- ser-import-instance-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ImportInstanceLaunchSpecification", :type "structure"} (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement (input :placement)) #:http.request.field{:name "Placement", :shape "Placement", :location-name "placement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :group-ids)) #:http.request.field{:name "GroupIds", :shape "SecurityGroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "Boolean", :location-name "monitoring"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture-values (input :architecture)) #:http.request.field{:name "Architecture", :shape "ArchitectureValues", :location-name "architecture"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-data (input :user-data)) #:http.request.field{:name "UserData", :shape "UserData", :location-name "userData"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-behavior (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "ShutdownBehavior", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "SecurityGroupStringList", :location-name "GroupName"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"}))))

(clojure.core/defn- ser-scheduled-instances-block-device-mapping-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-block-device-mapping coll) #:http.request.field{:shape "ScheduledInstancesBlockDeviceMapping", :location-name "BlockDeviceMapping"}))) input), :shape "ScheduledInstancesBlockDeviceMappingSet", :type "list"})

(clojure.core/defn- ser-purchase-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:purchase-token input)) #:http.request.field{:name "PurchaseToken", :shape "String"}) (clojure.core/into (ser-integer (:instance-count input)) #:http.request.field{:name "InstanceCount", :shape "Integer"})], :shape "PurchaseRequest", :type "structure"}))

(clojure.core/defn- ser-reserved-instances-modification-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstancesModificationId"}))) input), :shape "ReservedInstancesModificationIdStringList", :type "list"})

(clojure.core/defn- ser-resource-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ResourceIdList", :type "list"})

(clojure.core/defn- ser-offering-class-type [input] #:http.request.field{:value (clojure.core/get {"standard" "standard", :standard "standard", "convertible" "convertible", :convertible "convertible"} input), :shape "OfferingClassType"})

(clojure.core/defn- ser-request-host-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "RequestHostIdList", :type "list"})

(clojure.core/defn- ser-image-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ImageId"}))) input), :shape "ImageIdStringList", :type "list"})

(clojure.core/defn- ser-instance-attribute-name [input] #:http.request.field{:value (clojure.core/get {:instance-initiated-shutdown-behavior "instanceInitiatedShutdownBehavior", "kernel" "kernel", "groupSet" "groupSet", "productCodes" "productCodes", :group-set "groupSet", :ena-support "enaSupport", "blockDeviceMapping" "blockDeviceMapping", :source-dest-check "sourceDestCheck", :disable-api-termination "disableApiTermination", :ramdisk "ramdisk", :root-device-name "rootDeviceName", :product-codes "productCodes", "disableApiTermination" "disableApiTermination", :instance-type "instanceType", :ebs-optimized "ebsOptimized", "sourceDestCheck" "sourceDestCheck", :user-data "userData", "userData" "userData", "ebsOptimized" "ebsOptimized", :block-device-mapping "blockDeviceMapping", "ramdisk" "ramdisk", :sriov-net-support "sriovNetSupport", "instanceType" "instanceType", :kernel "kernel", "enaSupport" "enaSupport", "rootDeviceName" "rootDeviceName", "instanceInitiatedShutdownBehavior" "instanceInitiatedShutdownBehavior", "sriovNetSupport" "sriovNetSupport"} input), :shape "InstanceAttributeName"})

(clojure.core/defn- ser-disk-image-detail [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-disk-image-format (:format input)) #:http.request.field{:name "Format", :shape "DiskImageFormat", :location-name "format"}) (clojure.core/into (ser-long (:bytes input)) #:http.request.field{:name "Bytes", :shape "Long", :location-name "bytes"}) (clojure.core/into (ser-string (:import-manifest-url input)) #:http.request.field{:name "ImportManifestUrl", :shape "String", :location-name "importManifestUrl"})], :shape "DiskImageDetail", :type "structure"}))

(clojure.core/defn- ser-user-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserData", :type "structure"} (clojure.core/contains? input :data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data)) #:http.request.field{:name "Data", :shape "String", :location-name "data"}))))

(clojure.core/defn- ser-offering-type-values [input] #:http.request.field{:value (clojure.core/get {"All Upfront" "All Upfront", :heavy-utilization "Heavy Utilization", :no-upfront "No Upfront", :medium-utilization "Medium Utilization", :all-upfront "All Upfront", :light-utilization "Light Utilization", :partial-upfront "Partial Upfront", "No Upfront" "No Upfront", "Heavy Utilization" "Heavy Utilization", "Light Utilization" "Light Utilization", "Partial Upfront" "Partial Upfront", "Medium Utilization" "Medium Utilization"} input), :shape "OfferingTypeValues"})

(clojure.core/defn- ser-network-interface-attachment-changes [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NetworkInterfaceAttachmentChanges", :type "structure"} (clojure.core/contains? input :attachment-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :attachment-id)) #:http.request.field{:name "AttachmentId", :shape "String", :location-name "attachmentId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"}))))

(clojure.core/defn- ser-private-ip-address-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PrivateIpAddress"}))) input), :shape "PrivateIpAddressStringList", :type "list"})

(clojure.core/defn- ser-owner-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Owner"}))) input), :shape "OwnerStringList", :type "list"})

(clojure.core/defn- ser-create-volume-permission-modifications [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CreateVolumePermissionModifications", :type "structure"} (clojure.core/contains? input :add) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-list (input :add)) #:http.request.field{:name "Add", :shape "CreateVolumePermissionList"})) (clojure.core/contains? input :remove) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-list (input :remove)) #:http.request.field{:name "Remove", :shape "CreateVolumePermissionList"}))))

(clojure.core/defn- ser-reason-codes-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-report-instance-reason-codes coll) #:http.request.field{:shape "ReportInstanceReasonCodes", :location-name "item"}))) input), :shape "ReasonCodesList", :type "list"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-launch-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchPermission", :type "structure"} (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"})) (clojure.core/contains? input :group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission-group (input :group)) #:http.request.field{:name "Group", :shape "PermissionGroup", :location-name "group"}))))

(clojure.core/defn- ser-vpn-gateway-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpnGatewayId"}))) input), :shape "VpnGatewayIdStringList", :type "list"})

(clojure.core/defn- ser-private-ip-address-specification [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:private-ip-address input)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})], :shape "PrivateIpAddressSpecification", :type "structure"} (clojure.core/contains? input :primary) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :primary)) #:http.request.field{:name "Primary", :shape "Boolean", :location-name "primary"}))))

(clojure.core/defn- ser-request-spot-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "RequestSpotLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "ValueStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String", :location-name "imageId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-placement (input :placement)) #:http.request.field{:name "Placement", :shape "SpotPlacement", :location-name "placement"})) (clojure.core/contains? input :addressing-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :addressing-type)) #:http.request.field{:name "AddressingType", :shape "String", :location-name "addressingType"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "ValueStringList", :location-name "SecurityGroup"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-run-instances-monitoring-enabled (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "RunInstancesMonitoringEnabled", :location-name "monitoring"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String", :location-name "userData"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "NetworkInterface"}))))

(clojure.core/defn- ser-user-id-group-pair [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserIdGroupPair", :type "structure"} (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :peering-status) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peering-status)) #:http.request.field{:name "PeeringStatus", :shape "String", :location-name "peeringStatus"}))))

(clojure.core/defn- ser-import-task-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ImportTaskId"}))) input), :shape "ImportTaskIdList", :type "list"})

(clojure.core/defn- ser-date-time [input] #:http.request.field{:value input, :shape "DateTime"})

(clojure.core/defn- ser-snapshot-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SnapshotId"}))) input), :shape "SnapshotIdStringList", :type "list"})

(clojure.core/defn- ser-shutdown-behavior [input] #:http.request.field{:value (clojure.core/get {"stop" "stop", :stop "stop", "terminate" "terminate", :terminate "terminate"} input), :shape "ShutdownBehavior"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- ser-instance-network-interface-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceNetworkInterfaceSpecification", :type "structure"} (clojure.core/contains? input :associate-public-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :associate-public-ip-address)) #:http.request.field{:name "AssociatePublicIpAddress", :shape "Boolean", :location-name "associatePublicIpAddress"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :device-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer", :location-name "deviceIndex"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-specification-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressSpecificationList", :location-name "privateIpAddressesSet", :query-name "PrivateIpAddresses"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"}))))

(clojure.core/defn- req-describe-snapshots-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :snapshot-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-id-string-list (input :snapshot-ids)) #:http.request.field{:name "SnapshotIds", :shape "SnapshotIdStringList", :location-name "SnapshotId"})) (clojure.core/contains? input :owner-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-owner-string-list (input :owner-ids)) #:http.request.field{:name "OwnerIds", :shape "OwnerStringList", :location-name "Owner"})) (clojure.core/contains? input :restorable-by-user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-restorable-by-string-list (input :restorable-by-user-ids)) #:http.request.field{:name "RestorableByUserIds", :shape "RestorableByStringList", :location-name "RestorableBy"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-describe-spot-fleet-requests-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :spot-fleet-request-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :spot-fleet-request-ids)) #:http.request.field{:name "SpotFleetRequestIds", :shape "ValueStringList", :location-name "spotFleetRequestId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-import-image-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :platform) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :platform)) #:http.request.field{:name "Platform", :shape "String"})) (clojure.core/contains? input :role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-name)) #:http.request.field{:name "RoleName", :shape "String"})) (clojure.core/contains? input :client-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-client-data (input :client-data)) #:http.request.field{:name "ClientData", :shape "ClientData"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :disk-containers) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-image-disk-container-list (input :disk-containers)) #:http.request.field{:name "DiskContainers", :shape "ImageDiskContainerList", :location-name "DiskContainer"})) (clojure.core/contains? input :hypervisor) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hypervisor)) #:http.request.field{:name "Hypervisor", :shape "String"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :architecture)) #:http.request.field{:name "Architecture", :shape "String"})) (clojure.core/contains? input :license-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-type)) #:http.request.field{:name "LicenseType", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-confirm-product-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :product-code)) #:http.request.field{:name "ProductCode", :shape "String"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpn-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpn-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-gateway-id-string-list (input :vpn-gateway-ids)) #:http.request.field{:name "VpnGatewayIds", :shape "VpnGatewayIdStringList", :location-name "VpnGatewayId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-vpn-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-request-spot-fleet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-spot-fleet-request-config-data (input :spot-fleet-request-config)) #:http.request.field{:name "SpotFleetRequestConfig", :shape "SpotFleetRequestConfigData", :location-name "spotFleetRequestConfig"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-scheduled-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :scheduled-instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instance-id-request-set (input :scheduled-instance-ids)) #:http.request.field{:name "ScheduledInstanceIds", :shape "ScheduledInstanceIdRequestSet", :location-name "ScheduledInstanceId"})) (clojure.core/contains? input :slot-start-time-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-slot-start-time-range-request (input :slot-start-time-range)) #:http.request.field{:name "SlotStartTimeRange", :shape "SlotStartTimeRangeRequest"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-flow-logs-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :flow-log-ids)) #:http.request.field{:name "FlowLogIds", :shape "ValueStringList", :location-name "FlowLogId"})]}))

(clojure.core/defn- req-describe-addresses-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-public-ip-string-list (input :public-ips)) #:http.request.field{:name "PublicIps", :shape "PublicIpStringList", :location-name "PublicIp"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :allocation-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allocation-id-list (input :allocation-ids)) #:http.request.field{:name "AllocationIds", :shape "AllocationIdList", :location-name "AllocationId"}))))

(clojure.core/defn- req-describe-network-acls-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :network-acl-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :network-acl-ids)) #:http.request.field{:name "NetworkAclIds", :shape "ValueStringList", :location-name "NetworkAclId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-id-format-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String"}) (clojure.core/into (ser-boolean (input :use-long-ids)) #:http.request.field{:name "UseLongIds", :shape "Boolean"})]}))

(clojure.core/defn- req-reset-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "String", :location-name "sourceDestCheck"}))))

(clojure.core/defn- req-describe-internet-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :internet-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :internet-gateway-ids)) #:http.request.field{:name "InternetGatewayIds", :shape "ValueStringList", :location-name "internetGatewayId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-vpc-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :enable-dns-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :enable-dns-support)) #:http.request.field{:name "EnableDnsSupport", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :enable-dns-hostnames) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :enable-dns-hostnames)) #:http.request.field{:name "EnableDnsHostnames", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-delete-customer-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :customer-gateway-id)) #:http.request.field{:name "CustomerGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-reserved-instances-listing-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-instances-id)) #:http.request.field{:name "ReservedInstancesId", :shape "String", :location-name "reservedInstancesId"}) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"}) (clojure.core/into (ser-price-schedule-specification-list (input :price-schedules)) #:http.request.field{:name "PriceSchedules", :shape "PriceScheduleSpecificationList", :location-name "priceSchedules"}) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})]}))

(clojure.core/defn- req-replace-route-table-association-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"}) (clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"}))))

(clojure.core/defn- req-allocate-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String", :location-name "instanceType"}) (clojure.core/into (ser-integer (input :quantity)) #:http.request.field{:name "Quantity", :shape "Integer", :location-name "quantity"}) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})]} (clojure.core/contains? input :auto-placement) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-auto-placement (input :auto-placement)) #:http.request.field{:name "AutoPlacement", :shape "AutoPlacement", :location-name "autoPlacement"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"}))))

(clojure.core/defn- req-create-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :no-reboot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :no-reboot)) #:http.request.field{:name "NoReboot", :shape "Boolean", :location-name "noReboot"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "blockDeviceMapping"}))))

(clojure.core/defn- req-create-vpn-connection-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String"})]}))

(clojure.core/defn- req-register-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :sriov-net-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sriov-net-support)) #:http.request.field{:name "SriovNetSupport", :shape "String", :location-name "sriovNetSupport"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture-values (input :architecture)) #:http.request.field{:name "Architecture", :shape "ArchitectureValues", :location-name "architecture"})) (clojure.core/contains? input :virtualization-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtualization-type)) #:http.request.field{:name "VirtualizationType", :shape "String", :location-name "virtualizationType"})) (clojure.core/contains? input :image-location) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-location)) #:http.request.field{:name "ImageLocation", :shape "String"})) (clojure.core/contains? input :root-device-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :root-device-name)) #:http.request.field{:name "RootDeviceName", :shape "String", :location-name "rootDeviceName"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :ena-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ena-support)) #:http.request.field{:name "EnaSupport", :shape "Boolean", :location-name "enaSupport"}))))

(clojure.core/defn- req-modify-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"}) (clojure.core/into (ser-auto-placement (input :auto-placement)) #:http.request.field{:name "AutoPlacement", :shape "AutoPlacement", :location-name "autoPlacement"})]}))

(clojure.core/defn- req-delete-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"}) (clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-conversion-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :conversion-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-conversion-id-string-list (input :conversion-task-ids)) #:http.request.field{:name "ConversionTaskIds", :shape "ConversionIdStringList", :location-name "conversionTaskId"}))))

(clojure.core/defn- req-copy-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-region)) #:http.request.field{:name "SourceRegion", :shape "String"}) (clojure.core/into (ser-string (input :source-image-id)) #:http.request.field{:name "SourceImageId", :shape "String"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String", :location-name "kmsKeyId"}))))

(clojure.core/defn- req-cancel-conversion-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :conversion-task-id)) #:http.request.field{:name "ConversionTaskId", :shape "String", :location-name "conversionTaskId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :reason-message) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reason-message)) #:http.request.field{:name "ReasonMessage", :shape "String", :location-name "reasonMessage"}))))

(clojure.core/defn- req-modify-spot-fleet-request-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"})]} (clojure.core/contains? input :target-capacity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :target-capacity)) #:http.request.field{:name "TargetCapacity", :shape "Integer", :location-name "targetCapacity"})) (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "ExcessCapacityTerminationPolicy", :location-name "excessCapacityTerminationPolicy"}))))

(clojure.core/defn- req-describe-flow-logs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :flow-log-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :flow-log-ids)) #:http.request.field{:name "FlowLogIds", :shape "ValueStringList", :location-name "FlowLogId"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-delete-security-group-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"}))))

(clojure.core/defn- req-describe-spot-price-history-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-types) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type-list (input :instance-types)) #:http.request.field{:name "InstanceTypes", :shape "InstanceTypeList", :location-name "InstanceType"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :end-time)) #:http.request.field{:name "EndTime", :shape "DateTime", :location-name "endTime"})) (clojure.core/contains? input :product-descriptions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-product-description-list (input :product-descriptions)) #:http.request.field{:name "ProductDescriptions", :shape "ProductDescriptionList", :location-name "ProductDescription"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-bundle-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-storage (input :storage)) #:http.request.field{:name "Storage", :shape "Storage"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpc-peering-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String", :location-name "gatewayId"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :nat-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String", :location-name "natGatewayId"}))))

(clojure.core/defn- req-start-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-volume-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "VolumeAttributeName"}))))

(clojure.core/defn- req-unmonitor-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-fleet-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-import-snapshot-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :disk-container) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-disk-container (input :disk-container)) #:http.request.field{:name "DiskContainer", :shape "SnapshotDiskContainer"})) (clojure.core/contains? input :client-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-client-data (input :client-data)) #:http.request.field{:name "ClientData", :shape "ClientData"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-name)) #:http.request.field{:name "RoleName", :shape "String"}))))

(clojure.core/defn- req-describe-instance-status-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :include-all-instances) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-all-instances)) #:http.request.field{:name "IncludeAllInstances", :shape "Boolean", :location-name "includeAllInstances"}))))

(clojure.core/defn- req-disable-vpc-classic-link-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-import-image-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :import-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-task-id-list (input :import-task-ids)) #:http.request.field{:name "ImportTaskIds", :shape "ImportTaskIdList", :location-name "ImportTaskId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-copy-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-region)) #:http.request.field{:name "SourceRegion", :shape "String"}) (clojure.core/into (ser-string (input :source-snapshot-id)) #:http.request.field{:name "SourceSnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :destination-region) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-region)) #:http.request.field{:name "DestinationRegion", :shape "String", :location-name "destinationRegion"})) (clojure.core/contains? input :presigned-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :presigned-url)) #:http.request.field{:name "PresignedUrl", :shape "String", :location-name "presignedUrl"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String", :location-name "kmsKeyId"}))))

(clojure.core/defn- req-delete-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-attach-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-string (input :device)) #:http.request.field{:name "Device", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-identity-id-format-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String", :location-name "resource"}) (clojure.core/into (ser-boolean (input :use-long-ids)) #:http.request.field{:name "UseLongIds", :shape "Boolean", :location-name "useLongIds"}) (clojure.core/into (ser-string (input :principal-arn)) #:http.request.field{:name "PrincipalArn", :shape "String", :location-name "principalArn"})]}))

(clojure.core/defn- req-cancel-export-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :export-task-id)) #:http.request.field{:name "ExportTaskId", :shape "String", :location-name "exportTaskId"})]}))

(clojure.core/defn- req-create-security-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "GroupDescription"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-revoke-security-group-ingress-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String"}))))

(clojure.core/defn- req-delete-vpn-connection-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String"})]}))

(clojure.core/defn- req-create-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-gateway-type (input :type)) #:http.request.field{:name "Type", :shape "GatewayType"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"}))))

(clojure.core/defn- req-enable-vgw-route-propagation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String"}) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String"})]}))

(clojure.core/defn- req-describe-regions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :region-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-region-name-string-list (input :region-names)) #:http.request.field{:name "RegionNames", :shape "RegionNameStringList", :location-name "RegionName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-vpn-connections-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpn-connection-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-connection-id-string-list (input :vpn-connection-ids)) #:http.request.field{:name "VpnConnectionIds", :shape "VpnConnectionIdStringList", :location-name "VpnConnectionId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-replace-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String", :location-name "gatewayId"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :nat-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String", :location-name "natGatewayId"}))))

(clojure.core/defn- req-create-spot-datafeed-subscription-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :bucket)) #:http.request.field{:name "Bucket", :shape "String", :location-name "bucket"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix)) #:http.request.field{:name "Prefix", :shape "String", :location-name "prefix"}))))

(clojure.core/defn- req-describe-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"}) (clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-authorize-security-group-egress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})]} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String", :location-name "sourceSecurityGroupOwnerId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String", :location-name "sourceSecurityGroupName"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList", :location-name "ipPermissions"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- req-import-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"}) (clojure.core/into (ser-blob (input :public-key-material)) #:http.request.field{:name "PublicKeyMaterial", :shape "Blob", :location-name "publicKeyMaterial"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-id-list (input :resources)) #:http.request.field{:name "Resources", :shape "ResourceIdList", :location-name "resourceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "tag"}))))

(clojure.core/defn- req-describe-dhcp-options-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :dhcp-options-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-dhcp-options-id-string-list (input :dhcp-options-ids)) #:http.request.field{:name "DhcpOptionsIds", :shape "DhcpOptionsIdStringList", :location-name "DhcpOptionsId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-host-reservations-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :host-reservation-id-set) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-host-reservation-id-set (input :host-reservation-id-set)) #:http.request.field{:name "HostReservationIdSet", :shape "HostReservationIdSet"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-assign-private-ip-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-string-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressStringList", :location-name "privateIpAddress"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :allow-reassignment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-reassignment)) #:http.request.field{:name "AllowReassignment", :shape "Boolean", :location-name "allowReassignment"}))))

(clojure.core/defn- req-detach-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :attachment-id)) #:http.request.field{:name "AttachmentId", :shape "String", :location-name "attachmentId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean", :location-name "force"}))))

(clojure.core/defn- req-associate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :allocation-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :allow-reassociation) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-reassociation)) #:http.request.field{:name "AllowReassociation", :shape "Boolean", :location-name "allowReassociation"}))))

(clojure.core/defn- req-create-internet-gateway-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-spot-instance-requests-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-spot-instance-request-id-list (input :spot-instance-request-ids)) #:http.request.field{:name "SpotInstanceRequestIds", :shape "SpotInstanceRequestIdList", :location-name "SpotInstanceRequestId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-get-console-output-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-nat-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :nat-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :nat-gateway-ids)) #:http.request.field{:name "NatGatewayIds", :shape "ValueStringList", :location-name "NatGatewayId"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-create-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :instance-tenancy)) #:http.request.field{:name "InstanceTenancy", :shape "Tenancy", :location-name "instanceTenancy"}))))

(clojure.core/defn- req-request-spot-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})]} (clojure.core/contains? input :availability-zone-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone-group)) #:http.request.field{:name "AvailabilityZoneGroup", :shape "String", :location-name "availabilityZoneGroup"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-type (input :type)) #:http.request.field{:name "Type", :shape "SpotInstanceType", :location-name "type"})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"})) (clojure.core/contains? input :block-duration-minutes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :block-duration-minutes)) #:http.request.field{:name "BlockDurationMinutes", :shape "Integer", :location-name "blockDurationMinutes"})) (clojure.core/contains? input :valid-from) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-from)) #:http.request.field{:name "ValidFrom", :shape "DateTime", :location-name "validFrom"})) (clojure.core/contains? input :launch-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-request-spot-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "RequestSpotLaunchSpecification"})) (clojure.core/contains? input :launch-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-group)) #:http.request.field{:name "LaunchGroup", :shape "String", :location-name "launchGroup"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime", :location-name "validUntil"}))))

(clojure.core/defn- req-create-network-acl-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-bundle-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :bundle-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bundle-id-string-list (input :bundle-ids)) #:http.request.field{:name "BundleIds", :shape "BundleIdStringList", :location-name "BundleId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-create-nat-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"}) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-volume-status-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-id-string-list (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "VolumeIdStringList", :location-name "VolumeId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-allocate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-domain-type (input :domain)) #:http.request.field{:name "Domain", :shape "DomainType"}))))

(clojure.core/defn- req-describe-import-snapshot-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :import-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-task-id-list (input :import-task-ids)) #:http.request.field{:name "ImportTaskIds", :shape "ImportTaskIdList", :location-name "ImportTaskId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-describe-vpc-peering-connections-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-peering-connection-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :vpc-peering-connection-ids)) #:http.request.field{:name "VpcPeeringConnectionIds", :shape "ValueStringList", :location-name "VpcPeeringConnectionId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-attribute (input :attribute)) #:http.request.field{:name "Attribute", :shape "NetworkInterfaceAttribute", :location-name "attribute"}))))

(clojure.core/defn- req-restore-address-to-classic-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "publicIp"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-disable-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-delete-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"}) (clojure.core/into (ser-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "ImageAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-customer-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-gateway-type (input :type)) #:http.request.field{:name "Type", :shape "GatewayType"}) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "IpAddress"}) (clojure.core/into (ser-integer (input :bgp-asn)) #:http.request.field{:name "BgpAsn", :shape "Integer"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-import-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"}) (clojure.core/into (ser-disk-image-detail (input :image)) #:http.request.field{:name "Image", :shape "DiskImageDetail", :location-name "image"}) (clojure.core/into (ser-volume-detail (input :volume)) #:http.request.field{:name "Volume", :shape "VolumeDetail", :location-name "volume"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"}))))

(clojure.core/defn- req-modify-instance-placement-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-host-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "HostTenancy", :location-name "tenancy"})) (clojure.core/contains? input :affinity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-affinity (input :affinity)) #:http.request.field{:name "Affinity", :shape "Affinity", :location-name "affinity"})) (clojure.core/contains? input :host-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-id)) #:http.request.field{:name "HostId", :shape "String", :location-name "hostId"}))))

(clojure.core/defn- req-create-vpc-peering-connection-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})) (clojure.core/contains? input :peer-vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peer-vpc-id)) #:http.request.field{:name "PeerVpcId", :shape "String", :location-name "peerVpcId"})) (clojure.core/contains? input :peer-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peer-owner-id)) #:http.request.field{:name "PeerOwnerId", :shape "String", :location-name "peerOwnerId"}))))

(clojure.core/defn- req-disable-vgw-route-propagation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String"}) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String"})]}))

(clojure.core/defn- req-describe-reserved-instances-listings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-instances-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-instances-id)) #:http.request.field{:name "ReservedInstancesId", :shape "String", :location-name "reservedInstancesId"})) (clojure.core/contains? input :reserved-instances-listing-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-instances-listing-id)) #:http.request.field{:name "ReservedInstancesListingId", :shape "String", :location-name "reservedInstancesListingId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-create-subnet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"}))))

(clojure.core/defn- req-modify-vpc-peering-connection-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :requester-peering-connection-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-peering-connection-options-request (input :requester-peering-connection-options)) #:http.request.field{:name "RequesterPeeringConnectionOptions", :shape "PeeringConnectionOptionsRequest"})) (clojure.core/contains? input :accepter-peering-connection-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-peering-connection-options-request (input :accepter-peering-connection-options)) #:http.request.field{:name "AccepterPeeringConnectionOptions", :shape "PeeringConnectionOptionsRequest"}))))

(clojure.core/defn- req-get-password-data-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-volume-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :auto-enable-io) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :auto-enable-io)) #:http.request.field{:name "AutoEnableIO", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-describe-identity-id-format-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :principal-arn)) #:http.request.field{:name "PrincipalArn", :shape "String", :location-name "principalArn"})]} (clojure.core/contains? input :resource) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String", :location-name "resource"}))))

(clojure.core/defn- req-describe-spot-datafeed-subscription-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"}) (clojure.core/into (ser-string (input :protocol)) #:http.request.field{:name "Protocol", :shape "String", :location-name "protocol"}) (clojure.core/into (ser-rule-action (input :rule-action)) #:http.request.field{:name "RuleAction", :shape "RuleAction", :location-name "ruleAction"}) (clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"}) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String", :location-name "cidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :icmp-type-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-icmp-type-code (input :icmp-type-code)) #:http.request.field{:name "IcmpTypeCode", :shape "IcmpTypeCode", :location-name "Icmp"})) (clojure.core/contains? input :port-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-port-range (input :port-range)) #:http.request.field{:name "PortRange", :shape "PortRange", :location-name "portRange"}))))

(clojure.core/defn- req-delete-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-deregister-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpc-endpoints-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-create-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-new-dhcp-configuration-list (input :dhcp-configurations)) #:http.request.field{:name "DhcpConfigurations", :shape "NewDhcpConfigurationList", :location-name "dhcpConfiguration"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-route-tables-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :route-table-ids)) #:http.request.field{:name "RouteTableIds", :shape "ValueStringList", :location-name "RouteTableId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-create-instance-export-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :target-environment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-environment (input :target-environment)) #:http.request.field{:name "TargetEnvironment", :shape "ExportEnvironment", :location-name "targetEnvironment"})) (clojure.core/contains? input :export-to-s-3-task) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-to-s-3-task-specification (input :export-to-s-3-task)) #:http.request.field{:name "ExportToS3Task", :shape "ExportToS3TaskSpecification", :location-name "exportToS3"}))))

(clojure.core/defn- req-create-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-id-list (input :resources)) #:http.request.field{:name "Resources", :shape "ResourceIdList", :location-name "ResourceId"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "Tag"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-reserved-instances-listing-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-instances-listing-id)) #:http.request.field{:name "ReservedInstancesListingId", :shape "String", :location-name "reservedInstancesListingId"})]}))

(clojure.core/defn- req-attach-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-spot-fleet-requests-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :spot-fleet-request-ids)) #:http.request.field{:name "SpotFleetRequestIds", :shape "ValueStringList", :location-name "spotFleetRequestId"}) (clojure.core/into (ser-boolean (input :terminate-instances)) #:http.request.field{:name "TerminateInstances", :shape "Boolean", :location-name "terminateInstances"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"}) (clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-detach-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-enable-volume-io-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String", :location-name "volumeId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-subnet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-subnet-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]} (clojure.core/contains? input :map-public-ip-on-launch) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :map-public-ip-on-launch)) #:http.request.field{:name "MapPublicIpOnLaunch", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-delete-spot-datafeed-subscription-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-security-group-references-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-group-ids (input :group-id)) #:http.request.field{:name "GroupId", :shape "GroupIds"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-describe-vpcs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-id-string-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcIdStringList", :location-name "VpcId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpc-endpoint-services-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-reboot-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"}) (clojure.core/into (ser-string (input :protocol)) #:http.request.field{:name "Protocol", :shape "String", :location-name "protocol"}) (clojure.core/into (ser-rule-action (input :rule-action)) #:http.request.field{:name "RuleAction", :shape "RuleAction", :location-name "ruleAction"}) (clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"}) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String", :location-name "cidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :icmp-type-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-icmp-type-code (input :icmp-type-code)) #:http.request.field{:name "IcmpTypeCode", :shape "IcmpTypeCode", :location-name "Icmp"})) (clojure.core/contains? input :port-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-port-range (input :port-range)) #:http.request.field{:name "PortRange", :shape "PortRange", :location-name "portRange"}))))

(clojure.core/defn- req-describe-volumes-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-id-string-list (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "VolumeIdStringList", :location-name "VolumeId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-describe-account-attributes-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-account-attribute-name-string-list (input :attribute-names)) #:http.request.field{:name "AttributeNames", :shape "AccountAttributeNameStringList", :location-name "attributeName"}))))

(clojure.core/defn- req-enable-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-describe-tags-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-attach-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer", :location-name "deviceIndex"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-release-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"})]}))

(clojure.core/defn- req-get-reserved-instances-exchange-quote-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reserved-instance-id-set (input :reserved-instance-ids)) #:http.request.field{:name "ReservedInstanceIds", :shape "ReservedInstanceIdSet", :location-name "ReservedInstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :target-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-target-configuration-request-set (input :target-configurations)) #:http.request.field{:name "TargetConfigurations", :shape "TargetConfigurationRequestSet", :location-name "TargetConfiguration"}))))

(clojure.core/defn- req-report-instance-status-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instances)) #:http.request.field{:name "Instances", :shape "InstanceIdStringList", :location-name "instanceId"}) (clojure.core/into (ser-report-status-type (input :status)) #:http.request.field{:name "Status", :shape "ReportStatusType", :location-name "status"}) (clojure.core/into (ser-reason-codes-list (input :reason-codes)) #:http.request.field{:name "ReasonCodes", :shape "ReasonCodesList", :location-name "reasonCode"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :end-time)) #:http.request.field{:name "EndTime", :shape "DateTime", :location-name "endTime"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"}))))

(clojure.core/defn- req-create-flow-logs-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :resource-ids)) #:http.request.field{:name "ResourceIds", :shape "ValueStringList", :location-name "ResourceId"}) (clojure.core/into (ser-flow-logs-resource-type (input :resource-type)) #:http.request.field{:name "ResourceType", :shape "FlowLogsResourceType"}) (clojure.core/into (ser-traffic-type (input :traffic-type)) #:http.request.field{:name "TrafficType", :shape "TrafficType"}) (clojure.core/into (ser-string (input :log-group-name)) #:http.request.field{:name "LogGroupName", :shape "String"}) (clojure.core/into (ser-string (input :deliver-logs-permission-arn)) #:http.request.field{:name "DeliverLogsPermissionArn", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-images-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :image-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-image-id-string-list (input :image-ids)) #:http.request.field{:name "ImageIds", :shape "ImageIdStringList", :location-name "ImageId"})) (clojure.core/contains? input :owners) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-owner-string-list (input :owners)) #:http.request.field{:name "Owners", :shape "OwnerStringList", :location-name "Owner"})) (clojure.core/contains? input :executable-users) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-executable-by-string-list (input :executable-users)) #:http.request.field{:name "ExecutableUsers", :shape "ExecutableByStringList", :location-name "ExecutableBy"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :description)) #:http.request.field{:name "Description", :shape "AttributeValue", :location-name "description"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "AttributeBooleanValue", :location-name "sourceDestCheck"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :attachment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-attachment-changes (input :attachment)) #:http.request.field{:name "Attachment", :shape "NetworkInterfaceAttachmentChanges", :location-name "attachment"}))))

(clojure.core/defn- req-cancel-bundle-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :bundle-id)) #:http.request.field{:name "BundleId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-reset-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"}) (clojure.core/into (ser-reset-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "ResetImageAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-import-task-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :import-task-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :import-task-id)) #:http.request.field{:name "ImportTaskId", :shape "String"})) (clojure.core/contains? input :cancel-reason) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cancel-reason)) #:http.request.field{:name "CancelReason", :shape "String"}))))

(clojure.core/defn- req-describe-classic-link-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-describe-vpc-endpoints-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :vpc-endpoint-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-scheduled-instance-availability-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-scheduled-instance-recurrence-request (input :recurrence)) #:http.request.field{:name "Recurrence", :shape "ScheduledInstanceRecurrenceRequest"}) (clojure.core/into (ser-slot-date-time-range-request (input :first-slot-start-time-range)) #:http.request.field{:name "FirstSlotStartTimeRange", :shape "SlotDateTimeRangeRequest"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :min-slot-duration-in-hours) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-slot-duration-in-hours)) #:http.request.field{:name "MinSlotDurationInHours", :shape "Integer"})) (clojure.core/contains? input :max-slot-duration-in-hours) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-slot-duration-in-hours)) #:http.request.field{:name "MaxSlotDurationInHours", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-customer-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :customer-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-customer-gateway-id-string-list (input :customer-gateway-ids)) #:http.request.field{:name "CustomerGatewayIds", :shape "CustomerGatewayIdStringList", :location-name "CustomerGatewayId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-host-reservation-offerings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-id)) #:http.request.field{:name "OfferingId", :shape "String"})) (clojure.core/contains? input :min-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-duration)) #:http.request.field{:name "MinDuration", :shape "Integer"})) (clojure.core/contains? input :max-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-duration)) #:http.request.field{:name "MaxDuration", :shape "Integer"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-reset-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"}) (clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-attach-classic-link-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"}) (clojure.core/into (ser-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "GroupIdStringList", :location-name "SecurityGroupId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"})) (clojure.core/contains? input :operation-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-operation-type (input :operation-type)) #:http.request.field{:name "OperationType", :shape "OperationType"})) (clojure.core/contains? input :user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-string-list (input :user-ids)) #:http.request.field{:name "UserIds", :shape "UserIdStringList", :location-name "UserId"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-name-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "GroupNameStringList", :location-name "UserGroup"})) (clojure.core/contains? input :create-volume-permission) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-modifications (input :create-volume-permission)) #:http.request.field{:name "CreateVolumePermission", :shape "CreateVolumePermissionModifications"}))))

(clojure.core/defn- req-accept-reserved-instances-exchange-quote-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reserved-instance-id-set (input :reserved-instance-ids)) #:http.request.field{:name "ReservedInstanceIds", :shape "ReservedInstanceIdSet", :location-name "ReservedInstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :target-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-target-configuration-request-set (input :target-configurations)) #:http.request.field{:name "TargetConfigurations", :shape "TargetConfigurationRequestSet", :location-name "TargetConfiguration"}))))

(clojure.core/defn- req-detach-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :device) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device)) #:http.request.field{:name "Device", :shape "String"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean"}))))

(clojure.core/defn- req-purchase-reserved-instances-offering-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-instances-offering-id)) #:http.request.field{:name "ReservedInstancesOfferingId", :shape "String"}) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :limit-price) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instance-limit-price (input :limit-price)) #:http.request.field{:name "LimitPrice", :shape "ReservedInstanceLimitPrice", :location-name "limitPrice"}))))

(clojure.core/defn- req-unassign-private-ip-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"}) (clojure.core/into (ser-private-ip-address-string-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressStringList", :location-name "privateIpAddress"})]}))

(clojure.core/defn- req-monitor-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-placement-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-run-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"}) (clojure.core/into (ser-integer (input :min-count)) #:http.request.field{:name "MinCount", :shape "Integer"}) (clojure.core/into (ser-integer (input :max-count)) #:http.request.field{:name "MaxCount", :shape "Integer"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement (input :placement)) #:http.request.field{:name "Placement", :shape "Placement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-string-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "SecurityGroupStringList", :location-name "SecurityGroup"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})) (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :disable-api-termination) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :disable-api-termination)) #:http.request.field{:name "DisableApiTermination", :shape "Boolean", :location-name "disableApiTermination"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-run-instances-monitoring-enabled (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "RunInstancesMonitoringEnabled"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-behavior (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "ShutdownBehavior", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "networkInterface"}))))

(clojure.core/defn- req-reset-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-purchase-scheduled-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-purchase-request-set (input :purchase-requests)) #:http.request.field{:name "PurchaseRequests", :shape "PurchaseRequestSet", :location-name "PurchaseRequest"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :idempotency-token true}))))

(clojure.core/defn- req-move-address-to-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "publicIp"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-export-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :export-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-task-id-string-list (input :export-task-ids)) #:http.request.field{:name "ExportTaskIds", :shape "ExportTaskIdStringList", :location-name "exportTaskId"}))))

(clojure.core/defn- req-create-vpn-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :type)) #:http.request.field{:name "Type", :shape "String"}) (clojure.core/into (ser-string (input :customer-gateway-id)) #:http.request.field{:name "CustomerGatewayId", :shape "String"}) (clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-connection-options-specification (input :options)) #:http.request.field{:name "Options", :shape "VpnConnectionOptionsSpecification", :location-name "options"}))))

(clojure.core/defn- req-disassociate-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-hosts-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :host-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList", :location-name "filter"}))))

(clojure.core/defn- req-describe-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-detach-classic-link-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-moving-addresses-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :public-ips)) #:http.request.field{:name "PublicIps", :shape "ValueStringList", :location-name "publicIp"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-accept-vpc-peering-connection-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"}))))

(clojure.core/defn- req-describe-reserved-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :reserved-instances-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-id-string-list (input :reserved-instances-ids)) #:http.request.field{:name "ReservedInstancesIds", :shape "ReservedInstancesIdStringList", :location-name "ReservedInstancesId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-type-values (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "OfferingTypeValues", :location-name "offeringType"})) (clojure.core/contains? input :offering-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-class-type (input :offering-class)) #:http.request.field{:name "OfferingClass", :shape "OfferingClassType"}))))

(clojure.core/defn- req-describe-vpc-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-vpc-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "VpcAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-reserved-instances-offerings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :max-duration)) #:http.request.field{:name "MaxDuration", :shape "Long"})) (clojure.core/contains? input :min-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :min-duration)) #:http.request.field{:name "MinDuration", :shape "Long"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :instance-tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :instance-tenancy)) #:http.request.field{:name "InstanceTenancy", :shape "Tenancy", :location-name "instanceTenancy"})) (clojure.core/contains? input :include-marketplace) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-marketplace)) #:http.request.field{:name "IncludeMarketplace", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ri-product-description (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "RIProductDescription"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :offering-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-class-type (input :offering-class)) #:http.request.field{:name "OfferingClass", :shape "OfferingClassType"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-type-values (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "OfferingTypeValues", :location-name "offeringType"})) (clojure.core/contains? input :max-instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-instance-count)) #:http.request.field{:name "MaxInstanceCount", :shape "Integer"})) (clojure.core/contains? input :reserved-instances-offering-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-offering-id-string-list (input :reserved-instances-offering-ids)) #:http.request.field{:name "ReservedInstancesOfferingIds", :shape "ReservedInstancesOfferingIdStringList", :location-name "ReservedInstancesOfferingId"}))))

(clojure.core/defn- req-create-vpc-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-string (input :service-name)) #:http.request.field{:name "ServiceName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :policy-document) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "String"})) (clojure.core/contains? input :route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :route-table-ids)) #:http.request.field{:name "RouteTableIds", :shape "ValueStringList", :location-name "RouteTableId"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-delete-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-network-interfaces-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :network-interface-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-id-list (input :network-interface-ids)) #:http.request.field{:name "NetworkInterfaceIds", :shape "NetworkInterfaceIdList", :location-name "NetworkInterfaceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filter"}))))

(clojure.core/defn- req-describe-subnets-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subnet-id-string-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdStringList", :location-name "SubnetId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-nat-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String"})]}))

(clojure.core/defn- req-describe-availability-zones-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :zone-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-zone-name-string-list (input :zone-names)) #:http.request.field{:name "ZoneNames", :shape "ZoneNameStringList", :location-name "ZoneName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-disassociate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :association-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String"}))))

(clojure.core/defn- req-revoke-security-group-egress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})]} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String", :location-name "sourceSecurityGroupOwnerId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String", :location-name "sourceSecurityGroupName"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList", :location-name "ipPermissions"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- req-detach-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-prefix-lists-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :prefix-list-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :prefix-list-ids)) #:http.request.field{:name "PrefixListIds", :shape "ValueStringList", :location-name "PrefixListId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-terminate-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-reserved-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reserved-instances-id-string-list (input :reserved-instances-ids)) #:http.request.field{:name "ReservedInstancesIds", :shape "ReservedInstancesIdStringList", :location-name "ReservedInstancesId"}) (clojure.core/into (ser-reserved-instances-configuration-list (input :target-configurations)) #:http.request.field{:name "TargetConfigurations", :shape "ReservedInstancesConfigurationList", :location-name "ReservedInstancesConfigurationSetItemType"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"}))))

(clojure.core/defn- req-delete-network-acl-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-placement-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement-group-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "PlacementGroupStringList", :location-name "groupName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-string-list (input :user-ids)) #:http.request.field{:name "UserIds", :shape "UserIdStringList", :location-name "UserId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :attribute)) #:http.request.field{:name "Attribute", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :description)) #:http.request.field{:name "Description", :shape "AttributeValue"})) (clojure.core/contains? input :operation-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-operation-type (input :operation-type)) #:http.request.field{:name "OperationType", :shape "OperationType"})) (clojure.core/contains? input :product-codes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-product-code-string-list (input :product-codes)) #:http.request.field{:name "ProductCodes", :shape "ProductCodeStringList", :location-name "ProductCode"})) (clojure.core/contains? input :user-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-group-string-list (input :user-groups)) #:http.request.field{:name "UserGroups", :shape "UserGroupStringList", :location-name "UserGroup"})) (clojure.core/contains? input :launch-permission) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-modifications (input :launch-permission)) #:http.request.field{:name "LaunchPermission", :shape "LaunchPermissionModifications"}))))

(clojure.core/defn- req-enable-vpc-classic-link-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-security-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-name-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "GroupNameStringList", :location-name "GroupName"})) (clojure.core/contains? input :group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-id-string-list (input :group-ids)) #:http.request.field{:name "GroupIds", :shape "GroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-import-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-platform-values (input :platform)) #:http.request.field{:name "Platform", :shape "PlatformValues", :location-name "platform"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :launch-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-instance-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "ImportInstanceLaunchSpecification", :location-name "launchSpecification"})) (clojure.core/contains? input :disk-images) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-list (input :disk-images)) #:http.request.field{:name "DiskImages", :shape "DiskImageList", :location-name "diskImage"}))))

(clojure.core/defn- req-describe-vpc-classic-link-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-classic-link-id-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcClassicLinkIdList", :location-name "VpcId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-authorize-security-group-ingress-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String"}))))

(clojure.core/defn- req-create-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :size)) #:http.request.field{:name "Size", :shape "Integer"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"}))))

(clojure.core/defn- req-modify-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "AttributeBooleanValue", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "AttributeValue", :location-name "instanceType"})) (clojure.core/contains? input :ramdisk) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :ramdisk)) #:http.request.field{:name "Ramdisk", :shape "AttributeValue", :location-name "ramdisk"})) (clojure.core/contains? input :sriov-net-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :sriov-net-support)) #:http.request.field{:name "SriovNetSupport", :shape "AttributeValue", :location-name "sriovNetSupport"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"})) (clojure.core/contains? input :disable-api-termination) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :disable-api-termination)) #:http.request.field{:name "DisableApiTermination", :shape "AttributeBooleanValue", :location-name "disableApiTermination"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "GroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-block-device-mapping-specification-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "InstanceBlockDeviceMappingSpecificationList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :kernel) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :kernel)) #:http.request.field{:name "Kernel", :shape "AttributeValue", :location-name "kernel"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob-attribute-value (input :user-data)) #:http.request.field{:name "UserData", :shape "BlobAttributeValue", :location-name "userData"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "AttributeValue", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :ena-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :ena-support)) #:http.request.field{:name "EnaSupport", :shape "AttributeBooleanValue", :location-name "enaSupport"}))))

(clojure.core/defn- req-release-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :allocation-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"}))))

(clojure.core/defn- req-describe-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-classic-link-id-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcClassicLinkIdList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken", :location-name "nextToken"}))))

(clojure.core/defn- req-describe-reserved-instances-modifications-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-instances-modification-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-modification-id-string-list (input :reserved-instances-modification-ids)) #:http.request.field{:name "ReservedInstancesModificationIds", :shape "ReservedInstancesModificationIdStringList", :location-name "ReservedInstancesModificationId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-create-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-specification-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressSpecificationList", :location-name "privateIpAddresses"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-stale-security-groups-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"}))))

(clojure.core/defn- req-create-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dhcp-options-id)) #:http.request.field{:name "DhcpOptionsId", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-reject-vpc-peering-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-network-acl-association-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"}) (clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-run-scheduled-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :scheduled-instance-id)) #:http.request.field{:name "ScheduledInstanceId", :shape "String"}) (clojure.core/into (ser-scheduled-instances-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "ScheduledInstancesLaunchSpecification"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :idempotency-token true})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"}))))

(clojure.core/defn- req-describe-spot-instance-requests-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :spot-instance-request-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-request-id-list (input :spot-instance-request-ids)) #:http.request.field{:name "SpotInstanceRequestIds", :shape "SpotInstanceRequestIdList", :location-name "SpotInstanceRequestId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-attach-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-stop-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean", :location-name "force"}))))

(clojure.core/defn- req-purchase-host-reservation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :offering-id)) #:http.request.field{:name "OfferingId", :shape "String"}) (clojure.core/into (ser-request-host-id-set (input :host-id-set)) #:http.request.field{:name "HostIdSet", :shape "RequestHostIdSet"})]} (clojure.core/contains? input :limit-price) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :limit-price)) #:http.request.field{:name "LimitPrice", :shape "String"})) (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-get-host-reservation-purchase-preview-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :offering-id)) #:http.request.field{:name "OfferingId", :shape "String"}) (clojure.core/into (ser-request-host-id-set (input :host-id-set)) #:http.request.field{:name "HostIdSet", :shape "RequestHostIdSet"})]}))

(clojure.core/defn- req-modify-vpc-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-endpoint-id)) #:http.request.field{:name "VpcEndpointId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :reset-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-policy)) #:http.request.field{:name "ResetPolicy", :shape "Boolean"})) (clojure.core/contains? input :policy-document) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "String"})) (clojure.core/contains? input :add-route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :add-route-table-ids)) #:http.request.field{:name "AddRouteTableIds", :shape "ValueStringList", :location-name "AddRouteTableId"})) (clojure.core/contains? input :remove-route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :remove-route-table-ids)) #:http.request.field{:name "RemoveRouteTableIds", :shape "ValueStringList", :location-name "RemoveRouteTableId"}))))

(clojure.core/defn- req-get-console-screenshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :wake-up) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :wake-up)) #:http.request.field{:name "WakeUp", :shape "Boolean"}))))

(clojure.core/defn- req-describe-id-format-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String"}))))

(clojure.core/defn- req-describe-key-pairs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :key-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-key-name-string-list (input :key-names)) #:http.request.field{:name "KeyNames", :shape "KeyNameStringList", :location-name "KeyName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dhcp-options-id)) #:http.request.field{:name "DhcpOptionsId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-fleet-request-history-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"}) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :event-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-type (input :event-type)) #:http.request.field{:name "EventType", :shape "EventType", :location-name "eventType"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-create-placement-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"}) (clojure.core/into (ser-placement-strategy (input :strategy)) #:http.request.field{:name "Strategy", :shape "PlacementStrategy", :location-name "strategy"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/declare deser-export-task-list)

(clojure.core/declare deser-event-code)

(clojure.core/declare deser-flow-log)

(clojure.core/declare deser-vpc-list)

(clojure.core/declare deser-volume-status-action)

(clojure.core/declare deser-permission-group)

(clojure.core/declare deser-address)

(clojure.core/declare deser-bundle-task)

(clojure.core/declare deser-security-group-list)

(clojure.core/declare deser-instance-count-list)

(clojure.core/declare deser-describe-conversion-task-list)

(clojure.core/declare deser-route)

(clojure.core/declare deser-nat-gateway-list)

(clojure.core/declare deser-moving-address-status-set)

(clojure.core/declare deser-instance-state-change-list)

(clojure.core/declare deser-double)

(clojure.core/declare deser-ebs-instance-block-device)

(clojure.core/declare deser-route-table)

(clojure.core/declare deser-scheduled-instance-set)

(clojure.core/declare deser-propagating-vgw)

(clojure.core/declare deser-flow-log-set)

(clojure.core/declare deser-prefix-list-id-set)

(clojure.core/declare deser-instance-network-interface-list)

(clojure.core/declare deser-vpn-connection-list)

(clojure.core/declare deser-reserved-instances-offering)

(clojure.core/declare deser-storage)

(clojure.core/declare deser-value-string-list)

(clojure.core/declare deser-ip-ranges)

(clojure.core/declare deser-instance-status-event-list)

(clojure.core/declare deser-reserved-instances-modification-result-list)

(clojure.core/declare deser-vpc-peering-connection-vpc-info)

(clojure.core/declare deser-instance-monitoring-list)

(clojure.core/declare deser-vpc-peering-connection)

(clojure.core/declare deser-target-reservation-value-set)

(clojure.core/declare deser-image-state)

(clojure.core/declare deser-vpn-state)

(clojure.core/declare deser-account-attribute-list)

(clojure.core/declare deser-move-status)

(clojure.core/declare deser-prefix-list-id)

(clojure.core/declare deser-pricing-details-list)

(clojure.core/declare deser-purchase)

(clojure.core/declare deser-hypervisor-type)

(clojure.core/declare deser-history-record)

(clojure.core/declare deser-route-table-list)

(clojure.core/declare deser-architecture-values)

(clojure.core/declare deser-cancelled-spot-instance-request)

(clojure.core/declare deser-volume-attachment-list)

(clojure.core/declare deser-export-environment)

(clojure.core/declare deser-instance-export-details)

(clojure.core/declare deser-volume-attachment-state)

(clojure.core/declare deser-internet-gateway-attachment)

(clojure.core/declare deser-instance-monitoring)

(clojure.core/declare deser-spot-price-history-list)

(clojure.core/declare deser-vpn-connection-options)

(clojure.core/declare deser-network-acl-entry)

(clojure.core/declare deser-provisioned-bandwidth)

(clojure.core/declare deser-vgw-telemetry-list)

(clojure.core/declare deser-volume-state)

(clojure.core/declare deser-spot-placement)

(clojure.core/declare deser-security-group)

(clojure.core/declare deser-recurring-charges-list)

(clojure.core/declare deser-snapshot-detail-list)

(clojure.core/declare deser-id-format)

(clojure.core/declare deser-volume)

(clojure.core/declare deser-spot-instance-type)

(clojure.core/declare deser-ebs-block-device)

(clojure.core/declare deser-placement)

(clojure.core/declare deser-reserved-instances-configuration)

(clojure.core/declare deser-user-bucket-details)

(clojure.core/declare deser-occurrence-day-set)

(clojure.core/declare deser-snapshot-list)

(clojure.core/declare deser-instance-lifecycle-type)

(clojure.core/declare deser-availability-zone-state)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-dhcp-configuration-list)

(clojure.core/declare deser-spot-datafeed-subscription)

(clojure.core/declare deser-instance-count)

(clojure.core/declare deser-host-instance-list)

(clojure.core/declare deser-import-instance-volume-detail-item)

(clojure.core/declare deser-tenancy)

(clojure.core/declare deser-instance-network-interface-attachment)

(clojure.core/declare deser-snapshot-detail)

(clojure.core/declare deser-spot-instance-state-fault)

(clojure.core/declare deser-dhcp-configuration-value-list)

(clojure.core/declare deser-instance-network-interface-association)

(clojure.core/declare deser-bundle-task-list)

(clojure.core/declare deser-disk-image-volume-description)

(clojure.core/declare deser-host-properties)

(clojure.core/declare deser-scheduled-instance)

(clojure.core/declare deser-active-instance-set)

(clojure.core/declare deser-instance-type)

(clojure.core/declare deser-route-state)

(clojure.core/declare deser-subnet-state)

(clojure.core/declare deser-stale-ip-permission-set)

(clojure.core/declare deser-reserved-instances-modification-result)

(clojure.core/declare deser-import-instance-task-details)

(clojure.core/declare deser-create-volume-permission)

(clojure.core/declare deser-instance-status-details)

(clojure.core/declare deser-iam-instance-profile-specification)

(clojure.core/declare deser-spot-instance-request-list)

(clojure.core/declare deser-region-list)

(clojure.core/declare deser-response-host-id-set)

(clojure.core/declare deser-disk-image-description)

(clojure.core/declare deser-available-capacity)

(clojure.core/declare deser-bundle-task-state)

(clojure.core/declare deser-icmp-type-code)

(clojure.core/declare deser-instance-private-ip-address)

(clojure.core/declare deser-reserved-instances-listing-list)

(clojure.core/declare deser-vpc-classic-link)

(clojure.core/declare deser-snapshot-task-detail)

(clojure.core/declare deser-launch-specification)

(clojure.core/declare deser-id-format-list)

(clojure.core/declare deser-prefix-list-set)

(clojure.core/declare deser-attribute-boolean-value)

(clojure.core/declare deser-spot-instance-request)

(clojure.core/declare deser-rule-action)

(clojure.core/declare deser-vpc-attachment-list)

(clojure.core/declare deser-vpn-static-route)

(clojure.core/declare deser-fleet-type)

(clojure.core/declare deser-vpc-endpoint)

(clojure.core/declare deser-key-pair-list)

(clojure.core/declare deser-purchased-scheduled-instance-set)

(clojure.core/declare deser-group-identifier-list)

(clojure.core/declare deser-cancel-spot-fleet-requests-error-item)

(clojure.core/declare deser-payment-option)

(clojure.core/declare deser-instance-status-details-list)

(clojure.core/declare deser-key-pair-info)

(clojure.core/declare deser-instance-network-interface)

(clojure.core/declare deser-cancel-spot-fleet-requests-error)

(clojure.core/declare deser-vpn-static-route-list)

(clojure.core/declare deser-reservation)

(clojure.core/declare deser-unsuccessful-item-error)

(clojure.core/declare deser-vpc-peering-connection-list)

(clojure.core/declare deser-unsuccessful-item-set)

(clojure.core/declare deser-security-group-references)

(clojure.core/declare deser-stale-ip-permission)

(clojure.core/declare deser-traffic-type)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-route-origin)

(clojure.core/declare deser-create-volume-permission-list)

(clojure.core/declare deser-status)

(clojure.core/declare deser-network-interface-type)

(clojure.core/declare deser-cancelled-spot-instance-request-list)

(clojure.core/declare deser-event-type)

(clojure.core/declare deser-moving-address-status)

(clojure.core/declare deser-reserved-instances)

(clojure.core/declare deser-next-token)

(clojure.core/declare deser-excess-capacity-termination-policy)

(clojure.core/declare deser-prefix-list)

(clojure.core/declare deser-import-instance-volume-detail-set)

(clojure.core/declare deser-status-type)

(clojure.core/declare deser-spot-fleet-monitoring)

(clojure.core/declare deser-reserved-instances-listing)

(clojure.core/declare deser-instance-status-summary)

(clojure.core/declare deser-nat-gateway-address)

(clojure.core/declare deser-instance-status-list)

(clojure.core/declare deser-placement-group-list)

(clojure.core/declare deser-address-list)

(clojure.core/declare deser-reserved-instances-offering-list)

(clojure.core/declare deser-reserved-instances-list)

(clojure.core/declare deser-image-list)

(clojure.core/declare deser-user-id-group-pair-list)

(clojure.core/declare deser-s-3-storage)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-spot-fleet-request-config-set)

(clojure.core/declare deser-launch-permission-list)

(clojure.core/declare deser-price-schedule-list)

(clojure.core/declare deser-instance-private-ip-address-list)

(clojure.core/declare deser-group-identifier)

(clojure.core/declare deser-spot-price)

(clojure.core/declare deser-instance-id-set)

(clojure.core/declare deser-scheduled-instance-availability-set)

(clojure.core/declare deser-nat-gateway)

(clojure.core/declare deser-spot-instance-status)

(clojure.core/declare deser-tag-description)

(clojure.core/declare deser-account-attribute-value-list)

(clojure.core/declare deser-import-snapshot-task-list)

(clojure.core/declare deser-dhcp-options)

(clojure.core/declare deser-run-instances-monitoring-enabled)

(clojure.core/declare deser-user-id-group-pair-set)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-network-acl-association-list)

(clojure.core/declare deser-product-code-list)

(clojure.core/declare deser-volume-status-info-status)

(clojure.core/declare deser-spot-fleet-request-config-data)

(clojure.core/declare deser-host-offering)

(clojure.core/declare deser-listing-state)

(clojure.core/declare deser-volume-status-events-list)

(clojure.core/declare deser-datafeed-subscription-state)

(clojure.core/declare deser-network-interface-list)

(clojure.core/declare deser-cancel-batch-error-code)

(clojure.core/declare deser-target-configuration)

(clojure.core/declare deser-allocation-strategy)

(clojure.core/declare deser-status-name)

(clojure.core/declare deser-volume-status-event)

(clojure.core/declare deser-target-reservation-value)

(clojure.core/declare deser-reserved-intances-ids)

(clojure.core/declare deser-attribute-value)

(clojure.core/declare deser-network-acl-association)

(clojure.core/declare deser-private-ip-address-specification-list)

(clojure.core/declare deser-auto-placement)

(clojure.core/declare deser-prefix-list-id-list)

(clojure.core/declare deser-availability-zone-message-list)

(clojure.core/declare deser-history-records)

(clojure.core/declare deser-tag-description-list)

(clojure.core/declare deser-product-code-values)

(clojure.core/declare deser-purchase-set)

(clojure.core/declare deser-placement-strategy)

(clojure.core/declare deser-internet-gateway-attachment-list)

(clojure.core/declare deser-volume-status-info)

(clojure.core/declare deser-instance-capacity)

(clojure.core/declare deser-instance-block-device-mapping)

(clojure.core/declare deser-customer-gateway-list)

(clojure.core/declare deser-classic-link-dns-support)

(clojure.core/declare deser-monitoring-state)

(clojure.core/declare deser-reserved-instance-reservation-value-set)

(clojure.core/declare deserscope)

(clojure.core/declare deser-device-type)

(clojure.core/declare deser-route-list)

(clojure.core/declare deser-pricing-detail)

(clojure.core/declare deser-import-volume-task-details)

(clojure.core/declare deser-network-interface-status)

(clojure.core/declare deser-vpc-classic-link-list)

(clojure.core/declare deser-price-schedule)

(clojure.core/declare deser-reserved-instance-state)

(clojure.core/declare deser-allocation-state)

(clojure.core/declare deser-export-task-state)

(clojure.core/declare deser-instance-state-change)

(clojure.core/declare deser-monitoring)

(clojure.core/declare deser-event-information)

(clojure.core/declare deser-launch-specs-list)

(clojure.core/declare deser-volume-status-details)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-ip-permission)

(clojure.core/declare deser-ip-permission-list)

(clojure.core/declare deser-ri-product-description)

(clojure.core/declare deser-volume-list)

(clojure.core/declare deser-dhcp-options-list)

(clojure.core/declare deser-unsuccessful-item)

(clojure.core/declare deser-cancel-spot-fleet-requests-success-item)

(clojure.core/declare deser-propagating-vgw-list)

(clojure.core/declare deser-disk-image-format)

(clojure.core/declare deser-network-interface-attachment)

(clojure.core/declare deser-security-group-id-string-list)

(clojure.core/declare deser-spot-fleet-request-config)

(clojure.core/declare deser-domain-type)

(clojure.core/declare deser-vgw-telemetry)

(clojure.core/declare deser-cancel-spot-instance-request-state)

(clojure.core/declare deser-network-interface)

(clojure.core/declare deser-snapshot)

(clojure.core/declare deser-resource-type)

(clojure.core/declare deser-instance-status-event)

(clojure.core/declare deser-vpc-peering-connection-options-description)

(clojure.core/declare deser-volume-status-name)

(clojure.core/declare deser-internet-gateway)

(clojure.core/declare deser-vpc)

(clojure.core/declare deser-batch-state)

(clojure.core/declare deser-reservation-value)

(clojure.core/declare deser-host-instance)

(clojure.core/declare deser-currency-code-values)

(clojure.core/declare deser-import-image-task)

(clojure.core/declare deser-volume-status-details-list)

(clojure.core/declare deser-summary-status)

(clojure.core/declare deser-instance-list)

(clojure.core/declare deser-volume-type)

(clojure.core/declare deser-customer-gateway)

(clojure.core/declare deser-response-host-id-list)

(clojure.core/declare deser-host-list)

(clojure.core/declare deser-stale-security-group-set)

(clojure.core/declare deser-volume-status-list)

(clojure.core/declare deser-export-task)

(clojure.core/declare deser-network-interface-private-ip-address)

(clojure.core/declare deser-placement-group-state)

(clojure.core/declare deser-long)

(clojure.core/declare deser-volume-status-actions-list)

(clojure.core/declare deser-vpn-static-route-source)

(clojure.core/declare deser-host-offering-set)

(clojure.core/declare deser-vpc-endpoint-set)

(clojure.core/declare deser-scheduled-instance-recurrence)

(clojure.core/declare deser-instance-state)

(clojure.core/declare deser-volume-status-item)

(clojure.core/declare deser-spot-instance-state)

(clojure.core/declare deser-instance-state-name)

(clojure.core/declare deser-availability-zone-message)

(clojure.core/declare deser-host-reservation-set)

(clojure.core/declare deser-unsuccessful-item-list)

(clojure.core/declare deser-virtualization-type)

(clojure.core/declare deser-reserved-instances-id)

(clojure.core/declare deser-instance-network-interface-specification-list)

(clojure.core/declare deser-conversion-task)

(clojure.core/declare deser-bundle-task-error)

(clojure.core/declare deser-dhcp-configuration)

(clojure.core/declare deser-block-device-mapping)

(clojure.core/declare deser-state)

(clojure.core/declare deser-export-to-s-3-task)

(clojure.core/declare deser-network-acl-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-recurring-charge-frequency)

(clojure.core/declare deser-platform-values)

(clojure.core/declare deser-cancel-spot-fleet-requests-success-set)

(clojure.core/declare deser-product-code)

(clojure.core/declare deser-port-range)

(clojure.core/declare deser-vpc-state)

(clojure.core/declare deser-attachment-status)

(clojure.core/declare deser-peering-connection-options)

(clojure.core/declare deser-vpc-attachment)

(clojure.core/declare deser-instance-status)

(clojure.core/declare deser-spot-fleet-launch-specification)

(clojure.core/declare deser-ip-range)

(clojure.core/declare deser-stale-security-group)

(clojure.core/declare deser-import-snapshot-task)

(clojure.core/declare deser-container-format)

(clojure.core/declare deser-vpc-peering-connection-state-reason)

(clojure.core/declare deser-instance)

(clojure.core/declare deser-nat-gateway-state)

(clojure.core/declare deser-block-device-mapping-list)

(clojure.core/declare deser-blob)

(clojure.core/declare deser-instance-block-device-mapping-list)

(clojure.core/declare deser-security-group-reference)

(clojure.core/declare deser-classic-link-dns-support-list)

(clojure.core/declare deser-gateway-type)

(clojure.core/declare deser-image)

(clojure.core/declare deser-ip-range-list)

(clojure.core/declare deser-image-type-values)

(clojure.core/declare deser-classic-link-instance)

(clojure.core/declare deser-cancel-spot-fleet-requests-error-set)

(clojure.core/declare deser-reserved-instances-modification-list)

(clojure.core/declare deser-network-acl-entry-list)

(clojure.core/declare deser-network-interface-private-ip-address-list)

(clojure.core/declare deser-conversion-task-state)

(clojure.core/declare deser-offering-class-type)

(clojure.core/declare deser-nat-gateway-address-list)

(clojure.core/declare deser-reserved-instances-modification)

(clojure.core/declare deser-listing-status)

(clojure.core/declare deser-classic-link-instance-list)

(clojure.core/declare deser-import-image-task-list)

(clojure.core/declare deser-route-table-association-list)

(clojure.core/declare deser-offering-type-values)

(clojure.core/declare deser-float)

(clojure.core/declare deser-network-acl)

(clojure.core/declare deser-volume-attachment)

(clojure.core/declare deser-route-table-association)

(clojure.core/declare deser-vpn-connection)

(clojure.core/declare deser-region)

(clojure.core/declare deser-state-reason)

(clojure.core/declare deser-iam-instance-profile)

(clojure.core/declare deser-scheduled-instance-availability)

(clojure.core/declare deser-active-instance)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-account-attribute-value)

(clojure.core/declare deser-vpc-peering-connection-state-reason-code)

(clojure.core/declare deser-launch-permission)

(clojure.core/declare deser-internet-gateway-list)

(clojure.core/declare deser-account-attribute)

(clojure.core/declare deser-host)

(clojure.core/declare deser-activity-status)

(clojure.core/declare deser-placement-group)

(clojure.core/declare deser-reserved-instance-reservation-value)

(clojure.core/declare deser-private-ip-address-specification)

(clojure.core/declare deser-reservation-list)

(clojure.core/declare deser-user-id-group-pair)

(clojure.core/declare deser-host-reservation)

(clojure.core/declare deser-telemetry-status)

(clojure.core/declare deser-vpn-gateway)

(clojure.core/declare deser-network-interface-association)

(clojure.core/declare deser-date-time)

(clojure.core/declare deser-boolean)

(clojure.core/declare deser-instance-network-interface-specification)

(clojure.core/declare deser-reservation-state)

(clojure.core/declare deser-available-instance-capacity-list)

(clojure.core/declare deser-snapshot-state)

(clojure.core/declare deser-vpn-gateway-list)

(clojure.core/defn- deser-export-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-export-task coll))) input))

(clojure.core/defn- deser-event-code [input] (clojure.core/get {"instance-reboot" :instancereboot, "system-reboot" :systemreboot, "system-maintenance" :systemmaintenance, "instance-retirement" :instanceretirement, "instance-stop" :instancestop} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-flow-log [input] (clojure.core/let [letvar723519 {"resourceId" (portkey.aws/search-for-tag input "resourceId" :flattened? nil :xmlAttribute? nil), "deliverLogsPermissionArn" (portkey.aws/search-for-tag input "deliverLogsPermissionArn" :flattened? nil :xmlAttribute? nil), "deliverLogsErrorMessage" (portkey.aws/search-for-tag input "deliverLogsErrorMessage" :flattened? nil :xmlAttribute? nil), "logGroupName" (portkey.aws/search-for-tag input "logGroupName" :flattened? nil :xmlAttribute? nil), "deliverLogsStatus" (portkey.aws/search-for-tag input "deliverLogsStatus" :flattened? nil :xmlAttribute? nil), "creationTime" (portkey.aws/search-for-tag input "creationTime" :flattened? nil :xmlAttribute? nil), "flowLogStatus" (portkey.aws/search-for-tag input "flowLogStatus" :flattened? nil :xmlAttribute? nil), "trafficType" (portkey.aws/search-for-tag input "trafficType" :flattened? nil :xmlAttribute? nil), "flowLogId" (portkey.aws/search-for-tag input "flowLogId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar723519 "flowLogStatus") (clojure.core/assoc :flow-log-status (deser-string (clojure.core/get-in letvar723519 ["flowLogStatus" :content]))) (letvar723519 "trafficType") (clojure.core/assoc :traffic-type (deser-traffic-type (clojure.core/get-in letvar723519 ["trafficType" :content]))) (letvar723519 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar723519 ["resourceId" :content]))) (letvar723519 "deliverLogsErrorMessage") (clojure.core/assoc :deliver-logs-error-message (deser-string (clojure.core/get-in letvar723519 ["deliverLogsErrorMessage" :content]))) (letvar723519 "deliverLogsStatus") (clojure.core/assoc :deliver-logs-status (deser-string (clojure.core/get-in letvar723519 ["deliverLogsStatus" :content]))) (letvar723519 "deliverLogsPermissionArn") (clojure.core/assoc :deliver-logs-permission-arn (deser-string (clojure.core/get-in letvar723519 ["deliverLogsPermissionArn" :content]))) (letvar723519 "flowLogId") (clojure.core/assoc :flow-log-id (deser-string (clojure.core/get-in letvar723519 ["flowLogId" :content]))) (letvar723519 "logGroupName") (clojure.core/assoc :log-group-name (deser-string (clojure.core/get-in letvar723519 ["logGroupName" :content]))) (letvar723519 "creationTime") (clojure.core/assoc :creation-time (deser-date-time (clojure.core/get-in letvar723519 ["creationTime" :content]))))))

(clojure.core/defn- deser-vpc-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc coll))) input))

(clojure.core/defn- deser-volume-status-action [input] (clojure.core/let [letvar723644 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "eventType" (portkey.aws/search-for-tag input "eventType" :flattened? nil :xmlAttribute? nil), "eventId" (portkey.aws/search-for-tag input "eventId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar723644 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar723644 ["code" :content]))) (letvar723644 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar723644 ["description" :content]))) (letvar723644 "eventType") (clojure.core/assoc :event-type (deser-string (clojure.core/get-in letvar723644 ["eventType" :content]))) (letvar723644 "eventId") (clojure.core/assoc :event-id (deser-string (clojure.core/get-in letvar723644 ["eventId" :content]))))))

(clojure.core/defn- deser-permission-group [input] (clojure.core/get {"all" :all} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-address [input] (clojure.core/let [letvar723757 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "publicIp" (portkey.aws/search-for-tag input "publicIp" :flattened? nil :xmlAttribute? nil), "allocationId" (portkey.aws/search-for-tag input "allocationId" :flattened? nil :xmlAttribute? nil), "associationId" (portkey.aws/search-for-tag input "associationId" :flattened? nil :xmlAttribute? nil), "domain" (portkey.aws/search-for-tag input "domain" :flattened? nil :xmlAttribute? nil), "networkInterfaceId" (portkey.aws/search-for-tag input "networkInterfaceId" :flattened? nil :xmlAttribute? nil), "networkInterfaceOwnerId" (portkey.aws/search-for-tag input "networkInterfaceOwnerId" :flattened? nil :xmlAttribute? nil), "privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar723757 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar723757 ["instanceId" :content]))) (letvar723757 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar723757 ["publicIp" :content]))) (letvar723757 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar723757 ["allocationId" :content]))) (letvar723757 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar723757 ["associationId" :content]))) (letvar723757 "domain") (clojure.core/assoc :domain (deser-domain-type (clojure.core/get-in letvar723757 ["domain" :content]))) (letvar723757 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar723757 ["networkInterfaceId" :content]))) (letvar723757 "networkInterfaceOwnerId") (clojure.core/assoc :network-interface-owner-id (deser-string (clojure.core/get-in letvar723757 ["networkInterfaceOwnerId" :content]))) (letvar723757 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar723757 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-bundle-task [input] (clojure.core/let [letvar723865 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "bundleId" (portkey.aws/search-for-tag input "bundleId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "startTime" (portkey.aws/search-for-tag input "startTime" :flattened? nil :xmlAttribute? nil), "updateTime" (portkey.aws/search-for-tag input "updateTime" :flattened? nil :xmlAttribute? nil), "storage" (portkey.aws/search-for-tag input "storage" :flattened? nil :xmlAttribute? nil), "progress" (portkey.aws/search-for-tag input "progress" :flattened? nil :xmlAttribute? nil), "error" (portkey.aws/search-for-tag input "error" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar723865 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar723865 ["instanceId" :content]))) (letvar723865 "bundleId") (clojure.core/assoc :bundle-id (deser-string (clojure.core/get-in letvar723865 ["bundleId" :content]))) (letvar723865 "state") (clojure.core/assoc :state (deser-bundle-task-state (clojure.core/get-in letvar723865 ["state" :content]))) (letvar723865 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar723865 ["startTime" :content]))) (letvar723865 "updateTime") (clojure.core/assoc :update-time (deser-date-time (clojure.core/get-in letvar723865 ["updateTime" :content]))) (letvar723865 "storage") (clojure.core/assoc :storage (deser-storage (clojure.core/get-in letvar723865 ["storage" :content]))) (letvar723865 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar723865 ["progress" :content]))) (letvar723865 "error") (clojure.core/assoc :bundle-task-error (deser-bundle-task-error (clojure.core/get-in letvar723865 ["error" :content]))))))

(clojure.core/defn- deser-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group coll))) input))

(clojure.core/defn- deser-instance-count-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-count coll))) input))

(clojure.core/defn- deser-describe-conversion-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-conversion-task coll))) input))

(clojure.core/defn- deser-route [input] (clojure.core/let [letvar724024 {"origin" (portkey.aws/search-for-tag input "origin" :flattened? nil :xmlAttribute? nil), "instanceOwnerId" (portkey.aws/search-for-tag input "instanceOwnerId" :flattened? nil :xmlAttribute? nil), "natGatewayId" (portkey.aws/search-for-tag input "natGatewayId" :flattened? nil :xmlAttribute? nil), "destinationCidrBlock" (portkey.aws/search-for-tag input "destinationCidrBlock" :flattened? nil :xmlAttribute? nil), "gatewayId" (portkey.aws/search-for-tag input "gatewayId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "vpcPeeringConnectionId" (portkey.aws/search-for-tag input "vpcPeeringConnectionId" :flattened? nil :xmlAttribute? nil), "destinationPrefixListId" (portkey.aws/search-for-tag input "destinationPrefixListId" :flattened? nil :xmlAttribute? nil), "networkInterfaceId" (portkey.aws/search-for-tag input "networkInterfaceId" :flattened? nil :xmlAttribute? nil), "instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar724024 "instanceOwnerId") (clojure.core/assoc :instance-owner-id (deser-string (clojure.core/get-in letvar724024 ["instanceOwnerId" :content]))) (letvar724024 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar724024 ["instanceId" :content]))) (letvar724024 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar724024 ["natGatewayId" :content]))) (letvar724024 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar724024 ["networkInterfaceId" :content]))) (letvar724024 "origin") (clojure.core/assoc :origin (deser-route-origin (clojure.core/get-in letvar724024 ["origin" :content]))) (letvar724024 "destinationCidrBlock") (clojure.core/assoc :destination-cidr-block (deser-string (clojure.core/get-in letvar724024 ["destinationCidrBlock" :content]))) (letvar724024 "destinationPrefixListId") (clojure.core/assoc :destination-prefix-list-id (deser-string (clojure.core/get-in letvar724024 ["destinationPrefixListId" :content]))) (letvar724024 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar724024 ["vpcPeeringConnectionId" :content]))) (letvar724024 "state") (clojure.core/assoc :state (deser-route-state (clojure.core/get-in letvar724024 ["state" :content]))) (letvar724024 "gatewayId") (clojure.core/assoc :gateway-id (deser-string (clojure.core/get-in letvar724024 ["gatewayId" :content]))))))

(clojure.core/defn- deser-nat-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-nat-gateway coll))) input))

(clojure.core/defn- deser-moving-address-status-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-moving-address-status coll))) input))

(clojure.core/defn- deser-instance-state-change-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-state-change coll))) input))

(clojure.core/defn- deser-double [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-ebs-instance-block-device [input] (clojure.core/let [letvar724185 {"volumeId" (portkey.aws/search-for-tag input "volumeId" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "attachTime" (portkey.aws/search-for-tag input "attachTime" :flattened? nil :xmlAttribute? nil), "deleteOnTermination" (portkey.aws/search-for-tag input "deleteOnTermination" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar724185 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar724185 ["volumeId" :content]))) (letvar724185 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar724185 ["status" :content]))) (letvar724185 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar724185 ["attachTime" :content]))) (letvar724185 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar724185 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-route-table [input] (clojure.core/let [letvar724293 {"routeTableId" (portkey.aws/search-for-tag input "routeTableId" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "routeSet" (portkey.aws/search-for-tag input "routeSet" :flattened? nil :xmlAttribute? nil), "associationSet" (portkey.aws/search-for-tag input "associationSet" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "propagatingVgwSet" (portkey.aws/search-for-tag input "propagatingVgwSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar724293 "routeTableId") (clojure.core/assoc :route-table-id (deser-string (clojure.core/get-in letvar724293 ["routeTableId" :content]))) (letvar724293 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar724293 ["vpcId" :content]))) (letvar724293 "routeSet") (clojure.core/assoc :routes (deser-route-list (clojure.core/get-in letvar724293 ["routeSet" :content]))) (letvar724293 "associationSet") (clojure.core/assoc :associations (deser-route-table-association-list (clojure.core/get-in letvar724293 ["associationSet" :content]))) (letvar724293 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar724293 ["tagSet" :content]))) (letvar724293 "propagatingVgwSet") (clojure.core/assoc :propagating-vgws (deser-propagating-vgw-list (clojure.core/get-in letvar724293 ["propagatingVgwSet" :content]))))))

(clojure.core/defn- deser-scheduled-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance coll))) input))

(clojure.core/defn- deser-propagating-vgw [input] (clojure.core/let [letvar724418 {"gatewayId" (portkey.aws/search-for-tag input "gatewayId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar724418 "gatewayId") (clojure.core/assoc :gateway-id (deser-string (clojure.core/get-in letvar724418 ["gatewayId" :content]))))))

(clojure.core/defn- deser-flow-log-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-flow-log coll))) input))

(clojure.core/defn- deser-prefix-list-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-instance-network-interface-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-network-interface coll))) input))

(clojure.core/defn- deser-vpn-connection-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-connection coll))) input))

(clojure.core/defn- deser-reserved-instances-offering [input] (clojure.core/let [letvar724594 {"marketplace" (portkey.aws/search-for-tag input "marketplace" :flattened? nil :xmlAttribute? nil), "reservedInstancesOfferingId" (portkey.aws/search-for-tag input "reservedInstancesOfferingId" :flattened? nil :xmlAttribute? nil), "instanceTenancy" (portkey.aws/search-for-tag input "instanceTenancy" :flattened? nil :xmlAttribute? nil), "offeringType" (portkey.aws/search-for-tag input "offeringType" :flattened? nil :xmlAttribute? nil), "fixedPrice" (portkey.aws/search-for-tag input "fixedPrice" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "scope" (portkey.aws/search-for-tag input "scope" :flattened? nil :xmlAttribute? nil), "currencyCode" (portkey.aws/search-for-tag input "currencyCode" :flattened? nil :xmlAttribute? nil), "recurringCharges" (portkey.aws/search-for-tag input "recurringCharges" :flattened? nil :xmlAttribute? nil), "pricingDetailsSet" (portkey.aws/search-for-tag input "pricingDetailsSet" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "duration" (portkey.aws/search-for-tag input "duration" :flattened? nil :xmlAttribute? nil), "productDescription" (portkey.aws/search-for-tag input "productDescription" :flattened? nil :xmlAttribute? nil), "offeringClass" (portkey.aws/search-for-tag input "offeringClass" :flattened? nil :xmlAttribute? nil), "usagePrice" (portkey.aws/search-for-tag input "usagePrice" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar724594 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar724594 ["currencyCode" :content]))) (letvar724594 "reservedInstancesOfferingId") (clojure.core/assoc :reserved-instances-offering-id (deser-string (clojure.core/get-in letvar724594 ["reservedInstancesOfferingId" :content]))) (letvar724594 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar724594 ["instanceType" :content]))) (letvar724594 "fixedPrice") (clojure.core/assoc :fixed-price (deser-float (clojure.core/get-in letvar724594 ["fixedPrice" :content]))) (letvar724594 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar724594 ["availabilityZone" :content]))) (letvar724594 "pricingDetailsSet") (clojure.core/assoc :pricing-details (deser-pricing-details-list (clojure.core/get-in letvar724594 ["pricingDetailsSet" :content]))) (letvar724594 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar724594 ["instanceTenancy" :content]))) (letvar724594 "marketplace") (clojure.core/assoc :marketplace (deser-boolean (clojure.core/get-in letvar724594 ["marketplace" :content]))) (letvar724594 "duration") (clojure.core/assoc :duration (deser-long (clojure.core/get-in letvar724594 ["duration" :content]))) (letvar724594 "usagePrice") (clojure.core/assoc :usage-price (deser-float (clojure.core/get-in letvar724594 ["usagePrice" :content]))) (letvar724594 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar724594 ["productDescription" :content]))) (letvar724594 "offeringClass") (clojure.core/assoc :offering-class (deser-offering-class-type (clojure.core/get-in letvar724594 ["offeringClass" :content]))) (letvar724594 "recurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charges-list (clojure.core/get-in letvar724594 ["recurringCharges" :content]))) (letvar724594 "offeringType") (clojure.core/assoc :offering-type (deser-offering-type-values (clojure.core/get-in letvar724594 ["offeringType" :content]))) (letvar724594 "scope") (clojure.core/assoc :scope (deserscope (clojure.core/get-in letvar724594 ["scope" :content]))))))

(clojure.core/defn- deser-storage [input] (clojure.core/let [letvar724702 {"S3" (portkey.aws/search-for-tag input "S3" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar724702 "S3") (clojure.core/assoc :s-3 (deser-s-3-storage (clojure.core/get-in letvar724702 ["S3" :content]))))))

(clojure.core/defn- deser-value-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-ip-ranges [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-instance-status-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status-event coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-result-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-modification-result coll))) input))

(clojure.core/defn- deser-vpc-peering-connection-vpc-info [input] (clojure.core/let [letvar724878 {"cidrBlock" (portkey.aws/search-for-tag input "cidrBlock" :flattened? nil :xmlAttribute? nil), "ownerId" (portkey.aws/search-for-tag input "ownerId" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "peeringOptions" (portkey.aws/search-for-tag input "peeringOptions" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar724878 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar724878 ["cidrBlock" :content]))) (letvar724878 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar724878 ["ownerId" :content]))) (letvar724878 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar724878 ["vpcId" :content]))) (letvar724878 "peeringOptions") (clojure.core/assoc :peering-options (deser-vpc-peering-connection-options-description (clojure.core/get-in letvar724878 ["peeringOptions" :content]))))))

(clojure.core/defn- deser-instance-monitoring-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-monitoring coll))) input))

(clojure.core/defn- deser-vpc-peering-connection [input] (clojure.core/let [letvar725003 {"accepterVpcInfo" (portkey.aws/search-for-tag input "accepterVpcInfo" :flattened? nil :xmlAttribute? nil), "expirationTime" (portkey.aws/search-for-tag input "expirationTime" :flattened? nil :xmlAttribute? nil), "requesterVpcInfo" (portkey.aws/search-for-tag input "requesterVpcInfo" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "vpcPeeringConnectionId" (portkey.aws/search-for-tag input "vpcPeeringConnectionId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar725003 "accepterVpcInfo") (clojure.core/assoc :accepter-vpc-info (deser-vpc-peering-connection-vpc-info (clojure.core/get-in letvar725003 ["accepterVpcInfo" :content]))) (letvar725003 "expirationTime") (clojure.core/assoc :expiration-time (deser-date-time (clojure.core/get-in letvar725003 ["expirationTime" :content]))) (letvar725003 "requesterVpcInfo") (clojure.core/assoc :requester-vpc-info (deser-vpc-peering-connection-vpc-info (clojure.core/get-in letvar725003 ["requesterVpcInfo" :content]))) (letvar725003 "status") (clojure.core/assoc :status (deser-vpc-peering-connection-state-reason (clojure.core/get-in letvar725003 ["status" :content]))) (letvar725003 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar725003 ["tagSet" :content]))) (letvar725003 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar725003 ["vpcPeeringConnectionId" :content]))))))

(clojure.core/defn- deser-target-reservation-value-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-target-reservation-value coll))) input))

(clojure.core/defn- deser-image-state [input] (clojure.core/get {"pending" :pending, "available" :available, "invalid" :invalid, "deregistered" :deregistered, "transient" :transient, "failed" :failed, "error" :error} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vpn-state [input] (clojure.core/get {"pending" :pending, "available" :available, "deleting" :deleting, "deleted" :deleted} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-account-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-attribute coll))) input))

(clojure.core/defn- deser-move-status [input] (clojure.core/get {"movingToVpc" :moving-to-vpc, "restoringToClassic" :restoring-to-classic} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-prefix-list-id [input] (clojure.core/let [letvar725160 {"prefixListId" (portkey.aws/search-for-tag input "prefixListId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar725160 "prefixListId") (clojure.core/assoc :prefix-list-id (deser-string (clojure.core/get-in letvar725160 ["prefixListId" :content]))))))

(clojure.core/defn- deser-pricing-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-pricing-detail coll))) input))

(clojure.core/defn- deser-purchase [input] (clojure.core/let [letvar725285 {"hostReservationId" (portkey.aws/search-for-tag input "hostReservationId" :flattened? nil :xmlAttribute? nil), "hostIdSet" (portkey.aws/search-for-tag input "hostIdSet" :flattened? nil :xmlAttribute? nil), "instanceFamily" (portkey.aws/search-for-tag input "instanceFamily" :flattened? nil :xmlAttribute? nil), "paymentOption" (portkey.aws/search-for-tag input "paymentOption" :flattened? nil :xmlAttribute? nil), "upfrontPrice" (portkey.aws/search-for-tag input "upfrontPrice" :flattened? nil :xmlAttribute? nil), "hourlyPrice" (portkey.aws/search-for-tag input "hourlyPrice" :flattened? nil :xmlAttribute? nil), "currencyCode" (portkey.aws/search-for-tag input "currencyCode" :flattened? nil :xmlAttribute? nil), "duration" (portkey.aws/search-for-tag input "duration" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar725285 "hostReservationId") (clojure.core/assoc :host-reservation-id (deser-string (clojure.core/get-in letvar725285 ["hostReservationId" :content]))) (letvar725285 "hostIdSet") (clojure.core/assoc :host-id-set (deser-response-host-id-set (clojure.core/get-in letvar725285 ["hostIdSet" :content]))) (letvar725285 "instanceFamily") (clojure.core/assoc :instance-family (deser-string (clojure.core/get-in letvar725285 ["instanceFamily" :content]))) (letvar725285 "paymentOption") (clojure.core/assoc :payment-option (deser-payment-option (clojure.core/get-in letvar725285 ["paymentOption" :content]))) (letvar725285 "upfrontPrice") (clojure.core/assoc :upfront-price (deser-string (clojure.core/get-in letvar725285 ["upfrontPrice" :content]))) (letvar725285 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar725285 ["hourlyPrice" :content]))) (letvar725285 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar725285 ["currencyCode" :content]))) (letvar725285 "duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar725285 ["duration" :content]))))))

(clojure.core/defn- deser-hypervisor-type [input] (clojure.core/get {"ovm" :ovm, "xen" :xen} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-history-record [input] (clojure.core/let [letvar725398 {"timestamp" (portkey.aws/search-for-tag input "timestamp" :flattened? nil :xmlAttribute? nil), "eventType" (portkey.aws/search-for-tag input "eventType" :flattened? nil :xmlAttribute? nil), "eventInformation" (portkey.aws/search-for-tag input "eventInformation" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:timestamp (deser-date-time (clojure.core/get-in letvar725398 ["timestamp" :content])), :event-type (deser-event-type (clojure.core/get-in letvar725398 ["eventType" :content])), :event-information (deser-event-information (clojure.core/get-in letvar725398 ["eventInformation" :content]))})))

(clojure.core/defn- deser-route-table-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route-table coll))) input))

(clojure.core/defn- deser-architecture-values [input] (clojure.core/get {"i386" :i-386, "x86_64" :x-86-64} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-cancelled-spot-instance-request [input] (clojure.core/let [letvar725528 {"spotInstanceRequestId" (portkey.aws/search-for-tag input "spotInstanceRequestId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar725528 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar725528 ["spotInstanceRequestId" :content]))) (letvar725528 "state") (clojure.core/assoc :state (deser-cancel-spot-instance-request-state (clojure.core/get-in letvar725528 ["state" :content]))))))

(clojure.core/defn- deser-volume-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-attachment coll))) input))

(clojure.core/defn- deser-export-environment [input] (clojure.core/get {"citrix" :citrix, "vmware" :vmware, "microsoft" :microsoft} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-instance-export-details [input] (clojure.core/let [letvar725658 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "targetEnvironment" (portkey.aws/search-for-tag input "targetEnvironment" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar725658 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar725658 ["instanceId" :content]))) (letvar725658 "targetEnvironment") (clojure.core/assoc :target-environment (deser-export-environment (clojure.core/get-in letvar725658 ["targetEnvironment" :content]))))))

(clojure.core/defn- deser-volume-attachment-state [input] (clojure.core/get {"attaching" :attaching, "attached" :attached, "detaching" :detaching, "detached" :detached} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-internet-gateway-attachment [input] (clojure.core/let [letvar725771 {"vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar725771 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar725771 ["vpcId" :content]))) (letvar725771 "state") (clojure.core/assoc :state (deser-attachment-status (clojure.core/get-in letvar725771 ["state" :content]))))))

(clojure.core/defn- deser-instance-monitoring [input] (clojure.core/let [letvar725879 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "monitoring" (portkey.aws/search-for-tag input "monitoring" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar725879 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar725879 ["instanceId" :content]))) (letvar725879 "monitoring") (clojure.core/assoc :monitoring (deser-monitoring (clojure.core/get-in letvar725879 ["monitoring" :content]))))))

(clojure.core/defn- deser-spot-price-history-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-price coll))) input))

(clojure.core/defn- deser-vpn-connection-options [input] (clojure.core/let [letvar726004 {"staticRoutesOnly" (portkey.aws/search-for-tag input "staticRoutesOnly" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726004 "staticRoutesOnly") (clojure.core/assoc :static-routes-only (deser-boolean (clojure.core/get-in letvar726004 ["staticRoutesOnly" :content]))))))

(clojure.core/defn- deser-network-acl-entry [input] (clojure.core/let [letvar726112 {"ruleNumber" (portkey.aws/search-for-tag input "ruleNumber" :flattened? nil :xmlAttribute? nil), "protocol" (portkey.aws/search-for-tag input "protocol" :flattened? nil :xmlAttribute? nil), "ruleAction" (portkey.aws/search-for-tag input "ruleAction" :flattened? nil :xmlAttribute? nil), "egress" (portkey.aws/search-for-tag input "egress" :flattened? nil :xmlAttribute? nil), "cidrBlock" (portkey.aws/search-for-tag input "cidrBlock" :flattened? nil :xmlAttribute? nil), "icmpTypeCode" (portkey.aws/search-for-tag input "icmpTypeCode" :flattened? nil :xmlAttribute? nil), "portRange" (portkey.aws/search-for-tag input "portRange" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726112 "ruleNumber") (clojure.core/assoc :rule-number (deser-integer (clojure.core/get-in letvar726112 ["ruleNumber" :content]))) (letvar726112 "protocol") (clojure.core/assoc :protocol (deser-string (clojure.core/get-in letvar726112 ["protocol" :content]))) (letvar726112 "ruleAction") (clojure.core/assoc :rule-action (deser-rule-action (clojure.core/get-in letvar726112 ["ruleAction" :content]))) (letvar726112 "egress") (clojure.core/assoc :egress (deser-boolean (clojure.core/get-in letvar726112 ["egress" :content]))) (letvar726112 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar726112 ["cidrBlock" :content]))) (letvar726112 "icmpTypeCode") (clojure.core/assoc :icmp-type-code (deser-icmp-type-code (clojure.core/get-in letvar726112 ["icmpTypeCode" :content]))) (letvar726112 "portRange") (clojure.core/assoc :port-range (deser-port-range (clojure.core/get-in letvar726112 ["portRange" :content]))))))

(clojure.core/defn- deser-provisioned-bandwidth [input] (clojure.core/let [letvar726220 {"provisioned" (portkey.aws/search-for-tag input "provisioned" :flattened? nil :xmlAttribute? nil), "requested" (portkey.aws/search-for-tag input "requested" :flattened? nil :xmlAttribute? nil), "requestTime" (portkey.aws/search-for-tag input "requestTime" :flattened? nil :xmlAttribute? nil), "provisionTime" (portkey.aws/search-for-tag input "provisionTime" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726220 "provisioned") (clojure.core/assoc :provisioned (deser-string (clojure.core/get-in letvar726220 ["provisioned" :content]))) (letvar726220 "requested") (clojure.core/assoc :requested (deser-string (clojure.core/get-in letvar726220 ["requested" :content]))) (letvar726220 "requestTime") (clojure.core/assoc :request-time (deser-date-time (clojure.core/get-in letvar726220 ["requestTime" :content]))) (letvar726220 "provisionTime") (clojure.core/assoc :provision-time (deser-date-time (clojure.core/get-in letvar726220 ["provisionTime" :content]))) (letvar726220 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar726220 ["status" :content]))))))

(clojure.core/defn- deser-vgw-telemetry-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vgw-telemetry coll))) input))

(clojure.core/defn- deser-volume-state [input] (clojure.core/get {"creating" :creating, "available" :available, "in-use" :inuse, "deleting" :deleting, "deleted" :deleted, "error" :error} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-spot-placement [input] (clojure.core/let [letvar726350 {"availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "groupName" (portkey.aws/search-for-tag input "groupName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726350 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar726350 ["availabilityZone" :content]))) (letvar726350 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar726350 ["groupName" :content]))))))

(clojure.core/defn- deser-security-group [input] (clojure.core/let [letvar726458 {"ownerId" (portkey.aws/search-for-tag input "ownerId" :flattened? nil :xmlAttribute? nil), "groupName" (portkey.aws/search-for-tag input "groupName" :flattened? nil :xmlAttribute? nil), "groupId" (portkey.aws/search-for-tag input "groupId" :flattened? nil :xmlAttribute? nil), "groupDescription" (portkey.aws/search-for-tag input "groupDescription" :flattened? nil :xmlAttribute? nil), "ipPermissions" (portkey.aws/search-for-tag input "ipPermissions" :flattened? nil :xmlAttribute? nil), "ipPermissionsEgress" (portkey.aws/search-for-tag input "ipPermissionsEgress" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726458 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar726458 ["ownerId" :content]))) (letvar726458 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar726458 ["groupName" :content]))) (letvar726458 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar726458 ["groupId" :content]))) (letvar726458 "groupDescription") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar726458 ["groupDescription" :content]))) (letvar726458 "ipPermissions") (clojure.core/assoc :ip-permissions (deser-ip-permission-list (clojure.core/get-in letvar726458 ["ipPermissions" :content]))) (letvar726458 "ipPermissionsEgress") (clojure.core/assoc :ip-permissions-egress (deser-ip-permission-list (clojure.core/get-in letvar726458 ["ipPermissionsEgress" :content]))) (letvar726458 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar726458 ["vpcId" :content]))) (letvar726458 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar726458 ["tagSet" :content]))))))

(clojure.core/defn- deser-recurring-charges-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-snapshot-detail-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot-detail coll))) input))

(clojure.core/defn- deser-id-format [input] (clojure.core/let [letvar726600 {"resource" (portkey.aws/search-for-tag input "resource" :flattened? nil :xmlAttribute? nil), "useLongIds" (portkey.aws/search-for-tag input "useLongIds" :flattened? nil :xmlAttribute? nil), "deadline" (portkey.aws/search-for-tag input "deadline" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726600 "resource") (clojure.core/assoc :resource (deser-string (clojure.core/get-in letvar726600 ["resource" :content]))) (letvar726600 "useLongIds") (clojure.core/assoc :use-long-ids (deser-boolean (clojure.core/get-in letvar726600 ["useLongIds" :content]))) (letvar726600 "deadline") (clojure.core/assoc :deadline (deser-date-time (clojure.core/get-in letvar726600 ["deadline" :content]))))))

(clojure.core/defn- deser-volume [input] (clojure.core/let [letvar726708 {"tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "kmsKeyId" (portkey.aws/search-for-tag input "kmsKeyId" :flattened? nil :xmlAttribute? nil), "createTime" (portkey.aws/search-for-tag input "createTime" :flattened? nil :xmlAttribute? nil), "encrypted" (portkey.aws/search-for-tag input "encrypted" :flattened? nil :xmlAttribute? nil), "attachmentSet" (portkey.aws/search-for-tag input "attachmentSet" :flattened? nil :xmlAttribute? nil), "iops" (portkey.aws/search-for-tag input "iops" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "volumeType" (portkey.aws/search-for-tag input "volumeType" :flattened? nil :xmlAttribute? nil), "volumeId" (portkey.aws/search-for-tag input "volumeId" :flattened? nil :xmlAttribute? nil), "size" (portkey.aws/search-for-tag input "size" :flattened? nil :xmlAttribute? nil), "snapshotId" (portkey.aws/search-for-tag input "snapshotId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726708 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar726708 ["encrypted" :content]))) (letvar726708 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar726708 ["tagSet" :content]))) (letvar726708 "attachmentSet") (clojure.core/assoc :attachments (deser-volume-attachment-list (clojure.core/get-in letvar726708 ["attachmentSet" :content]))) (letvar726708 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar726708 ["availabilityZone" :content]))) (letvar726708 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar726708 ["kmsKeyId" :content]))) (letvar726708 "size") (clojure.core/assoc :size (deser-integer (clojure.core/get-in letvar726708 ["size" :content]))) (letvar726708 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar726708 ["iops" :content]))) (letvar726708 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar726708 ["volumeType" :content]))) (letvar726708 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar726708 ["volumeId" :content]))) (letvar726708 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar726708 ["createTime" :content]))) (letvar726708 "status") (clojure.core/assoc :state (deser-volume-state (clojure.core/get-in letvar726708 ["status" :content]))) (letvar726708 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar726708 ["snapshotId" :content]))))))

(clojure.core/defn- deser-spot-instance-type [input] (clojure.core/get {"one-time" :onetime, "persistent" :persistent} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-ebs-block-device [input] (clojure.core/let [letvar726821 {"snapshotId" (portkey.aws/search-for-tag input "snapshotId" :flattened? nil :xmlAttribute? nil), "volumeSize" (portkey.aws/search-for-tag input "volumeSize" :flattened? nil :xmlAttribute? nil), "deleteOnTermination" (portkey.aws/search-for-tag input "deleteOnTermination" :flattened? nil :xmlAttribute? nil), "volumeType" (portkey.aws/search-for-tag input "volumeType" :flattened? nil :xmlAttribute? nil), "iops" (portkey.aws/search-for-tag input "iops" :flattened? nil :xmlAttribute? nil), "encrypted" (portkey.aws/search-for-tag input "encrypted" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726821 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar726821 ["snapshotId" :content]))) (letvar726821 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar726821 ["volumeSize" :content]))) (letvar726821 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar726821 ["deleteOnTermination" :content]))) (letvar726821 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar726821 ["volumeType" :content]))) (letvar726821 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar726821 ["iops" :content]))) (letvar726821 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar726821 ["encrypted" :content]))))))

(clojure.core/defn- deser-placement [input] (clojure.core/let [letvar726929 {"availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "groupName" (portkey.aws/search-for-tag input "groupName" :flattened? nil :xmlAttribute? nil), "tenancy" (portkey.aws/search-for-tag input "tenancy" :flattened? nil :xmlAttribute? nil), "hostId" (portkey.aws/search-for-tag input "hostId" :flattened? nil :xmlAttribute? nil), "affinity" (portkey.aws/search-for-tag input "affinity" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar726929 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar726929 ["availabilityZone" :content]))) (letvar726929 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar726929 ["groupName" :content]))) (letvar726929 "tenancy") (clojure.core/assoc :tenancy (deser-tenancy (clojure.core/get-in letvar726929 ["tenancy" :content]))) (letvar726929 "hostId") (clojure.core/assoc :host-id (deser-string (clojure.core/get-in letvar726929 ["hostId" :content]))) (letvar726929 "affinity") (clojure.core/assoc :affinity (deser-string (clojure.core/get-in letvar726929 ["affinity" :content]))))))

(clojure.core/defn- deser-reserved-instances-configuration [input] (clojure.core/let [letvar727037 {"availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "platform" (portkey.aws/search-for-tag input "platform" :flattened? nil :xmlAttribute? nil), "instanceCount" (portkey.aws/search-for-tag input "instanceCount" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "scope" (portkey.aws/search-for-tag input "scope" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727037 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar727037 ["availabilityZone" :content]))) (letvar727037 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar727037 ["platform" :content]))) (letvar727037 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar727037 ["instanceCount" :content]))) (letvar727037 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar727037 ["instanceType" :content]))) (letvar727037 "scope") (clojure.core/assoc :scope (deserscope (clojure.core/get-in letvar727037 ["scope" :content]))))))

(clojure.core/defn- deser-user-bucket-details [input] (clojure.core/let [letvar727145 {"s3Bucket" (portkey.aws/search-for-tag input "s3Bucket" :flattened? nil :xmlAttribute? nil), "s3Key" (portkey.aws/search-for-tag input "s3Key" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727145 "s3Bucket") (clojure.core/assoc :s-3-bucket (deser-string (clojure.core/get-in letvar727145 ["s3Bucket" :content]))) (letvar727145 "s3Key") (clojure.core/assoc :s-3-key (deser-string (clojure.core/get-in letvar727145 ["s3Key" :content]))))))

(clojure.core/defn- deser-occurrence-day-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-integer coll))) input))

(clojure.core/defn- deser-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot coll))) input))

(clojure.core/defn- deser-instance-lifecycle-type [input] (clojure.core/get {"spot" :spot, "scheduled" :scheduled} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-availability-zone-state [input] (clojure.core/get {"available" :available, "information" :information, "impaired" :impaired, "unavailable" :unavailable} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar727297 {"subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "availableIpAddressCount" (portkey.aws/search-for-tag input "availableIpAddressCount" :flattened? nil :xmlAttribute? nil), "cidrBlock" (portkey.aws/search-for-tag input "cidrBlock" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "mapPublicIpOnLaunch" (portkey.aws/search-for-tag input "mapPublicIpOnLaunch" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "defaultForAz" (portkey.aws/search-for-tag input "defaultForAz" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727297 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar727297 ["subnetId" :content]))) (letvar727297 "defaultForAz") (clojure.core/assoc :default-for-az (deser-boolean (clojure.core/get-in letvar727297 ["defaultForAz" :content]))) (letvar727297 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar727297 ["tagSet" :content]))) (letvar727297 "availableIpAddressCount") (clojure.core/assoc :available-ip-address-count (deser-integer (clojure.core/get-in letvar727297 ["availableIpAddressCount" :content]))) (letvar727297 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar727297 ["availabilityZone" :content]))) (letvar727297 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar727297 ["cidrBlock" :content]))) (letvar727297 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar727297 ["vpcId" :content]))) (letvar727297 "state") (clojure.core/assoc :state (deser-subnet-state (clojure.core/get-in letvar727297 ["state" :content]))) (letvar727297 "mapPublicIpOnLaunch") (clojure.core/assoc :map-public-ip-on-launch (deser-boolean (clojure.core/get-in letvar727297 ["mapPublicIpOnLaunch" :content]))))))

(clojure.core/defn- deser-dhcp-configuration-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-dhcp-configuration coll))) input))

(clojure.core/defn- deser-spot-datafeed-subscription [input] (clojure.core/let [letvar727422 {"ownerId" (portkey.aws/search-for-tag input "ownerId" :flattened? nil :xmlAttribute? nil), "bucket" (portkey.aws/search-for-tag input "bucket" :flattened? nil :xmlAttribute? nil), "prefix" (portkey.aws/search-for-tag input "prefix" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "fault" (portkey.aws/search-for-tag input "fault" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727422 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar727422 ["ownerId" :content]))) (letvar727422 "bucket") (clojure.core/assoc :bucket (deser-string (clojure.core/get-in letvar727422 ["bucket" :content]))) (letvar727422 "prefix") (clojure.core/assoc :prefix (deser-string (clojure.core/get-in letvar727422 ["prefix" :content]))) (letvar727422 "state") (clojure.core/assoc :state (deser-datafeed-subscription-state (clojure.core/get-in letvar727422 ["state" :content]))) (letvar727422 "fault") (clojure.core/assoc :fault (deser-spot-instance-state-fault (clojure.core/get-in letvar727422 ["fault" :content]))))))

(clojure.core/defn- deser-instance-count [input] (clojure.core/let [letvar727530 {"state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "instanceCount" (portkey.aws/search-for-tag input "instanceCount" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727530 "state") (clojure.core/assoc :state (deser-listing-state (clojure.core/get-in letvar727530 ["state" :content]))) (letvar727530 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar727530 ["instanceCount" :content]))))))

(clojure.core/defn- deser-host-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host-instance coll))) input))

(clojure.core/defn- deser-import-instance-volume-detail-item [input] (clojure.core/let [letvar727655 {"bytesConverted" (portkey.aws/search-for-tag input "bytesConverted" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "image" (portkey.aws/search-for-tag input "image" :flattened? nil :xmlAttribute? nil), "volume" (portkey.aws/search-for-tag input "volume" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:bytes-converted (deser-long (clojure.core/get-in letvar727655 ["bytesConverted" :content])), :availability-zone (deser-string (clojure.core/get-in letvar727655 ["availabilityZone" :content])), :image (deser-disk-image-description (clojure.core/get-in letvar727655 ["image" :content])), :volume (deser-disk-image-volume-description (clojure.core/get-in letvar727655 ["volume" :content])), :status (deser-string (clojure.core/get-in letvar727655 ["status" :content]))} (letvar727655 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar727655 ["statusMessage" :content]))) (letvar727655 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar727655 ["description" :content]))))))

(clojure.core/defn- deser-tenancy [input] (clojure.core/get {"default" :default, "dedicated" :dedicated, "host" :host} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-instance-network-interface-attachment [input] (clojure.core/let [letvar727768 {"attachmentId" (portkey.aws/search-for-tag input "attachmentId" :flattened? nil :xmlAttribute? nil), "deviceIndex" (portkey.aws/search-for-tag input "deviceIndex" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "attachTime" (portkey.aws/search-for-tag input "attachTime" :flattened? nil :xmlAttribute? nil), "deleteOnTermination" (portkey.aws/search-for-tag input "deleteOnTermination" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727768 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar727768 ["attachmentId" :content]))) (letvar727768 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar727768 ["deviceIndex" :content]))) (letvar727768 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar727768 ["status" :content]))) (letvar727768 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar727768 ["attachTime" :content]))) (letvar727768 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar727768 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-snapshot-detail [input] (clojure.core/let [letvar727876 {"progress" (portkey.aws/search-for-tag input "progress" :flattened? nil :xmlAttribute? nil), "url" (portkey.aws/search-for-tag input "url" :flattened? nil :xmlAttribute? nil), "deviceName" (portkey.aws/search-for-tag input "deviceName" :flattened? nil :xmlAttribute? nil), "userBucket" (portkey.aws/search-for-tag input "userBucket" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "diskImageSize" (portkey.aws/search-for-tag input "diskImageSize" :flattened? nil :xmlAttribute? nil), "snapshotId" (portkey.aws/search-for-tag input "snapshotId" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "format" (portkey.aws/search-for-tag input "format" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727876 "diskImageSize") (clojure.core/assoc :disk-image-size (deser-double (clojure.core/get-in letvar727876 ["diskImageSize" :content]))) (letvar727876 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar727876 ["statusMessage" :content]))) (letvar727876 "format") (clojure.core/assoc :format (deser-string (clojure.core/get-in letvar727876 ["format" :content]))) (letvar727876 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar727876 ["status" :content]))) (letvar727876 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar727876 ["progress" :content]))) (letvar727876 "url") (clojure.core/assoc :url (deser-string (clojure.core/get-in letvar727876 ["url" :content]))) (letvar727876 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar727876 ["description" :content]))) (letvar727876 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar727876 ["deviceName" :content]))) (letvar727876 "userBucket") (clojure.core/assoc :user-bucket (deser-user-bucket-details (clojure.core/get-in letvar727876 ["userBucket" :content]))) (letvar727876 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar727876 ["snapshotId" :content]))))))

(clojure.core/defn- deser-spot-instance-state-fault [input] (clojure.core/let [letvar727984 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar727984 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar727984 ["code" :content]))) (letvar727984 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar727984 ["message" :content]))))))

(clojure.core/defn- deser-dhcp-configuration-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-attribute-value coll))) input))

(clojure.core/defn- deser-instance-network-interface-association [input] (clojure.core/let [letvar728109 {"publicIp" (portkey.aws/search-for-tag input "publicIp" :flattened? nil :xmlAttribute? nil), "publicDnsName" (portkey.aws/search-for-tag input "publicDnsName" :flattened? nil :xmlAttribute? nil), "ipOwnerId" (portkey.aws/search-for-tag input "ipOwnerId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar728109 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar728109 ["publicIp" :content]))) (letvar728109 "publicDnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar728109 ["publicDnsName" :content]))) (letvar728109 "ipOwnerId") (clojure.core/assoc :ip-owner-id (deser-string (clojure.core/get-in letvar728109 ["ipOwnerId" :content]))))))

(clojure.core/defn- deser-bundle-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-bundle-task coll))) input))

(clojure.core/defn- deser-disk-image-volume-description [input] (clojure.core/let [letvar728234 {"size" (portkey.aws/search-for-tag input "size" :flattened? nil :xmlAttribute? nil), "id" (portkey.aws/search-for-tag input "id" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:id (deser-string (clojure.core/get-in letvar728234 ["id" :content]))} (letvar728234 "size") (clojure.core/assoc :size (deser-long (clojure.core/get-in letvar728234 ["size" :content]))))))

(clojure.core/defn- deser-host-properties [input] (clojure.core/let [letvar728342 {"sockets" (portkey.aws/search-for-tag input "sockets" :flattened? nil :xmlAttribute? nil), "cores" (portkey.aws/search-for-tag input "cores" :flattened? nil :xmlAttribute? nil), "totalVCpus" (portkey.aws/search-for-tag input "totalVCpus" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar728342 "sockets") (clojure.core/assoc :sockets (deser-integer (clojure.core/get-in letvar728342 ["sockets" :content]))) (letvar728342 "cores") (clojure.core/assoc :cores (deser-integer (clojure.core/get-in letvar728342 ["cores" :content]))) (letvar728342 "totalVCpus") (clojure.core/assoc :total-v-cpus (deser-integer (clojure.core/get-in letvar728342 ["totalVCpus" :content]))) (letvar728342 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar728342 ["instanceType" :content]))))))

(clojure.core/defn- deser-scheduled-instance [input] (clojure.core/let [letvar728450 {"previousSlotEndTime" (portkey.aws/search-for-tag input "previousSlotEndTime" :flattened? nil :xmlAttribute? nil), "createDate" (portkey.aws/search-for-tag input "createDate" :flattened? nil :xmlAttribute? nil), "instanceCount" (portkey.aws/search-for-tag input "instanceCount" :flattened? nil :xmlAttribute? nil), "termStartDate" (portkey.aws/search-for-tag input "termStartDate" :flattened? nil :xmlAttribute? nil), "networkPlatform" (portkey.aws/search-for-tag input "networkPlatform" :flattened? nil :xmlAttribute? nil), "hourlyPrice" (portkey.aws/search-for-tag input "hourlyPrice" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "recurrence" (portkey.aws/search-for-tag input "recurrence" :flattened? nil :xmlAttribute? nil), "totalScheduledInstanceHours" (portkey.aws/search-for-tag input "totalScheduledInstanceHours" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "slotDurationInHours" (portkey.aws/search-for-tag input "slotDurationInHours" :flattened? nil :xmlAttribute? nil), "scheduledInstanceId" (portkey.aws/search-for-tag input "scheduledInstanceId" :flattened? nil :xmlAttribute? nil), "platform" (portkey.aws/search-for-tag input "platform" :flattened? nil :xmlAttribute? nil), "termEndDate" (portkey.aws/search-for-tag input "termEndDate" :flattened? nil :xmlAttribute? nil), "nextSlotStartTime" (portkey.aws/search-for-tag input "nextSlotStartTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar728450 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar728450 ["platform" :content]))) (letvar728450 "termEndDate") (clojure.core/assoc :term-end-date (deser-date-time (clojure.core/get-in letvar728450 ["termEndDate" :content]))) (letvar728450 "networkPlatform") (clojure.core/assoc :network-platform (deser-string (clojure.core/get-in letvar728450 ["networkPlatform" :content]))) (letvar728450 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar728450 ["instanceCount" :content]))) (letvar728450 "recurrence") (clojure.core/assoc :recurrence (deser-scheduled-instance-recurrence (clojure.core/get-in letvar728450 ["recurrence" :content]))) (letvar728450 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar728450 ["createDate" :content]))) (letvar728450 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar728450 ["instanceType" :content]))) (letvar728450 "nextSlotStartTime") (clojure.core/assoc :next-slot-start-time (deser-date-time (clojure.core/get-in letvar728450 ["nextSlotStartTime" :content]))) (letvar728450 "totalScheduledInstanceHours") (clojure.core/assoc :total-scheduled-instance-hours (deser-integer (clojure.core/get-in letvar728450 ["totalScheduledInstanceHours" :content]))) (letvar728450 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar728450 ["availabilityZone" :content]))) (letvar728450 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar728450 ["hourlyPrice" :content]))) (letvar728450 "slotDurationInHours") (clojure.core/assoc :slot-duration-in-hours (deser-integer (clojure.core/get-in letvar728450 ["slotDurationInHours" :content]))) (letvar728450 "previousSlotEndTime") (clojure.core/assoc :previous-slot-end-time (deser-date-time (clojure.core/get-in letvar728450 ["previousSlotEndTime" :content]))) (letvar728450 "scheduledInstanceId") (clojure.core/assoc :scheduled-instance-id (deser-string (clojure.core/get-in letvar728450 ["scheduledInstanceId" :content]))) (letvar728450 "termStartDate") (clojure.core/assoc :term-start-date (deser-date-time (clojure.core/get-in letvar728450 ["termStartDate" :content]))))))

(clojure.core/defn- deser-active-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-active-instance coll))) input))

(clojure.core/defn- deser-instance-type [input] (clojure.core/get {"m1.large" :m-1large, "cc1.4xlarge" :cc-14xlarge, "c1.medium" :c-1medium, "r3.8xlarge" :r-38xlarge, "d2.xlarge" :d-2xlarge, "m3.2xlarge" :m-32xlarge, "i2.8xlarge" :i-28xlarge, "g2.2xlarge" :g-22xlarge, "c3.8xlarge" :c-38xlarge, "t2.large" :t-2large, "p2.16xlarge" :p-216xlarge, "m1.xlarge" :m-1xlarge, "d2.8xlarge" :d-28xlarge, "m4.4xlarge" :m-44xlarge, "cr1.8xlarge" :cr-18xlarge, "t1.micro" :t-1micro, "c3.2xlarge" :c-32xlarge, "g2.8xlarge" :g-28xlarge, "c4.8xlarge" :c-48xlarge, "m2.xlarge" :m-2xlarge, "m1.small" :m-1small, "i2.4xlarge" :i-24xlarge, "c3.4xlarge" :c-34xlarge, "t2.micro" :t-2micro, "d2.2xlarge" :d-22xlarge, "x1.32xlarge" :x-132xlarge, "m4.2xlarge" :m-42xlarge, "m4.10xlarge" :m-410xlarge, "m1.medium" :m-1medium, "c4.4xlarge" :c-44xlarge, "hi1.4xlarge" :hi-14xlarge, "r3.xlarge" :r-3xlarge, "c4.2xlarge" :c-42xlarge, "t2.small" :t-2small, "m3.xlarge" :m-3xlarge, "r3.2xlarge" :r-32xlarge, "cg1.4xlarge" :cg-14xlarge, "r3.4xlarge" :r-34xlarge, "c4.xlarge" :c-4xlarge, "m2.2xlarge" :m-22xlarge, "p2.8xlarge" :p-28xlarge, "x1.16xlarge" :x-116xlarge, "m4.large" :m-4large, "m4.16xlarge" :m-416xlarge, "r3.large" :r-3large, "d2.4xlarge" :d-24xlarge, "c4.large" :c-4large, "m4.xlarge" :m-4xlarge, "i2.2xlarge" :i-22xlarge, "t2.nano" :t-2nano, "m2.4xlarge" :m-24xlarge, "c3.xlarge" :c-3xlarge, "p2.xlarge" :p-2xlarge, "t2.medium" :t-2medium, "c3.large" :c-3large, "m3.medium" :m-3medium, "i2.xlarge" :i-2xlarge, "cc2.8xlarge" :cc-28xlarge, "hs1.8xlarge" :hs-18xlarge, "m3.large" :m-3large, "c1.xlarge" :c-1xlarge} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-route-state [input] (clojure.core/get {"active" :active, "blackhole" :blackhole} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-subnet-state [input] (clojure.core/get {"pending" :pending, "available" :available} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-stale-ip-permission-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stale-ip-permission coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-result [input] (clojure.core/let [letvar728607 {"reservedInstancesId" (portkey.aws/search-for-tag input "reservedInstancesId" :flattened? nil :xmlAttribute? nil), "targetConfiguration" (portkey.aws/search-for-tag input "targetConfiguration" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar728607 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar728607 ["reservedInstancesId" :content]))) (letvar728607 "targetConfiguration") (clojure.core/assoc :target-configuration (deser-reserved-instances-configuration (clojure.core/get-in letvar728607 ["targetConfiguration" :content]))))))

(clojure.core/defn- deser-import-instance-task-details [input] (clojure.core/let [letvar728715 {"volumes" (portkey.aws/search-for-tag input "volumes" :flattened? nil :xmlAttribute? nil), "instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "platform" (portkey.aws/search-for-tag input "platform" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:volumes (deser-import-instance-volume-detail-set (clojure.core/get-in letvar728715 ["volumes" :content]))} (letvar728715 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar728715 ["instanceId" :content]))) (letvar728715 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar728715 ["platform" :content]))) (letvar728715 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar728715 ["description" :content]))))))

(clojure.core/defn- deser-create-volume-permission [input] (clojure.core/let [letvar728823 {"userId" (portkey.aws/search-for-tag input "userId" :flattened? nil :xmlAttribute? nil), "group" (portkey.aws/search-for-tag input "group" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar728823 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar728823 ["userId" :content]))) (letvar728823 "group") (clojure.core/assoc :group (deser-permission-group (clojure.core/get-in letvar728823 ["group" :content]))))))

(clojure.core/defn- deser-instance-status-details [input] (clojure.core/let [letvar728931 {"name" (portkey.aws/search-for-tag input "name" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "impairedSince" (portkey.aws/search-for-tag input "impairedSince" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar728931 "name") (clojure.core/assoc :name (deser-status-name (clojure.core/get-in letvar728931 ["name" :content]))) (letvar728931 "status") (clojure.core/assoc :status (deser-status-type (clojure.core/get-in letvar728931 ["status" :content]))) (letvar728931 "impairedSince") (clojure.core/assoc :impaired-since (deser-date-time (clojure.core/get-in letvar728931 ["impairedSince" :content]))))))

(clojure.core/defn- deser-iam-instance-profile-specification [input] (clojure.core/let [letvar729039 {"arn" (portkey.aws/search-for-tag input "arn" :flattened? nil :xmlAttribute? nil), "name" (portkey.aws/search-for-tag input "name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar729039 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar729039 ["arn" :content]))) (letvar729039 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar729039 ["name" :content]))))))

(clojure.core/defn- deser-spot-instance-request-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-instance-request coll))) input))

(clojure.core/defn- deser-region-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-region coll))) input))

(clojure.core/defn- deser-response-host-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-disk-image-description [input] (clojure.core/let [letvar729198 {"format" (portkey.aws/search-for-tag input "format" :flattened? nil :xmlAttribute? nil), "size" (portkey.aws/search-for-tag input "size" :flattened? nil :xmlAttribute? nil), "importManifestUrl" (portkey.aws/search-for-tag input "importManifestUrl" :flattened? nil :xmlAttribute? nil), "checksum" (portkey.aws/search-for-tag input "checksum" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:format (deser-disk-image-format (clojure.core/get-in letvar729198 ["format" :content])), :size (deser-long (clojure.core/get-in letvar729198 ["size" :content])), :import-manifest-url (deser-string (clojure.core/get-in letvar729198 ["importManifestUrl" :content]))} (letvar729198 "checksum") (clojure.core/assoc :checksum (deser-string (clojure.core/get-in letvar729198 ["checksum" :content]))))))

(clojure.core/defn- deser-available-capacity [input] (clojure.core/let [letvar729306 {"availableInstanceCapacity" (portkey.aws/search-for-tag input "availableInstanceCapacity" :flattened? nil :xmlAttribute? nil), "availableVCpus" (portkey.aws/search-for-tag input "availableVCpus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar729306 "availableInstanceCapacity") (clojure.core/assoc :available-instance-capacity (deser-available-instance-capacity-list (clojure.core/get-in letvar729306 ["availableInstanceCapacity" :content]))) (letvar729306 "availableVCpus") (clojure.core/assoc :available-v-cpus (deser-integer (clojure.core/get-in letvar729306 ["availableVCpus" :content]))))))

(clojure.core/defn- deser-bundle-task-state [input] (clojure.core/get {"pending" :pending, "waiting-for-shutdown" :waitingforshutdown, "bundling" :bundling, "storing" :storing, "cancelling" :cancelling, "complete" :complete, "failed" :failed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-icmp-type-code [input] (clojure.core/let [letvar729419 {"type" (portkey.aws/search-for-tag input "type" :flattened? nil :xmlAttribute? nil), "code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar729419 "type") (clojure.core/assoc :type (deser-integer (clojure.core/get-in letvar729419 ["type" :content]))) (letvar729419 "code") (clojure.core/assoc :code (deser-integer (clojure.core/get-in letvar729419 ["code" :content]))))))

(clojure.core/defn- deser-instance-private-ip-address [input] (clojure.core/let [letvar729527 {"privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil), "privateDnsName" (portkey.aws/search-for-tag input "privateDnsName" :flattened? nil :xmlAttribute? nil), "primary" (portkey.aws/search-for-tag input "primary" :flattened? nil :xmlAttribute? nil), "association" (portkey.aws/search-for-tag input "association" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar729527 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar729527 ["privateIpAddress" :content]))) (letvar729527 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar729527 ["privateDnsName" :content]))) (letvar729527 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar729527 ["primary" :content]))) (letvar729527 "association") (clojure.core/assoc :association (deser-instance-network-interface-association (clojure.core/get-in letvar729527 ["association" :content]))))))

(clojure.core/defn- deser-reserved-instances-listing-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-listing coll))) input))

(clojure.core/defn- deser-vpc-classic-link [input] (clojure.core/let [letvar729652 {"vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "classicLinkEnabled" (portkey.aws/search-for-tag input "classicLinkEnabled" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar729652 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar729652 ["vpcId" :content]))) (letvar729652 "classicLinkEnabled") (clojure.core/assoc :classic-link-enabled (deser-boolean (clojure.core/get-in letvar729652 ["classicLinkEnabled" :content]))) (letvar729652 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar729652 ["tagSet" :content]))))))

(clojure.core/defn- deser-snapshot-task-detail [input] (clojure.core/let [letvar729760 {"progress" (portkey.aws/search-for-tag input "progress" :flattened? nil :xmlAttribute? nil), "url" (portkey.aws/search-for-tag input "url" :flattened? nil :xmlAttribute? nil), "userBucket" (portkey.aws/search-for-tag input "userBucket" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "diskImageSize" (portkey.aws/search-for-tag input "diskImageSize" :flattened? nil :xmlAttribute? nil), "snapshotId" (portkey.aws/search-for-tag input "snapshotId" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "format" (portkey.aws/search-for-tag input "format" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar729760 "diskImageSize") (clojure.core/assoc :disk-image-size (deser-double (clojure.core/get-in letvar729760 ["diskImageSize" :content]))) (letvar729760 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar729760 ["statusMessage" :content]))) (letvar729760 "format") (clojure.core/assoc :format (deser-string (clojure.core/get-in letvar729760 ["format" :content]))) (letvar729760 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar729760 ["status" :content]))) (letvar729760 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar729760 ["progress" :content]))) (letvar729760 "url") (clojure.core/assoc :url (deser-string (clojure.core/get-in letvar729760 ["url" :content]))) (letvar729760 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar729760 ["description" :content]))) (letvar729760 "userBucket") (clojure.core/assoc :user-bucket (deser-user-bucket-details (clojure.core/get-in letvar729760 ["userBucket" :content]))) (letvar729760 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar729760 ["snapshotId" :content]))))))

(clojure.core/defn- deser-launch-specification [input] (clojure.core/let [letvar729868 {"groupSet" (portkey.aws/search-for-tag input "groupSet" :flattened? nil :xmlAttribute? nil), "ramdiskId" (portkey.aws/search-for-tag input "ramdiskId" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "addressingType" (portkey.aws/search-for-tag input "addressingType" :flattened? nil :xmlAttribute? nil), "blockDeviceMapping" (portkey.aws/search-for-tag input "blockDeviceMapping" :flattened? nil :xmlAttribute? nil), "keyName" (portkey.aws/search-for-tag input "keyName" :flattened? nil :xmlAttribute? nil), "placement" (portkey.aws/search-for-tag input "placement" :flattened? nil :xmlAttribute? nil), "monitoring" (portkey.aws/search-for-tag input "monitoring" :flattened? nil :xmlAttribute? nil), "iamInstanceProfile" (portkey.aws/search-for-tag input "iamInstanceProfile" :flattened? nil :xmlAttribute? nil), "userData" (portkey.aws/search-for-tag input "userData" :flattened? nil :xmlAttribute? nil), "imageId" (portkey.aws/search-for-tag input "imageId" :flattened? nil :xmlAttribute? nil), "ebsOptimized" (portkey.aws/search-for-tag input "ebsOptimized" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "kernelId" (portkey.aws/search-for-tag input "kernelId" :flattened? nil :xmlAttribute? nil), "networkInterfaceSet" (portkey.aws/search-for-tag input "networkInterfaceSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar729868 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar729868 ["kernelId" :content]))) (letvar729868 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar729868 ["imageId" :content]))) (letvar729868 "placement") (clojure.core/assoc :placement (deser-spot-placement (clojure.core/get-in letvar729868 ["placement" :content]))) (letvar729868 "addressingType") (clojure.core/assoc :addressing-type (deser-string (clojure.core/get-in letvar729868 ["addressingType" :content]))) (letvar729868 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar729868 ["subnetId" :content]))) (letvar729868 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar729868 ["groupSet" :content]))) (letvar729868 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar729868 ["ebsOptimized" :content]))) (letvar729868 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar729868 ["instanceType" :content]))) (letvar729868 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar729868 ["keyName" :content]))) (letvar729868 "monitoring") (clojure.core/assoc :monitoring (deser-run-instances-monitoring-enabled (clojure.core/get-in letvar729868 ["monitoring" :content]))) (letvar729868 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar729868 ["blockDeviceMapping" :content]))) (letvar729868 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar729868 ["ramdiskId" :content]))) (letvar729868 "userData") (clojure.core/assoc :user-data (deser-string (clojure.core/get-in letvar729868 ["userData" :content]))) (letvar729868 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile-specification (clojure.core/get-in letvar729868 ["iamInstanceProfile" :content]))) (letvar729868 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-specification-list (clojure.core/get-in letvar729868 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-id-format-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-id-format coll))) input))

(clojure.core/defn- deser-prefix-list-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-prefix-list coll))) input))

(clojure.core/defn- deser-attribute-boolean-value [input] (clojure.core/let [letvar730010 {"value" (portkey.aws/search-for-tag input "value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar730010 "value") (clojure.core/assoc :value (deser-boolean (clojure.core/get-in letvar730010 ["value" :content]))))))

(clojure.core/defn- deser-spot-instance-request [input] (clojure.core/let [letvar730118 {"validFrom" (portkey.aws/search-for-tag input "validFrom" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "spotInstanceRequestId" (portkey.aws/search-for-tag input "spotInstanceRequestId" :flattened? nil :xmlAttribute? nil), "launchGroup" (portkey.aws/search-for-tag input "launchGroup" :flattened? nil :xmlAttribute? nil), "blockDurationMinutes" (portkey.aws/search-for-tag input "blockDurationMinutes" :flattened? nil :xmlAttribute? nil), "createTime" (portkey.aws/search-for-tag input "createTime" :flattened? nil :xmlAttribute? nil), "spotPrice" (portkey.aws/search-for-tag input "spotPrice" :flattened? nil :xmlAttribute? nil), "launchedAvailabilityZone" (portkey.aws/search-for-tag input "launchedAvailabilityZone" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "actualBlockHourlyPrice" (portkey.aws/search-for-tag input "actualBlockHourlyPrice" :flattened? nil :xmlAttribute? nil), "type" (portkey.aws/search-for-tag input "type" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "productDescription" (portkey.aws/search-for-tag input "productDescription" :flattened? nil :xmlAttribute? nil), "validUntil" (portkey.aws/search-for-tag input "validUntil" :flattened? nil :xmlAttribute? nil), "availabilityZoneGroup" (portkey.aws/search-for-tag input "availabilityZoneGroup" :flattened? nil :xmlAttribute? nil), "fault" (portkey.aws/search-for-tag input "fault" :flattened? nil :xmlAttribute? nil), "instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "launchSpecification" (portkey.aws/search-for-tag input "launchSpecification" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar730118 "availabilityZoneGroup") (clojure.core/assoc :availability-zone-group (deser-string (clojure.core/get-in letvar730118 ["availabilityZoneGroup" :content]))) (letvar730118 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar730118 ["spotInstanceRequestId" :content]))) (letvar730118 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar730118 ["instanceId" :content]))) (letvar730118 "type") (clojure.core/assoc :type (deser-spot-instance-type (clojure.core/get-in letvar730118 ["type" :content]))) (letvar730118 "actualBlockHourlyPrice") (clojure.core/assoc :actual-block-hourly-price (deser-string (clojure.core/get-in letvar730118 ["actualBlockHourlyPrice" :content]))) (letvar730118 "blockDurationMinutes") (clojure.core/assoc :block-duration-minutes (deser-integer (clojure.core/get-in letvar730118 ["blockDurationMinutes" :content]))) (letvar730118 "validFrom") (clojure.core/assoc :valid-from (deser-date-time (clojure.core/get-in letvar730118 ["validFrom" :content]))) (letvar730118 "launchSpecification") (clojure.core/assoc :launch-specification (deser-launch-specification (clojure.core/get-in letvar730118 ["launchSpecification" :content]))) (letvar730118 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar730118 ["tagSet" :content]))) (letvar730118 "status") (clojure.core/assoc :status (deser-spot-instance-status (clojure.core/get-in letvar730118 ["status" :content]))) (letvar730118 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar730118 ["spotPrice" :content]))) (letvar730118 "launchedAvailabilityZone") (clojure.core/assoc :launched-availability-zone (deser-string (clojure.core/get-in letvar730118 ["launchedAvailabilityZone" :content]))) (letvar730118 "launchGroup") (clojure.core/assoc :launch-group (deser-string (clojure.core/get-in letvar730118 ["launchGroup" :content]))) (letvar730118 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar730118 ["productDescription" :content]))) (letvar730118 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar730118 ["createTime" :content]))) (letvar730118 "fault") (clojure.core/assoc :fault (deser-spot-instance-state-fault (clojure.core/get-in letvar730118 ["fault" :content]))) (letvar730118 "state") (clojure.core/assoc :state (deser-spot-instance-state (clojure.core/get-in letvar730118 ["state" :content]))) (letvar730118 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar730118 ["validUntil" :content]))))))

(clojure.core/defn- deser-rule-action [input] (clojure.core/get {"allow" :allow, "deny" :deny} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vpc-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-attachment coll))) input))

(clojure.core/defn- deser-vpn-static-route [input] (clojure.core/let [letvar730248 {"destinationCidrBlock" (portkey.aws/search-for-tag input "destinationCidrBlock" :flattened? nil :xmlAttribute? nil), "source" (portkey.aws/search-for-tag input "source" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar730248 "destinationCidrBlock") (clojure.core/assoc :destination-cidr-block (deser-string (clojure.core/get-in letvar730248 ["destinationCidrBlock" :content]))) (letvar730248 "source") (clojure.core/assoc :source (deser-vpn-static-route-source (clojure.core/get-in letvar730248 ["source" :content]))) (letvar730248 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar730248 ["state" :content]))))))

(clojure.core/defn- deser-fleet-type [input] (clojure.core/get {"request" :request, "maintain" :maintain} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vpc-endpoint [input] (clojure.core/let [letvar730361 {"vpcEndpointId" (portkey.aws/search-for-tag input "vpcEndpointId" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "serviceName" (portkey.aws/search-for-tag input "serviceName" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "policyDocument" (portkey.aws/search-for-tag input "policyDocument" :flattened? nil :xmlAttribute? nil), "routeTableIdSet" (portkey.aws/search-for-tag input "routeTableIdSet" :flattened? nil :xmlAttribute? nil), "creationTimestamp" (portkey.aws/search-for-tag input "creationTimestamp" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar730361 "vpcEndpointId") (clojure.core/assoc :vpc-endpoint-id (deser-string (clojure.core/get-in letvar730361 ["vpcEndpointId" :content]))) (letvar730361 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar730361 ["vpcId" :content]))) (letvar730361 "serviceName") (clojure.core/assoc :service-name (deser-string (clojure.core/get-in letvar730361 ["serviceName" :content]))) (letvar730361 "state") (clojure.core/assoc :state (deser-state (clojure.core/get-in letvar730361 ["state" :content]))) (letvar730361 "policyDocument") (clojure.core/assoc :policy-document (deser-string (clojure.core/get-in letvar730361 ["policyDocument" :content]))) (letvar730361 "routeTableIdSet") (clojure.core/assoc :route-table-ids (deser-value-string-list (clojure.core/get-in letvar730361 ["routeTableIdSet" :content]))) (letvar730361 "creationTimestamp") (clojure.core/assoc :creation-timestamp (deser-date-time (clojure.core/get-in letvar730361 ["creationTimestamp" :content]))))))

(clojure.core/defn- deser-key-pair-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-key-pair-info coll))) input))

(clojure.core/defn- deser-purchased-scheduled-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance coll))) input))

(clojure.core/defn- deser-group-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-group-identifier coll))) input))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error-item [input] (clojure.core/let [letvar730520 {"spotFleetRequestId" (portkey.aws/search-for-tag input "spotFleetRequestId" :flattened? nil :xmlAttribute? nil), "error" (portkey.aws/search-for-tag input "error" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar730520 ["spotFleetRequestId" :content])), :error (deser-cancel-spot-fleet-requests-error (clojure.core/get-in letvar730520 ["error" :content]))})))

(clojure.core/defn- deser-payment-option [input] (clojure.core/get {"AllUpfront" :all-upfront, "PartialUpfront" :partial-upfront, "NoUpfront" :no-upfront} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-instance-status-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status-details coll))) input))

(clojure.core/defn- deser-key-pair-info [input] (clojure.core/let [letvar730650 {"keyName" (portkey.aws/search-for-tag input "keyName" :flattened? nil :xmlAttribute? nil), "keyFingerprint" (portkey.aws/search-for-tag input "keyFingerprint" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar730650 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar730650 ["keyName" :content]))) (letvar730650 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar730650 ["keyFingerprint" :content]))))))

(clojure.core/defn- deser-instance-network-interface [input] (clojure.core/let [letvar730758 {"groupSet" (portkey.aws/search-for-tag input "groupSet" :flattened? nil :xmlAttribute? nil), "association" (portkey.aws/search-for-tag input "association" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "privateIpAddressesSet" (portkey.aws/search-for-tag input "privateIpAddressesSet" :flattened? nil :xmlAttribute? nil), "privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "privateDnsName" (portkey.aws/search-for-tag input "privateDnsName" :flattened? nil :xmlAttribute? nil), "macAddress" (portkey.aws/search-for-tag input "macAddress" :flattened? nil :xmlAttribute? nil), "attachment" (portkey.aws/search-for-tag input "attachment" :flattened? nil :xmlAttribute? nil), "sourceDestCheck" (portkey.aws/search-for-tag input "sourceDestCheck" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "networkInterfaceId" (portkey.aws/search-for-tag input "networkInterfaceId" :flattened? nil :xmlAttribute? nil), "ownerId" (portkey.aws/search-for-tag input "ownerId" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar730758 "attachment") (clojure.core/assoc :attachment (deser-instance-network-interface-attachment (clojure.core/get-in letvar730758 ["attachment" :content]))) (letvar730758 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar730758 ["subnetId" :content]))) (letvar730758 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar730758 ["ownerId" :content]))) (letvar730758 "macAddress") (clojure.core/assoc :mac-address (deser-string (clojure.core/get-in letvar730758 ["macAddress" :content]))) (letvar730758 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar730758 ["networkInterfaceId" :content]))) (letvar730758 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar730758 ["sourceDestCheck" :content]))) (letvar730758 "status") (clojure.core/assoc :status (deser-network-interface-status (clojure.core/get-in letvar730758 ["status" :content]))) (letvar730758 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar730758 ["privateDnsName" :content]))) (letvar730758 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar730758 ["description" :content]))) (letvar730758 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar730758 ["vpcId" :content]))) (letvar730758 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar730758 ["groupSet" :content]))) (letvar730758 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-instance-private-ip-address-list (clojure.core/get-in letvar730758 ["privateIpAddressesSet" :content]))) (letvar730758 "association") (clojure.core/assoc :association (deser-instance-network-interface-association (clojure.core/get-in letvar730758 ["association" :content]))) (letvar730758 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar730758 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error [input] (clojure.core/let [letvar730866 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:code (deser-cancel-batch-error-code (clojure.core/get-in letvar730866 ["code" :content])), :message (deser-string (clojure.core/get-in letvar730866 ["message" :content]))})))

(clojure.core/defn- deser-vpn-static-route-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-static-route coll))) input))

(clojure.core/defn- deser-reservation [input] (clojure.core/let [letvar730991 {"reservationId" (portkey.aws/search-for-tag input "reservationId" :flattened? nil :xmlAttribute? nil), "ownerId" (portkey.aws/search-for-tag input "ownerId" :flattened? nil :xmlAttribute? nil), "requesterId" (portkey.aws/search-for-tag input "requesterId" :flattened? nil :xmlAttribute? nil), "groupSet" (portkey.aws/search-for-tag input "groupSet" :flattened? nil :xmlAttribute? nil), "instancesSet" (portkey.aws/search-for-tag input "instancesSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar730991 "reservationId") (clojure.core/assoc :reservation-id (deser-string (clojure.core/get-in letvar730991 ["reservationId" :content]))) (letvar730991 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar730991 ["ownerId" :content]))) (letvar730991 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar730991 ["requesterId" :content]))) (letvar730991 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar730991 ["groupSet" :content]))) (letvar730991 "instancesSet") (clojure.core/assoc :instances (deser-instance-list (clojure.core/get-in letvar730991 ["instancesSet" :content]))))))

(clojure.core/defn- deser-unsuccessful-item-error [input] (clojure.core/let [letvar731099 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:code (deser-string (clojure.core/get-in letvar731099 ["code" :content])), :message (deser-string (clojure.core/get-in letvar731099 ["message" :content]))})))

(clojure.core/defn- deser-vpc-peering-connection-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-peering-connection coll))) input))

(clojure.core/defn- deser-unsuccessful-item-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-unsuccessful-item coll))) input))

(clojure.core/defn- deser-security-group-references [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group-reference coll))) input))

(clojure.core/defn- deser-stale-ip-permission [input] (clojure.core/let [letvar731258 {"fromPort" (portkey.aws/search-for-tag input "fromPort" :flattened? nil :xmlAttribute? nil), "ipProtocol" (portkey.aws/search-for-tag input "ipProtocol" :flattened? nil :xmlAttribute? nil), "ipRanges" (portkey.aws/search-for-tag input "ipRanges" :flattened? nil :xmlAttribute? nil), "prefixListIds" (portkey.aws/search-for-tag input "prefixListIds" :flattened? nil :xmlAttribute? nil), "toPort" (portkey.aws/search-for-tag input "toPort" :flattened? nil :xmlAttribute? nil), "groups" (portkey.aws/search-for-tag input "groups" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar731258 "fromPort") (clojure.core/assoc :from-port (deser-integer (clojure.core/get-in letvar731258 ["fromPort" :content]))) (letvar731258 "ipProtocol") (clojure.core/assoc :ip-protocol (deser-string (clojure.core/get-in letvar731258 ["ipProtocol" :content]))) (letvar731258 "ipRanges") (clojure.core/assoc :ip-ranges (deser-ip-ranges (clojure.core/get-in letvar731258 ["ipRanges" :content]))) (letvar731258 "prefixListIds") (clojure.core/assoc :prefix-list-ids (deser-prefix-list-id-set (clojure.core/get-in letvar731258 ["prefixListIds" :content]))) (letvar731258 "toPort") (clojure.core/assoc :to-port (deser-integer (clojure.core/get-in letvar731258 ["toPort" :content]))) (letvar731258 "groups") (clojure.core/assoc :user-id-group-pairs (deser-user-id-group-pair-set (clojure.core/get-in letvar731258 ["groups" :content]))))))

(clojure.core/defn- deser-traffic-type [input] (clojure.core/get {"ACCEPT" :accept, "REJECT" :reject, "ALL" :all} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar731388 {"zoneName" (portkey.aws/search-for-tag input "zoneName" :flattened? nil :xmlAttribute? nil), "zoneState" (portkey.aws/search-for-tag input "zoneState" :flattened? nil :xmlAttribute? nil), "regionName" (portkey.aws/search-for-tag input "regionName" :flattened? nil :xmlAttribute? nil), "messageSet" (portkey.aws/search-for-tag input "messageSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar731388 "zoneName") (clojure.core/assoc :zone-name (deser-string (clojure.core/get-in letvar731388 ["zoneName" :content]))) (letvar731388 "zoneState") (clojure.core/assoc :state (deser-availability-zone-state (clojure.core/get-in letvar731388 ["zoneState" :content]))) (letvar731388 "regionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar731388 ["regionName" :content]))) (letvar731388 "messageSet") (clojure.core/assoc :messages (deser-availability-zone-message-list (clojure.core/get-in letvar731388 ["messageSet" :content]))))))

(clojure.core/defn- deser-route-origin [input] (clojure.core/get {"CreateRouteTable" :create-route-table, "CreateRoute" :create-route, "EnableVgwRoutePropagation" :enable-vgw-route-propagation} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-create-volume-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-create-volume-permission coll))) input))

(clojure.core/defn- deser-status [input] (clojure.core/get {"MoveInProgress" :move-in-progress, "InVpc" :in-vpc, "InClassic" :in-classic} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-network-interface-type [input] (clojure.core/get {"interface" :interface, "natGateway" :nat-gateway} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-cancelled-spot-instance-request-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancelled-spot-instance-request coll))) input))

(clojure.core/defn- deser-event-type [input] (clojure.core/get {"instanceChange" :instance-change, "fleetRequestChange" :fleet-request-change, "error" :error} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-moving-address-status [input] (clojure.core/let [letvar731550 {"publicIp" (portkey.aws/search-for-tag input "publicIp" :flattened? nil :xmlAttribute? nil), "moveStatus" (portkey.aws/search-for-tag input "moveStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar731550 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar731550 ["publicIp" :content]))) (letvar731550 "moveStatus") (clojure.core/assoc :move-status (deser-move-status (clojure.core/get-in letvar731550 ["moveStatus" :content]))))))

(clojure.core/defn- deser-reserved-instances [input] (clojure.core/let [letvar731658 {"tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "instanceCount" (portkey.aws/search-for-tag input "instanceCount" :flattened? nil :xmlAttribute? nil), "instanceTenancy" (portkey.aws/search-for-tag input "instanceTenancy" :flattened? nil :xmlAttribute? nil), "offeringType" (portkey.aws/search-for-tag input "offeringType" :flattened? nil :xmlAttribute? nil), "fixedPrice" (portkey.aws/search-for-tag input "fixedPrice" :flattened? nil :xmlAttribute? nil), "start" (portkey.aws/search-for-tag input "start" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "scope" (portkey.aws/search-for-tag input "scope" :flattened? nil :xmlAttribute? nil), "currencyCode" (portkey.aws/search-for-tag input "currencyCode" :flattened? nil :xmlAttribute? nil), "recurringCharges" (portkey.aws/search-for-tag input "recurringCharges" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "duration" (portkey.aws/search-for-tag input "duration" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "productDescription" (portkey.aws/search-for-tag input "productDescription" :flattened? nil :xmlAttribute? nil), "offeringClass" (portkey.aws/search-for-tag input "offeringClass" :flattened? nil :xmlAttribute? nil), "reservedInstancesId" (portkey.aws/search-for-tag input "reservedInstancesId" :flattened? nil :xmlAttribute? nil), "usagePrice" (portkey.aws/search-for-tag input "usagePrice" :flattened? nil :xmlAttribute? nil), "end" (portkey.aws/search-for-tag input "end" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar731658 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar731658 ["currencyCode" :content]))) (letvar731658 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar731658 ["instanceCount" :content]))) (letvar731658 "start") (clojure.core/assoc :start (deser-date-time (clojure.core/get-in letvar731658 ["start" :content]))) (letvar731658 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar731658 ["instanceType" :content]))) (letvar731658 "fixedPrice") (clojure.core/assoc :fixed-price (deser-float (clojure.core/get-in letvar731658 ["fixedPrice" :content]))) (letvar731658 "end") (clojure.core/assoc :end (deser-date-time (clojure.core/get-in letvar731658 ["end" :content]))) (letvar731658 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar731658 ["tagSet" :content]))) (letvar731658 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar731658 ["availabilityZone" :content]))) (letvar731658 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar731658 ["instanceTenancy" :content]))) (letvar731658 "duration") (clojure.core/assoc :duration (deser-long (clojure.core/get-in letvar731658 ["duration" :content]))) (letvar731658 "usagePrice") (clojure.core/assoc :usage-price (deser-float (clojure.core/get-in letvar731658 ["usagePrice" :content]))) (letvar731658 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar731658 ["productDescription" :content]))) (letvar731658 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar731658 ["reservedInstancesId" :content]))) (letvar731658 "state") (clojure.core/assoc :state (deser-reserved-instance-state (clojure.core/get-in letvar731658 ["state" :content]))) (letvar731658 "offeringClass") (clojure.core/assoc :offering-class (deser-offering-class-type (clojure.core/get-in letvar731658 ["offeringClass" :content]))) (letvar731658 "recurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charges-list (clojure.core/get-in letvar731658 ["recurringCharges" :content]))) (letvar731658 "offeringType") (clojure.core/assoc :offering-type (deser-offering-type-values (clojure.core/get-in letvar731658 ["offeringType" :content]))) (letvar731658 "scope") (clojure.core/assoc :scope (deserscope (clojure.core/get-in letvar731658 ["scope" :content]))))))

(clojure.core/defn- deser-next-token [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-excess-capacity-termination-policy [input] (clojure.core/get {"noTermination" :no-termination, "default" :default} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-prefix-list [input] (clojure.core/let [letvar731776 {"prefixListId" (portkey.aws/search-for-tag input "prefixListId" :flattened? nil :xmlAttribute? nil), "prefixListName" (portkey.aws/search-for-tag input "prefixListName" :flattened? nil :xmlAttribute? nil), "cidrSet" (portkey.aws/search-for-tag input "cidrSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar731776 "prefixListId") (clojure.core/assoc :prefix-list-id (deser-string (clojure.core/get-in letvar731776 ["prefixListId" :content]))) (letvar731776 "prefixListName") (clojure.core/assoc :prefix-list-name (deser-string (clojure.core/get-in letvar731776 ["prefixListName" :content]))) (letvar731776 "cidrSet") (clojure.core/assoc :cidrs (deser-value-string-list (clojure.core/get-in letvar731776 ["cidrSet" :content]))))))

(clojure.core/defn- deser-import-instance-volume-detail-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-instance-volume-detail-item coll))) input))

(clojure.core/defn- deser-status-type [input] (clojure.core/get {"passed" :passed, "failed" :failed, "insufficient-data" :insufficientdata, "initializing" :initializing} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-spot-fleet-monitoring [input] (clojure.core/let [letvar731906 {"enabled" (portkey.aws/search-for-tag input "enabled" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar731906 "enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar731906 ["enabled" :content]))))))

(clojure.core/defn- deser-reserved-instances-listing [input] (clojure.core/let [letvar732014 {"updateDate" (portkey.aws/search-for-tag input "updateDate" :flattened? nil :xmlAttribute? nil), "createDate" (portkey.aws/search-for-tag input "createDate" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "clientToken" (portkey.aws/search-for-tag input "clientToken" :flattened? nil :xmlAttribute? nil), "reservedInstancesListingId" (portkey.aws/search-for-tag input "reservedInstancesListingId" :flattened? nil :xmlAttribute? nil), "instanceCounts" (portkey.aws/search-for-tag input "instanceCounts" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "priceSchedules" (portkey.aws/search-for-tag input "priceSchedules" :flattened? nil :xmlAttribute? nil), "reservedInstancesId" (portkey.aws/search-for-tag input "reservedInstancesId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732014 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar732014 ["statusMessage" :content]))) (letvar732014 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar732014 ["createDate" :content]))) (letvar732014 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar732014 ["tagSet" :content]))) (letvar732014 "status") (clojure.core/assoc :status (deser-listing-status (clojure.core/get-in letvar732014 ["status" :content]))) (letvar732014 "priceSchedules") (clojure.core/assoc :price-schedules (deser-price-schedule-list (clojure.core/get-in letvar732014 ["priceSchedules" :content]))) (letvar732014 "updateDate") (clojure.core/assoc :update-date (deser-date-time (clojure.core/get-in letvar732014 ["updateDate" :content]))) (letvar732014 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar732014 ["reservedInstancesId" :content]))) (letvar732014 "reservedInstancesListingId") (clojure.core/assoc :reserved-instances-listing-id (deser-string (clojure.core/get-in letvar732014 ["reservedInstancesListingId" :content]))) (letvar732014 "instanceCounts") (clojure.core/assoc :instance-counts (deser-instance-count-list (clojure.core/get-in letvar732014 ["instanceCounts" :content]))) (letvar732014 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar732014 ["clientToken" :content]))))))

(clojure.core/defn- deser-instance-status-summary [input] (clojure.core/let [letvar732122 {"status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "details" (portkey.aws/search-for-tag input "details" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732122 "status") (clojure.core/assoc :status (deser-summary-status (clojure.core/get-in letvar732122 ["status" :content]))) (letvar732122 "details") (clojure.core/assoc :details (deser-instance-status-details-list (clojure.core/get-in letvar732122 ["details" :content]))))))

(clojure.core/defn- deser-nat-gateway-address [input] (clojure.core/let [letvar732230 {"publicIp" (portkey.aws/search-for-tag input "publicIp" :flattened? nil :xmlAttribute? nil), "allocationId" (portkey.aws/search-for-tag input "allocationId" :flattened? nil :xmlAttribute? nil), "privateIp" (portkey.aws/search-for-tag input "privateIp" :flattened? nil :xmlAttribute? nil), "networkInterfaceId" (portkey.aws/search-for-tag input "networkInterfaceId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732230 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar732230 ["publicIp" :content]))) (letvar732230 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar732230 ["allocationId" :content]))) (letvar732230 "privateIp") (clojure.core/assoc :private-ip (deser-string (clojure.core/get-in letvar732230 ["privateIp" :content]))) (letvar732230 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar732230 ["networkInterfaceId" :content]))))))

(clojure.core/defn- deser-instance-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status coll))) input))

(clojure.core/defn- deser-placement-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-placement-group coll))) input))

(clojure.core/defn- deser-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-address coll))) input))

(clojure.core/defn- deser-reserved-instances-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-offering coll))) input))

(clojure.core/defn- deser-reserved-instances-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances coll))) input))

(clojure.core/defn- deser-image-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-image coll))) input))

(clojure.core/defn- deser-user-id-group-pair-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-id-group-pair coll))) input))

(clojure.core/defn- deser-s-3-storage [input] (clojure.core/let [letvar732457 {"bucket" (portkey.aws/search-for-tag input "bucket" :flattened? nil :xmlAttribute? nil), "prefix" (portkey.aws/search-for-tag input "prefix" :flattened? nil :xmlAttribute? nil), "AWSAccessKeyId" (portkey.aws/search-for-tag input "AWSAccessKeyId" :flattened? nil :xmlAttribute? nil), "uploadPolicy" (portkey.aws/search-for-tag input "uploadPolicy" :flattened? nil :xmlAttribute? nil), "uploadPolicySignature" (portkey.aws/search-for-tag input "uploadPolicySignature" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732457 "bucket") (clojure.core/assoc :bucket (deser-string (clojure.core/get-in letvar732457 ["bucket" :content]))) (letvar732457 "prefix") (clojure.core/assoc :prefix (deser-string (clojure.core/get-in letvar732457 ["prefix" :content]))) (letvar732457 "AWSAccessKeyId") (clojure.core/assoc :aws-access-key-id (deser-string (clojure.core/get-in letvar732457 ["AWSAccessKeyId" :content]))) (letvar732457 "uploadPolicy") (clojure.core/assoc :upload-policy (deser-blob (clojure.core/get-in letvar732457 ["uploadPolicy" :content]))) (letvar732457 "uploadPolicySignature") (clojure.core/assoc :upload-policy-signature (deser-string (clojure.core/get-in letvar732457 ["uploadPolicySignature" :content]))))))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar732565 {"frequency" (portkey.aws/search-for-tag input "frequency" :flattened? nil :xmlAttribute? nil), "amount" (portkey.aws/search-for-tag input "amount" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732565 "frequency") (clojure.core/assoc :frequency (deser-recurring-charge-frequency (clojure.core/get-in letvar732565 ["frequency" :content]))) (letvar732565 "amount") (clojure.core/assoc :amount (deser-double (clojure.core/get-in letvar732565 ["amount" :content]))))))

(clojure.core/defn- deser-spot-fleet-request-config-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-fleet-request-config coll))) input))

(clojure.core/defn- deser-launch-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-permission coll))) input))

(clojure.core/defn- deser-price-schedule-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-price-schedule coll))) input))

(clojure.core/defn- deser-instance-private-ip-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-private-ip-address coll))) input))

(clojure.core/defn- deser-group-identifier [input] (clojure.core/let [letvar732741 {"groupName" (portkey.aws/search-for-tag input "groupName" :flattened? nil :xmlAttribute? nil), "groupId" (portkey.aws/search-for-tag input "groupId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732741 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar732741 ["groupName" :content]))) (letvar732741 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar732741 ["groupId" :content]))))))

(clojure.core/defn- deser-spot-price [input] (clojure.core/let [letvar732849 {"instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "productDescription" (portkey.aws/search-for-tag input "productDescription" :flattened? nil :xmlAttribute? nil), "spotPrice" (portkey.aws/search-for-tag input "spotPrice" :flattened? nil :xmlAttribute? nil), "timestamp" (portkey.aws/search-for-tag input "timestamp" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732849 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar732849 ["instanceType" :content]))) (letvar732849 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar732849 ["productDescription" :content]))) (letvar732849 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar732849 ["spotPrice" :content]))) (letvar732849 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar732849 ["timestamp" :content]))) (letvar732849 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar732849 ["availabilityZone" :content]))))))

(clojure.core/defn- deser-instance-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-scheduled-instance-availability-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance-availability coll))) input))

(clojure.core/defn- deser-nat-gateway [input] (clojure.core/let [letvar732991 {"subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "failureMessage" (portkey.aws/search-for-tag input "failureMessage" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "deleteTime" (portkey.aws/search-for-tag input "deleteTime" :flattened? nil :xmlAttribute? nil), "createTime" (portkey.aws/search-for-tag input "createTime" :flattened? nil :xmlAttribute? nil), "natGatewayId" (portkey.aws/search-for-tag input "natGatewayId" :flattened? nil :xmlAttribute? nil), "failureCode" (portkey.aws/search-for-tag input "failureCode" :flattened? nil :xmlAttribute? nil), "natGatewayAddressSet" (portkey.aws/search-for-tag input "natGatewayAddressSet" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "provisionedBandwidth" (portkey.aws/search-for-tag input "provisionedBandwidth" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar732991 "deleteTime") (clojure.core/assoc :delete-time (deser-date-time (clojure.core/get-in letvar732991 ["deleteTime" :content]))) (letvar732991 "provisionedBandwidth") (clojure.core/assoc :provisioned-bandwidth (deser-provisioned-bandwidth (clojure.core/get-in letvar732991 ["provisionedBandwidth" :content]))) (letvar732991 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar732991 ["subnetId" :content]))) (letvar732991 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar732991 ["natGatewayId" :content]))) (letvar732991 "failureMessage") (clojure.core/assoc :failure-message (deser-string (clojure.core/get-in letvar732991 ["failureMessage" :content]))) (letvar732991 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar732991 ["vpcId" :content]))) (letvar732991 "natGatewayAddressSet") (clojure.core/assoc :nat-gateway-addresses (deser-nat-gateway-address-list (clojure.core/get-in letvar732991 ["natGatewayAddressSet" :content]))) (letvar732991 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar732991 ["createTime" :content]))) (letvar732991 "state") (clojure.core/assoc :state (deser-nat-gateway-state (clojure.core/get-in letvar732991 ["state" :content]))) (letvar732991 "failureCode") (clojure.core/assoc :failure-code (deser-string (clojure.core/get-in letvar732991 ["failureCode" :content]))))))

(clojure.core/defn- deser-spot-instance-status [input] (clojure.core/let [letvar733099 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "updateTime" (portkey.aws/search-for-tag input "updateTime" :flattened? nil :xmlAttribute? nil), "message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar733099 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar733099 ["code" :content]))) (letvar733099 "updateTime") (clojure.core/assoc :update-time (deser-date-time (clojure.core/get-in letvar733099 ["updateTime" :content]))) (letvar733099 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar733099 ["message" :content]))))))

(clojure.core/defn- deser-tag-description [input] (clojure.core/let [letvar733207 {"resourceId" (portkey.aws/search-for-tag input "resourceId" :flattened? nil :xmlAttribute? nil), "resourceType" (portkey.aws/search-for-tag input "resourceType" :flattened? nil :xmlAttribute? nil), "key" (portkey.aws/search-for-tag input "key" :flattened? nil :xmlAttribute? nil), "value" (portkey.aws/search-for-tag input "value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar733207 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar733207 ["resourceId" :content]))) (letvar733207 "resourceType") (clojure.core/assoc :resource-type (deser-resource-type (clojure.core/get-in letvar733207 ["resourceType" :content]))) (letvar733207 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar733207 ["key" :content]))) (letvar733207 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar733207 ["value" :content]))))))

(clojure.core/defn- deser-account-attribute-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-attribute-value coll))) input))

(clojure.core/defn- deser-import-snapshot-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-snapshot-task coll))) input))

(clojure.core/defn- deser-dhcp-options [input] (clojure.core/let [letvar733349 {"dhcpOptionsId" (portkey.aws/search-for-tag input "dhcpOptionsId" :flattened? nil :xmlAttribute? nil), "dhcpConfigurationSet" (portkey.aws/search-for-tag input "dhcpConfigurationSet" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar733349 "dhcpOptionsId") (clojure.core/assoc :dhcp-options-id (deser-string (clojure.core/get-in letvar733349 ["dhcpOptionsId" :content]))) (letvar733349 "dhcpConfigurationSet") (clojure.core/assoc :dhcp-configurations (deser-dhcp-configuration-list (clojure.core/get-in letvar733349 ["dhcpConfigurationSet" :content]))) (letvar733349 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar733349 ["tagSet" :content]))))))

(clojure.core/defn- deser-run-instances-monitoring-enabled [input] (clojure.core/let [letvar733457 {"enabled" (portkey.aws/search-for-tag input "enabled" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:enabled (deser-boolean (clojure.core/get-in letvar733457 ["enabled" :content]))})))

(clojure.core/defn- deser-user-id-group-pair-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-id-group-pair coll))) input))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-network-acl-association-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl-association coll))) input))

(clojure.core/defn- deser-product-code-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-product-code coll))) input))

(clojure.core/defn- deser-volume-status-info-status [input] (clojure.core/get {"ok" :ok, "impaired" :impaired, "insufficient-data" :insufficientdata} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-spot-fleet-request-config-data [input] (clojure.core/let [letvar733638 {"validFrom" (portkey.aws/search-for-tag input "validFrom" :flattened? nil :xmlAttribute? nil), "targetCapacity" (portkey.aws/search-for-tag input "targetCapacity" :flattened? nil :xmlAttribute? nil), "clientToken" (portkey.aws/search-for-tag input "clientToken" :flattened? nil :xmlAttribute? nil), "iamFleetRole" (portkey.aws/search-for-tag input "iamFleetRole" :flattened? nil :xmlAttribute? nil), "fulfilledCapacity" (portkey.aws/search-for-tag input "fulfilledCapacity" :flattened? nil :xmlAttribute? nil), "allocationStrategy" (portkey.aws/search-for-tag input "allocationStrategy" :flattened? nil :xmlAttribute? nil), "excessCapacityTerminationPolicy" (portkey.aws/search-for-tag input "excessCapacityTerminationPolicy" :flattened? nil :xmlAttribute? nil), "launchSpecifications" (portkey.aws/search-for-tag input "launchSpecifications" :flattened? nil :xmlAttribute? nil), "spotPrice" (portkey.aws/search-for-tag input "spotPrice" :flattened? nil :xmlAttribute? nil), "terminateInstancesWithExpiration" (portkey.aws/search-for-tag input "terminateInstancesWithExpiration" :flattened? nil :xmlAttribute? nil), "type" (portkey.aws/search-for-tag input "type" :flattened? nil :xmlAttribute? nil), "validUntil" (portkey.aws/search-for-tag input "validUntil" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:spot-price (deser-string (clojure.core/get-in letvar733638 ["spotPrice" :content])), :target-capacity (deser-integer (clojure.core/get-in letvar733638 ["targetCapacity" :content])), :iam-fleet-role (deser-string (clojure.core/get-in letvar733638 ["iamFleetRole" :content])), :launch-specifications (deser-launch-specs-list (clojure.core/get-in letvar733638 ["launchSpecifications" :content]))} (letvar733638 "type") (clojure.core/assoc :type (deser-fleet-type (clojure.core/get-in letvar733638 ["type" :content]))) (letvar733638 "validFrom") (clojure.core/assoc :valid-from (deser-date-time (clojure.core/get-in letvar733638 ["validFrom" :content]))) (letvar733638 "excessCapacityTerminationPolicy") (clojure.core/assoc :excess-capacity-termination-policy (deser-excess-capacity-termination-policy (clojure.core/get-in letvar733638 ["excessCapacityTerminationPolicy" :content]))) (letvar733638 "allocationStrategy") (clojure.core/assoc :allocation-strategy (deser-allocation-strategy (clojure.core/get-in letvar733638 ["allocationStrategy" :content]))) (letvar733638 "fulfilledCapacity") (clojure.core/assoc :fulfilled-capacity (deser-double (clojure.core/get-in letvar733638 ["fulfilledCapacity" :content]))) (letvar733638 "terminateInstancesWithExpiration") (clojure.core/assoc :terminate-instances-with-expiration (deser-boolean (clojure.core/get-in letvar733638 ["terminateInstancesWithExpiration" :content]))) (letvar733638 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar733638 ["clientToken" :content]))) (letvar733638 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar733638 ["validUntil" :content]))))))

(clojure.core/defn- deser-host-offering [input] (clojure.core/let [letvar733746 {"offeringId" (portkey.aws/search-for-tag input "offeringId" :flattened? nil :xmlAttribute? nil), "instanceFamily" (portkey.aws/search-for-tag input "instanceFamily" :flattened? nil :xmlAttribute? nil), "paymentOption" (portkey.aws/search-for-tag input "paymentOption" :flattened? nil :xmlAttribute? nil), "upfrontPrice" (portkey.aws/search-for-tag input "upfrontPrice" :flattened? nil :xmlAttribute? nil), "hourlyPrice" (portkey.aws/search-for-tag input "hourlyPrice" :flattened? nil :xmlAttribute? nil), "currencyCode" (portkey.aws/search-for-tag input "currencyCode" :flattened? nil :xmlAttribute? nil), "duration" (portkey.aws/search-for-tag input "duration" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar733746 "offeringId") (clojure.core/assoc :offering-id (deser-string (clojure.core/get-in letvar733746 ["offeringId" :content]))) (letvar733746 "instanceFamily") (clojure.core/assoc :instance-family (deser-string (clojure.core/get-in letvar733746 ["instanceFamily" :content]))) (letvar733746 "paymentOption") (clojure.core/assoc :payment-option (deser-payment-option (clojure.core/get-in letvar733746 ["paymentOption" :content]))) (letvar733746 "upfrontPrice") (clojure.core/assoc :upfront-price (deser-string (clojure.core/get-in letvar733746 ["upfrontPrice" :content]))) (letvar733746 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar733746 ["hourlyPrice" :content]))) (letvar733746 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar733746 ["currencyCode" :content]))) (letvar733746 "duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar733746 ["duration" :content]))))))

(clojure.core/defn- deser-listing-state [input] (clojure.core/get {"available" :available, "sold" :sold, "cancelled" :cancelled, "pending" :pending} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-volume-status-events-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-event coll))) input))

(clojure.core/defn- deser-datafeed-subscription-state [input] (clojure.core/get {"Active" :active, "Inactive" :inactive} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-network-interface-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface coll))) input))

(clojure.core/defn- deser-cancel-batch-error-code [input] (clojure.core/get {"fleetRequestIdDoesNotExist" :fleet-request-id-does-not-exist, "fleetRequestIdMalformed" :fleet-request-id-malformed, "fleetRequestNotInCancellableState" :fleet-request-not-in-cancellable-state, "unexpectedError" :unexpected-error} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-target-configuration [input] (clojure.core/let [letvar733903 {"offeringId" (portkey.aws/search-for-tag input "offeringId" :flattened? nil :xmlAttribute? nil), "instanceCount" (portkey.aws/search-for-tag input "instanceCount" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar733903 "offeringId") (clojure.core/assoc :offering-id (deser-string (clojure.core/get-in letvar733903 ["offeringId" :content]))) (letvar733903 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar733903 ["instanceCount" :content]))))))

(clojure.core/defn- deser-allocation-strategy [input] (clojure.core/get {"lowestPrice" :lowest-price, "diversified" :diversified} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-status-name [input] (clojure.core/get {"reachability" :reachability} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-volume-status-event [input] (clojure.core/let [letvar734021 {"eventType" (portkey.aws/search-for-tag input "eventType" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "notBefore" (portkey.aws/search-for-tag input "notBefore" :flattened? nil :xmlAttribute? nil), "notAfter" (portkey.aws/search-for-tag input "notAfter" :flattened? nil :xmlAttribute? nil), "eventId" (portkey.aws/search-for-tag input "eventId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734021 "eventType") (clojure.core/assoc :event-type (deser-string (clojure.core/get-in letvar734021 ["eventType" :content]))) (letvar734021 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar734021 ["description" :content]))) (letvar734021 "notBefore") (clojure.core/assoc :not-before (deser-date-time (clojure.core/get-in letvar734021 ["notBefore" :content]))) (letvar734021 "notAfter") (clojure.core/assoc :not-after (deser-date-time (clojure.core/get-in letvar734021 ["notAfter" :content]))) (letvar734021 "eventId") (clojure.core/assoc :event-id (deser-string (clojure.core/get-in letvar734021 ["eventId" :content]))))))

(clojure.core/defn- deser-target-reservation-value [input] (clojure.core/let [letvar734129 {"targetConfiguration" (portkey.aws/search-for-tag input "targetConfiguration" :flattened? nil :xmlAttribute? nil), "reservationValue" (portkey.aws/search-for-tag input "reservationValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734129 "targetConfiguration") (clojure.core/assoc :target-configuration (deser-target-configuration (clojure.core/get-in letvar734129 ["targetConfiguration" :content]))) (letvar734129 "reservationValue") (clojure.core/assoc :reservation-value (deser-reservation-value (clojure.core/get-in letvar734129 ["reservationValue" :content]))))))

(clojure.core/defn- deser-reserved-intances-ids [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-id coll))) input))

(clojure.core/defn- deser-attribute-value [input] (clojure.core/let [letvar734254 {"value" (portkey.aws/search-for-tag input "value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734254 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar734254 ["value" :content]))))))

(clojure.core/defn- deser-network-acl-association [input] (clojure.core/let [letvar734362 {"networkAclAssociationId" (portkey.aws/search-for-tag input "networkAclAssociationId" :flattened? nil :xmlAttribute? nil), "networkAclId" (portkey.aws/search-for-tag input "networkAclId" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734362 "networkAclAssociationId") (clojure.core/assoc :network-acl-association-id (deser-string (clojure.core/get-in letvar734362 ["networkAclAssociationId" :content]))) (letvar734362 "networkAclId") (clojure.core/assoc :network-acl-id (deser-string (clojure.core/get-in letvar734362 ["networkAclId" :content]))) (letvar734362 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar734362 ["subnetId" :content]))))))

(clojure.core/defn- deser-private-ip-address-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-private-ip-address-specification coll))) input))

(clojure.core/defn- deser-auto-placement [input] (clojure.core/get {"on" :on, "off" :off} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-prefix-list-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-prefix-list-id coll))) input))

(clojure.core/defn- deser-availability-zone-message-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone-message coll))) input))

(clojure.core/defn- deser-history-records [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-history-record coll))) input))

(clojure.core/defn- deser-tag-description-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag-description coll))) input))

(clojure.core/defn- deser-product-code-values [input] (clojure.core/get {"devpay" :devpay, "marketplace" :marketplace} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-purchase-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-purchase coll))) input))

(clojure.core/defn- deser-placement-strategy [input] (clojure.core/get {"cluster" :cluster} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-internet-gateway-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-internet-gateway-attachment coll))) input))

(clojure.core/defn- deser-volume-status-info [input] (clojure.core/let [letvar734604 {"status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "details" (portkey.aws/search-for-tag input "details" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734604 "status") (clojure.core/assoc :status (deser-volume-status-info-status (clojure.core/get-in letvar734604 ["status" :content]))) (letvar734604 "details") (clojure.core/assoc :details (deser-volume-status-details-list (clojure.core/get-in letvar734604 ["details" :content]))))))

(clojure.core/defn- deser-instance-capacity [input] (clojure.core/let [letvar734712 {"instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "availableCapacity" (portkey.aws/search-for-tag input "availableCapacity" :flattened? nil :xmlAttribute? nil), "totalCapacity" (portkey.aws/search-for-tag input "totalCapacity" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734712 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar734712 ["instanceType" :content]))) (letvar734712 "availableCapacity") (clojure.core/assoc :available-capacity (deser-integer (clojure.core/get-in letvar734712 ["availableCapacity" :content]))) (letvar734712 "totalCapacity") (clojure.core/assoc :total-capacity (deser-integer (clojure.core/get-in letvar734712 ["totalCapacity" :content]))))))

(clojure.core/defn- deser-instance-block-device-mapping [input] (clojure.core/let [letvar734820 {"deviceName" (portkey.aws/search-for-tag input "deviceName" :flattened? nil :xmlAttribute? nil), "ebs" (portkey.aws/search-for-tag input "ebs" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734820 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar734820 ["deviceName" :content]))) (letvar734820 "ebs") (clojure.core/assoc :ebs (deser-ebs-instance-block-device (clojure.core/get-in letvar734820 ["ebs" :content]))))))

(clojure.core/defn- deser-customer-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-customer-gateway coll))) input))

(clojure.core/defn- deser-classic-link-dns-support [input] (clojure.core/let [letvar734945 {"vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "classicLinkDnsSupported" (portkey.aws/search-for-tag input "classicLinkDnsSupported" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar734945 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar734945 ["vpcId" :content]))) (letvar734945 "classicLinkDnsSupported") (clojure.core/assoc :classic-link-dns-supported (deser-boolean (clojure.core/get-in letvar734945 ["classicLinkDnsSupported" :content]))))))

(clojure.core/defn- deser-monitoring-state [input] (clojure.core/get {"disabled" :disabled, "disabling" :disabling, "enabled" :enabled, "pending" :pending} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-reserved-instance-reservation-value-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instance-reservation-value coll))) input))

(clojure.core/defn- deserscope [input] (clojure.core/get {"Availability Zone" :availability-zone, "Region" :region} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-device-type [input] (clojure.core/get {"ebs" :ebs, "instance-store" :instancestore} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-route-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route coll))) input))

(clojure.core/defn- deser-pricing-detail [input] (clojure.core/let [letvar735102 {"price" (portkey.aws/search-for-tag input "price" :flattened? nil :xmlAttribute? nil), "count" (portkey.aws/search-for-tag input "count" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar735102 "price") (clojure.core/assoc :price (deser-double (clojure.core/get-in letvar735102 ["price" :content]))) (letvar735102 "count") (clojure.core/assoc :count (deser-integer (clojure.core/get-in letvar735102 ["count" :content]))))))

(clojure.core/defn- deser-import-volume-task-details [input] (clojure.core/let [letvar735210 {"bytesConverted" (portkey.aws/search-for-tag input "bytesConverted" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "image" (portkey.aws/search-for-tag input "image" :flattened? nil :xmlAttribute? nil), "volume" (portkey.aws/search-for-tag input "volume" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:bytes-converted (deser-long (clojure.core/get-in letvar735210 ["bytesConverted" :content])), :availability-zone (deser-string (clojure.core/get-in letvar735210 ["availabilityZone" :content])), :image (deser-disk-image-description (clojure.core/get-in letvar735210 ["image" :content])), :volume (deser-disk-image-volume-description (clojure.core/get-in letvar735210 ["volume" :content]))} (letvar735210 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar735210 ["description" :content]))))))

(clojure.core/defn- deser-network-interface-status [input] (clojure.core/get {"available" :available, "attaching" :attaching, "in-use" :inuse, "detaching" :detaching} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vpc-classic-link-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-classic-link coll))) input))

(clojure.core/defn- deser-price-schedule [input] (clojure.core/let [letvar735340 {"term" (portkey.aws/search-for-tag input "term" :flattened? nil :xmlAttribute? nil), "price" (portkey.aws/search-for-tag input "price" :flattened? nil :xmlAttribute? nil), "currencyCode" (portkey.aws/search-for-tag input "currencyCode" :flattened? nil :xmlAttribute? nil), "active" (portkey.aws/search-for-tag input "active" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar735340 "term") (clojure.core/assoc :term (deser-long (clojure.core/get-in letvar735340 ["term" :content]))) (letvar735340 "price") (clojure.core/assoc :price (deser-double (clojure.core/get-in letvar735340 ["price" :content]))) (letvar735340 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar735340 ["currencyCode" :content]))) (letvar735340 "active") (clojure.core/assoc :active (deser-boolean (clojure.core/get-in letvar735340 ["active" :content]))))))

(clojure.core/defn- deser-reserved-instance-state [input] (clojure.core/get {"payment-pending" :paymentpending, "active" :active, "payment-failed" :paymentfailed, "retired" :retired} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-allocation-state [input] (clojure.core/get {"available" :available, "under-assessment" :underassessment, "permanent-failure" :permanentfailure, "released" :released, "released-permanent-failure" :releasedpermanentfailure} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-export-task-state [input] (clojure.core/get {"active" :active, "cancelling" :cancelling, "cancelled" :cancelled, "completed" :completed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-instance-state-change [input] (clojure.core/let [letvar735463 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "currentState" (portkey.aws/search-for-tag input "currentState" :flattened? nil :xmlAttribute? nil), "previousState" (portkey.aws/search-for-tag input "previousState" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar735463 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar735463 ["instanceId" :content]))) (letvar735463 "currentState") (clojure.core/assoc :current-state (deser-instance-state (clojure.core/get-in letvar735463 ["currentState" :content]))) (letvar735463 "previousState") (clojure.core/assoc :previous-state (deser-instance-state (clojure.core/get-in letvar735463 ["previousState" :content]))))))

(clojure.core/defn- deser-monitoring [input] (clojure.core/let [letvar735571 {"state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar735571 "state") (clojure.core/assoc :state (deser-monitoring-state (clojure.core/get-in letvar735571 ["state" :content]))))))

(clojure.core/defn- deser-event-information [input] (clojure.core/let [letvar735679 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "eventSubType" (portkey.aws/search-for-tag input "eventSubType" :flattened? nil :xmlAttribute? nil), "eventDescription" (portkey.aws/search-for-tag input "eventDescription" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar735679 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar735679 ["instanceId" :content]))) (letvar735679 "eventSubType") (clojure.core/assoc :event-sub-type (deser-string (clojure.core/get-in letvar735679 ["eventSubType" :content]))) (letvar735679 "eventDescription") (clojure.core/assoc :event-description (deser-string (clojure.core/get-in letvar735679 ["eventDescription" :content]))))))

(clojure.core/defn- deser-launch-specs-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-fleet-launch-specification coll))) input))

(clojure.core/defn- deser-volume-status-details [input] (clojure.core/let [letvar735804 {"name" (portkey.aws/search-for-tag input "name" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar735804 "name") (clojure.core/assoc :name (deser-volume-status-name (clojure.core/get-in letvar735804 ["name" :content]))) (letvar735804 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar735804 ["status" :content]))))))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-ip-permission [input] (clojure.core/let [letvar735919 {"ipProtocol" (portkey.aws/search-for-tag input "ipProtocol" :flattened? nil :xmlAttribute? nil), "fromPort" (portkey.aws/search-for-tag input "fromPort" :flattened? nil :xmlAttribute? nil), "toPort" (portkey.aws/search-for-tag input "toPort" :flattened? nil :xmlAttribute? nil), "groups" (portkey.aws/search-for-tag input "groups" :flattened? nil :xmlAttribute? nil), "ipRanges" (portkey.aws/search-for-tag input "ipRanges" :flattened? nil :xmlAttribute? nil), "prefixListIds" (portkey.aws/search-for-tag input "prefixListIds" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar735919 "ipProtocol") (clojure.core/assoc :ip-protocol (deser-string (clojure.core/get-in letvar735919 ["ipProtocol" :content]))) (letvar735919 "fromPort") (clojure.core/assoc :from-port (deser-integer (clojure.core/get-in letvar735919 ["fromPort" :content]))) (letvar735919 "toPort") (clojure.core/assoc :to-port (deser-integer (clojure.core/get-in letvar735919 ["toPort" :content]))) (letvar735919 "groups") (clojure.core/assoc :user-id-group-pairs (deser-user-id-group-pair-list (clojure.core/get-in letvar735919 ["groups" :content]))) (letvar735919 "ipRanges") (clojure.core/assoc :ip-ranges (deser-ip-range-list (clojure.core/get-in letvar735919 ["ipRanges" :content]))) (letvar735919 "prefixListIds") (clojure.core/assoc :prefix-list-ids (deser-prefix-list-id-list (clojure.core/get-in letvar735919 ["prefixListIds" :content]))))))

(clojure.core/defn- deser-ip-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-permission coll))) input))

(clojure.core/defn- deser-ri-product-description [input] (clojure.core/get {"Linux/UNIX" :linux-unix, "Linux/UNIX (Amazon VPC)" :linux-unix-amazon-vpc, "Windows" :windows, "Windows (Amazon VPC)" :windows-amazon-vpc} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-volume-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume coll))) input))

(clojure.core/defn- deser-dhcp-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-dhcp-options coll))) input))

(clojure.core/defn- deser-unsuccessful-item [input] (clojure.core/let [letvar736083 {"error" (portkey.aws/search-for-tag input "error" :flattened? nil :xmlAttribute? nil), "resourceId" (portkey.aws/search-for-tag input "resourceId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:error (deser-unsuccessful-item-error (clojure.core/get-in letvar736083 ["error" :content]))} (letvar736083 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar736083 ["resourceId" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-success-item [input] (clojure.core/let [letvar736191 {"spotFleetRequestId" (portkey.aws/search-for-tag input "spotFleetRequestId" :flattened? nil :xmlAttribute? nil), "currentSpotFleetRequestState" (portkey.aws/search-for-tag input "currentSpotFleetRequestState" :flattened? nil :xmlAttribute? nil), "previousSpotFleetRequestState" (portkey.aws/search-for-tag input "previousSpotFleetRequestState" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar736191 ["spotFleetRequestId" :content])), :current-spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar736191 ["currentSpotFleetRequestState" :content])), :previous-spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar736191 ["previousSpotFleetRequestState" :content]))})))

(clojure.core/defn- deser-propagating-vgw-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-propagating-vgw coll))) input))

(clojure.core/defn- deser-disk-image-format [input] (clojure.core/get {"VMDK" :vmdk, "RAW" :raw, "VHD" :vhd} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-network-interface-attachment [input] (clojure.core/let [letvar736321 {"attachmentId" (portkey.aws/search-for-tag input "attachmentId" :flattened? nil :xmlAttribute? nil), "instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "instanceOwnerId" (portkey.aws/search-for-tag input "instanceOwnerId" :flattened? nil :xmlAttribute? nil), "deviceIndex" (portkey.aws/search-for-tag input "deviceIndex" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "attachTime" (portkey.aws/search-for-tag input "attachTime" :flattened? nil :xmlAttribute? nil), "deleteOnTermination" (portkey.aws/search-for-tag input "deleteOnTermination" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar736321 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar736321 ["attachmentId" :content]))) (letvar736321 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar736321 ["instanceId" :content]))) (letvar736321 "instanceOwnerId") (clojure.core/assoc :instance-owner-id (deser-string (clojure.core/get-in letvar736321 ["instanceOwnerId" :content]))) (letvar736321 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar736321 ["deviceIndex" :content]))) (letvar736321 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar736321 ["status" :content]))) (letvar736321 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar736321 ["attachTime" :content]))) (letvar736321 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar736321 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-security-group-id-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-spot-fleet-request-config [input] (clojure.core/let [letvar736446 {"spotFleetRequestId" (portkey.aws/search-for-tag input "spotFleetRequestId" :flattened? nil :xmlAttribute? nil), "spotFleetRequestState" (portkey.aws/search-for-tag input "spotFleetRequestState" :flattened? nil :xmlAttribute? nil), "spotFleetRequestConfig" (portkey.aws/search-for-tag input "spotFleetRequestConfig" :flattened? nil :xmlAttribute? nil), "createTime" (portkey.aws/search-for-tag input "createTime" :flattened? nil :xmlAttribute? nil), "activityStatus" (portkey.aws/search-for-tag input "activityStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar736446 ["spotFleetRequestId" :content])), :spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar736446 ["spotFleetRequestState" :content])), :spot-fleet-request-config (deser-spot-fleet-request-config-data (clojure.core/get-in letvar736446 ["spotFleetRequestConfig" :content])), :create-time (deser-date-time (clojure.core/get-in letvar736446 ["createTime" :content]))} (letvar736446 "activityStatus") (clojure.core/assoc :activity-status (deser-activity-status (clojure.core/get-in letvar736446 ["activityStatus" :content]))))))

(clojure.core/defn- deser-domain-type [input] (clojure.core/get {"vpc" :vpc, "standard" :standard} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vgw-telemetry [input] (clojure.core/let [letvar736559 {"outsideIpAddress" (portkey.aws/search-for-tag input "outsideIpAddress" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "lastStatusChange" (portkey.aws/search-for-tag input "lastStatusChange" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "acceptedRouteCount" (portkey.aws/search-for-tag input "acceptedRouteCount" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar736559 "outsideIpAddress") (clojure.core/assoc :outside-ip-address (deser-string (clojure.core/get-in letvar736559 ["outsideIpAddress" :content]))) (letvar736559 "status") (clojure.core/assoc :status (deser-telemetry-status (clojure.core/get-in letvar736559 ["status" :content]))) (letvar736559 "lastStatusChange") (clojure.core/assoc :last-status-change (deser-date-time (clojure.core/get-in letvar736559 ["lastStatusChange" :content]))) (letvar736559 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar736559 ["statusMessage" :content]))) (letvar736559 "acceptedRouteCount") (clojure.core/assoc :accepted-route-count (deser-integer (clojure.core/get-in letvar736559 ["acceptedRouteCount" :content]))))))

(clojure.core/defn- deser-cancel-spot-instance-request-state [input] (clojure.core/get {"active" :active, "open" :open, "closed" :closed, "cancelled" :cancelled, "completed" :completed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-network-interface [input] (clojure.core/let [letvar736672 {"groupSet" (portkey.aws/search-for-tag input "groupSet" :flattened? nil :xmlAttribute? nil), "association" (portkey.aws/search-for-tag input "association" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "privateIpAddressesSet" (portkey.aws/search-for-tag input "privateIpAddressesSet" :flattened? nil :xmlAttribute? nil), "privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "requesterId" (portkey.aws/search-for-tag input "requesterId" :flattened? nil :xmlAttribute? nil), "interfaceType" (portkey.aws/search-for-tag input "interfaceType" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "privateDnsName" (portkey.aws/search-for-tag input "privateDnsName" :flattened? nil :xmlAttribute? nil), "macAddress" (portkey.aws/search-for-tag input "macAddress" :flattened? nil :xmlAttribute? nil), "attachment" (portkey.aws/search-for-tag input "attachment" :flattened? nil :xmlAttribute? nil), "sourceDestCheck" (portkey.aws/search-for-tag input "sourceDestCheck" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "networkInterfaceId" (portkey.aws/search-for-tag input "networkInterfaceId" :flattened? nil :xmlAttribute? nil), "ownerId" (portkey.aws/search-for-tag input "ownerId" :flattened? nil :xmlAttribute? nil), "requesterManaged" (portkey.aws/search-for-tag input "requesterManaged" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar736672 "attachment") (clojure.core/assoc :attachment (deser-network-interface-attachment (clojure.core/get-in letvar736672 ["attachment" :content]))) (letvar736672 "tagSet") (clojure.core/assoc :tag-set (deser-tag-list (clojure.core/get-in letvar736672 ["tagSet" :content]))) (letvar736672 "interfaceType") (clojure.core/assoc :interface-type (deser-network-interface-type (clojure.core/get-in letvar736672 ["interfaceType" :content]))) (letvar736672 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar736672 ["subnetId" :content]))) (letvar736672 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar736672 ["ownerId" :content]))) (letvar736672 "macAddress") (clojure.core/assoc :mac-address (deser-string (clojure.core/get-in letvar736672 ["macAddress" :content]))) (letvar736672 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar736672 ["networkInterfaceId" :content]))) (letvar736672 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar736672 ["sourceDestCheck" :content]))) (letvar736672 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar736672 ["availabilityZone" :content]))) (letvar736672 "status") (clojure.core/assoc :status (deser-network-interface-status (clojure.core/get-in letvar736672 ["status" :content]))) (letvar736672 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar736672 ["privateDnsName" :content]))) (letvar736672 "requesterManaged") (clojure.core/assoc :requester-managed (deser-boolean (clojure.core/get-in letvar736672 ["requesterManaged" :content]))) (letvar736672 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar736672 ["description" :content]))) (letvar736672 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar736672 ["vpcId" :content]))) (letvar736672 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar736672 ["groupSet" :content]))) (letvar736672 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-network-interface-private-ip-address-list (clojure.core/get-in letvar736672 ["privateIpAddressesSet" :content]))) (letvar736672 "association") (clojure.core/assoc :association (deser-network-interface-association (clojure.core/get-in letvar736672 ["association" :content]))) (letvar736672 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar736672 ["requesterId" :content]))) (letvar736672 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar736672 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-snapshot [input] (clojure.core/let [letvar736780 {"progress" (portkey.aws/search-for-tag input "progress" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "kmsKeyId" (portkey.aws/search-for-tag input "kmsKeyId" :flattened? nil :xmlAttribute? nil), "encrypted" (portkey.aws/search-for-tag input "encrypted" :flattened? nil :xmlAttribute? nil), "startTime" (portkey.aws/search-for-tag input "startTime" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "dataEncryptionKeyId" (portkey.aws/search-for-tag input "dataEncryptionKeyId" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "volumeId" (portkey.aws/search-for-tag input "volumeId" :flattened? nil :xmlAttribute? nil), "snapshotId" (portkey.aws/search-for-tag input "snapshotId" :flattened? nil :xmlAttribute? nil), "ownerId" (portkey.aws/search-for-tag input "ownerId" :flattened? nil :xmlAttribute? nil), "volumeSize" (portkey.aws/search-for-tag input "volumeSize" :flattened? nil :xmlAttribute? nil), "ownerAlias" (portkey.aws/search-for-tag input "ownerAlias" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar736780 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar736780 ["startTime" :content]))) (letvar736780 "statusMessage") (clojure.core/assoc :state-message (deser-string (clojure.core/get-in letvar736780 ["statusMessage" :content]))) (letvar736780 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar736780 ["ownerId" :content]))) (letvar736780 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar736780 ["encrypted" :content]))) (letvar736780 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar736780 ["tagSet" :content]))) (letvar736780 "ownerAlias") (clojure.core/assoc :owner-alias (deser-string (clojure.core/get-in letvar736780 ["ownerAlias" :content]))) (letvar736780 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar736780 ["progress" :content]))) (letvar736780 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar736780 ["description" :content]))) (letvar736780 "dataEncryptionKeyId") (clojure.core/assoc :data-encryption-key-id (deser-string (clojure.core/get-in letvar736780 ["dataEncryptionKeyId" :content]))) (letvar736780 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar736780 ["kmsKeyId" :content]))) (letvar736780 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar736780 ["volumeId" :content]))) (letvar736780 "status") (clojure.core/assoc :state (deser-snapshot-state (clojure.core/get-in letvar736780 ["status" :content]))) (letvar736780 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar736780 ["volumeSize" :content]))) (letvar736780 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar736780 ["snapshotId" :content]))))))

(clojure.core/defn- deser-resource-type [input] (clojure.core/get {"vpn-gateway" :vpngateway, "subnet" :subnet, "vpc" :vpc, "spot-instances-request" :spotinstancesrequest, "route-table" :routetable, "image" :image, "snapshot" :snapshot, "vpn-connection" :vpnconnection, "internet-gateway" :internetgateway, "reserved-instances" :reservedinstances, "instance" :instance, "network-interface" :networkinterface, "security-group" :securitygroup, "volume" :volume, "dhcp-options" :dhcpoptions, "customer-gateway" :customergateway, "network-acl" :networkacl} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-instance-status-event [input] (clojure.core/let [letvar736893 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "notBefore" (portkey.aws/search-for-tag input "notBefore" :flattened? nil :xmlAttribute? nil), "notAfter" (portkey.aws/search-for-tag input "notAfter" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar736893 "code") (clojure.core/assoc :code (deser-event-code (clojure.core/get-in letvar736893 ["code" :content]))) (letvar736893 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar736893 ["description" :content]))) (letvar736893 "notBefore") (clojure.core/assoc :not-before (deser-date-time (clojure.core/get-in letvar736893 ["notBefore" :content]))) (letvar736893 "notAfter") (clojure.core/assoc :not-after (deser-date-time (clojure.core/get-in letvar736893 ["notAfter" :content]))))))

(clojure.core/defn- deser-vpc-peering-connection-options-description [input] (clojure.core/let [letvar737001 {"allowEgressFromLocalClassicLinkToRemoteVpc" (portkey.aws/search-for-tag input "allowEgressFromLocalClassicLinkToRemoteVpc" :flattened? nil :xmlAttribute? nil), "allowEgressFromLocalVpcToRemoteClassicLink" (portkey.aws/search-for-tag input "allowEgressFromLocalVpcToRemoteClassicLink" :flattened? nil :xmlAttribute? nil), "allowDnsResolutionFromRemoteVpc" (portkey.aws/search-for-tag input "allowDnsResolutionFromRemoteVpc" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737001 "allowEgressFromLocalClassicLinkToRemoteVpc") (clojure.core/assoc :allow-egress-from-local-classic-link-to-remote-vpc (deser-boolean (clojure.core/get-in letvar737001 ["allowEgressFromLocalClassicLinkToRemoteVpc" :content]))) (letvar737001 "allowEgressFromLocalVpcToRemoteClassicLink") (clojure.core/assoc :allow-egress-from-local-vpc-to-remote-classic-link (deser-boolean (clojure.core/get-in letvar737001 ["allowEgressFromLocalVpcToRemoteClassicLink" :content]))) (letvar737001 "allowDnsResolutionFromRemoteVpc") (clojure.core/assoc :allow-dns-resolution-from-remote-vpc (deser-boolean (clojure.core/get-in letvar737001 ["allowDnsResolutionFromRemoteVpc" :content]))))))

(clojure.core/defn- deser-volume-status-name [input] (clojure.core/get {"io-enabled" :ioenabled, "io-performance" :ioperformance} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-internet-gateway [input] (clojure.core/let [letvar737114 {"internetGatewayId" (portkey.aws/search-for-tag input "internetGatewayId" :flattened? nil :xmlAttribute? nil), "attachmentSet" (portkey.aws/search-for-tag input "attachmentSet" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737114 "internetGatewayId") (clojure.core/assoc :internet-gateway-id (deser-string (clojure.core/get-in letvar737114 ["internetGatewayId" :content]))) (letvar737114 "attachmentSet") (clojure.core/assoc :attachments (deser-internet-gateway-attachment-list (clojure.core/get-in letvar737114 ["attachmentSet" :content]))) (letvar737114 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar737114 ["tagSet" :content]))))))

(clojure.core/defn- deser-vpc [input] (clojure.core/let [letvar737222 {"vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "cidrBlock" (portkey.aws/search-for-tag input "cidrBlock" :flattened? nil :xmlAttribute? nil), "dhcpOptionsId" (portkey.aws/search-for-tag input "dhcpOptionsId" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "instanceTenancy" (portkey.aws/search-for-tag input "instanceTenancy" :flattened? nil :xmlAttribute? nil), "isDefault" (portkey.aws/search-for-tag input "isDefault" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737222 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar737222 ["vpcId" :content]))) (letvar737222 "state") (clojure.core/assoc :state (deser-vpc-state (clojure.core/get-in letvar737222 ["state" :content]))) (letvar737222 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar737222 ["cidrBlock" :content]))) (letvar737222 "dhcpOptionsId") (clojure.core/assoc :dhcp-options-id (deser-string (clojure.core/get-in letvar737222 ["dhcpOptionsId" :content]))) (letvar737222 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar737222 ["tagSet" :content]))) (letvar737222 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar737222 ["instanceTenancy" :content]))) (letvar737222 "isDefault") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar737222 ["isDefault" :content]))))))

(clojure.core/defn- deser-batch-state [input] (clojure.core/get {"submitted" :submitted, "active" :active, "cancelled" :cancelled, "failed" :failed, "cancelled_running" :cancelled-running, "cancelled_terminating" :cancelled-terminating, "modifying" :modifying} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-reservation-value [input] (clojure.core/let [letvar737335 {"remainingTotalValue" (portkey.aws/search-for-tag input "remainingTotalValue" :flattened? nil :xmlAttribute? nil), "remainingUpfrontValue" (portkey.aws/search-for-tag input "remainingUpfrontValue" :flattened? nil :xmlAttribute? nil), "hourlyPrice" (portkey.aws/search-for-tag input "hourlyPrice" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737335 "remainingTotalValue") (clojure.core/assoc :remaining-total-value (deser-string (clojure.core/get-in letvar737335 ["remainingTotalValue" :content]))) (letvar737335 "remainingUpfrontValue") (clojure.core/assoc :remaining-upfront-value (deser-string (clojure.core/get-in letvar737335 ["remainingUpfrontValue" :content]))) (letvar737335 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar737335 ["hourlyPrice" :content]))))))

(clojure.core/defn- deser-host-instance [input] (clojure.core/let [letvar737443 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737443 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar737443 ["instanceId" :content]))) (letvar737443 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar737443 ["instanceType" :content]))))))

(clojure.core/defn- deser-currency-code-values [input] (clojure.core/get {"USD" :usd} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-import-image-task [input] (clojure.core/let [letvar737556 {"architecture" (portkey.aws/search-for-tag input "architecture" :flattened? nil :xmlAttribute? nil), "progress" (portkey.aws/search-for-tag input "progress" :flattened? nil :xmlAttribute? nil), "snapshotDetailSet" (portkey.aws/search-for-tag input "snapshotDetailSet" :flattened? nil :xmlAttribute? nil), "licenseType" (portkey.aws/search-for-tag input "licenseType" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "imageId" (portkey.aws/search-for-tag input "imageId" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "importTaskId" (portkey.aws/search-for-tag input "importTaskId" :flattened? nil :xmlAttribute? nil), "hypervisor" (portkey.aws/search-for-tag input "hypervisor" :flattened? nil :xmlAttribute? nil), "platform" (portkey.aws/search-for-tag input "platform" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737556 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar737556 ["platform" :content]))) (letvar737556 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar737556 ["importTaskId" :content]))) (letvar737556 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar737556 ["imageId" :content]))) (letvar737556 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar737556 ["statusMessage" :content]))) (letvar737556 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar737556 ["status" :content]))) (letvar737556 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar737556 ["progress" :content]))) (letvar737556 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar737556 ["description" :content]))) (letvar737556 "snapshotDetailSet") (clojure.core/assoc :snapshot-details (deser-snapshot-detail-list (clojure.core/get-in letvar737556 ["snapshotDetailSet" :content]))) (letvar737556 "hypervisor") (clojure.core/assoc :hypervisor (deser-string (clojure.core/get-in letvar737556 ["hypervisor" :content]))) (letvar737556 "architecture") (clojure.core/assoc :architecture (deser-string (clojure.core/get-in letvar737556 ["architecture" :content]))) (letvar737556 "licenseType") (clojure.core/assoc :license-type (deser-string (clojure.core/get-in letvar737556 ["licenseType" :content]))))))

(clojure.core/defn- deser-volume-status-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-details coll))) input))

(clojure.core/defn- deser-summary-status [input] (clojure.core/get {"ok" :ok, "impaired" :impaired, "insufficient-data" :insufficientdata, "not-applicable" :notapplicable, "initializing" :initializing} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance coll))) input))

(clojure.core/defn- deser-volume-type [input] (clojure.core/get {"standard" :standard, "io1" :io-1, "gp2" :gp-2, "sc1" :sc-1, "st1" :st-1} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-customer-gateway [input] (clojure.core/let [letvar737708 {"customerGatewayId" (portkey.aws/search-for-tag input "customerGatewayId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "type" (portkey.aws/search-for-tag input "type" :flattened? nil :xmlAttribute? nil), "ipAddress" (portkey.aws/search-for-tag input "ipAddress" :flattened? nil :xmlAttribute? nil), "bgpAsn" (portkey.aws/search-for-tag input "bgpAsn" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737708 "customerGatewayId") (clojure.core/assoc :customer-gateway-id (deser-string (clojure.core/get-in letvar737708 ["customerGatewayId" :content]))) (letvar737708 "state") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar737708 ["state" :content]))) (letvar737708 "type") (clojure.core/assoc :type (deser-string (clojure.core/get-in letvar737708 ["type" :content]))) (letvar737708 "ipAddress") (clojure.core/assoc :ip-address (deser-string (clojure.core/get-in letvar737708 ["ipAddress" :content]))) (letvar737708 "bgpAsn") (clojure.core/assoc :bgp-asn (deser-string (clojure.core/get-in letvar737708 ["bgpAsn" :content]))) (letvar737708 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar737708 ["tagSet" :content]))))))

(clojure.core/defn- deser-response-host-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-host-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host coll))) input))

(clojure.core/defn- deser-stale-security-group-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stale-security-group coll))) input))

(clojure.core/defn- deser-volume-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-item coll))) input))

(clojure.core/defn- deser-export-task [input] (clojure.core/let [letvar737884 {"exportTaskId" (portkey.aws/search-for-tag input "exportTaskId" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "instanceExport" (portkey.aws/search-for-tag input "instanceExport" :flattened? nil :xmlAttribute? nil), "exportToS3" (portkey.aws/search-for-tag input "exportToS3" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737884 "exportTaskId") (clojure.core/assoc :export-task-id (deser-string (clojure.core/get-in letvar737884 ["exportTaskId" :content]))) (letvar737884 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar737884 ["description" :content]))) (letvar737884 "state") (clojure.core/assoc :state (deser-export-task-state (clojure.core/get-in letvar737884 ["state" :content]))) (letvar737884 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar737884 ["statusMessage" :content]))) (letvar737884 "instanceExport") (clojure.core/assoc :instance-export-details (deser-instance-export-details (clojure.core/get-in letvar737884 ["instanceExport" :content]))) (letvar737884 "exportToS3") (clojure.core/assoc :export-to-s-3-task (deser-export-to-s-3-task (clojure.core/get-in letvar737884 ["exportToS3" :content]))))))

(clojure.core/defn- deser-network-interface-private-ip-address [input] (clojure.core/let [letvar737992 {"privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil), "privateDnsName" (portkey.aws/search-for-tag input "privateDnsName" :flattened? nil :xmlAttribute? nil), "primary" (portkey.aws/search-for-tag input "primary" :flattened? nil :xmlAttribute? nil), "association" (portkey.aws/search-for-tag input "association" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar737992 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar737992 ["privateIpAddress" :content]))) (letvar737992 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar737992 ["privateDnsName" :content]))) (letvar737992 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar737992 ["primary" :content]))) (letvar737992 "association") (clojure.core/assoc :association (deser-network-interface-association (clojure.core/get-in letvar737992 ["association" :content]))))))

(clojure.core/defn- deser-placement-group-state [input] (clojure.core/get {"pending" :pending, "available" :available, "deleting" :deleting, "deleted" :deleted} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-long [input] (java.lang.Long. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-volume-status-actions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-action coll))) input))

(clojure.core/defn- deser-vpn-static-route-source [input] (clojure.core/get {"Static" :static} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-host-offering-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host-offering coll))) input))

(clojure.core/defn- deser-vpc-endpoint-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-endpoint coll))) input))

(clojure.core/defn- deser-scheduled-instance-recurrence [input] (clojure.core/let [letvar738163 {"frequency" (portkey.aws/search-for-tag input "frequency" :flattened? nil :xmlAttribute? nil), "interval" (portkey.aws/search-for-tag input "interval" :flattened? nil :xmlAttribute? nil), "occurrenceDaySet" (portkey.aws/search-for-tag input "occurrenceDaySet" :flattened? nil :xmlAttribute? nil), "occurrenceRelativeToEnd" (portkey.aws/search-for-tag input "occurrenceRelativeToEnd" :flattened? nil :xmlAttribute? nil), "occurrenceUnit" (portkey.aws/search-for-tag input "occurrenceUnit" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar738163 "frequency") (clojure.core/assoc :frequency (deser-string (clojure.core/get-in letvar738163 ["frequency" :content]))) (letvar738163 "interval") (clojure.core/assoc :interval (deser-integer (clojure.core/get-in letvar738163 ["interval" :content]))) (letvar738163 "occurrenceDaySet") (clojure.core/assoc :occurrence-day-set (deser-occurrence-day-set (clojure.core/get-in letvar738163 ["occurrenceDaySet" :content]))) (letvar738163 "occurrenceRelativeToEnd") (clojure.core/assoc :occurrence-relative-to-end (deser-boolean (clojure.core/get-in letvar738163 ["occurrenceRelativeToEnd" :content]))) (letvar738163 "occurrenceUnit") (clojure.core/assoc :occurrence-unit (deser-string (clojure.core/get-in letvar738163 ["occurrenceUnit" :content]))))))

(clojure.core/defn- deser-instance-state [input] (clojure.core/let [letvar738271 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "name" (portkey.aws/search-for-tag input "name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar738271 "code") (clojure.core/assoc :code (deser-integer (clojure.core/get-in letvar738271 ["code" :content]))) (letvar738271 "name") (clojure.core/assoc :name (deser-instance-state-name (clojure.core/get-in letvar738271 ["name" :content]))))))

(clojure.core/defn- deser-volume-status-item [input] (clojure.core/let [letvar738379 {"volumeId" (portkey.aws/search-for-tag input "volumeId" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "volumeStatus" (portkey.aws/search-for-tag input "volumeStatus" :flattened? nil :xmlAttribute? nil), "eventsSet" (portkey.aws/search-for-tag input "eventsSet" :flattened? nil :xmlAttribute? nil), "actionsSet" (portkey.aws/search-for-tag input "actionsSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar738379 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar738379 ["volumeId" :content]))) (letvar738379 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar738379 ["availabilityZone" :content]))) (letvar738379 "volumeStatus") (clojure.core/assoc :volume-status (deser-volume-status-info (clojure.core/get-in letvar738379 ["volumeStatus" :content]))) (letvar738379 "eventsSet") (clojure.core/assoc :events (deser-volume-status-events-list (clojure.core/get-in letvar738379 ["eventsSet" :content]))) (letvar738379 "actionsSet") (clojure.core/assoc :actions (deser-volume-status-actions-list (clojure.core/get-in letvar738379 ["actionsSet" :content]))))))

(clojure.core/defn- deser-spot-instance-state [input] (clojure.core/get {"open" :open, "active" :active, "closed" :closed, "cancelled" :cancelled, "failed" :failed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-instance-state-name [input] (clojure.core/get {"pending" :pending, "running" :running, "shutting-down" :shuttingdown, "terminated" :terminated, "stopping" :stopping, "stopped" :stopped} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-availability-zone-message [input] (clojure.core/let [letvar738497 {"message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar738497 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar738497 ["message" :content]))))))

(clojure.core/defn- deser-host-reservation-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host-reservation coll))) input))

(clojure.core/defn- deser-unsuccessful-item-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-unsuccessful-item coll))) input))

(clojure.core/defn- deser-virtualization-type [input] (clojure.core/get {"hvm" :hvm, "paravirtual" :paravirtual} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-reserved-instances-id [input] (clojure.core/let [letvar738644 {"reservedInstancesId" (portkey.aws/search-for-tag input "reservedInstancesId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar738644 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar738644 ["reservedInstancesId" :content]))))))

(clojure.core/defn- deser-instance-network-interface-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-network-interface-specification coll))) input))

(clojure.core/defn- deser-conversion-task [input] (clojure.core/let [letvar738769 {"conversionTaskId" (portkey.aws/search-for-tag input "conversionTaskId" :flattened? nil :xmlAttribute? nil), "expirationTime" (portkey.aws/search-for-tag input "expirationTime" :flattened? nil :xmlAttribute? nil), "importInstance" (portkey.aws/search-for-tag input "importInstance" :flattened? nil :xmlAttribute? nil), "importVolume" (portkey.aws/search-for-tag input "importVolume" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:conversion-task-id (deser-string (clojure.core/get-in letvar738769 ["conversionTaskId" :content])), :state (deser-conversion-task-state (clojure.core/get-in letvar738769 ["state" :content]))} (letvar738769 "expirationTime") (clojure.core/assoc :expiration-time (deser-string (clojure.core/get-in letvar738769 ["expirationTime" :content]))) (letvar738769 "importInstance") (clojure.core/assoc :import-instance (deser-import-instance-task-details (clojure.core/get-in letvar738769 ["importInstance" :content]))) (letvar738769 "importVolume") (clojure.core/assoc :import-volume (deser-import-volume-task-details (clojure.core/get-in letvar738769 ["importVolume" :content]))) (letvar738769 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar738769 ["statusMessage" :content]))) (letvar738769 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar738769 ["tagSet" :content]))))))

(clojure.core/defn- deser-bundle-task-error [input] (clojure.core/let [letvar738877 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar738877 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar738877 ["code" :content]))) (letvar738877 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar738877 ["message" :content]))))))

(clojure.core/defn- deser-dhcp-configuration [input] (clojure.core/let [letvar738985 {"key" (portkey.aws/search-for-tag input "key" :flattened? nil :xmlAttribute? nil), "valueSet" (portkey.aws/search-for-tag input "valueSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar738985 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar738985 ["key" :content]))) (letvar738985 "valueSet") (clojure.core/assoc :values (deser-dhcp-configuration-value-list (clojure.core/get-in letvar738985 ["valueSet" :content]))))))

(clojure.core/defn- deser-block-device-mapping [input] (clojure.core/let [letvar739093 {"virtualName" (portkey.aws/search-for-tag input "virtualName" :flattened? nil :xmlAttribute? nil), "deviceName" (portkey.aws/search-for-tag input "deviceName" :flattened? nil :xmlAttribute? nil), "ebs" (portkey.aws/search-for-tag input "ebs" :flattened? nil :xmlAttribute? nil), "noDevice" (portkey.aws/search-for-tag input "noDevice" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739093 "virtualName") (clojure.core/assoc :virtual-name (deser-string (clojure.core/get-in letvar739093 ["virtualName" :content]))) (letvar739093 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar739093 ["deviceName" :content]))) (letvar739093 "ebs") (clojure.core/assoc :ebs (deser-ebs-block-device (clojure.core/get-in letvar739093 ["ebs" :content]))) (letvar739093 "noDevice") (clojure.core/assoc :no-device (deser-string (clojure.core/get-in letvar739093 ["noDevice" :content]))))))

(clojure.core/defn- deser-state [input] (clojure.core/get {"Pending" :pending, "Available" :available, "Deleting" :deleting, "Deleted" :deleted} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-export-to-s-3-task [input] (clojure.core/let [letvar739206 {"diskImageFormat" (portkey.aws/search-for-tag input "diskImageFormat" :flattened? nil :xmlAttribute? nil), "containerFormat" (portkey.aws/search-for-tag input "containerFormat" :flattened? nil :xmlAttribute? nil), "s3Bucket" (portkey.aws/search-for-tag input "s3Bucket" :flattened? nil :xmlAttribute? nil), "s3Key" (portkey.aws/search-for-tag input "s3Key" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739206 "diskImageFormat") (clojure.core/assoc :disk-image-format (deser-disk-image-format (clojure.core/get-in letvar739206 ["diskImageFormat" :content]))) (letvar739206 "containerFormat") (clojure.core/assoc :container-format (deser-container-format (clojure.core/get-in letvar739206 ["containerFormat" :content]))) (letvar739206 "s3Bucket") (clojure.core/assoc :s-3-bucket (deser-string (clojure.core/get-in letvar739206 ["s3Bucket" :content]))) (letvar739206 "s3Key") (clojure.core/assoc :s-3-key (deser-string (clojure.core/get-in letvar739206 ["s3Key" :content]))))))

(clojure.core/defn- deser-network-acl-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar739331 {"key" (portkey.aws/search-for-tag input "key" :flattened? nil :xmlAttribute? nil), "value" (portkey.aws/search-for-tag input "value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739331 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar739331 ["key" :content]))) (letvar739331 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar739331 ["value" :content]))))))

(clojure.core/defn- deser-recurring-charge-frequency [input] (clojure.core/get {"Hourly" :hourly} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-platform-values [input] (clojure.core/get {"Windows" :windows} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-cancel-spot-fleet-requests-success-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancel-spot-fleet-requests-success-item coll))) input))

(clojure.core/defn- deser-product-code [input] (clojure.core/let [letvar739466 {"productCode" (portkey.aws/search-for-tag input "productCode" :flattened? nil :xmlAttribute? nil), "type" (portkey.aws/search-for-tag input "type" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739466 "productCode") (clojure.core/assoc :product-code-id (deser-string (clojure.core/get-in letvar739466 ["productCode" :content]))) (letvar739466 "type") (clojure.core/assoc :product-code-type (deser-product-code-values (clojure.core/get-in letvar739466 ["type" :content]))))))

(clojure.core/defn- deser-port-range [input] (clojure.core/let [letvar739574 {"from" (portkey.aws/search-for-tag input "from" :flattened? nil :xmlAttribute? nil), "to" (portkey.aws/search-for-tag input "to" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739574 "from") (clojure.core/assoc :from (deser-integer (clojure.core/get-in letvar739574 ["from" :content]))) (letvar739574 "to") (clojure.core/assoc :to (deser-integer (clojure.core/get-in letvar739574 ["to" :content]))))))

(clojure.core/defn- deser-vpc-state [input] (clojure.core/get {"pending" :pending, "available" :available} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-attachment-status [input] (clojure.core/get {"attaching" :attaching, "attached" :attached, "detaching" :detaching, "detached" :detached} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-peering-connection-options [input] (clojure.core/let [letvar739692 {"allowEgressFromLocalClassicLinkToRemoteVpc" (portkey.aws/search-for-tag input "allowEgressFromLocalClassicLinkToRemoteVpc" :flattened? nil :xmlAttribute? nil), "allowEgressFromLocalVpcToRemoteClassicLink" (portkey.aws/search-for-tag input "allowEgressFromLocalVpcToRemoteClassicLink" :flattened? nil :xmlAttribute? nil), "allowDnsResolutionFromRemoteVpc" (portkey.aws/search-for-tag input "allowDnsResolutionFromRemoteVpc" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739692 "allowEgressFromLocalClassicLinkToRemoteVpc") (clojure.core/assoc :allow-egress-from-local-classic-link-to-remote-vpc (deser-boolean (clojure.core/get-in letvar739692 ["allowEgressFromLocalClassicLinkToRemoteVpc" :content]))) (letvar739692 "allowEgressFromLocalVpcToRemoteClassicLink") (clojure.core/assoc :allow-egress-from-local-vpc-to-remote-classic-link (deser-boolean (clojure.core/get-in letvar739692 ["allowEgressFromLocalVpcToRemoteClassicLink" :content]))) (letvar739692 "allowDnsResolutionFromRemoteVpc") (clojure.core/assoc :allow-dns-resolution-from-remote-vpc (deser-boolean (clojure.core/get-in letvar739692 ["allowDnsResolutionFromRemoteVpc" :content]))))))

(clojure.core/defn- deser-vpc-attachment [input] (clojure.core/let [letvar739800 {"vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739800 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar739800 ["vpcId" :content]))) (letvar739800 "state") (clojure.core/assoc :state (deser-attachment-status (clojure.core/get-in letvar739800 ["state" :content]))))))

(clojure.core/defn- deser-instance-status [input] (clojure.core/let [letvar739908 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "eventsSet" (portkey.aws/search-for-tag input "eventsSet" :flattened? nil :xmlAttribute? nil), "instanceState" (portkey.aws/search-for-tag input "instanceState" :flattened? nil :xmlAttribute? nil), "systemStatus" (portkey.aws/search-for-tag input "systemStatus" :flattened? nil :xmlAttribute? nil), "instanceStatus" (portkey.aws/search-for-tag input "instanceStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar739908 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar739908 ["instanceId" :content]))) (letvar739908 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar739908 ["availabilityZone" :content]))) (letvar739908 "eventsSet") (clojure.core/assoc :events (deser-instance-status-event-list (clojure.core/get-in letvar739908 ["eventsSet" :content]))) (letvar739908 "instanceState") (clojure.core/assoc :instance-state (deser-instance-state (clojure.core/get-in letvar739908 ["instanceState" :content]))) (letvar739908 "systemStatus") (clojure.core/assoc :system-status (deser-instance-status-summary (clojure.core/get-in letvar739908 ["systemStatus" :content]))) (letvar739908 "instanceStatus") (clojure.core/assoc :instance-status (deser-instance-status-summary (clojure.core/get-in letvar739908 ["instanceStatus" :content]))))))

(clojure.core/defn- deser-spot-fleet-launch-specification [input] (clojure.core/let [letvar740016 {"groupSet" (portkey.aws/search-for-tag input "groupSet" :flattened? nil :xmlAttribute? nil), "ramdiskId" (portkey.aws/search-for-tag input "ramdiskId" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "addressingType" (portkey.aws/search-for-tag input "addressingType" :flattened? nil :xmlAttribute? nil), "blockDeviceMapping" (portkey.aws/search-for-tag input "blockDeviceMapping" :flattened? nil :xmlAttribute? nil), "keyName" (portkey.aws/search-for-tag input "keyName" :flattened? nil :xmlAttribute? nil), "placement" (portkey.aws/search-for-tag input "placement" :flattened? nil :xmlAttribute? nil), "monitoring" (portkey.aws/search-for-tag input "monitoring" :flattened? nil :xmlAttribute? nil), "iamInstanceProfile" (portkey.aws/search-for-tag input "iamInstanceProfile" :flattened? nil :xmlAttribute? nil), "spotPrice" (portkey.aws/search-for-tag input "spotPrice" :flattened? nil :xmlAttribute? nil), "userData" (portkey.aws/search-for-tag input "userData" :flattened? nil :xmlAttribute? nil), "imageId" (portkey.aws/search-for-tag input "imageId" :flattened? nil :xmlAttribute? nil), "ebsOptimized" (portkey.aws/search-for-tag input "ebsOptimized" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "weightedCapacity" (portkey.aws/search-for-tag input "weightedCapacity" :flattened? nil :xmlAttribute? nil), "kernelId" (portkey.aws/search-for-tag input "kernelId" :flattened? nil :xmlAttribute? nil), "networkInterfaceSet" (portkey.aws/search-for-tag input "networkInterfaceSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar740016 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar740016 ["kernelId" :content]))) (letvar740016 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar740016 ["imageId" :content]))) (letvar740016 "placement") (clojure.core/assoc :placement (deser-spot-placement (clojure.core/get-in letvar740016 ["placement" :content]))) (letvar740016 "addressingType") (clojure.core/assoc :addressing-type (deser-string (clojure.core/get-in letvar740016 ["addressingType" :content]))) (letvar740016 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar740016 ["subnetId" :content]))) (letvar740016 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar740016 ["groupSet" :content]))) (letvar740016 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar740016 ["ebsOptimized" :content]))) (letvar740016 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar740016 ["instanceType" :content]))) (letvar740016 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar740016 ["keyName" :content]))) (letvar740016 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar740016 ["spotPrice" :content]))) (letvar740016 "monitoring") (clojure.core/assoc :monitoring (deser-spot-fleet-monitoring (clojure.core/get-in letvar740016 ["monitoring" :content]))) (letvar740016 "weightedCapacity") (clojure.core/assoc :weighted-capacity (deser-double (clojure.core/get-in letvar740016 ["weightedCapacity" :content]))) (letvar740016 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar740016 ["blockDeviceMapping" :content]))) (letvar740016 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar740016 ["ramdiskId" :content]))) (letvar740016 "userData") (clojure.core/assoc :user-data (deser-string (clojure.core/get-in letvar740016 ["userData" :content]))) (letvar740016 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile-specification (clojure.core/get-in letvar740016 ["iamInstanceProfile" :content]))) (letvar740016 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-specification-list (clojure.core/get-in letvar740016 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-ip-range [input] (clojure.core/let [letvar740124 {"cidrIp" (portkey.aws/search-for-tag input "cidrIp" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar740124 "cidrIp") (clojure.core/assoc :cidr-ip (deser-string (clojure.core/get-in letvar740124 ["cidrIp" :content]))))))

(clojure.core/defn- deser-stale-security-group [input] (clojure.core/let [letvar740232 {"groupId" (portkey.aws/search-for-tag input "groupId" :flattened? nil :xmlAttribute? nil), "groupName" (portkey.aws/search-for-tag input "groupName" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "staleIpPermissions" (portkey.aws/search-for-tag input "staleIpPermissions" :flattened? nil :xmlAttribute? nil), "staleIpPermissionsEgress" (portkey.aws/search-for-tag input "staleIpPermissionsEgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:group-id (deser-string (clojure.core/get-in letvar740232 ["groupId" :content]))} (letvar740232 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar740232 ["groupName" :content]))) (letvar740232 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar740232 ["description" :content]))) (letvar740232 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar740232 ["vpcId" :content]))) (letvar740232 "staleIpPermissions") (clojure.core/assoc :stale-ip-permissions (deser-stale-ip-permission-set (clojure.core/get-in letvar740232 ["staleIpPermissions" :content]))) (letvar740232 "staleIpPermissionsEgress") (clojure.core/assoc :stale-ip-permissions-egress (deser-stale-ip-permission-set (clojure.core/get-in letvar740232 ["staleIpPermissionsEgress" :content]))))))

(clojure.core/defn- deser-import-snapshot-task [input] (clojure.core/let [letvar740340 {"importTaskId" (portkey.aws/search-for-tag input "importTaskId" :flattened? nil :xmlAttribute? nil), "snapshotTaskDetail" (portkey.aws/search-for-tag input "snapshotTaskDetail" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar740340 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar740340 ["importTaskId" :content]))) (letvar740340 "snapshotTaskDetail") (clojure.core/assoc :snapshot-task-detail (deser-snapshot-task-detail (clojure.core/get-in letvar740340 ["snapshotTaskDetail" :content]))) (letvar740340 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar740340 ["description" :content]))))))

(clojure.core/defn- deser-container-format [input] (clojure.core/get {"ova" :ova} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vpc-peering-connection-state-reason [input] (clojure.core/let [letvar740453 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar740453 "code") (clojure.core/assoc :code (deser-vpc-peering-connection-state-reason-code (clojure.core/get-in letvar740453 ["code" :content]))) (letvar740453 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar740453 ["message" :content]))))))

(clojure.core/defn- deser-instance [input] (clojure.core/let [letvar740561 {"groupSet" (portkey.aws/search-for-tag input "groupSet" :flattened? nil :xmlAttribute? nil), "ramdiskId" (portkey.aws/search-for-tag input "ramdiskId" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "productCodes" (portkey.aws/search-for-tag input "productCodes" :flattened? nil :xmlAttribute? nil), "architecture" (portkey.aws/search-for-tag input "architecture" :flattened? nil :xmlAttribute? nil), "stateReason" (portkey.aws/search-for-tag input "stateReason" :flattened? nil :xmlAttribute? nil), "privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "clientToken" (portkey.aws/search-for-tag input "clientToken" :flattened? nil :xmlAttribute? nil), "blockDeviceMapping" (portkey.aws/search-for-tag input "blockDeviceMapping" :flattened? nil :xmlAttribute? nil), "keyName" (portkey.aws/search-for-tag input "keyName" :flattened? nil :xmlAttribute? nil), "spotInstanceRequestId" (portkey.aws/search-for-tag input "spotInstanceRequestId" :flattened? nil :xmlAttribute? nil), "instanceLifecycle" (portkey.aws/search-for-tag input "instanceLifecycle" :flattened? nil :xmlAttribute? nil), "placement" (portkey.aws/search-for-tag input "placement" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "privateDnsName" (portkey.aws/search-for-tag input "privateDnsName" :flattened? nil :xmlAttribute? nil), "monitoring" (portkey.aws/search-for-tag input "monitoring" :flattened? nil :xmlAttribute? nil), "iamInstanceProfile" (portkey.aws/search-for-tag input "iamInstanceProfile" :flattened? nil :xmlAttribute? nil), "sourceDestCheck" (portkey.aws/search-for-tag input "sourceDestCheck" :flattened? nil :xmlAttribute? nil), "virtualizationType" (portkey.aws/search-for-tag input "virtualizationType" :flattened? nil :xmlAttribute? nil), "launchTime" (portkey.aws/search-for-tag input "launchTime" :flattened? nil :xmlAttribute? nil), "imageId" (portkey.aws/search-for-tag input "imageId" :flattened? nil :xmlAttribute? nil), "rootDeviceType" (portkey.aws/search-for-tag input "rootDeviceType" :flattened? nil :xmlAttribute? nil), "ebsOptimized" (portkey.aws/search-for-tag input "ebsOptimized" :flattened? nil :xmlAttribute? nil), "amiLaunchIndex" (portkey.aws/search-for-tag input "amiLaunchIndex" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "kernelId" (portkey.aws/search-for-tag input "kernelId" :flattened? nil :xmlAttribute? nil), "reason" (portkey.aws/search-for-tag input "reason" :flattened? nil :xmlAttribute? nil), "enaSupport" (portkey.aws/search-for-tag input "enaSupport" :flattened? nil :xmlAttribute? nil), "instanceState" (portkey.aws/search-for-tag input "instanceState" :flattened? nil :xmlAttribute? nil), "networkInterfaceSet" (portkey.aws/search-for-tag input "networkInterfaceSet" :flattened? nil :xmlAttribute? nil), "rootDeviceName" (portkey.aws/search-for-tag input "rootDeviceName" :flattened? nil :xmlAttribute? nil), "hypervisor" (portkey.aws/search-for-tag input "hypervisor" :flattened? nil :xmlAttribute? nil), "platform" (portkey.aws/search-for-tag input "platform" :flattened? nil :xmlAttribute? nil), "instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "dnsName" (portkey.aws/search-for-tag input "dnsName" :flattened? nil :xmlAttribute? nil), "ipAddress" (portkey.aws/search-for-tag input "ipAddress" :flattened? nil :xmlAttribute? nil), "sriovNetSupport" (portkey.aws/search-for-tag input "sriovNetSupport" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar740561 "dnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar740561 ["dnsName" :content]))) (letvar740561 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar740561 ["kernelId" :content]))) (letvar740561 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar740561 ["spotInstanceRequestId" :content]))) (letvar740561 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar740561 ["instanceId" :content]))) (letvar740561 "instanceLifecycle") (clojure.core/assoc :instance-lifecycle (deser-instance-lifecycle-type (clojure.core/get-in letvar740561 ["instanceLifecycle" :content]))) (letvar740561 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar740561 ["platform" :content]))) (letvar740561 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar740561 ["imageId" :content]))) (letvar740561 "placement") (clojure.core/assoc :placement (deser-placement (clojure.core/get-in letvar740561 ["placement" :content]))) (letvar740561 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar740561 ["subnetId" :content]))) (letvar740561 "rootDeviceType") (clojure.core/assoc :root-device-type (deser-device-type (clojure.core/get-in letvar740561 ["rootDeviceType" :content]))) (letvar740561 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar740561 ["groupSet" :content]))) (letvar740561 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar740561 ["ebsOptimized" :content]))) (letvar740561 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar740561 ["instanceType" :content]))) (letvar740561 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-string (clojure.core/get-in letvar740561 ["sriovNetSupport" :content]))) (letvar740561 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar740561 ["tagSet" :content]))) (letvar740561 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar740561 ["sourceDestCheck" :content]))) (letvar740561 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar740561 ["keyName" :content]))) (letvar740561 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar740561 ["privateDnsName" :content]))) (letvar740561 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar740561 ["vpcId" :content]))) (letvar740561 "monitoring") (clojure.core/assoc :monitoring (deser-monitoring (clojure.core/get-in letvar740561 ["monitoring" :content]))) (letvar740561 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-instance-block-device-mapping-list (clojure.core/get-in letvar740561 ["blockDeviceMapping" :content]))) (letvar740561 "hypervisor") (clojure.core/assoc :hypervisor (deser-hypervisor-type (clojure.core/get-in letvar740561 ["hypervisor" :content]))) (letvar740561 "architecture") (clojure.core/assoc :architecture (deser-architecture-values (clojure.core/get-in letvar740561 ["architecture" :content]))) (letvar740561 "virtualizationType") (clojure.core/assoc :virtualization-type (deser-virtualization-type (clojure.core/get-in letvar740561 ["virtualizationType" :content]))) (letvar740561 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar740561 ["productCodes" :content]))) (letvar740561 "instanceState") (clojure.core/assoc :state (deser-instance-state (clojure.core/get-in letvar740561 ["instanceState" :content]))) (letvar740561 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-string (clojure.core/get-in letvar740561 ["rootDeviceName" :content]))) (letvar740561 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar740561 ["ramdiskId" :content]))) (letvar740561 "launchTime") (clojure.core/assoc :launch-time (deser-date-time (clojure.core/get-in letvar740561 ["launchTime" :content]))) (letvar740561 "ipAddress") (clojure.core/assoc :public-ip-address (deser-string (clojure.core/get-in letvar740561 ["ipAddress" :content]))) (letvar740561 "stateReason") (clojure.core/assoc :state-reason (deser-state-reason (clojure.core/get-in letvar740561 ["stateReason" :content]))) (letvar740561 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile (clojure.core/get-in letvar740561 ["iamInstanceProfile" :content]))) (letvar740561 "amiLaunchIndex") (clojure.core/assoc :ami-launch-index (deser-integer (clojure.core/get-in letvar740561 ["amiLaunchIndex" :content]))) (letvar740561 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar740561 ["clientToken" :content]))) (letvar740561 "reason") (clojure.core/assoc :state-transition-reason (deser-string (clojure.core/get-in letvar740561 ["reason" :content]))) (letvar740561 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar740561 ["privateIpAddress" :content]))) (letvar740561 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-list (clojure.core/get-in letvar740561 ["networkInterfaceSet" :content]))) (letvar740561 "enaSupport") (clojure.core/assoc :ena-support (deser-boolean (clojure.core/get-in letvar740561 ["enaSupport" :content]))))))

(clojure.core/defn- deser-nat-gateway-state [input] (clojure.core/get {"pending" :pending, "failed" :failed, "available" :available, "deleting" :deleting, "deleted" :deleted} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-block-device-mapping-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-block-device-mapping coll))) input))

(clojure.core/defn- deser-blob [input] input)

(clojure.core/defn- deser-instance-block-device-mapping-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-block-device-mapping coll))) input))

(clojure.core/defn- deser-security-group-reference [input] (clojure.core/let [letvar740710 {"groupId" (portkey.aws/search-for-tag input "groupId" :flattened? nil :xmlAttribute? nil), "referencingVpcId" (portkey.aws/search-for-tag input "referencingVpcId" :flattened? nil :xmlAttribute? nil), "vpcPeeringConnectionId" (portkey.aws/search-for-tag input "vpcPeeringConnectionId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:group-id (deser-string (clojure.core/get-in letvar740710 ["groupId" :content])), :referencing-vpc-id (deser-string (clojure.core/get-in letvar740710 ["referencingVpcId" :content]))} (letvar740710 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar740710 ["vpcPeeringConnectionId" :content]))))))

(clojure.core/defn- deser-classic-link-dns-support-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-classic-link-dns-support coll))) input))

(clojure.core/defn- deser-gateway-type [input] (clojure.core/get {"ipsec.1" :ipsec-1} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-image [input] (clojure.core/let [letvar740840 {"creationDate" (portkey.aws/search-for-tag input "creationDate" :flattened? nil :xmlAttribute? nil), "ramdiskId" (portkey.aws/search-for-tag input "ramdiskId" :flattened? nil :xmlAttribute? nil), "productCodes" (portkey.aws/search-for-tag input "productCodes" :flattened? nil :xmlAttribute? nil), "architecture" (portkey.aws/search-for-tag input "architecture" :flattened? nil :xmlAttribute? nil), "stateReason" (portkey.aws/search-for-tag input "stateReason" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "blockDeviceMapping" (portkey.aws/search-for-tag input "blockDeviceMapping" :flattened? nil :xmlAttribute? nil), "imageLocation" (portkey.aws/search-for-tag input "imageLocation" :flattened? nil :xmlAttribute? nil), "name" (portkey.aws/search-for-tag input "name" :flattened? nil :xmlAttribute? nil), "imageOwnerId" (portkey.aws/search-for-tag input "imageOwnerId" :flattened? nil :xmlAttribute? nil), "virtualizationType" (portkey.aws/search-for-tag input "virtualizationType" :flattened? nil :xmlAttribute? nil), "imageId" (portkey.aws/search-for-tag input "imageId" :flattened? nil :xmlAttribute? nil), "imageState" (portkey.aws/search-for-tag input "imageState" :flattened? nil :xmlAttribute? nil), "rootDeviceType" (portkey.aws/search-for-tag input "rootDeviceType" :flattened? nil :xmlAttribute? nil), "imageType" (portkey.aws/search-for-tag input "imageType" :flattened? nil :xmlAttribute? nil), "imageOwnerAlias" (portkey.aws/search-for-tag input "imageOwnerAlias" :flattened? nil :xmlAttribute? nil), "kernelId" (portkey.aws/search-for-tag input "kernelId" :flattened? nil :xmlAttribute? nil), "enaSupport" (portkey.aws/search-for-tag input "enaSupport" :flattened? nil :xmlAttribute? nil), "rootDeviceName" (portkey.aws/search-for-tag input "rootDeviceName" :flattened? nil :xmlAttribute? nil), "hypervisor" (portkey.aws/search-for-tag input "hypervisor" :flattened? nil :xmlAttribute? nil), "isPublic" (portkey.aws/search-for-tag input "isPublic" :flattened? nil :xmlAttribute? nil), "platform" (portkey.aws/search-for-tag input "platform" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil), "sriovNetSupport" (portkey.aws/search-for-tag input "sriovNetSupport" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar740840 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar740840 ["kernelId" :content]))) (letvar740840 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar740840 ["platform" :content]))) (letvar740840 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar740840 ["imageId" :content]))) (letvar740840 "rootDeviceType") (clojure.core/assoc :root-device-type (deser-device-type (clojure.core/get-in letvar740840 ["rootDeviceType" :content]))) (letvar740840 "imageOwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar740840 ["imageOwnerId" :content]))) (letvar740840 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-string (clojure.core/get-in letvar740840 ["sriovNetSupport" :content]))) (letvar740840 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar740840 ["tagSet" :content]))) (letvar740840 "isPublic") (clojure.core/assoc :public (deser-boolean (clojure.core/get-in letvar740840 ["isPublic" :content]))) (letvar740840 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar740840 ["description" :content]))) (letvar740840 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar740840 ["blockDeviceMapping" :content]))) (letvar740840 "hypervisor") (clojure.core/assoc :hypervisor (deser-hypervisor-type (clojure.core/get-in letvar740840 ["hypervisor" :content]))) (letvar740840 "architecture") (clojure.core/assoc :architecture (deser-architecture-values (clojure.core/get-in letvar740840 ["architecture" :content]))) (letvar740840 "imageOwnerAlias") (clojure.core/assoc :image-owner-alias (deser-string (clojure.core/get-in letvar740840 ["imageOwnerAlias" :content]))) (letvar740840 "creationDate") (clojure.core/assoc :creation-date (deser-string (clojure.core/get-in letvar740840 ["creationDate" :content]))) (letvar740840 "virtualizationType") (clojure.core/assoc :virtualization-type (deser-virtualization-type (clojure.core/get-in letvar740840 ["virtualizationType" :content]))) (letvar740840 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar740840 ["productCodes" :content]))) (letvar740840 "imageLocation") (clojure.core/assoc :image-location (deser-string (clojure.core/get-in letvar740840 ["imageLocation" :content]))) (letvar740840 "imageState") (clojure.core/assoc :state (deser-image-state (clojure.core/get-in letvar740840 ["imageState" :content]))) (letvar740840 "imageType") (clojure.core/assoc :image-type (deser-image-type-values (clojure.core/get-in letvar740840 ["imageType" :content]))) (letvar740840 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-string (clojure.core/get-in letvar740840 ["rootDeviceName" :content]))) (letvar740840 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar740840 ["ramdiskId" :content]))) (letvar740840 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar740840 ["name" :content]))) (letvar740840 "stateReason") (clojure.core/assoc :state-reason (deser-state-reason (clojure.core/get-in letvar740840 ["stateReason" :content]))) (letvar740840 "enaSupport") (clojure.core/assoc :ena-support (deser-boolean (clojure.core/get-in letvar740840 ["enaSupport" :content]))))))

(clojure.core/defn- deser-ip-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-range coll))) input))

(clojure.core/defn- deser-image-type-values [input] (clojure.core/get {"machine" :machine, "kernel" :kernel, "ramdisk" :ramdisk} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-classic-link-instance [input] (clojure.core/let [letvar740970 {"instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "groupSet" (portkey.aws/search-for-tag input "groupSet" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar740970 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar740970 ["instanceId" :content]))) (letvar740970 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar740970 ["vpcId" :content]))) (letvar740970 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar740970 ["groupSet" :content]))) (letvar740970 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar740970 ["tagSet" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancel-spot-fleet-requests-error-item coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-modification coll))) input))

(clojure.core/defn- deser-network-acl-entry-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl-entry coll))) input))

(clojure.core/defn- deser-network-interface-private-ip-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface-private-ip-address coll))) input))

(clojure.core/defn- deser-conversion-task-state [input] (clojure.core/get {"active" :active, "cancelling" :cancelling, "cancelled" :cancelled, "completed" :completed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-offering-class-type [input] (clojure.core/get {"standard" :standard, "convertible" :convertible} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-nat-gateway-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-nat-gateway-address coll))) input))

(clojure.core/defn- deser-reserved-instances-modification [input] (clojure.core/let [letvar741173 {"updateDate" (portkey.aws/search-for-tag input "updateDate" :flattened? nil :xmlAttribute? nil), "createDate" (portkey.aws/search-for-tag input "createDate" :flattened? nil :xmlAttribute? nil), "clientToken" (portkey.aws/search-for-tag input "clientToken" :flattened? nil :xmlAttribute? nil), "effectiveDate" (portkey.aws/search-for-tag input "effectiveDate" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "statusMessage" (portkey.aws/search-for-tag input "statusMessage" :flattened? nil :xmlAttribute? nil), "reservedInstancesSet" (portkey.aws/search-for-tag input "reservedInstancesSet" :flattened? nil :xmlAttribute? nil), "modificationResultSet" (portkey.aws/search-for-tag input "modificationResultSet" :flattened? nil :xmlAttribute? nil), "reservedInstancesModificationId" (portkey.aws/search-for-tag input "reservedInstancesModificationId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741173 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar741173 ["statusMessage" :content]))) (letvar741173 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar741173 ["createDate" :content]))) (letvar741173 "reservedInstancesModificationId") (clojure.core/assoc :reserved-instances-modification-id (deser-string (clojure.core/get-in letvar741173 ["reservedInstancesModificationId" :content]))) (letvar741173 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar741173 ["status" :content]))) (letvar741173 "modificationResultSet") (clojure.core/assoc :modification-results (deser-reserved-instances-modification-result-list (clojure.core/get-in letvar741173 ["modificationResultSet" :content]))) (letvar741173 "reservedInstancesSet") (clojure.core/assoc :reserved-instances-ids (deser-reserved-intances-ids (clojure.core/get-in letvar741173 ["reservedInstancesSet" :content]))) (letvar741173 "updateDate") (clojure.core/assoc :update-date (deser-date-time (clojure.core/get-in letvar741173 ["updateDate" :content]))) (letvar741173 "effectiveDate") (clojure.core/assoc :effective-date (deser-date-time (clojure.core/get-in letvar741173 ["effectiveDate" :content]))) (letvar741173 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar741173 ["clientToken" :content]))))))

(clojure.core/defn- deser-listing-status [input] (clojure.core/get {"active" :active, "pending" :pending, "cancelled" :cancelled, "closed" :closed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-classic-link-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-classic-link-instance coll))) input))

(clojure.core/defn- deser-import-image-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-image-task coll))) input))

(clojure.core/defn- deser-route-table-association-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route-table-association coll))) input))

(clojure.core/defn- deser-offering-type-values [input] (clojure.core/get {"Heavy Utilization" :heavy-utilization, "Medium Utilization" :medium-utilization, "Light Utilization" :light-utilization, "No Upfront" :no-upfront, "Partial Upfront" :partial-upfront, "All Upfront" :all-upfront} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-float [input] (java.lang.Float. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-network-acl [input] (clojure.core/let [letvar741344 {"networkAclId" (portkey.aws/search-for-tag input "networkAclId" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "default" (portkey.aws/search-for-tag input "default" :flattened? nil :xmlAttribute? nil), "entrySet" (portkey.aws/search-for-tag input "entrySet" :flattened? nil :xmlAttribute? nil), "associationSet" (portkey.aws/search-for-tag input "associationSet" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741344 "networkAclId") (clojure.core/assoc :network-acl-id (deser-string (clojure.core/get-in letvar741344 ["networkAclId" :content]))) (letvar741344 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar741344 ["vpcId" :content]))) (letvar741344 "default") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar741344 ["default" :content]))) (letvar741344 "entrySet") (clojure.core/assoc :entries (deser-network-acl-entry-list (clojure.core/get-in letvar741344 ["entrySet" :content]))) (letvar741344 "associationSet") (clojure.core/assoc :associations (deser-network-acl-association-list (clojure.core/get-in letvar741344 ["associationSet" :content]))) (letvar741344 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar741344 ["tagSet" :content]))))))

(clojure.core/defn- deser-volume-attachment [input] (clojure.core/let [letvar741452 {"volumeId" (portkey.aws/search-for-tag input "volumeId" :flattened? nil :xmlAttribute? nil), "instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "device" (portkey.aws/search-for-tag input "device" :flattened? nil :xmlAttribute? nil), "status" (portkey.aws/search-for-tag input "status" :flattened? nil :xmlAttribute? nil), "attachTime" (portkey.aws/search-for-tag input "attachTime" :flattened? nil :xmlAttribute? nil), "deleteOnTermination" (portkey.aws/search-for-tag input "deleteOnTermination" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741452 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar741452 ["volumeId" :content]))) (letvar741452 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar741452 ["instanceId" :content]))) (letvar741452 "device") (clojure.core/assoc :device (deser-string (clojure.core/get-in letvar741452 ["device" :content]))) (letvar741452 "status") (clojure.core/assoc :state (deser-volume-attachment-state (clojure.core/get-in letvar741452 ["status" :content]))) (letvar741452 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar741452 ["attachTime" :content]))) (letvar741452 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar741452 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-route-table-association [input] (clojure.core/let [letvar741560 {"routeTableAssociationId" (portkey.aws/search-for-tag input "routeTableAssociationId" :flattened? nil :xmlAttribute? nil), "routeTableId" (portkey.aws/search-for-tag input "routeTableId" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "main" (portkey.aws/search-for-tag input "main" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741560 "routeTableAssociationId") (clojure.core/assoc :route-table-association-id (deser-string (clojure.core/get-in letvar741560 ["routeTableAssociationId" :content]))) (letvar741560 "routeTableId") (clojure.core/assoc :route-table-id (deser-string (clojure.core/get-in letvar741560 ["routeTableId" :content]))) (letvar741560 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar741560 ["subnetId" :content]))) (letvar741560 "main") (clojure.core/assoc :main (deser-boolean (clojure.core/get-in letvar741560 ["main" :content]))))))

(clojure.core/defn- deser-vpn-connection [input] (clojure.core/let [letvar741668 {"vpnGatewayId" (portkey.aws/search-for-tag input "vpnGatewayId" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil), "customerGatewayId" (portkey.aws/search-for-tag input "customerGatewayId" :flattened? nil :xmlAttribute? nil), "vgwTelemetry" (portkey.aws/search-for-tag input "vgwTelemetry" :flattened? nil :xmlAttribute? nil), "customerGatewayConfiguration" (portkey.aws/search-for-tag input "customerGatewayConfiguration" :flattened? nil :xmlAttribute? nil), "type" (portkey.aws/search-for-tag input "type" :flattened? nil :xmlAttribute? nil), "vpnConnectionId" (portkey.aws/search-for-tag input "vpnConnectionId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "options" (portkey.aws/search-for-tag input "options" :flattened? nil :xmlAttribute? nil), "routes" (portkey.aws/search-for-tag input "routes" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741668 "type") (clojure.core/assoc :type (deser-gateway-type (clojure.core/get-in letvar741668 ["type" :content]))) (letvar741668 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar741668 ["tagSet" :content]))) (letvar741668 "routes") (clojure.core/assoc :routes (deser-vpn-static-route-list (clojure.core/get-in letvar741668 ["routes" :content]))) (letvar741668 "customerGatewayId") (clojure.core/assoc :customer-gateway-id (deser-string (clojure.core/get-in letvar741668 ["customerGatewayId" :content]))) (letvar741668 "vpnGatewayId") (clojure.core/assoc :vpn-gateway-id (deser-string (clojure.core/get-in letvar741668 ["vpnGatewayId" :content]))) (letvar741668 "vgwTelemetry") (clojure.core/assoc :vgw-telemetry (deser-vgw-telemetry-list (clojure.core/get-in letvar741668 ["vgwTelemetry" :content]))) (letvar741668 "vpnConnectionId") (clojure.core/assoc :vpn-connection-id (deser-string (clojure.core/get-in letvar741668 ["vpnConnectionId" :content]))) (letvar741668 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar741668 ["state" :content]))) (letvar741668 "options") (clojure.core/assoc :options (deser-vpn-connection-options (clojure.core/get-in letvar741668 ["options" :content]))) (letvar741668 "customerGatewayConfiguration") (clojure.core/assoc :customer-gateway-configuration (deser-string (clojure.core/get-in letvar741668 ["customerGatewayConfiguration" :content]))))))

(clojure.core/defn- deser-region [input] (clojure.core/let [letvar741776 {"regionName" (portkey.aws/search-for-tag input "regionName" :flattened? nil :xmlAttribute? nil), "regionEndpoint" (portkey.aws/search-for-tag input "regionEndpoint" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741776 "regionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar741776 ["regionName" :content]))) (letvar741776 "regionEndpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar741776 ["regionEndpoint" :content]))))))

(clojure.core/defn- deser-state-reason [input] (clojure.core/let [letvar741884 {"code" (portkey.aws/search-for-tag input "code" :flattened? nil :xmlAttribute? nil), "message" (portkey.aws/search-for-tag input "message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741884 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar741884 ["code" :content]))) (letvar741884 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar741884 ["message" :content]))))))

(clojure.core/defn- deser-iam-instance-profile [input] (clojure.core/let [letvar741992 {"arn" (portkey.aws/search-for-tag input "arn" :flattened? nil :xmlAttribute? nil), "id" (portkey.aws/search-for-tag input "id" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar741992 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar741992 ["arn" :content]))) (letvar741992 "id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar741992 ["id" :content]))))))

(clojure.core/defn- deser-scheduled-instance-availability [input] (clojure.core/let [letvar742100 {"firstSlotStartTime" (portkey.aws/search-for-tag input "firstSlotStartTime" :flattened? nil :xmlAttribute? nil), "maxTermDurationInDays" (portkey.aws/search-for-tag input "maxTermDurationInDays" :flattened? nil :xmlAttribute? nil), "networkPlatform" (portkey.aws/search-for-tag input "networkPlatform" :flattened? nil :xmlAttribute? nil), "hourlyPrice" (portkey.aws/search-for-tag input "hourlyPrice" :flattened? nil :xmlAttribute? nil), "purchaseToken" (portkey.aws/search-for-tag input "purchaseToken" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "recurrence" (portkey.aws/search-for-tag input "recurrence" :flattened? nil :xmlAttribute? nil), "availableInstanceCount" (portkey.aws/search-for-tag input "availableInstanceCount" :flattened? nil :xmlAttribute? nil), "totalScheduledInstanceHours" (portkey.aws/search-for-tag input "totalScheduledInstanceHours" :flattened? nil :xmlAttribute? nil), "instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "slotDurationInHours" (portkey.aws/search-for-tag input "slotDurationInHours" :flattened? nil :xmlAttribute? nil), "minTermDurationInDays" (portkey.aws/search-for-tag input "minTermDurationInDays" :flattened? nil :xmlAttribute? nil), "platform" (portkey.aws/search-for-tag input "platform" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742100 "maxTermDurationInDays") (clojure.core/assoc :max-term-duration-in-days (deser-integer (clojure.core/get-in letvar742100 ["maxTermDurationInDays" :content]))) (letvar742100 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar742100 ["platform" :content]))) (letvar742100 "networkPlatform") (clojure.core/assoc :network-platform (deser-string (clojure.core/get-in letvar742100 ["networkPlatform" :content]))) (letvar742100 "recurrence") (clojure.core/assoc :recurrence (deser-scheduled-instance-recurrence (clojure.core/get-in letvar742100 ["recurrence" :content]))) (letvar742100 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar742100 ["instanceType" :content]))) (letvar742100 "totalScheduledInstanceHours") (clojure.core/assoc :total-scheduled-instance-hours (deser-integer (clojure.core/get-in letvar742100 ["totalScheduledInstanceHours" :content]))) (letvar742100 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar742100 ["availabilityZone" :content]))) (letvar742100 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar742100 ["hourlyPrice" :content]))) (letvar742100 "purchaseToken") (clojure.core/assoc :purchase-token (deser-string (clojure.core/get-in letvar742100 ["purchaseToken" :content]))) (letvar742100 "slotDurationInHours") (clojure.core/assoc :slot-duration-in-hours (deser-integer (clojure.core/get-in letvar742100 ["slotDurationInHours" :content]))) (letvar742100 "firstSlotStartTime") (clojure.core/assoc :first-slot-start-time (deser-date-time (clojure.core/get-in letvar742100 ["firstSlotStartTime" :content]))) (letvar742100 "availableInstanceCount") (clojure.core/assoc :available-instance-count (deser-integer (clojure.core/get-in letvar742100 ["availableInstanceCount" :content]))) (letvar742100 "minTermDurationInDays") (clojure.core/assoc :min-term-duration-in-days (deser-integer (clojure.core/get-in letvar742100 ["minTermDurationInDays" :content]))))))

(clojure.core/defn- deser-active-instance [input] (clojure.core/let [letvar742208 {"instanceType" (portkey.aws/search-for-tag input "instanceType" :flattened? nil :xmlAttribute? nil), "instanceId" (portkey.aws/search-for-tag input "instanceId" :flattened? nil :xmlAttribute? nil), "spotInstanceRequestId" (portkey.aws/search-for-tag input "spotInstanceRequestId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742208 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar742208 ["instanceType" :content]))) (letvar742208 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar742208 ["instanceId" :content]))) (letvar742208 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar742208 ["spotInstanceRequestId" :content]))))))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-account-attribute-value [input] (clojure.core/let [letvar742333 {"attributeValue" (portkey.aws/search-for-tag input "attributeValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742333 "attributeValue") (clojure.core/assoc :attribute-value (deser-string (clojure.core/get-in letvar742333 ["attributeValue" :content]))))))

(clojure.core/defn- deser-vpc-peering-connection-state-reason-code [input] (clojure.core/get {"expired" :expired, "deleting" :deleting, "failed" :failed, "initiating-request" :initiatingrequest, "provisioning" :provisioning, "deleted" :deleted, "pending-acceptance" :pendingacceptance, "active" :active, "rejected" :rejected} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-launch-permission [input] (clojure.core/let [letvar742446 {"userId" (portkey.aws/search-for-tag input "userId" :flattened? nil :xmlAttribute? nil), "group" (portkey.aws/search-for-tag input "group" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742446 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar742446 ["userId" :content]))) (letvar742446 "group") (clojure.core/assoc :group (deser-permission-group (clojure.core/get-in letvar742446 ["group" :content]))))))

(clojure.core/defn- deser-internet-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-internet-gateway coll))) input))

(clojure.core/defn- deser-account-attribute [input] (clojure.core/let [letvar742571 {"attributeName" (portkey.aws/search-for-tag input "attributeName" :flattened? nil :xmlAttribute? nil), "attributeValueSet" (portkey.aws/search-for-tag input "attributeValueSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742571 "attributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar742571 ["attributeName" :content]))) (letvar742571 "attributeValueSet") (clojure.core/assoc :attribute-values (deser-account-attribute-value-list (clojure.core/get-in letvar742571 ["attributeValueSet" :content]))))))

(clojure.core/defn- deser-host [input] (clojure.core/let [letvar742679 {"availableCapacity" (portkey.aws/search-for-tag input "availableCapacity" :flattened? nil :xmlAttribute? nil), "clientToken" (portkey.aws/search-for-tag input "clientToken" :flattened? nil :xmlAttribute? nil), "hostReservationId" (portkey.aws/search-for-tag input "hostReservationId" :flattened? nil :xmlAttribute? nil), "hostProperties" (portkey.aws/search-for-tag input "hostProperties" :flattened? nil :xmlAttribute? nil), "hostId" (portkey.aws/search-for-tag input "hostId" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "instances" (portkey.aws/search-for-tag input "instances" :flattened? nil :xmlAttribute? nil), "autoPlacement" (portkey.aws/search-for-tag input "autoPlacement" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742679 "hostProperties") (clojure.core/assoc :host-properties (deser-host-properties (clojure.core/get-in letvar742679 ["hostProperties" :content]))) (letvar742679 "hostId") (clojure.core/assoc :host-id (deser-string (clojure.core/get-in letvar742679 ["hostId" :content]))) (letvar742679 "availableCapacity") (clojure.core/assoc :available-capacity (deser-available-capacity (clojure.core/get-in letvar742679 ["availableCapacity" :content]))) (letvar742679 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar742679 ["availabilityZone" :content]))) (letvar742679 "autoPlacement") (clojure.core/assoc :auto-placement (deser-auto-placement (clojure.core/get-in letvar742679 ["autoPlacement" :content]))) (letvar742679 "hostReservationId") (clojure.core/assoc :host-reservation-id (deser-string (clojure.core/get-in letvar742679 ["hostReservationId" :content]))) (letvar742679 "state") (clojure.core/assoc :state (deser-allocation-state (clojure.core/get-in letvar742679 ["state" :content]))) (letvar742679 "instances") (clojure.core/assoc :instances (deser-host-instance-list (clojure.core/get-in letvar742679 ["instances" :content]))) (letvar742679 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar742679 ["clientToken" :content]))))))

(clojure.core/defn- deser-activity-status [input] (clojure.core/get {"error" :error, "pending_fulfillment" :pending-fulfillment, "pending_termination" :pending-termination, "fulfilled" :fulfilled} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-placement-group [input] (clojure.core/let [letvar742792 {"groupName" (portkey.aws/search-for-tag input "groupName" :flattened? nil :xmlAttribute? nil), "strategy" (portkey.aws/search-for-tag input "strategy" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742792 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar742792 ["groupName" :content]))) (letvar742792 "strategy") (clojure.core/assoc :strategy (deser-placement-strategy (clojure.core/get-in letvar742792 ["strategy" :content]))) (letvar742792 "state") (clojure.core/assoc :state (deser-placement-group-state (clojure.core/get-in letvar742792 ["state" :content]))))))

(clojure.core/defn- deser-reserved-instance-reservation-value [input] (clojure.core/let [letvar742900 {"reservedInstanceId" (portkey.aws/search-for-tag input "reservedInstanceId" :flattened? nil :xmlAttribute? nil), "reservationValue" (portkey.aws/search-for-tag input "reservationValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar742900 "reservedInstanceId") (clojure.core/assoc :reserved-instance-id (deser-string (clojure.core/get-in letvar742900 ["reservedInstanceId" :content]))) (letvar742900 "reservationValue") (clojure.core/assoc :reservation-value (deser-reservation-value (clojure.core/get-in letvar742900 ["reservationValue" :content]))))))

(clojure.core/defn- deser-private-ip-address-specification [input] (clojure.core/let [letvar743008 {"privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil), "primary" (portkey.aws/search-for-tag input "primary" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:private-ip-address (deser-string (clojure.core/get-in letvar743008 ["privateIpAddress" :content]))} (letvar743008 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar743008 ["primary" :content]))))))

(clojure.core/defn- deser-reservation-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reservation coll))) input))

(clojure.core/defn- deser-user-id-group-pair [input] (clojure.core/let [letvar743133 {"userId" (portkey.aws/search-for-tag input "userId" :flattened? nil :xmlAttribute? nil), "groupName" (portkey.aws/search-for-tag input "groupName" :flattened? nil :xmlAttribute? nil), "groupId" (portkey.aws/search-for-tag input "groupId" :flattened? nil :xmlAttribute? nil), "vpcId" (portkey.aws/search-for-tag input "vpcId" :flattened? nil :xmlAttribute? nil), "vpcPeeringConnectionId" (portkey.aws/search-for-tag input "vpcPeeringConnectionId" :flattened? nil :xmlAttribute? nil), "peeringStatus" (portkey.aws/search-for-tag input "peeringStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar743133 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar743133 ["userId" :content]))) (letvar743133 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar743133 ["groupName" :content]))) (letvar743133 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar743133 ["groupId" :content]))) (letvar743133 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar743133 ["vpcId" :content]))) (letvar743133 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar743133 ["vpcPeeringConnectionId" :content]))) (letvar743133 "peeringStatus") (clojure.core/assoc :peering-status (deser-string (clojure.core/get-in letvar743133 ["peeringStatus" :content]))))))

(clojure.core/defn- deser-host-reservation [input] (clojure.core/let [letvar743241 {"hostReservationId" (portkey.aws/search-for-tag input "hostReservationId" :flattened? nil :xmlAttribute? nil), "hostIdSet" (portkey.aws/search-for-tag input "hostIdSet" :flattened? nil :xmlAttribute? nil), "count" (portkey.aws/search-for-tag input "count" :flattened? nil :xmlAttribute? nil), "hourlyPrice" (portkey.aws/search-for-tag input "hourlyPrice" :flattened? nil :xmlAttribute? nil), "start" (portkey.aws/search-for-tag input "start" :flattened? nil :xmlAttribute? nil), "currencyCode" (portkey.aws/search-for-tag input "currencyCode" :flattened? nil :xmlAttribute? nil), "duration" (portkey.aws/search-for-tag input "duration" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "paymentOption" (portkey.aws/search-for-tag input "paymentOption" :flattened? nil :xmlAttribute? nil), "offeringId" (portkey.aws/search-for-tag input "offeringId" :flattened? nil :xmlAttribute? nil), "upfrontPrice" (portkey.aws/search-for-tag input "upfrontPrice" :flattened? nil :xmlAttribute? nil), "instanceFamily" (portkey.aws/search-for-tag input "instanceFamily" :flattened? nil :xmlAttribute? nil), "end" (portkey.aws/search-for-tag input "end" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar743241 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar743241 ["currencyCode" :content]))) (letvar743241 "upfrontPrice") (clojure.core/assoc :upfront-price (deser-string (clojure.core/get-in letvar743241 ["upfrontPrice" :content]))) (letvar743241 "hostIdSet") (clojure.core/assoc :host-id-set (deser-response-host-id-set (clojure.core/get-in letvar743241 ["hostIdSet" :content]))) (letvar743241 "start") (clojure.core/assoc :start (deser-date-time (clojure.core/get-in letvar743241 ["start" :content]))) (letvar743241 "end") (clojure.core/assoc :end (deser-date-time (clojure.core/get-in letvar743241 ["end" :content]))) (letvar743241 "count") (clojure.core/assoc :count (deser-integer (clojure.core/get-in letvar743241 ["count" :content]))) (letvar743241 "paymentOption") (clojure.core/assoc :payment-option (deser-payment-option (clojure.core/get-in letvar743241 ["paymentOption" :content]))) (letvar743241 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar743241 ["hourlyPrice" :content]))) (letvar743241 "offeringId") (clojure.core/assoc :offering-id (deser-string (clojure.core/get-in letvar743241 ["offeringId" :content]))) (letvar743241 "duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar743241 ["duration" :content]))) (letvar743241 "instanceFamily") (clojure.core/assoc :instance-family (deser-string (clojure.core/get-in letvar743241 ["instanceFamily" :content]))) (letvar743241 "hostReservationId") (clojure.core/assoc :host-reservation-id (deser-string (clojure.core/get-in letvar743241 ["hostReservationId" :content]))) (letvar743241 "state") (clojure.core/assoc :state (deser-reservation-state (clojure.core/get-in letvar743241 ["state" :content]))))))

(clojure.core/defn- deser-telemetry-status [input] (clojure.core/get {"UP" :up, "DOWN" :down} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vpn-gateway [input] (clojure.core/let [letvar743354 {"vpnGatewayId" (portkey.aws/search-for-tag input "vpnGatewayId" :flattened? nil :xmlAttribute? nil), "state" (portkey.aws/search-for-tag input "state" :flattened? nil :xmlAttribute? nil), "type" (portkey.aws/search-for-tag input "type" :flattened? nil :xmlAttribute? nil), "availabilityZone" (portkey.aws/search-for-tag input "availabilityZone" :flattened? nil :xmlAttribute? nil), "attachments" (portkey.aws/search-for-tag input "attachments" :flattened? nil :xmlAttribute? nil), "tagSet" (portkey.aws/search-for-tag input "tagSet" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar743354 "vpnGatewayId") (clojure.core/assoc :vpn-gateway-id (deser-string (clojure.core/get-in letvar743354 ["vpnGatewayId" :content]))) (letvar743354 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar743354 ["state" :content]))) (letvar743354 "type") (clojure.core/assoc :type (deser-gateway-type (clojure.core/get-in letvar743354 ["type" :content]))) (letvar743354 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar743354 ["availabilityZone" :content]))) (letvar743354 "attachments") (clojure.core/assoc :vpc-attachments (deser-vpc-attachment-list (clojure.core/get-in letvar743354 ["attachments" :content]))) (letvar743354 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar743354 ["tagSet" :content]))))))

(clojure.core/defn- deser-network-interface-association [input] (clojure.core/let [letvar743462 {"publicIp" (portkey.aws/search-for-tag input "publicIp" :flattened? nil :xmlAttribute? nil), "publicDnsName" (portkey.aws/search-for-tag input "publicDnsName" :flattened? nil :xmlAttribute? nil), "ipOwnerId" (portkey.aws/search-for-tag input "ipOwnerId" :flattened? nil :xmlAttribute? nil), "allocationId" (portkey.aws/search-for-tag input "allocationId" :flattened? nil :xmlAttribute? nil), "associationId" (portkey.aws/search-for-tag input "associationId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar743462 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar743462 ["publicIp" :content]))) (letvar743462 "publicDnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar743462 ["publicDnsName" :content]))) (letvar743462 "ipOwnerId") (clojure.core/assoc :ip-owner-id (deser-string (clojure.core/get-in letvar743462 ["ipOwnerId" :content]))) (letvar743462 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar743462 ["allocationId" :content]))) (letvar743462 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar743462 ["associationId" :content]))))))

(clojure.core/defn- deser-date-time [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- deser-instance-network-interface-specification [input] (clojure.core/let [letvar743574 {"associatePublicIpAddress" (portkey.aws/search-for-tag input "associatePublicIpAddress" :flattened? nil :xmlAttribute? nil), "subnetId" (portkey.aws/search-for-tag input "subnetId" :flattened? nil :xmlAttribute? nil), "privateIpAddressesSet" (portkey.aws/search-for-tag input "privateIpAddressesSet" :flattened? nil :xmlAttribute? nil), "privateIpAddress" (portkey.aws/search-for-tag input "privateIpAddress" :flattened? nil :xmlAttribute? nil), "secondaryPrivateIpAddressCount" (portkey.aws/search-for-tag input "secondaryPrivateIpAddressCount" :flattened? nil :xmlAttribute? nil), "deleteOnTermination" (portkey.aws/search-for-tag input "deleteOnTermination" :flattened? nil :xmlAttribute? nil), "SecurityGroupId" (portkey.aws/search-for-tag input "SecurityGroupId" :flattened? nil :xmlAttribute? nil), "deviceIndex" (portkey.aws/search-for-tag input "deviceIndex" :flattened? nil :xmlAttribute? nil), "networkInterfaceId" (portkey.aws/search-for-tag input "networkInterfaceId" :flattened? nil :xmlAttribute? nil), "description" (portkey.aws/search-for-tag input "description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar743574 "associatePublicIpAddress") (clojure.core/assoc :associate-public-ip-address (deser-boolean (clojure.core/get-in letvar743574 ["associatePublicIpAddress" :content]))) (letvar743574 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar743574 ["subnetId" :content]))) (letvar743574 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar743574 ["networkInterfaceId" :content]))) (letvar743574 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar743574 ["deviceIndex" :content]))) (letvar743574 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar743574 ["description" :content]))) (letvar743574 "SecurityGroupId") (clojure.core/assoc :groups (deser-security-group-id-string-list (clojure.core/get-in letvar743574 ["SecurityGroupId" :content]))) (letvar743574 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar743574 ["deleteOnTermination" :content]))) (letvar743574 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-private-ip-address-specification-list (clojure.core/get-in letvar743574 ["privateIpAddressesSet" :content]))) (letvar743574 "secondaryPrivateIpAddressCount") (clojure.core/assoc :secondary-private-ip-address-count (deser-integer (clojure.core/get-in letvar743574 ["secondaryPrivateIpAddressCount" :content]))) (letvar743574 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar743574 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-reservation-state [input] (clojure.core/get {"payment-pending" :paymentpending, "payment-failed" :paymentfailed, "active" :active, "retired" :retired} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-available-instance-capacity-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-capacity coll))) input))

(clojure.core/defn- deser-snapshot-state [input] (clojure.core/get {"pending" :pending, "completed" :completed, "error" :error} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-vpn-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-gateway coll))) input))

(clojure.core/defn- response-modify-spot-fleet-request-response ([input] (response-modify-spot-fleet-request-response nil input)) ([resultWrapper743620 input] (clojure.core/let [rawinput743619 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743621 {"return" (portkey.aws/search-for-tag rawinput743619 "return" :flattened? nil :result-wrapper resultWrapper743620)}] (clojure.core/cond-> {} (letvar743621 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743621 ["return" :content])))))))

(clojure.core/defn- response-get-console-screenshot-result ([input] (response-get-console-screenshot-result nil input)) ([resultWrapper743623 input] (clojure.core/let [rawinput743622 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743624 {"instanceId" (portkey.aws/search-for-tag rawinput743622 "instanceId" :flattened? nil :result-wrapper resultWrapper743623), "imageData" (portkey.aws/search-for-tag rawinput743622 "imageData" :flattened? nil :result-wrapper resultWrapper743623)}] (clojure.core/cond-> {} (letvar743624 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar743624 ["instanceId" :content]))) (letvar743624 "imageData") (clojure.core/assoc :image-data (deser-string (clojure.core/get-in letvar743624 ["imageData" :content])))))))

(clojure.core/defn- response-create-internet-gateway-result ([input] (response-create-internet-gateway-result nil input)) ([resultWrapper743626 input] (clojure.core/let [rawinput743625 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743627 {"internetGateway" (portkey.aws/search-for-tag rawinput743625 "internetGateway" :flattened? nil :result-wrapper resultWrapper743626)}] (clojure.core/cond-> {} (letvar743627 "internetGateway") (clojure.core/assoc :internet-gateway (deser-internet-gateway (clojure.core/get-in letvar743627 ["internetGateway" :content])))))))

(clojure.core/defn- response-describe-host-reservations-result ([input] (response-describe-host-reservations-result nil input)) ([resultWrapper743629 input] (clojure.core/let [rawinput743628 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743630 {"hostReservationSet" (portkey.aws/search-for-tag rawinput743628 "hostReservationSet" :flattened? nil :result-wrapper resultWrapper743629), "nextToken" (portkey.aws/search-for-tag rawinput743628 "nextToken" :flattened? nil :result-wrapper resultWrapper743629)}] (clojure.core/cond-> {} (letvar743630 "hostReservationSet") (clojure.core/assoc :host-reservation-set (deser-host-reservation-set (clojure.core/get-in letvar743630 ["hostReservationSet" :content]))) (letvar743630 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743630 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-vpc-peering-connections-result ([input] (response-describe-vpc-peering-connections-result nil input)) ([resultWrapper743632 input] (clojure.core/let [rawinput743631 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743633 {"vpcPeeringConnectionSet" (portkey.aws/search-for-tag rawinput743631 "vpcPeeringConnectionSet" :flattened? nil :result-wrapper resultWrapper743632)}] (clojure.core/cond-> {} (letvar743633 "vpcPeeringConnectionSet") (clojure.core/assoc :vpc-peering-connections (deser-vpc-peering-connection-list (clojure.core/get-in letvar743633 ["vpcPeeringConnectionSet" :content])))))))

(clojure.core/defn- response-run-scheduled-instances-result ([input] (response-run-scheduled-instances-result nil input)) ([resultWrapper743635 input] (clojure.core/let [rawinput743634 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743636 {"instanceIdSet" (portkey.aws/search-for-tag rawinput743634 "instanceIdSet" :flattened? nil :result-wrapper resultWrapper743635)}] (clojure.core/cond-> {} (letvar743636 "instanceIdSet") (clojure.core/assoc :instance-id-set (deser-instance-id-set (clojure.core/get-in letvar743636 ["instanceIdSet" :content])))))))

(clojure.core/defn- response-create-image-result ([input] (response-create-image-result nil input)) ([resultWrapper743638 input] (clojure.core/let [rawinput743637 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743639 {"imageId" (portkey.aws/search-for-tag rawinput743637 "imageId" :flattened? nil :result-wrapper resultWrapper743638)}] (clojure.core/cond-> {} (letvar743639 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar743639 ["imageId" :content])))))))

(clojure.core/defn- response-create-vpn-gateway-result ([input] (response-create-vpn-gateway-result nil input)) ([resultWrapper743641 input] (clojure.core/let [rawinput743640 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743642 {"vpnGateway" (portkey.aws/search-for-tag rawinput743640 "vpnGateway" :flattened? nil :result-wrapper resultWrapper743641)}] (clojure.core/cond-> {} (letvar743642 "vpnGateway") (clojure.core/assoc :vpn-gateway (deser-vpn-gateway (clojure.core/get-in letvar743642 ["vpnGateway" :content])))))))

(clojure.core/defn- response-create-subnet-result ([input] (response-create-subnet-result nil input)) ([resultWrapper743644 input] (clojure.core/let [rawinput743643 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743645 {"subnet" (portkey.aws/search-for-tag rawinput743643 "subnet" :flattened? nil :result-wrapper resultWrapper743644)}] (clojure.core/cond-> {} (letvar743645 "subnet") (clojure.core/assoc :subnet (deser-subnet (clojure.core/get-in letvar743645 ["subnet" :content])))))))

(clojure.core/defn- response-describe-stale-security-groups-result ([input] (response-describe-stale-security-groups-result nil input)) ([resultWrapper743647 input] (clojure.core/let [rawinput743646 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743648 {"staleSecurityGroupSet" (portkey.aws/search-for-tag rawinput743646 "staleSecurityGroupSet" :flattened? nil :result-wrapper resultWrapper743647), "nextToken" (portkey.aws/search-for-tag rawinput743646 "nextToken" :flattened? nil :result-wrapper resultWrapper743647)}] (clojure.core/cond-> {} (letvar743648 "staleSecurityGroupSet") (clojure.core/assoc :stale-security-group-set (deser-stale-security-group-set (clojure.core/get-in letvar743648 ["staleSecurityGroupSet" :content]))) (letvar743648 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743648 ["nextToken" :content])))))))

(clojure.core/defn- response-get-reserved-instances-exchange-quote-result ([input] (response-get-reserved-instances-exchange-quote-result nil input)) ([resultWrapper743650 input] (clojure.core/let [rawinput743649 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743651 {"reservedInstanceValueSet" (portkey.aws/search-for-tag rawinput743649 "reservedInstanceValueSet" :flattened? nil :result-wrapper resultWrapper743650), "targetConfigurationValueSet" (portkey.aws/search-for-tag rawinput743649 "targetConfigurationValueSet" :flattened? nil :result-wrapper resultWrapper743650), "paymentDue" (portkey.aws/search-for-tag rawinput743649 "paymentDue" :flattened? nil :result-wrapper resultWrapper743650), "validationFailureReason" (portkey.aws/search-for-tag rawinput743649 "validationFailureReason" :flattened? nil :result-wrapper resultWrapper743650), "targetConfigurationValueRollup" (portkey.aws/search-for-tag rawinput743649 "targetConfigurationValueRollup" :flattened? nil :result-wrapper resultWrapper743650), "outputReservedInstancesWillExpireAt" (portkey.aws/search-for-tag rawinput743649 "outputReservedInstancesWillExpireAt" :flattened? nil :result-wrapper resultWrapper743650), "currencyCode" (portkey.aws/search-for-tag rawinput743649 "currencyCode" :flattened? nil :result-wrapper resultWrapper743650), "reservedInstanceValueRollup" (portkey.aws/search-for-tag rawinput743649 "reservedInstanceValueRollup" :flattened? nil :result-wrapper resultWrapper743650), "isValidExchange" (portkey.aws/search-for-tag rawinput743649 "isValidExchange" :flattened? nil :result-wrapper resultWrapper743650)}] (clojure.core/cond-> {} (letvar743651 "reservedInstanceValueSet") (clojure.core/assoc :reserved-instance-value-set (deser-reserved-instance-reservation-value-set (clojure.core/get-in letvar743651 ["reservedInstanceValueSet" :content]))) (letvar743651 "currencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar743651 ["currencyCode" :content]))) (letvar743651 "targetConfigurationValueSet") (clojure.core/assoc :target-configuration-value-set (deser-target-reservation-value-set (clojure.core/get-in letvar743651 ["targetConfigurationValueSet" :content]))) (letvar743651 "validationFailureReason") (clojure.core/assoc :validation-failure-reason (deser-string (clojure.core/get-in letvar743651 ["validationFailureReason" :content]))) (letvar743651 "outputReservedInstancesWillExpireAt") (clojure.core/assoc :output-reserved-instances-will-expire-at (deser-date-time (clojure.core/get-in letvar743651 ["outputReservedInstancesWillExpireAt" :content]))) (letvar743651 "paymentDue") (clojure.core/assoc :payment-due (deser-string (clojure.core/get-in letvar743651 ["paymentDue" :content]))) (letvar743651 "isValidExchange") (clojure.core/assoc :is-valid-exchange (deser-boolean (clojure.core/get-in letvar743651 ["isValidExchange" :content]))) (letvar743651 "reservedInstanceValueRollup") (clojure.core/assoc :reserved-instance-value-rollup (deser-reservation-value (clojure.core/get-in letvar743651 ["reservedInstanceValueRollup" :content]))) (letvar743651 "targetConfigurationValueRollup") (clojure.core/assoc :target-configuration-value-rollup (deser-reservation-value (clojure.core/get-in letvar743651 ["targetConfigurationValueRollup" :content])))))))

(clojure.core/defn- response-confirm-product-instance-result ([input] (response-confirm-product-instance-result nil input)) ([resultWrapper743653 input] (clojure.core/let [rawinput743652 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743654 {"ownerId" (portkey.aws/search-for-tag rawinput743652 "ownerId" :flattened? nil :result-wrapper resultWrapper743653), "return" (portkey.aws/search-for-tag rawinput743652 "return" :flattened? nil :result-wrapper resultWrapper743653)}] (clojure.core/cond-> {} (letvar743654 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar743654 ["ownerId" :content]))) (letvar743654 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743654 ["return" :content])))))))

(clojure.core/defn- response-describe-reserved-instances-offerings-result ([input] (response-describe-reserved-instances-offerings-result nil input)) ([resultWrapper743656 input] (clojure.core/let [rawinput743655 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743657 {"reservedInstancesOfferingsSet" (portkey.aws/search-for-tag rawinput743655 "reservedInstancesOfferingsSet" :flattened? nil :result-wrapper resultWrapper743656), "nextToken" (portkey.aws/search-for-tag rawinput743655 "nextToken" :flattened? nil :result-wrapper resultWrapper743656)}] (clojure.core/cond-> {} (letvar743657 "reservedInstancesOfferingsSet") (clojure.core/assoc :reserved-instances-offerings (deser-reserved-instances-offering-list (clojure.core/get-in letvar743657 ["reservedInstancesOfferingsSet" :content]))) (letvar743657 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743657 ["nextToken" :content])))))))

(clojure.core/defn- response-modify-reserved-instances-result ([input] (response-modify-reserved-instances-result nil input)) ([resultWrapper743659 input] (clojure.core/let [rawinput743658 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743660 {"reservedInstancesModificationId" (portkey.aws/search-for-tag rawinput743658 "reservedInstancesModificationId" :flattened? nil :result-wrapper resultWrapper743659)}] (clojure.core/cond-> {} (letvar743660 "reservedInstancesModificationId") (clojure.core/assoc :reserved-instances-modification-id (deser-string (clojure.core/get-in letvar743660 ["reservedInstancesModificationId" :content])))))))

(clojure.core/defn- response-describe-vpc-classic-link-result ([input] (response-describe-vpc-classic-link-result nil input)) ([resultWrapper743662 input] (clojure.core/let [rawinput743661 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743663 {"vpcSet" (portkey.aws/search-for-tag rawinput743661 "vpcSet" :flattened? nil :result-wrapper resultWrapper743662)}] (clojure.core/cond-> {} (letvar743663 "vpcSet") (clojure.core/assoc :vpcs (deser-vpc-classic-link-list (clojure.core/get-in letvar743663 ["vpcSet" :content])))))))

(clojure.core/defn- response-create-dhcp-options-result ([input] (response-create-dhcp-options-result nil input)) ([resultWrapper743665 input] (clojure.core/let [rawinput743664 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743666 {"dhcpOptions" (portkey.aws/search-for-tag rawinput743664 "dhcpOptions" :flattened? nil :result-wrapper resultWrapper743665)}] (clojure.core/cond-> {} (letvar743666 "dhcpOptions") (clojure.core/assoc :dhcp-options (deser-dhcp-options (clojure.core/get-in letvar743666 ["dhcpOptions" :content])))))))

(clojure.core/defn- response-volume ([input] (response-volume nil input)) ([resultWrapper743668 input] (clojure.core/let [rawinput743667 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743669 {"tagSet" (portkey.aws/search-for-tag rawinput743667 "tagSet" :flattened? nil :result-wrapper resultWrapper743668), "kmsKeyId" (portkey.aws/search-for-tag rawinput743667 "kmsKeyId" :flattened? nil :result-wrapper resultWrapper743668), "createTime" (portkey.aws/search-for-tag rawinput743667 "createTime" :flattened? nil :result-wrapper resultWrapper743668), "encrypted" (portkey.aws/search-for-tag rawinput743667 "encrypted" :flattened? nil :result-wrapper resultWrapper743668), "attachmentSet" (portkey.aws/search-for-tag rawinput743667 "attachmentSet" :flattened? nil :result-wrapper resultWrapper743668), "iops" (portkey.aws/search-for-tag rawinput743667 "iops" :flattened? nil :result-wrapper resultWrapper743668), "status" (portkey.aws/search-for-tag rawinput743667 "status" :flattened? nil :result-wrapper resultWrapper743668), "availabilityZone" (portkey.aws/search-for-tag rawinput743667 "availabilityZone" :flattened? nil :result-wrapper resultWrapper743668), "volumeType" (portkey.aws/search-for-tag rawinput743667 "volumeType" :flattened? nil :result-wrapper resultWrapper743668), "volumeId" (portkey.aws/search-for-tag rawinput743667 "volumeId" :flattened? nil :result-wrapper resultWrapper743668), "size" (portkey.aws/search-for-tag rawinput743667 "size" :flattened? nil :result-wrapper resultWrapper743668), "snapshotId" (portkey.aws/search-for-tag rawinput743667 "snapshotId" :flattened? nil :result-wrapper resultWrapper743668)}] (clojure.core/cond-> {} (letvar743669 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar743669 ["encrypted" :content]))) (letvar743669 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar743669 ["tagSet" :content]))) (letvar743669 "attachmentSet") (clojure.core/assoc :attachments (deser-volume-attachment-list (clojure.core/get-in letvar743669 ["attachmentSet" :content]))) (letvar743669 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar743669 ["availabilityZone" :content]))) (letvar743669 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar743669 ["kmsKeyId" :content]))) (letvar743669 "size") (clojure.core/assoc :size (deser-integer (clojure.core/get-in letvar743669 ["size" :content]))) (letvar743669 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar743669 ["iops" :content]))) (letvar743669 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar743669 ["volumeType" :content]))) (letvar743669 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar743669 ["volumeId" :content]))) (letvar743669 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar743669 ["createTime" :content]))) (letvar743669 "status") (clojure.core/assoc :state (deser-volume-state (clojure.core/get-in letvar743669 ["status" :content]))) (letvar743669 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar743669 ["snapshotId" :content])))))))

(clojure.core/defn- response-describe-volumes-result ([input] (response-describe-volumes-result nil input)) ([resultWrapper743671 input] (clojure.core/let [rawinput743670 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743672 {"volumeSet" (portkey.aws/search-for-tag rawinput743670 "volumeSet" :flattened? nil :result-wrapper resultWrapper743671), "nextToken" (portkey.aws/search-for-tag rawinput743670 "nextToken" :flattened? nil :result-wrapper resultWrapper743671)}] (clojure.core/cond-> {} (letvar743672 "volumeSet") (clojure.core/assoc :volumes (deser-volume-list (clojure.core/get-in letvar743672 ["volumeSet" :content]))) (letvar743672 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743672 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-conversion-tasks-result ([input] (response-describe-conversion-tasks-result nil input)) ([resultWrapper743674 input] (clojure.core/let [rawinput743673 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743675 {"conversionTasks" (portkey.aws/search-for-tag rawinput743673 "conversionTasks" :flattened? nil :result-wrapper resultWrapper743674)}] (clojure.core/cond-> {} (letvar743675 "conversionTasks") (clojure.core/assoc :conversion-tasks (deser-describe-conversion-task-list (clojure.core/get-in letvar743675 ["conversionTasks" :content])))))))

(clojure.core/defn- response-describe-reserved-instances-listings-result ([input] (response-describe-reserved-instances-listings-result nil input)) ([resultWrapper743677 input] (clojure.core/let [rawinput743676 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743678 {"reservedInstancesListingsSet" (portkey.aws/search-for-tag rawinput743676 "reservedInstancesListingsSet" :flattened? nil :result-wrapper resultWrapper743677)}] (clojure.core/cond-> {} (letvar743678 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar743678 ["reservedInstancesListingsSet" :content])))))))

(clojure.core/defn- response-create-reserved-instances-listing-result ([input] (response-create-reserved-instances-listing-result nil input)) ([resultWrapper743680 input] (clojure.core/let [rawinput743679 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743681 {"reservedInstancesListingsSet" (portkey.aws/search-for-tag rawinput743679 "reservedInstancesListingsSet" :flattened? nil :result-wrapper resultWrapper743680)}] (clojure.core/cond-> {} (letvar743681 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar743681 ["reservedInstancesListingsSet" :content])))))))

(clojure.core/defn- response-describe-import-image-tasks-result ([input] (response-describe-import-image-tasks-result nil input)) ([resultWrapper743683 input] (clojure.core/let [rawinput743682 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743684 {"importImageTaskSet" (portkey.aws/search-for-tag rawinput743682 "importImageTaskSet" :flattened? nil :result-wrapper resultWrapper743683), "nextToken" (portkey.aws/search-for-tag rawinput743682 "nextToken" :flattened? nil :result-wrapper resultWrapper743683)}] (clojure.core/cond-> {} (letvar743684 "importImageTaskSet") (clojure.core/assoc :import-image-tasks (deser-import-image-task-list (clojure.core/get-in letvar743684 ["importImageTaskSet" :content]))) (letvar743684 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743684 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-instance-status-result ([input] (response-describe-instance-status-result nil input)) ([resultWrapper743686 input] (clojure.core/let [rawinput743685 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743687 {"instanceStatusSet" (portkey.aws/search-for-tag rawinput743685 "instanceStatusSet" :flattened? nil :result-wrapper resultWrapper743686), "nextToken" (portkey.aws/search-for-tag rawinput743685 "nextToken" :flattened? nil :result-wrapper resultWrapper743686)}] (clojure.core/cond-> {} (letvar743687 "instanceStatusSet") (clojure.core/assoc :instance-statuses (deser-instance-status-list (clojure.core/get-in letvar743687 ["instanceStatusSet" :content]))) (letvar743687 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743687 ["nextToken" :content])))))))

(clojure.core/defn- response-create-network-interface-result ([input] (response-create-network-interface-result nil input)) ([resultWrapper743689 input] (clojure.core/let [rawinput743688 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743690 {"networkInterface" (portkey.aws/search-for-tag rawinput743688 "networkInterface" :flattened? nil :result-wrapper resultWrapper743689)}] (clojure.core/cond-> {} (letvar743690 "networkInterface") (clojure.core/assoc :network-interface (deser-network-interface (clojure.core/get-in letvar743690 ["networkInterface" :content])))))))

(clojure.core/defn- response-describe-network-interface-attribute-result ([input] (response-describe-network-interface-attribute-result nil input)) ([resultWrapper743692 input] (clojure.core/let [rawinput743691 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743693 {"networkInterfaceId" (portkey.aws/search-for-tag rawinput743691 "networkInterfaceId" :flattened? nil :result-wrapper resultWrapper743692), "description" (portkey.aws/search-for-tag rawinput743691 "description" :flattened? nil :result-wrapper resultWrapper743692), "sourceDestCheck" (portkey.aws/search-for-tag rawinput743691 "sourceDestCheck" :flattened? nil :result-wrapper resultWrapper743692), "groupSet" (portkey.aws/search-for-tag rawinput743691 "groupSet" :flattened? nil :result-wrapper resultWrapper743692), "attachment" (portkey.aws/search-for-tag rawinput743691 "attachment" :flattened? nil :result-wrapper resultWrapper743692)}] (clojure.core/cond-> {} (letvar743693 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar743693 ["networkInterfaceId" :content]))) (letvar743693 "description") (clojure.core/assoc :description (deser-attribute-value (clojure.core/get-in letvar743693 ["description" :content]))) (letvar743693 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-attribute-boolean-value (clojure.core/get-in letvar743693 ["sourceDestCheck" :content]))) (letvar743693 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar743693 ["groupSet" :content]))) (letvar743693 "attachment") (clojure.core/assoc :attachment (deser-network-interface-attachment (clojure.core/get-in letvar743693 ["attachment" :content])))))))

(clojure.core/defn- response-attach-network-interface-result ([input] (response-attach-network-interface-result nil input)) ([resultWrapper743695 input] (clojure.core/let [rawinput743694 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743696 {"attachmentId" (portkey.aws/search-for-tag rawinput743694 "attachmentId" :flattened? nil :result-wrapper resultWrapper743695)}] (clojure.core/cond-> {} (letvar743696 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar743696 ["attachmentId" :content])))))))

(clojure.core/defn- response-describe-network-interfaces-result ([input] (response-describe-network-interfaces-result nil input)) ([resultWrapper743698 input] (clojure.core/let [rawinput743697 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743699 {"networkInterfaceSet" (portkey.aws/search-for-tag rawinput743697 "networkInterfaceSet" :flattened? nil :result-wrapper resultWrapper743698)}] (clojure.core/cond-> {} (letvar743699 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-network-interface-list (clojure.core/get-in letvar743699 ["networkInterfaceSet" :content])))))))

(clojure.core/defn- response-describe-volume-attribute-result ([input] (response-describe-volume-attribute-result nil input)) ([resultWrapper743701 input] (clojure.core/let [rawinput743700 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743702 {"volumeId" (portkey.aws/search-for-tag rawinput743700 "volumeId" :flattened? nil :result-wrapper resultWrapper743701), "autoEnableIO" (portkey.aws/search-for-tag rawinput743700 "autoEnableIO" :flattened? nil :result-wrapper resultWrapper743701), "productCodes" (portkey.aws/search-for-tag rawinput743700 "productCodes" :flattened? nil :result-wrapper resultWrapper743701)}] (clojure.core/cond-> {} (letvar743702 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar743702 ["volumeId" :content]))) (letvar743702 "autoEnableIO") (clojure.core/assoc :auto-enable-io (deser-attribute-boolean-value (clojure.core/get-in letvar743702 ["autoEnableIO" :content]))) (letvar743702 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar743702 ["productCodes" :content])))))))

(clojure.core/defn- response-describe-reserved-instances-modifications-result ([input] (response-describe-reserved-instances-modifications-result nil input)) ([resultWrapper743704 input] (clojure.core/let [rawinput743703 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743705 {"reservedInstancesModificationsSet" (portkey.aws/search-for-tag rawinput743703 "reservedInstancesModificationsSet" :flattened? nil :result-wrapper resultWrapper743704), "nextToken" (portkey.aws/search-for-tag rawinput743703 "nextToken" :flattened? nil :result-wrapper resultWrapper743704)}] (clojure.core/cond-> {} (letvar743705 "reservedInstancesModificationsSet") (clojure.core/assoc :reserved-instances-modifications (deser-reserved-instances-modification-list (clojure.core/get-in letvar743705 ["reservedInstancesModificationsSet" :content]))) (letvar743705 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743705 ["nextToken" :content])))))))

(clojure.core/defn- response-cancel-bundle-task-result ([input] (response-cancel-bundle-task-result nil input)) ([resultWrapper743707 input] (clojure.core/let [rawinput743706 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743708 {"bundleInstanceTask" (portkey.aws/search-for-tag rawinput743706 "bundleInstanceTask" :flattened? nil :result-wrapper resultWrapper743707)}] (clojure.core/cond-> {} (letvar743708 "bundleInstanceTask") (clojure.core/assoc :bundle-task (deser-bundle-task (clojure.core/get-in letvar743708 ["bundleInstanceTask" :content])))))))

(clojure.core/defn- response-get-host-reservation-purchase-preview-result ([input] (response-get-host-reservation-purchase-preview-result nil input)) ([resultWrapper743710 input] (clojure.core/let [rawinput743709 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743711 {"purchase" (portkey.aws/search-for-tag rawinput743709 "purchase" :flattened? nil :result-wrapper resultWrapper743710), "totalUpfrontPrice" (portkey.aws/search-for-tag rawinput743709 "totalUpfrontPrice" :flattened? nil :result-wrapper resultWrapper743710), "totalHourlyPrice" (portkey.aws/search-for-tag rawinput743709 "totalHourlyPrice" :flattened? nil :result-wrapper resultWrapper743710), "currencyCode" (portkey.aws/search-for-tag rawinput743709 "currencyCode" :flattened? nil :result-wrapper resultWrapper743710)}] (clojure.core/cond-> {} (letvar743711 "purchase") (clojure.core/assoc :purchase (deser-purchase-set (clojure.core/get-in letvar743711 ["purchase" :content]))) (letvar743711 "totalUpfrontPrice") (clojure.core/assoc :total-upfront-price (deser-string (clojure.core/get-in letvar743711 ["totalUpfrontPrice" :content]))) (letvar743711 "totalHourlyPrice") (clojure.core/assoc :total-hourly-price (deser-string (clojure.core/get-in letvar743711 ["totalHourlyPrice" :content]))) (letvar743711 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar743711 ["currencyCode" :content])))))))

(clojure.core/defn- response-describe-availability-zones-result ([input] (response-describe-availability-zones-result nil input)) ([resultWrapper743713 input] (clojure.core/let [rawinput743712 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743714 {"availabilityZoneInfo" (portkey.aws/search-for-tag rawinput743712 "availabilityZoneInfo" :flattened? nil :result-wrapper resultWrapper743713)}] (clojure.core/cond-> {} (letvar743714 "availabilityZoneInfo") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar743714 ["availabilityZoneInfo" :content])))))))

(clojure.core/defn- response-cancel-reserved-instances-listing-result ([input] (response-cancel-reserved-instances-listing-result nil input)) ([resultWrapper743716 input] (clojure.core/let [rawinput743715 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743717 {"reservedInstancesListingsSet" (portkey.aws/search-for-tag rawinput743715 "reservedInstancesListingsSet" :flattened? nil :result-wrapper resultWrapper743716)}] (clojure.core/cond-> {} (letvar743717 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar743717 ["reservedInstancesListingsSet" :content])))))))

(clojure.core/defn- response-restore-address-to-classic-result ([input] (response-restore-address-to-classic-result nil input)) ([resultWrapper743719 input] (clojure.core/let [rawinput743718 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743720 {"status" (portkey.aws/search-for-tag rawinput743718 "status" :flattened? nil :result-wrapper resultWrapper743719), "publicIp" (portkey.aws/search-for-tag rawinput743718 "publicIp" :flattened? nil :result-wrapper resultWrapper743719)}] (clojure.core/cond-> {} (letvar743720 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar743720 ["status" :content]))) (letvar743720 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar743720 ["publicIp" :content])))))))

(clojure.core/defn- response-describe-network-acls-result ([input] (response-describe-network-acls-result nil input)) ([resultWrapper743722 input] (clojure.core/let [rawinput743721 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743723 {"networkAclSet" (portkey.aws/search-for-tag rawinput743721 "networkAclSet" :flattened? nil :result-wrapper resultWrapper743722)}] (clojure.core/cond-> {} (letvar743723 "networkAclSet") (clojure.core/assoc :network-acls (deser-network-acl-list (clojure.core/get-in letvar743723 ["networkAclSet" :content])))))))

(clojure.core/defn- response-cancel-import-task-result ([input] (response-cancel-import-task-result nil input)) ([resultWrapper743725 input] (clojure.core/let [rawinput743724 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743726 {"importTaskId" (portkey.aws/search-for-tag rawinput743724 "importTaskId" :flattened? nil :result-wrapper resultWrapper743725), "state" (portkey.aws/search-for-tag rawinput743724 "state" :flattened? nil :result-wrapper resultWrapper743725), "previousState" (portkey.aws/search-for-tag rawinput743724 "previousState" :flattened? nil :result-wrapper resultWrapper743725)}] (clojure.core/cond-> {} (letvar743726 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar743726 ["importTaskId" :content]))) (letvar743726 "state") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar743726 ["state" :content]))) (letvar743726 "previousState") (clojure.core/assoc :previous-state (deser-string (clojure.core/get-in letvar743726 ["previousState" :content])))))))

(clojure.core/defn- response-register-image-result ([input] (response-register-image-result nil input)) ([resultWrapper743728 input] (clojure.core/let [rawinput743727 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743729 {"imageId" (portkey.aws/search-for-tag rawinput743727 "imageId" :flattened? nil :result-wrapper resultWrapper743728)}] (clojure.core/cond-> {} (letvar743729 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar743729 ["imageId" :content])))))))

(clojure.core/defn- response-import-image-result ([input] (response-import-image-result nil input)) ([resultWrapper743731 input] (clojure.core/let [rawinput743730 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743732 {"architecture" (portkey.aws/search-for-tag rawinput743730 "architecture" :flattened? nil :result-wrapper resultWrapper743731), "progress" (portkey.aws/search-for-tag rawinput743730 "progress" :flattened? nil :result-wrapper resultWrapper743731), "snapshotDetailSet" (portkey.aws/search-for-tag rawinput743730 "snapshotDetailSet" :flattened? nil :result-wrapper resultWrapper743731), "licenseType" (portkey.aws/search-for-tag rawinput743730 "licenseType" :flattened? nil :result-wrapper resultWrapper743731), "status" (portkey.aws/search-for-tag rawinput743730 "status" :flattened? nil :result-wrapper resultWrapper743731), "imageId" (portkey.aws/search-for-tag rawinput743730 "imageId" :flattened? nil :result-wrapper resultWrapper743731), "statusMessage" (portkey.aws/search-for-tag rawinput743730 "statusMessage" :flattened? nil :result-wrapper resultWrapper743731), "importTaskId" (portkey.aws/search-for-tag rawinput743730 "importTaskId" :flattened? nil :result-wrapper resultWrapper743731), "hypervisor" (portkey.aws/search-for-tag rawinput743730 "hypervisor" :flattened? nil :result-wrapper resultWrapper743731), "platform" (portkey.aws/search-for-tag rawinput743730 "platform" :flattened? nil :result-wrapper resultWrapper743731), "description" (portkey.aws/search-for-tag rawinput743730 "description" :flattened? nil :result-wrapper resultWrapper743731)}] (clojure.core/cond-> {} (letvar743732 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar743732 ["platform" :content]))) (letvar743732 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar743732 ["importTaskId" :content]))) (letvar743732 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar743732 ["imageId" :content]))) (letvar743732 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar743732 ["statusMessage" :content]))) (letvar743732 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar743732 ["status" :content]))) (letvar743732 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar743732 ["progress" :content]))) (letvar743732 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar743732 ["description" :content]))) (letvar743732 "snapshotDetailSet") (clojure.core/assoc :snapshot-details (deser-snapshot-detail-list (clojure.core/get-in letvar743732 ["snapshotDetailSet" :content]))) (letvar743732 "hypervisor") (clojure.core/assoc :hypervisor (deser-string (clojure.core/get-in letvar743732 ["hypervisor" :content]))) (letvar743732 "architecture") (clojure.core/assoc :architecture (deser-string (clojure.core/get-in letvar743732 ["architecture" :content]))) (letvar743732 "licenseType") (clojure.core/assoc :license-type (deser-string (clojure.core/get-in letvar743732 ["licenseType" :content])))))))

(clojure.core/defn- response-monitor-instances-result ([input] (response-monitor-instances-result nil input)) ([resultWrapper743734 input] (clojure.core/let [rawinput743733 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743735 {"instancesSet" (portkey.aws/search-for-tag rawinput743733 "instancesSet" :flattened? nil :result-wrapper resultWrapper743734)}] (clojure.core/cond-> {} (letvar743735 "instancesSet") (clojure.core/assoc :instance-monitorings (deser-instance-monitoring-list (clojure.core/get-in letvar743735 ["instancesSet" :content])))))))

(clojure.core/defn- response-create-vpc-endpoint-result ([input] (response-create-vpc-endpoint-result nil input)) ([resultWrapper743737 input] (clojure.core/let [rawinput743736 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743738 {"vpcEndpoint" (portkey.aws/search-for-tag rawinput743736 "vpcEndpoint" :flattened? nil :result-wrapper resultWrapper743737), "clientToken" (portkey.aws/search-for-tag rawinput743736 "clientToken" :flattened? nil :result-wrapper resultWrapper743737)}] (clojure.core/cond-> {} (letvar743738 "vpcEndpoint") (clojure.core/assoc :vpc-endpoint (deser-vpc-endpoint (clojure.core/get-in letvar743738 ["vpcEndpoint" :content]))) (letvar743738 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar743738 ["clientToken" :content])))))))

(clojure.core/defn- response-import-key-pair-result ([input] (response-import-key-pair-result nil input)) ([resultWrapper743740 input] (clojure.core/let [rawinput743739 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743741 {"keyName" (portkey.aws/search-for-tag rawinput743739 "keyName" :flattened? nil :result-wrapper resultWrapper743740), "keyFingerprint" (portkey.aws/search-for-tag rawinput743739 "keyFingerprint" :flattened? nil :result-wrapper resultWrapper743740)}] (clojure.core/cond-> {} (letvar743741 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar743741 ["keyName" :content]))) (letvar743741 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar743741 ["keyFingerprint" :content])))))))

(clojure.core/defn- response-create-network-acl-result ([input] (response-create-network-acl-result nil input)) ([resultWrapper743743 input] (clojure.core/let [rawinput743742 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743744 {"networkAcl" (portkey.aws/search-for-tag rawinput743742 "networkAcl" :flattened? nil :result-wrapper resultWrapper743743)}] (clojure.core/cond-> {} (letvar743744 "networkAcl") (clojure.core/assoc :network-acl (deser-network-acl (clojure.core/get-in letvar743744 ["networkAcl" :content])))))))

(clojure.core/defn- response-create-route-result ([input] (response-create-route-result nil input)) ([resultWrapper743746 input] (clojure.core/let [rawinput743745 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743747 {"return" (portkey.aws/search-for-tag rawinput743745 "return" :flattened? nil :result-wrapper resultWrapper743746)}] (clojure.core/cond-> {} (letvar743747 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743747 ["return" :content])))))))

(clojure.core/defn- response-create-route-table-result ([input] (response-create-route-table-result nil input)) ([resultWrapper743749 input] (clojure.core/let [rawinput743748 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743750 {"routeTable" (portkey.aws/search-for-tag rawinput743748 "routeTable" :flattened? nil :result-wrapper resultWrapper743749)}] (clojure.core/cond-> {} (letvar743750 "routeTable") (clojure.core/assoc :route-table (deser-route-table (clojure.core/get-in letvar743750 ["routeTable" :content])))))))

(clojure.core/defn- response-describe-volume-status-result ([input] (response-describe-volume-status-result nil input)) ([resultWrapper743752 input] (clojure.core/let [rawinput743751 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743753 {"volumeStatusSet" (portkey.aws/search-for-tag rawinput743751 "volumeStatusSet" :flattened? nil :result-wrapper resultWrapper743752), "nextToken" (portkey.aws/search-for-tag rawinput743751 "nextToken" :flattened? nil :result-wrapper resultWrapper743752)}] (clojure.core/cond-> {} (letvar743753 "volumeStatusSet") (clojure.core/assoc :volume-statuses (deser-volume-status-list (clojure.core/get-in letvar743753 ["volumeStatusSet" :content]))) (letvar743753 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743753 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-route-tables-result ([input] (response-describe-route-tables-result nil input)) ([resultWrapper743755 input] (clojure.core/let [rawinput743754 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743756 {"routeTableSet" (portkey.aws/search-for-tag rawinput743754 "routeTableSet" :flattened? nil :result-wrapper resultWrapper743755)}] (clojure.core/cond-> {} (letvar743756 "routeTableSet") (clojure.core/assoc :route-tables (deser-route-table-list (clojure.core/get-in letvar743756 ["routeTableSet" :content])))))))

(clojure.core/defn- response-describe-export-tasks-result ([input] (response-describe-export-tasks-result nil input)) ([resultWrapper743758 input] (clojure.core/let [rawinput743757 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743759 {"exportTaskSet" (portkey.aws/search-for-tag rawinput743757 "exportTaskSet" :flattened? nil :result-wrapper resultWrapper743758)}] (clojure.core/cond-> {} (letvar743759 "exportTaskSet") (clojure.core/assoc :export-tasks (deser-export-task-list (clojure.core/get-in letvar743759 ["exportTaskSet" :content])))))))

(clojure.core/defn- response-reservation ([input] (response-reservation nil input)) ([resultWrapper743761 input] (clojure.core/let [rawinput743760 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743762 {"reservationId" (portkey.aws/search-for-tag rawinput743760 "reservationId" :flattened? nil :result-wrapper resultWrapper743761), "ownerId" (portkey.aws/search-for-tag rawinput743760 "ownerId" :flattened? nil :result-wrapper resultWrapper743761), "requesterId" (portkey.aws/search-for-tag rawinput743760 "requesterId" :flattened? nil :result-wrapper resultWrapper743761), "groupSet" (portkey.aws/search-for-tag rawinput743760 "groupSet" :flattened? nil :result-wrapper resultWrapper743761), "instancesSet" (portkey.aws/search-for-tag rawinput743760 "instancesSet" :flattened? nil :result-wrapper resultWrapper743761)}] (clojure.core/cond-> {} (letvar743762 "reservationId") (clojure.core/assoc :reservation-id (deser-string (clojure.core/get-in letvar743762 ["reservationId" :content]))) (letvar743762 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar743762 ["ownerId" :content]))) (letvar743762 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar743762 ["requesterId" :content]))) (letvar743762 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar743762 ["groupSet" :content]))) (letvar743762 "instancesSet") (clojure.core/assoc :instances (deser-instance-list (clojure.core/get-in letvar743762 ["instancesSet" :content])))))))

(clojure.core/defn- response-replace-network-acl-association-result ([input] (response-replace-network-acl-association-result nil input)) ([resultWrapper743764 input] (clojure.core/let [rawinput743763 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743765 {"newAssociationId" (portkey.aws/search-for-tag rawinput743763 "newAssociationId" :flattened? nil :result-wrapper resultWrapper743764)}] (clojure.core/cond-> {} (letvar743765 "newAssociationId") (clojure.core/assoc :new-association-id (deser-string (clojure.core/get-in letvar743765 ["newAssociationId" :content])))))))

(clojure.core/defn- response-import-snapshot-result ([input] (response-import-snapshot-result nil input)) ([resultWrapper743767 input] (clojure.core/let [rawinput743766 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743768 {"importTaskId" (portkey.aws/search-for-tag rawinput743766 "importTaskId" :flattened? nil :result-wrapper resultWrapper743767), "snapshotTaskDetail" (portkey.aws/search-for-tag rawinput743766 "snapshotTaskDetail" :flattened? nil :result-wrapper resultWrapper743767), "description" (portkey.aws/search-for-tag rawinput743766 "description" :flattened? nil :result-wrapper resultWrapper743767)}] (clojure.core/cond-> {} (letvar743768 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar743768 ["importTaskId" :content]))) (letvar743768 "snapshotTaskDetail") (clojure.core/assoc :snapshot-task-detail (deser-snapshot-task-detail (clojure.core/get-in letvar743768 ["snapshotTaskDetail" :content]))) (letvar743768 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar743768 ["description" :content])))))))

(clojure.core/defn- response-disable-vpc-classic-link-result ([input] (response-disable-vpc-classic-link-result nil input)) ([resultWrapper743770 input] (clojure.core/let [rawinput743769 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743771 {"return" (portkey.aws/search-for-tag rawinput743769 "return" :flattened? nil :result-wrapper resultWrapper743770)}] (clojure.core/cond-> {} (letvar743771 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743771 ["return" :content])))))))

(clojure.core/defn- response-release-hosts-result ([input] (response-release-hosts-result nil input)) ([resultWrapper743773 input] (clojure.core/let [rawinput743772 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743774 {"successful" (portkey.aws/search-for-tag rawinput743772 "successful" :flattened? nil :result-wrapper resultWrapper743773), "unsuccessful" (portkey.aws/search-for-tag rawinput743772 "unsuccessful" :flattened? nil :result-wrapper resultWrapper743773)}] (clojure.core/cond-> {} (letvar743774 "successful") (clojure.core/assoc :successful (deser-response-host-id-list (clojure.core/get-in letvar743774 ["successful" :content]))) (letvar743774 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-list (clojure.core/get-in letvar743774 ["unsuccessful" :content])))))))

(clojure.core/defn- response-disable-vpc-classic-link-dns-support-result ([input] (response-disable-vpc-classic-link-dns-support-result nil input)) ([resultWrapper743776 input] (clojure.core/let [rawinput743775 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743777 {"return" (portkey.aws/search-for-tag rawinput743775 "return" :flattened? nil :result-wrapper resultWrapper743776)}] (clojure.core/cond-> {} (letvar743777 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743777 ["return" :content])))))))

(clojure.core/defn- response-describe-tags-result ([input] (response-describe-tags-result nil input)) ([resultWrapper743779 input] (clojure.core/let [rawinput743778 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743780 {"tagSet" (portkey.aws/search-for-tag rawinput743778 "tagSet" :flattened? nil :result-wrapper resultWrapper743779), "nextToken" (portkey.aws/search-for-tag rawinput743778 "nextToken" :flattened? nil :result-wrapper resultWrapper743779)}] (clojure.core/cond-> {} (letvar743780 "tagSet") (clojure.core/assoc :tags (deser-tag-description-list (clojure.core/get-in letvar743780 ["tagSet" :content]))) (letvar743780 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743780 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-moving-addresses-result ([input] (response-describe-moving-addresses-result nil input)) ([resultWrapper743782 input] (clojure.core/let [rawinput743781 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743783 {"movingAddressStatusSet" (portkey.aws/search-for-tag rawinput743781 "movingAddressStatusSet" :flattened? nil :result-wrapper resultWrapper743782), "nextToken" (portkey.aws/search-for-tag rawinput743781 "nextToken" :flattened? nil :result-wrapper resultWrapper743782)}] (clojure.core/cond-> {} (letvar743783 "movingAddressStatusSet") (clojure.core/assoc :moving-address-statuses (deser-moving-address-status-set (clojure.core/get-in letvar743783 ["movingAddressStatusSet" :content]))) (letvar743783 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743783 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-images-result ([input] (response-describe-images-result nil input)) ([resultWrapper743785 input] (clojure.core/let [rawinput743784 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743786 {"imagesSet" (portkey.aws/search-for-tag rawinput743784 "imagesSet" :flattened? nil :result-wrapper resultWrapper743785)}] (clojure.core/cond-> {} (letvar743786 "imagesSet") (clojure.core/assoc :images (deser-image-list (clojure.core/get-in letvar743786 ["imagesSet" :content])))))))

(clojure.core/defn- response-create-flow-logs-result ([input] (response-create-flow-logs-result nil input)) ([resultWrapper743788 input] (clojure.core/let [rawinput743787 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743789 {"flowLogIdSet" (portkey.aws/search-for-tag rawinput743787 "flowLogIdSet" :flattened? nil :result-wrapper resultWrapper743788), "clientToken" (portkey.aws/search-for-tag rawinput743787 "clientToken" :flattened? nil :result-wrapper resultWrapper743788), "unsuccessful" (portkey.aws/search-for-tag rawinput743787 "unsuccessful" :flattened? nil :result-wrapper resultWrapper743788)}] (clojure.core/cond-> {} (letvar743789 "flowLogIdSet") (clojure.core/assoc :flow-log-ids (deser-value-string-list (clojure.core/get-in letvar743789 ["flowLogIdSet" :content]))) (letvar743789 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar743789 ["clientToken" :content]))) (letvar743789 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar743789 ["unsuccessful" :content])))))))

(clojure.core/defn- response-describe-spot-instance-requests-result ([input] (response-describe-spot-instance-requests-result nil input)) ([resultWrapper743791 input] (clojure.core/let [rawinput743790 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743792 {"spotInstanceRequestSet" (portkey.aws/search-for-tag rawinput743790 "spotInstanceRequestSet" :flattened? nil :result-wrapper resultWrapper743791)}] (clojure.core/cond-> {} (letvar743792 "spotInstanceRequestSet") (clojure.core/assoc :spot-instance-requests (deser-spot-instance-request-list (clojure.core/get-in letvar743792 ["spotInstanceRequestSet" :content])))))))

(clojure.core/defn- response-create-customer-gateway-result ([input] (response-create-customer-gateway-result nil input)) ([resultWrapper743794 input] (clojure.core/let [rawinput743793 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743795 {"customerGateway" (portkey.aws/search-for-tag rawinput743793 "customerGateway" :flattened? nil :result-wrapper resultWrapper743794)}] (clojure.core/cond-> {} (letvar743795 "customerGateway") (clojure.core/assoc :customer-gateway (deser-customer-gateway (clojure.core/get-in letvar743795 ["customerGateway" :content])))))))

(clojure.core/defn- response-describe-hosts-result ([input] (response-describe-hosts-result nil input)) ([resultWrapper743797 input] (clojure.core/let [rawinput743796 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743798 {"hostSet" (portkey.aws/search-for-tag rawinput743796 "hostSet" :flattened? nil :result-wrapper resultWrapper743797), "nextToken" (portkey.aws/search-for-tag rawinput743796 "nextToken" :flattened? nil :result-wrapper resultWrapper743797)}] (clojure.core/cond-> {} (letvar743798 "hostSet") (clojure.core/assoc :hosts (deser-host-list (clojure.core/get-in letvar743798 ["hostSet" :content]))) (letvar743798 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743798 ["nextToken" :content])))))))

(clojure.core/defn- response-enable-vpc-classic-link-dns-support-result ([input] (response-enable-vpc-classic-link-dns-support-result nil input)) ([resultWrapper743800 input] (clojure.core/let [rawinput743799 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743801 {"return" (portkey.aws/search-for-tag rawinput743799 "return" :flattened? nil :result-wrapper resultWrapper743800)}] (clojure.core/cond-> {} (letvar743801 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743801 ["return" :content])))))))

(clojure.core/defn- response-stop-instances-result ([input] (response-stop-instances-result nil input)) ([resultWrapper743803 input] (clojure.core/let [rawinput743802 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743804 {"instancesSet" (portkey.aws/search-for-tag rawinput743802 "instancesSet" :flattened? nil :result-wrapper resultWrapper743803)}] (clojure.core/cond-> {} (letvar743804 "instancesSet") (clojure.core/assoc :stopping-instances (deser-instance-state-change-list (clojure.core/get-in letvar743804 ["instancesSet" :content])))))))

(clojure.core/defn- response-describe-vpc-endpoints-result ([input] (response-describe-vpc-endpoints-result nil input)) ([resultWrapper743806 input] (clojure.core/let [rawinput743805 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743807 {"vpcEndpointSet" (portkey.aws/search-for-tag rawinput743805 "vpcEndpointSet" :flattened? nil :result-wrapper resultWrapper743806), "nextToken" (portkey.aws/search-for-tag rawinput743805 "nextToken" :flattened? nil :result-wrapper resultWrapper743806)}] (clojure.core/cond-> {} (letvar743807 "vpcEndpointSet") (clojure.core/assoc :vpc-endpoints (deser-vpc-endpoint-set (clojure.core/get-in letvar743807 ["vpcEndpointSet" :content]))) (letvar743807 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743807 ["nextToken" :content])))))))

(clojure.core/defn- response-purchase-scheduled-instances-result ([input] (response-purchase-scheduled-instances-result nil input)) ([resultWrapper743809 input] (clojure.core/let [rawinput743808 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743810 {"scheduledInstanceSet" (portkey.aws/search-for-tag rawinput743808 "scheduledInstanceSet" :flattened? nil :result-wrapper resultWrapper743809)}] (clojure.core/cond-> {} (letvar743810 "scheduledInstanceSet") (clojure.core/assoc :scheduled-instance-set (deser-purchased-scheduled-instance-set (clojure.core/get-in letvar743810 ["scheduledInstanceSet" :content])))))))

(clojure.core/defn- response-describe-addresses-result ([input] (response-describe-addresses-result nil input)) ([resultWrapper743812 input] (clojure.core/let [rawinput743811 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743813 {"addressesSet" (portkey.aws/search-for-tag rawinput743811 "addressesSet" :flattened? nil :result-wrapper resultWrapper743812)}] (clojure.core/cond-> {} (letvar743813 "addressesSet") (clojure.core/assoc :addresses (deser-address-list (clojure.core/get-in letvar743813 ["addressesSet" :content])))))))

(clojure.core/defn- response-purchase-host-reservation-result ([input] (response-purchase-host-reservation-result nil input)) ([resultWrapper743815 input] (clojure.core/let [rawinput743814 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743816 {"purchase" (portkey.aws/search-for-tag rawinput743814 "purchase" :flattened? nil :result-wrapper resultWrapper743815), "totalUpfrontPrice" (portkey.aws/search-for-tag rawinput743814 "totalUpfrontPrice" :flattened? nil :result-wrapper resultWrapper743815), "totalHourlyPrice" (portkey.aws/search-for-tag rawinput743814 "totalHourlyPrice" :flattened? nil :result-wrapper resultWrapper743815), "currencyCode" (portkey.aws/search-for-tag rawinput743814 "currencyCode" :flattened? nil :result-wrapper resultWrapper743815), "clientToken" (portkey.aws/search-for-tag rawinput743814 "clientToken" :flattened? nil :result-wrapper resultWrapper743815)}] (clojure.core/cond-> {} (letvar743816 "purchase") (clojure.core/assoc :purchase (deser-purchase-set (clojure.core/get-in letvar743816 ["purchase" :content]))) (letvar743816 "totalUpfrontPrice") (clojure.core/assoc :total-upfront-price (deser-string (clojure.core/get-in letvar743816 ["totalUpfrontPrice" :content]))) (letvar743816 "totalHourlyPrice") (clojure.core/assoc :total-hourly-price (deser-string (clojure.core/get-in letvar743816 ["totalHourlyPrice" :content]))) (letvar743816 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar743816 ["currencyCode" :content]))) (letvar743816 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar743816 ["clientToken" :content])))))))

(clojure.core/defn- response-describe-prefix-lists-result ([input] (response-describe-prefix-lists-result nil input)) ([resultWrapper743818 input] (clojure.core/let [rawinput743817 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743819 {"prefixListSet" (portkey.aws/search-for-tag rawinput743817 "prefixListSet" :flattened? nil :result-wrapper resultWrapper743818), "nextToken" (portkey.aws/search-for-tag rawinput743817 "nextToken" :flattened? nil :result-wrapper resultWrapper743818)}] (clojure.core/cond-> {} (letvar743819 "prefixListSet") (clojure.core/assoc :prefix-lists (deser-prefix-list-set (clojure.core/get-in letvar743819 ["prefixListSet" :content]))) (letvar743819 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743819 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-identity-id-format-result ([input] (response-describe-identity-id-format-result nil input)) ([resultWrapper743821 input] (clojure.core/let [rawinput743820 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743822 {"statusSet" (portkey.aws/search-for-tag rawinput743820 "statusSet" :flattened? nil :result-wrapper resultWrapper743821)}] (clojure.core/cond-> {} (letvar743822 "statusSet") (clojure.core/assoc :statuses (deser-id-format-list (clojure.core/get-in letvar743822 ["statusSet" :content])))))))

(clojure.core/defn- response-describe-spot-datafeed-subscription-result ([input] (response-describe-spot-datafeed-subscription-result nil input)) ([resultWrapper743824 input] (clojure.core/let [rawinput743823 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743825 {"spotDatafeedSubscription" (portkey.aws/search-for-tag rawinput743823 "spotDatafeedSubscription" :flattened? nil :result-wrapper resultWrapper743824)}] (clojure.core/cond-> {} (letvar743825 "spotDatafeedSubscription") (clojure.core/assoc :spot-datafeed-subscription (deser-spot-datafeed-subscription (clojure.core/get-in letvar743825 ["spotDatafeedSubscription" :content])))))))

(clojure.core/defn- response-import-instance-result ([input] (response-import-instance-result nil input)) ([resultWrapper743827 input] (clojure.core/let [rawinput743826 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743828 {"conversionTask" (portkey.aws/search-for-tag rawinput743826 "conversionTask" :flattened? nil :result-wrapper resultWrapper743827)}] (clojure.core/cond-> {} (letvar743828 "conversionTask") (clojure.core/assoc :conversion-task (deser-conversion-task (clojure.core/get-in letvar743828 ["conversionTask" :content])))))))

(clojure.core/defn- response-describe-key-pairs-result ([input] (response-describe-key-pairs-result nil input)) ([resultWrapper743830 input] (clojure.core/let [rawinput743829 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743831 {"keySet" (portkey.aws/search-for-tag rawinput743829 "keySet" :flattened? nil :result-wrapper resultWrapper743830)}] (clojure.core/cond-> {} (letvar743831 "keySet") (clojure.core/assoc :key-pairs (deser-key-pair-list (clojure.core/get-in letvar743831 ["keySet" :content])))))))

(clojure.core/defn- response-describe-internet-gateways-result ([input] (response-describe-internet-gateways-result nil input)) ([resultWrapper743833 input] (clojure.core/let [rawinput743832 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743834 {"internetGatewaySet" (portkey.aws/search-for-tag rawinput743832 "internetGatewaySet" :flattened? nil :result-wrapper resultWrapper743833)}] (clojure.core/cond-> {} (letvar743834 "internetGatewaySet") (clojure.core/assoc :internet-gateways (deser-internet-gateway-list (clojure.core/get-in letvar743834 ["internetGatewaySet" :content])))))))

(clojure.core/defn- response-describe-vpc-classic-link-dns-support-result ([input] (response-describe-vpc-classic-link-dns-support-result nil input)) ([resultWrapper743836 input] (clojure.core/let [rawinput743835 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743837 {"vpcs" (portkey.aws/search-for-tag rawinput743835 "vpcs" :flattened? nil :result-wrapper resultWrapper743836), "nextToken" (portkey.aws/search-for-tag rawinput743835 "nextToken" :flattened? nil :result-wrapper resultWrapper743836)}] (clojure.core/cond-> {} (letvar743837 "vpcs") (clojure.core/assoc :vpcs (deser-classic-link-dns-support-list (clojure.core/get-in letvar743837 ["vpcs" :content]))) (letvar743837 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar743837 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-id-format-result ([input] (response-describe-id-format-result nil input)) ([resultWrapper743839 input] (clojure.core/let [rawinput743838 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743840 {"statusSet" (portkey.aws/search-for-tag rawinput743838 "statusSet" :flattened? nil :result-wrapper resultWrapper743839)}] (clojure.core/cond-> {} (letvar743840 "statusSet") (clojure.core/assoc :statuses (deser-id-format-list (clojure.core/get-in letvar743840 ["statusSet" :content])))))))

(clojure.core/defn- response-describe-snapshot-attribute-result ([input] (response-describe-snapshot-attribute-result nil input)) ([resultWrapper743842 input] (clojure.core/let [rawinput743841 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743843 {"snapshotId" (portkey.aws/search-for-tag rawinput743841 "snapshotId" :flattened? nil :result-wrapper resultWrapper743842), "createVolumePermission" (portkey.aws/search-for-tag rawinput743841 "createVolumePermission" :flattened? nil :result-wrapper resultWrapper743842), "productCodes" (portkey.aws/search-for-tag rawinput743841 "productCodes" :flattened? nil :result-wrapper resultWrapper743842)}] (clojure.core/cond-> {} (letvar743843 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar743843 ["snapshotId" :content]))) (letvar743843 "createVolumePermission") (clojure.core/assoc :create-volume-permissions (deser-create-volume-permission-list (clojure.core/get-in letvar743843 ["createVolumePermission" :content]))) (letvar743843 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar743843 ["productCodes" :content])))))))

(clojure.core/defn- response-get-console-output-result ([input] (response-get-console-output-result nil input)) ([resultWrapper743845 input] (clojure.core/let [rawinput743844 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743846 {"instanceId" (portkey.aws/search-for-tag rawinput743844 "instanceId" :flattened? nil :result-wrapper resultWrapper743845), "timestamp" (portkey.aws/search-for-tag rawinput743844 "timestamp" :flattened? nil :result-wrapper resultWrapper743845), "output" (portkey.aws/search-for-tag rawinput743844 "output" :flattened? nil :result-wrapper resultWrapper743845)}] (clojure.core/cond-> {} (letvar743846 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar743846 ["instanceId" :content]))) (letvar743846 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar743846 ["timestamp" :content]))) (letvar743846 "output") (clojure.core/assoc :output (deser-string (clojure.core/get-in letvar743846 ["output" :content])))))))

(clojure.core/defn- response-describe-placement-groups-result ([input] (response-describe-placement-groups-result nil input)) ([resultWrapper743848 input] (clojure.core/let [rawinput743847 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743849 {"placementGroupSet" (portkey.aws/search-for-tag rawinput743847 "placementGroupSet" :flattened? nil :result-wrapper resultWrapper743848)}] (clojure.core/cond-> {} (letvar743849 "placementGroupSet") (clojure.core/assoc :placement-groups (deser-placement-group-list (clojure.core/get-in letvar743849 ["placementGroupSet" :content])))))))

(clojure.core/defn- response-create-vpc-peering-connection-result ([input] (response-create-vpc-peering-connection-result nil input)) ([resultWrapper743851 input] (clojure.core/let [rawinput743850 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743852 {"vpcPeeringConnection" (portkey.aws/search-for-tag rawinput743850 "vpcPeeringConnection" :flattened? nil :result-wrapper resultWrapper743851)}] (clojure.core/cond-> {} (letvar743852 "vpcPeeringConnection") (clojure.core/assoc :vpc-peering-connection (deser-vpc-peering-connection (clojure.core/get-in letvar743852 ["vpcPeeringConnection" :content])))))))

(clojure.core/defn- response-modify-hosts-result ([input] (response-modify-hosts-result nil input)) ([resultWrapper743854 input] (clojure.core/let [rawinput743853 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743855 {"successful" (portkey.aws/search-for-tag rawinput743853 "successful" :flattened? nil :result-wrapper resultWrapper743854), "unsuccessful" (portkey.aws/search-for-tag rawinput743853 "unsuccessful" :flattened? nil :result-wrapper resultWrapper743854)}] (clojure.core/cond-> {} (letvar743855 "successful") (clojure.core/assoc :successful (deser-response-host-id-list (clojure.core/get-in letvar743855 ["successful" :content]))) (letvar743855 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-list (clojure.core/get-in letvar743855 ["unsuccessful" :content])))))))

(clojure.core/defn- response-create-vpn-connection-result ([input] (response-create-vpn-connection-result nil input)) ([resultWrapper743857 input] (clojure.core/let [rawinput743856 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743858 {"vpnConnection" (portkey.aws/search-for-tag rawinput743856 "vpnConnection" :flattened? nil :result-wrapper resultWrapper743857)}] (clojure.core/cond-> {} (letvar743858 "vpnConnection") (clojure.core/assoc :vpn-connection (deser-vpn-connection (clojure.core/get-in letvar743858 ["vpnConnection" :content])))))))

(clojure.core/defn- response-describe-customer-gateways-result ([input] (response-describe-customer-gateways-result nil input)) ([resultWrapper743860 input] (clojure.core/let [rawinput743859 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743861 {"customerGatewaySet" (portkey.aws/search-for-tag rawinput743859 "customerGatewaySet" :flattened? nil :result-wrapper resultWrapper743860)}] (clojure.core/cond-> {} (letvar743861 "customerGatewaySet") (clojure.core/assoc :customer-gateways (deser-customer-gateway-list (clojure.core/get-in letvar743861 ["customerGatewaySet" :content])))))))

(clojure.core/defn- response-describe-account-attributes-result ([input] (response-describe-account-attributes-result nil input)) ([resultWrapper743863 input] (clojure.core/let [rawinput743862 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743864 {"accountAttributeSet" (portkey.aws/search-for-tag rawinput743862 "accountAttributeSet" :flattened? nil :result-wrapper resultWrapper743863)}] (clojure.core/cond-> {} (letvar743864 "accountAttributeSet") (clojure.core/assoc :account-attributes (deser-account-attribute-list (clojure.core/get-in letvar743864 ["accountAttributeSet" :content])))))))

(clojure.core/defn- response-describe-scheduled-instances-result ([input] (response-describe-scheduled-instances-result nil input)) ([resultWrapper743866 input] (clojure.core/let [rawinput743865 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743867 {"nextToken" (portkey.aws/search-for-tag rawinput743865 "nextToken" :flattened? nil :result-wrapper resultWrapper743866), "scheduledInstanceSet" (portkey.aws/search-for-tag rawinput743865 "scheduledInstanceSet" :flattened? nil :result-wrapper resultWrapper743866)}] (clojure.core/cond-> {} (letvar743867 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743867 ["nextToken" :content]))) (letvar743867 "scheduledInstanceSet") (clojure.core/assoc :scheduled-instance-set (deser-scheduled-instance-set (clojure.core/get-in letvar743867 ["scheduledInstanceSet" :content])))))))

(clojure.core/defn- response-purchase-reserved-instances-offering-result ([input] (response-purchase-reserved-instances-offering-result nil input)) ([resultWrapper743869 input] (clojure.core/let [rawinput743868 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743870 {"reservedInstancesId" (portkey.aws/search-for-tag rawinput743868 "reservedInstancesId" :flattened? nil :result-wrapper resultWrapper743869)}] (clojure.core/cond-> {} (letvar743870 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar743870 ["reservedInstancesId" :content])))))))

(clojure.core/defn- response-request-spot-instances-result ([input] (response-request-spot-instances-result nil input)) ([resultWrapper743872 input] (clojure.core/let [rawinput743871 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743873 {"spotInstanceRequestSet" (portkey.aws/search-for-tag rawinput743871 "spotInstanceRequestSet" :flattened? nil :result-wrapper resultWrapper743872)}] (clojure.core/cond-> {} (letvar743873 "spotInstanceRequestSet") (clojure.core/assoc :spot-instance-requests (deser-spot-instance-request-list (clojure.core/get-in letvar743873 ["spotInstanceRequestSet" :content])))))))

(clojure.core/defn- response-describe-vpc-endpoint-services-result ([input] (response-describe-vpc-endpoint-services-result nil input)) ([resultWrapper743875 input] (clojure.core/let [rawinput743874 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743876 {"serviceNameSet" (portkey.aws/search-for-tag rawinput743874 "serviceNameSet" :flattened? nil :result-wrapper resultWrapper743875), "nextToken" (portkey.aws/search-for-tag rawinput743874 "nextToken" :flattened? nil :result-wrapper resultWrapper743875)}] (clojure.core/cond-> {} (letvar743876 "serviceNameSet") (clojure.core/assoc :service-names (deser-value-string-list (clojure.core/get-in letvar743876 ["serviceNameSet" :content]))) (letvar743876 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743876 ["nextToken" :content])))))))

(clojure.core/defn- response-modify-instance-placement-result ([input] (response-modify-instance-placement-result nil input)) ([resultWrapper743878 input] (clojure.core/let [rawinput743877 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743879 {"return" (portkey.aws/search-for-tag rawinput743877 "return" :flattened? nil :result-wrapper resultWrapper743878)}] (clojure.core/cond-> {} (letvar743879 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743879 ["return" :content])))))))

(clojure.core/defn- response-describe-vpc-attribute-result ([input] (response-describe-vpc-attribute-result nil input)) ([resultWrapper743881 input] (clojure.core/let [rawinput743880 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743882 {"vpcId" (portkey.aws/search-for-tag rawinput743880 "vpcId" :flattened? nil :result-wrapper resultWrapper743881), "enableDnsSupport" (portkey.aws/search-for-tag rawinput743880 "enableDnsSupport" :flattened? nil :result-wrapper resultWrapper743881), "enableDnsHostnames" (portkey.aws/search-for-tag rawinput743880 "enableDnsHostnames" :flattened? nil :result-wrapper resultWrapper743881)}] (clojure.core/cond-> {} (letvar743882 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar743882 ["vpcId" :content]))) (letvar743882 "enableDnsSupport") (clojure.core/assoc :enable-dns-support (deser-attribute-boolean-value (clojure.core/get-in letvar743882 ["enableDnsSupport" :content]))) (letvar743882 "enableDnsHostnames") (clojure.core/assoc :enable-dns-hostnames (deser-attribute-boolean-value (clojure.core/get-in letvar743882 ["enableDnsHostnames" :content])))))))

(clojure.core/defn- response-describe-flow-logs-result ([input] (response-describe-flow-logs-result nil input)) ([resultWrapper743884 input] (clojure.core/let [rawinput743883 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743885 {"flowLogSet" (portkey.aws/search-for-tag rawinput743883 "flowLogSet" :flattened? nil :result-wrapper resultWrapper743884), "nextToken" (portkey.aws/search-for-tag rawinput743883 "nextToken" :flattened? nil :result-wrapper resultWrapper743884)}] (clojure.core/cond-> {} (letvar743885 "flowLogSet") (clojure.core/assoc :flow-logs (deser-flow-log-set (clojure.core/get-in letvar743885 ["flowLogSet" :content]))) (letvar743885 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743885 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-scheduled-instance-availability-result ([input] (response-describe-scheduled-instance-availability-result nil input)) ([resultWrapper743887 input] (clojure.core/let [rawinput743886 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743888 {"nextToken" (portkey.aws/search-for-tag rawinput743886 "nextToken" :flattened? nil :result-wrapper resultWrapper743887), "scheduledInstanceAvailabilitySet" (portkey.aws/search-for-tag rawinput743886 "scheduledInstanceAvailabilitySet" :flattened? nil :result-wrapper resultWrapper743887)}] (clojure.core/cond-> {} (letvar743888 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743888 ["nextToken" :content]))) (letvar743888 "scheduledInstanceAvailabilitySet") (clojure.core/assoc :scheduled-instance-availability-set (deser-scheduled-instance-availability-set (clojure.core/get-in letvar743888 ["scheduledInstanceAvailabilitySet" :content])))))))

(clojure.core/defn- response-create-vpc-result ([input] (response-create-vpc-result nil input)) ([resultWrapper743890 input] (clojure.core/let [rawinput743889 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743891 {"vpc" (portkey.aws/search-for-tag rawinput743889 "vpc" :flattened? nil :result-wrapper resultWrapper743890)}] (clojure.core/cond-> {} (letvar743891 "vpc") (clojure.core/assoc :vpc (deser-vpc (clojure.core/get-in letvar743891 ["vpc" :content])))))))

(clojure.core/defn- response-allocate-address-result ([input] (response-allocate-address-result nil input)) ([resultWrapper743893 input] (clojure.core/let [rawinput743892 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743894 {"publicIp" (portkey.aws/search-for-tag rawinput743892 "publicIp" :flattened? nil :result-wrapper resultWrapper743893), "domain" (portkey.aws/search-for-tag rawinput743892 "domain" :flattened? nil :result-wrapper resultWrapper743893), "allocationId" (portkey.aws/search-for-tag rawinput743892 "allocationId" :flattened? nil :result-wrapper resultWrapper743893)}] (clojure.core/cond-> {} (letvar743894 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar743894 ["publicIp" :content]))) (letvar743894 "domain") (clojure.core/assoc :domain (deser-domain-type (clojure.core/get-in letvar743894 ["domain" :content]))) (letvar743894 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar743894 ["allocationId" :content])))))))

(clojure.core/defn- response-move-address-to-vpc-result ([input] (response-move-address-to-vpc-result nil input)) ([resultWrapper743896 input] (clojure.core/let [rawinput743895 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743897 {"allocationId" (portkey.aws/search-for-tag rawinput743895 "allocationId" :flattened? nil :result-wrapper resultWrapper743896), "status" (portkey.aws/search-for-tag rawinput743895 "status" :flattened? nil :result-wrapper resultWrapper743896)}] (clojure.core/cond-> {} (letvar743897 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar743897 ["allocationId" :content]))) (letvar743897 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar743897 ["status" :content])))))))

(clojure.core/defn- response-describe-bundle-tasks-result ([input] (response-describe-bundle-tasks-result nil input)) ([resultWrapper743899 input] (clojure.core/let [rawinput743898 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743900 {"bundleInstanceTasksSet" (portkey.aws/search-for-tag rawinput743898 "bundleInstanceTasksSet" :flattened? nil :result-wrapper resultWrapper743899)}] (clojure.core/cond-> {} (letvar743900 "bundleInstanceTasksSet") (clojure.core/assoc :bundle-tasks (deser-bundle-task-list (clojure.core/get-in letvar743900 ["bundleInstanceTasksSet" :content])))))))

(clojure.core/defn- response-describe-snapshots-result ([input] (response-describe-snapshots-result nil input)) ([resultWrapper743902 input] (clojure.core/let [rawinput743901 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743903 {"snapshotSet" (portkey.aws/search-for-tag rawinput743901 "snapshotSet" :flattened? nil :result-wrapper resultWrapper743902), "nextToken" (portkey.aws/search-for-tag rawinput743901 "nextToken" :flattened? nil :result-wrapper resultWrapper743902)}] (clojure.core/cond-> {} (letvar743903 "snapshotSet") (clojure.core/assoc :snapshots (deser-snapshot-list (clojure.core/get-in letvar743903 ["snapshotSet" :content]))) (letvar743903 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743903 ["nextToken" :content])))))))

(clojure.core/defn- response-snapshot ([input] (response-snapshot nil input)) ([resultWrapper743905 input] (clojure.core/let [rawinput743904 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743906 {"progress" (portkey.aws/search-for-tag rawinput743904 "progress" :flattened? nil :result-wrapper resultWrapper743905), "tagSet" (portkey.aws/search-for-tag rawinput743904 "tagSet" :flattened? nil :result-wrapper resultWrapper743905), "kmsKeyId" (portkey.aws/search-for-tag rawinput743904 "kmsKeyId" :flattened? nil :result-wrapper resultWrapper743905), "encrypted" (portkey.aws/search-for-tag rawinput743904 "encrypted" :flattened? nil :result-wrapper resultWrapper743905), "startTime" (portkey.aws/search-for-tag rawinput743904 "startTime" :flattened? nil :result-wrapper resultWrapper743905), "status" (portkey.aws/search-for-tag rawinput743904 "status" :flattened? nil :result-wrapper resultWrapper743905), "dataEncryptionKeyId" (portkey.aws/search-for-tag rawinput743904 "dataEncryptionKeyId" :flattened? nil :result-wrapper resultWrapper743905), "statusMessage" (portkey.aws/search-for-tag rawinput743904 "statusMessage" :flattened? nil :result-wrapper resultWrapper743905), "volumeId" (portkey.aws/search-for-tag rawinput743904 "volumeId" :flattened? nil :result-wrapper resultWrapper743905), "snapshotId" (portkey.aws/search-for-tag rawinput743904 "snapshotId" :flattened? nil :result-wrapper resultWrapper743905), "ownerId" (portkey.aws/search-for-tag rawinput743904 "ownerId" :flattened? nil :result-wrapper resultWrapper743905), "volumeSize" (portkey.aws/search-for-tag rawinput743904 "volumeSize" :flattened? nil :result-wrapper resultWrapper743905), "ownerAlias" (portkey.aws/search-for-tag rawinput743904 "ownerAlias" :flattened? nil :result-wrapper resultWrapper743905), "description" (portkey.aws/search-for-tag rawinput743904 "description" :flattened? nil :result-wrapper resultWrapper743905)}] (clojure.core/cond-> {} (letvar743906 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar743906 ["startTime" :content]))) (letvar743906 "statusMessage") (clojure.core/assoc :state-message (deser-string (clojure.core/get-in letvar743906 ["statusMessage" :content]))) (letvar743906 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar743906 ["ownerId" :content]))) (letvar743906 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar743906 ["encrypted" :content]))) (letvar743906 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar743906 ["tagSet" :content]))) (letvar743906 "ownerAlias") (clojure.core/assoc :owner-alias (deser-string (clojure.core/get-in letvar743906 ["ownerAlias" :content]))) (letvar743906 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar743906 ["progress" :content]))) (letvar743906 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar743906 ["description" :content]))) (letvar743906 "dataEncryptionKeyId") (clojure.core/assoc :data-encryption-key-id (deser-string (clojure.core/get-in letvar743906 ["dataEncryptionKeyId" :content]))) (letvar743906 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar743906 ["kmsKeyId" :content]))) (letvar743906 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar743906 ["volumeId" :content]))) (letvar743906 "status") (clojure.core/assoc :state (deser-snapshot-state (clojure.core/get-in letvar743906 ["status" :content]))) (letvar743906 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar743906 ["volumeSize" :content]))) (letvar743906 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar743906 ["snapshotId" :content])))))))

(clojure.core/defn- response-describe-classic-link-instances-result ([input] (response-describe-classic-link-instances-result nil input)) ([resultWrapper743908 input] (clojure.core/let [rawinput743907 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743909 {"instancesSet" (portkey.aws/search-for-tag rawinput743907 "instancesSet" :flattened? nil :result-wrapper resultWrapper743908), "nextToken" (portkey.aws/search-for-tag rawinput743907 "nextToken" :flattened? nil :result-wrapper resultWrapper743908)}] (clojure.core/cond-> {} (letvar743909 "instancesSet") (clojure.core/assoc :instances (deser-classic-link-instance-list (clojure.core/get-in letvar743909 ["instancesSet" :content]))) (letvar743909 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743909 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-instances-result ([input] (response-describe-instances-result nil input)) ([resultWrapper743911 input] (clojure.core/let [rawinput743910 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743912 {"reservationSet" (portkey.aws/search-for-tag rawinput743910 "reservationSet" :flattened? nil :result-wrapper resultWrapper743911), "nextToken" (portkey.aws/search-for-tag rawinput743910 "nextToken" :flattened? nil :result-wrapper resultWrapper743911)}] (clojure.core/cond-> {} (letvar743912 "reservationSet") (clojure.core/assoc :reservations (deser-reservation-list (clojure.core/get-in letvar743912 ["reservationSet" :content]))) (letvar743912 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743912 ["nextToken" :content])))))))

(clojure.core/defn- response-delete-flow-logs-result ([input] (response-delete-flow-logs-result nil input)) ([resultWrapper743914 input] (clojure.core/let [rawinput743913 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743915 {"unsuccessful" (portkey.aws/search-for-tag rawinput743913 "unsuccessful" :flattened? nil :result-wrapper resultWrapper743914)}] (clojure.core/cond-> {} (letvar743915 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar743915 ["unsuccessful" :content])))))))

(clojure.core/defn- response-request-spot-fleet-response ([input] (response-request-spot-fleet-response nil input)) ([resultWrapper743917 input] (clojure.core/let [rawinput743916 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743918 {"spotFleetRequestId" (portkey.aws/search-for-tag rawinput743916 "spotFleetRequestId" :flattened? nil :result-wrapper resultWrapper743917)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar743918 ["spotFleetRequestId" :content]))}))))

(clojure.core/defn- response-describe-spot-fleet-requests-response ([input] (response-describe-spot-fleet-requests-response nil input)) ([resultWrapper743920 input] (clojure.core/let [rawinput743919 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743921 {"spotFleetRequestConfigSet" (portkey.aws/search-for-tag rawinput743919 "spotFleetRequestConfigSet" :flattened? nil :result-wrapper resultWrapper743920), "nextToken" (portkey.aws/search-for-tag rawinput743919 "nextToken" :flattened? nil :result-wrapper resultWrapper743920)}] (clojure.core/cond-> {:spot-fleet-request-configs (deser-spot-fleet-request-config-set (clojure.core/get-in letvar743921 ["spotFleetRequestConfigSet" :content]))} (letvar743921 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743921 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-vpn-connections-result ([input] (response-describe-vpn-connections-result nil input)) ([resultWrapper743923 input] (clojure.core/let [rawinput743922 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743924 {"vpnConnectionSet" (portkey.aws/search-for-tag rawinput743922 "vpnConnectionSet" :flattened? nil :result-wrapper resultWrapper743923)}] (clojure.core/cond-> {} (letvar743924 "vpnConnectionSet") (clojure.core/assoc :vpn-connections (deser-vpn-connection-list (clojure.core/get-in letvar743924 ["vpnConnectionSet" :content])))))))

(clojure.core/defn- response-copy-image-result ([input] (response-copy-image-result nil input)) ([resultWrapper743926 input] (clojure.core/let [rawinput743925 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743927 {"imageId" (portkey.aws/search-for-tag rawinput743925 "imageId" :flattened? nil :result-wrapper resultWrapper743926)}] (clojure.core/cond-> {} (letvar743927 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar743927 ["imageId" :content])))))))

(clojure.core/defn- response-accept-vpc-peering-connection-result ([input] (response-accept-vpc-peering-connection-result nil input)) ([resultWrapper743929 input] (clojure.core/let [rawinput743928 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743930 {"vpcPeeringConnection" (portkey.aws/search-for-tag rawinput743928 "vpcPeeringConnection" :flattened? nil :result-wrapper resultWrapper743929)}] (clojure.core/cond-> {} (letvar743930 "vpcPeeringConnection") (clojure.core/assoc :vpc-peering-connection (deser-vpc-peering-connection (clojure.core/get-in letvar743930 ["vpcPeeringConnection" :content])))))))

(clojure.core/defn- response-terminate-instances-result ([input] (response-terminate-instances-result nil input)) ([resultWrapper743932 input] (clojure.core/let [rawinput743931 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743933 {"instancesSet" (portkey.aws/search-for-tag rawinput743931 "instancesSet" :flattened? nil :result-wrapper resultWrapper743932)}] (clojure.core/cond-> {} (letvar743933 "instancesSet") (clojure.core/assoc :terminating-instances (deser-instance-state-change-list (clojure.core/get-in letvar743933 ["instancesSet" :content])))))))

(clojure.core/defn- response-describe-vpcs-result ([input] (response-describe-vpcs-result nil input)) ([resultWrapper743935 input] (clojure.core/let [rawinput743934 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743936 {"vpcSet" (portkey.aws/search-for-tag rawinput743934 "vpcSet" :flattened? nil :result-wrapper resultWrapper743935)}] (clojure.core/cond-> {} (letvar743936 "vpcSet") (clojure.core/assoc :vpcs (deser-vpc-list (clojure.core/get-in letvar743936 ["vpcSet" :content])))))))

(clojure.core/defn- response-delete-vpc-endpoints-result ([input] (response-delete-vpc-endpoints-result nil input)) ([resultWrapper743938 input] (clojure.core/let [rawinput743937 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743939 {"unsuccessful" (portkey.aws/search-for-tag rawinput743937 "unsuccessful" :flattened? nil :result-wrapper resultWrapper743938)}] (clojure.core/cond-> {} (letvar743939 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar743939 ["unsuccessful" :content])))))))

(clojure.core/defn- response-describe-spot-fleet-instances-response ([input] (response-describe-spot-fleet-instances-response nil input)) ([resultWrapper743941 input] (clojure.core/let [rawinput743940 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743942 {"spotFleetRequestId" (portkey.aws/search-for-tag rawinput743940 "spotFleetRequestId" :flattened? nil :result-wrapper resultWrapper743941), "activeInstanceSet" (portkey.aws/search-for-tag rawinput743940 "activeInstanceSet" :flattened? nil :result-wrapper resultWrapper743941), "nextToken" (portkey.aws/search-for-tag rawinput743940 "nextToken" :flattened? nil :result-wrapper resultWrapper743941)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar743942 ["spotFleetRequestId" :content])), :active-instances (deser-active-instance-set (clojure.core/get-in letvar743942 ["activeInstanceSet" :content]))} (letvar743942 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743942 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-spot-price-history-result ([input] (response-describe-spot-price-history-result nil input)) ([resultWrapper743944 input] (clojure.core/let [rawinput743943 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743945 {"spotPriceHistorySet" (portkey.aws/search-for-tag rawinput743943 "spotPriceHistorySet" :flattened? nil :result-wrapper resultWrapper743944), "nextToken" (portkey.aws/search-for-tag rawinput743943 "nextToken" :flattened? nil :result-wrapper resultWrapper743944)}] (clojure.core/cond-> {} (letvar743945 "spotPriceHistorySet") (clojure.core/assoc :spot-price-history (deser-spot-price-history-list (clojure.core/get-in letvar743945 ["spotPriceHistorySet" :content]))) (letvar743945 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743945 ["nextToken" :content])))))))

(clojure.core/defn- response-copy-snapshot-result ([input] (response-copy-snapshot-result nil input)) ([resultWrapper743947 input] (clojure.core/let [rawinput743946 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743948 {"snapshotId" (portkey.aws/search-for-tag rawinput743946 "snapshotId" :flattened? nil :result-wrapper resultWrapper743947)}] (clojure.core/cond-> {} (letvar743948 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar743948 ["snapshotId" :content])))))))

(clojure.core/defn- response-attach-classic-link-vpc-result ([input] (response-attach-classic-link-vpc-result nil input)) ([resultWrapper743950 input] (clojure.core/let [rawinput743949 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743951 {"return" (portkey.aws/search-for-tag rawinput743949 "return" :flattened? nil :result-wrapper resultWrapper743950)}] (clojure.core/cond-> {} (letvar743951 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743951 ["return" :content])))))))

(clojure.core/defn- response-cancel-spot-fleet-requests-response ([input] (response-cancel-spot-fleet-requests-response nil input)) ([resultWrapper743953 input] (clojure.core/let [rawinput743952 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743954 {"unsuccessfulFleetRequestSet" (portkey.aws/search-for-tag rawinput743952 "unsuccessfulFleetRequestSet" :flattened? nil :result-wrapper resultWrapper743953), "successfulFleetRequestSet" (portkey.aws/search-for-tag rawinput743952 "successfulFleetRequestSet" :flattened? nil :result-wrapper resultWrapper743953)}] (clojure.core/cond-> {} (letvar743954 "unsuccessfulFleetRequestSet") (clojure.core/assoc :unsuccessful-fleet-requests (deser-cancel-spot-fleet-requests-error-set (clojure.core/get-in letvar743954 ["unsuccessfulFleetRequestSet" :content]))) (letvar743954 "successfulFleetRequestSet") (clojure.core/assoc :successful-fleet-requests (deser-cancel-spot-fleet-requests-success-set (clojure.core/get-in letvar743954 ["successfulFleetRequestSet" :content])))))))

(clojure.core/defn- response-delete-nat-gateway-result ([input] (response-delete-nat-gateway-result nil input)) ([resultWrapper743956 input] (clojure.core/let [rawinput743955 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743957 {"natGatewayId" (portkey.aws/search-for-tag rawinput743955 "natGatewayId" :flattened? nil :result-wrapper resultWrapper743956)}] (clojure.core/cond-> {} (letvar743957 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar743957 ["natGatewayId" :content])))))))

(clojure.core/defn- response-allocate-hosts-result ([input] (response-allocate-hosts-result nil input)) ([resultWrapper743959 input] (clojure.core/let [rawinput743958 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743960 {"hostIdSet" (portkey.aws/search-for-tag rawinput743958 "hostIdSet" :flattened? nil :result-wrapper resultWrapper743959)}] (clojure.core/cond-> {} (letvar743960 "hostIdSet") (clojure.core/assoc :host-ids (deser-response-host-id-list (clojure.core/get-in letvar743960 ["hostIdSet" :content])))))))

(clojure.core/defn- response-instance-attribute ([input] (response-instance-attribute nil input)) ([resultWrapper743962 input] (clojure.core/let [rawinput743961 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743963 {"kernel" (portkey.aws/search-for-tag rawinput743961 "kernel" :flattened? nil :result-wrapper resultWrapper743962), "groupSet" (portkey.aws/search-for-tag rawinput743961 "groupSet" :flattened? nil :result-wrapper resultWrapper743962), "productCodes" (portkey.aws/search-for-tag rawinput743961 "productCodes" :flattened? nil :result-wrapper resultWrapper743962), "blockDeviceMapping" (portkey.aws/search-for-tag rawinput743961 "blockDeviceMapping" :flattened? nil :result-wrapper resultWrapper743962), "disableApiTermination" (portkey.aws/search-for-tag rawinput743961 "disableApiTermination" :flattened? nil :result-wrapper resultWrapper743962), "sourceDestCheck" (portkey.aws/search-for-tag rawinput743961 "sourceDestCheck" :flattened? nil :result-wrapper resultWrapper743962), "userData" (portkey.aws/search-for-tag rawinput743961 "userData" :flattened? nil :result-wrapper resultWrapper743962), "ebsOptimized" (portkey.aws/search-for-tag rawinput743961 "ebsOptimized" :flattened? nil :result-wrapper resultWrapper743962), "ramdisk" (portkey.aws/search-for-tag rawinput743961 "ramdisk" :flattened? nil :result-wrapper resultWrapper743962), "instanceType" (portkey.aws/search-for-tag rawinput743961 "instanceType" :flattened? nil :result-wrapper resultWrapper743962), "enaSupport" (portkey.aws/search-for-tag rawinput743961 "enaSupport" :flattened? nil :result-wrapper resultWrapper743962), "rootDeviceName" (portkey.aws/search-for-tag rawinput743961 "rootDeviceName" :flattened? nil :result-wrapper resultWrapper743962), "instanceInitiatedShutdownBehavior" (portkey.aws/search-for-tag rawinput743961 "instanceInitiatedShutdownBehavior" :flattened? nil :result-wrapper resultWrapper743962), "instanceId" (portkey.aws/search-for-tag rawinput743961 "instanceId" :flattened? nil :result-wrapper resultWrapper743962), "sriovNetSupport" (portkey.aws/search-for-tag rawinput743961 "sriovNetSupport" :flattened? nil :result-wrapper resultWrapper743962)}] (clojure.core/cond-> {} (letvar743963 "kernel") (clojure.core/assoc :kernel-id (deser-attribute-value (clojure.core/get-in letvar743963 ["kernel" :content]))) (letvar743963 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar743963 ["instanceId" :content]))) (letvar743963 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-attribute-boolean-value (clojure.core/get-in letvar743963 ["ebsOptimized" :content]))) (letvar743963 "instanceType") (clojure.core/assoc :instance-type (deser-attribute-value (clojure.core/get-in letvar743963 ["instanceType" :content]))) (letvar743963 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-attribute-value (clojure.core/get-in letvar743963 ["sriovNetSupport" :content]))) (letvar743963 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-attribute-boolean-value (clojure.core/get-in letvar743963 ["sourceDestCheck" :content]))) (letvar743963 "disableApiTermination") (clojure.core/assoc :disable-api-termination (deser-attribute-boolean-value (clojure.core/get-in letvar743963 ["disableApiTermination" :content]))) (letvar743963 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar743963 ["groupSet" :content]))) (letvar743963 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-instance-block-device-mapping-list (clojure.core/get-in letvar743963 ["blockDeviceMapping" :content]))) (letvar743963 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar743963 ["productCodes" :content]))) (letvar743963 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-attribute-value (clojure.core/get-in letvar743963 ["rootDeviceName" :content]))) (letvar743963 "ramdisk") (clojure.core/assoc :ramdisk-id (deser-attribute-value (clojure.core/get-in letvar743963 ["ramdisk" :content]))) (letvar743963 "userData") (clojure.core/assoc :user-data (deser-attribute-value (clojure.core/get-in letvar743963 ["userData" :content]))) (letvar743963 "instanceInitiatedShutdownBehavior") (clojure.core/assoc :instance-initiated-shutdown-behavior (deser-attribute-value (clojure.core/get-in letvar743963 ["instanceInitiatedShutdownBehavior" :content]))) (letvar743963 "enaSupport") (clojure.core/assoc :ena-support (deser-attribute-boolean-value (clojure.core/get-in letvar743963 ["enaSupport" :content])))))))

(clojure.core/defn- response-modify-vpc-endpoint-result ([input] (response-modify-vpc-endpoint-result nil input)) ([resultWrapper743965 input] (clojure.core/let [rawinput743964 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743966 {"return" (portkey.aws/search-for-tag rawinput743964 "return" :flattened? nil :result-wrapper resultWrapper743965)}] (clojure.core/cond-> {} (letvar743966 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar743966 ["return" :content])))))))

(clojure.core/defn- response-key-pair ([input] (response-key-pair nil input)) ([resultWrapper743968 input] (clojure.core/let [rawinput743967 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743969 {"keyName" (portkey.aws/search-for-tag rawinput743967 "keyName" :flattened? nil :result-wrapper resultWrapper743968), "keyFingerprint" (portkey.aws/search-for-tag rawinput743967 "keyFingerprint" :flattened? nil :result-wrapper resultWrapper743968), "keyMaterial" (portkey.aws/search-for-tag rawinput743967 "keyMaterial" :flattened? nil :result-wrapper resultWrapper743968)}] (clojure.core/cond-> {} (letvar743969 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar743969 ["keyName" :content]))) (letvar743969 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar743969 ["keyFingerprint" :content]))) (letvar743969 "keyMaterial") (clojure.core/assoc :key-material (deser-string (clojure.core/get-in letvar743969 ["keyMaterial" :content])))))))

(clojure.core/defn- response-describe-subnets-result ([input] (response-describe-subnets-result nil input)) ([resultWrapper743971 input] (clojure.core/let [rawinput743970 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743972 {"subnetSet" (portkey.aws/search-for-tag rawinput743970 "subnetSet" :flattened? nil :result-wrapper resultWrapper743971)}] (clojure.core/cond-> {} (letvar743972 "subnetSet") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar743972 ["subnetSet" :content])))))))

(clojure.core/defn- response-associate-address-result ([input] (response-associate-address-result nil input)) ([resultWrapper743974 input] (clojure.core/let [rawinput743973 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743975 {"associationId" (portkey.aws/search-for-tag rawinput743973 "associationId" :flattened? nil :result-wrapper resultWrapper743974)}] (clojure.core/cond-> {} (letvar743975 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar743975 ["associationId" :content])))))))

(clojure.core/defn- response-create-instance-export-task-result ([input] (response-create-instance-export-task-result nil input)) ([resultWrapper743977 input] (clojure.core/let [rawinput743976 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743978 {"exportTask" (portkey.aws/search-for-tag rawinput743976 "exportTask" :flattened? nil :result-wrapper resultWrapper743977)}] (clojure.core/cond-> {} (letvar743978 "exportTask") (clojure.core/assoc :export-task (deser-export-task (clojure.core/get-in letvar743978 ["exportTask" :content])))))))

(clojure.core/defn- response-modify-vpc-peering-connection-options-result ([input] (response-modify-vpc-peering-connection-options-result nil input)) ([resultWrapper743980 input] (clojure.core/let [rawinput743979 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743981 {"requesterPeeringConnectionOptions" (portkey.aws/search-for-tag rawinput743979 "requesterPeeringConnectionOptions" :flattened? nil :result-wrapper resultWrapper743980), "accepterPeeringConnectionOptions" (portkey.aws/search-for-tag rawinput743979 "accepterPeeringConnectionOptions" :flattened? nil :result-wrapper resultWrapper743980)}] (clojure.core/cond-> {} (letvar743981 "requesterPeeringConnectionOptions") (clojure.core/assoc :requester-peering-connection-options (deser-peering-connection-options (clojure.core/get-in letvar743981 ["requesterPeeringConnectionOptions" :content]))) (letvar743981 "accepterPeeringConnectionOptions") (clojure.core/assoc :accepter-peering-connection-options (deser-peering-connection-options (clojure.core/get-in letvar743981 ["accepterPeeringConnectionOptions" :content])))))))

(clojure.core/defn- response-associate-route-table-result ([input] (response-associate-route-table-result nil input)) ([resultWrapper743983 input] (clojure.core/let [rawinput743982 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743984 {"associationId" (portkey.aws/search-for-tag rawinput743982 "associationId" :flattened? nil :result-wrapper resultWrapper743983)}] (clojure.core/cond-> {} (letvar743984 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar743984 ["associationId" :content])))))))

(clojure.core/defn- response-create-security-group-result ([input] (response-create-security-group-result nil input)) ([resultWrapper743986 input] (clojure.core/let [rawinput743985 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743987 {"groupId" (portkey.aws/search-for-tag rawinput743985 "groupId" :flattened? nil :result-wrapper resultWrapper743986)}] (clojure.core/cond-> {} (letvar743987 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar743987 ["groupId" :content])))))))

(clojure.core/defn- response-get-password-data-result ([input] (response-get-password-data-result nil input)) ([resultWrapper743989 input] (clojure.core/let [rawinput743988 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743990 {"instanceId" (portkey.aws/search-for-tag rawinput743988 "instanceId" :flattened? nil :result-wrapper resultWrapper743989), "timestamp" (portkey.aws/search-for-tag rawinput743988 "timestamp" :flattened? nil :result-wrapper resultWrapper743989), "passwordData" (portkey.aws/search-for-tag rawinput743988 "passwordData" :flattened? nil :result-wrapper resultWrapper743989)}] (clojure.core/cond-> {} (letvar743990 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar743990 ["instanceId" :content]))) (letvar743990 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar743990 ["timestamp" :content]))) (letvar743990 "passwordData") (clojure.core/assoc :password-data (deser-string (clojure.core/get-in letvar743990 ["passwordData" :content])))))))

(clojure.core/defn- response-import-volume-result ([input] (response-import-volume-result nil input)) ([resultWrapper743992 input] (clojure.core/let [rawinput743991 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743993 {"conversionTask" (portkey.aws/search-for-tag rawinput743991 "conversionTask" :flattened? nil :result-wrapper resultWrapper743992)}] (clojure.core/cond-> {} (letvar743993 "conversionTask") (clojure.core/assoc :conversion-task (deser-conversion-task (clojure.core/get-in letvar743993 ["conversionTask" :content])))))))

(clojure.core/defn- response-describe-reserved-instances-result ([input] (response-describe-reserved-instances-result nil input)) ([resultWrapper743995 input] (clojure.core/let [rawinput743994 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743996 {"reservedInstancesSet" (portkey.aws/search-for-tag rawinput743994 "reservedInstancesSet" :flattened? nil :result-wrapper resultWrapper743995)}] (clojure.core/cond-> {} (letvar743996 "reservedInstancesSet") (clojure.core/assoc :reserved-instances (deser-reserved-instances-list (clojure.core/get-in letvar743996 ["reservedInstancesSet" :content])))))))

(clojure.core/defn- response-describe-nat-gateways-result ([input] (response-describe-nat-gateways-result nil input)) ([resultWrapper743998 input] (clojure.core/let [rawinput743997 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar743999 {"natGatewaySet" (portkey.aws/search-for-tag rawinput743997 "natGatewaySet" :flattened? nil :result-wrapper resultWrapper743998), "nextToken" (portkey.aws/search-for-tag rawinput743997 "nextToken" :flattened? nil :result-wrapper resultWrapper743998)}] (clojure.core/cond-> {} (letvar743999 "natGatewaySet") (clojure.core/assoc :nat-gateways (deser-nat-gateway-list (clojure.core/get-in letvar743999 ["natGatewaySet" :content]))) (letvar743999 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar743999 ["nextToken" :content])))))))

(clojure.core/defn- response-accept-reserved-instances-exchange-quote-result ([input] (response-accept-reserved-instances-exchange-quote-result nil input)) ([resultWrapper744001 input] (clojure.core/let [rawinput744000 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744002 {"exchangeId" (portkey.aws/search-for-tag rawinput744000 "exchangeId" :flattened? nil :result-wrapper resultWrapper744001)}] (clojure.core/cond-> {} (letvar744002 "exchangeId") (clojure.core/assoc :exchange-id (deser-string (clojure.core/get-in letvar744002 ["exchangeId" :content])))))))

(clojure.core/defn- response-describe-host-reservation-offerings-result ([input] (response-describe-host-reservation-offerings-result nil input)) ([resultWrapper744004 input] (clojure.core/let [rawinput744003 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744005 {"offeringSet" (portkey.aws/search-for-tag rawinput744003 "offeringSet" :flattened? nil :result-wrapper resultWrapper744004), "nextToken" (portkey.aws/search-for-tag rawinput744003 "nextToken" :flattened? nil :result-wrapper resultWrapper744004)}] (clojure.core/cond-> {} (letvar744005 "offeringSet") (clojure.core/assoc :offering-set (deser-host-offering-set (clojure.core/get-in letvar744005 ["offeringSet" :content]))) (letvar744005 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar744005 ["nextToken" :content])))))))

(clojure.core/defn- response-replace-route-table-association-result ([input] (response-replace-route-table-association-result nil input)) ([resultWrapper744007 input] (clojure.core/let [rawinput744006 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744008 {"newAssociationId" (portkey.aws/search-for-tag rawinput744006 "newAssociationId" :flattened? nil :result-wrapper resultWrapper744007)}] (clojure.core/cond-> {} (letvar744008 "newAssociationId") (clojure.core/assoc :new-association-id (deser-string (clojure.core/get-in letvar744008 ["newAssociationId" :content])))))))

(clojure.core/defn- response-cancel-spot-instance-requests-result ([input] (response-cancel-spot-instance-requests-result nil input)) ([resultWrapper744010 input] (clojure.core/let [rawinput744009 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744011 {"spotInstanceRequestSet" (portkey.aws/search-for-tag rawinput744009 "spotInstanceRequestSet" :flattened? nil :result-wrapper resultWrapper744010)}] (clojure.core/cond-> {} (letvar744011 "spotInstanceRequestSet") (clojure.core/assoc :cancelled-spot-instance-requests (deser-cancelled-spot-instance-request-list (clojure.core/get-in letvar744011 ["spotInstanceRequestSet" :content])))))))

(clojure.core/defn- response-describe-import-snapshot-tasks-result ([input] (response-describe-import-snapshot-tasks-result nil input)) ([resultWrapper744013 input] (clojure.core/let [rawinput744012 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744014 {"importSnapshotTaskSet" (portkey.aws/search-for-tag rawinput744012 "importSnapshotTaskSet" :flattened? nil :result-wrapper resultWrapper744013), "nextToken" (portkey.aws/search-for-tag rawinput744012 "nextToken" :flattened? nil :result-wrapper resultWrapper744013)}] (clojure.core/cond-> {} (letvar744014 "importSnapshotTaskSet") (clojure.core/assoc :import-snapshot-tasks (deser-import-snapshot-task-list (clojure.core/get-in letvar744014 ["importSnapshotTaskSet" :content]))) (letvar744014 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar744014 ["nextToken" :content])))))))

(clojure.core/defn- response-describe-dhcp-options-result ([input] (response-describe-dhcp-options-result nil input)) ([resultWrapper744016 input] (clojure.core/let [rawinput744015 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744017 {"dhcpOptionsSet" (portkey.aws/search-for-tag rawinput744015 "dhcpOptionsSet" :flattened? nil :result-wrapper resultWrapper744016)}] (clojure.core/cond-> {} (letvar744017 "dhcpOptionsSet") (clojure.core/assoc :dhcp-options (deser-dhcp-options-list (clojure.core/get-in letvar744017 ["dhcpOptionsSet" :content])))))))

(clojure.core/defn- response-create-nat-gateway-result ([input] (response-create-nat-gateway-result nil input)) ([resultWrapper744019 input] (clojure.core/let [rawinput744018 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744020 {"natGateway" (portkey.aws/search-for-tag rawinput744018 "natGateway" :flattened? nil :result-wrapper resultWrapper744019), "clientToken" (portkey.aws/search-for-tag rawinput744018 "clientToken" :flattened? nil :result-wrapper resultWrapper744019)}] (clojure.core/cond-> {} (letvar744020 "natGateway") (clojure.core/assoc :nat-gateway (deser-nat-gateway (clojure.core/get-in letvar744020 ["natGateway" :content]))) (letvar744020 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar744020 ["clientToken" :content])))))))

(clojure.core/defn- response-image-attribute ([input] (response-image-attribute nil input)) ([resultWrapper744022 input] (clojure.core/let [rawinput744021 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744023 {"imageId" (portkey.aws/search-for-tag rawinput744021 "imageId" :flattened? nil :result-wrapper resultWrapper744022), "launchPermission" (portkey.aws/search-for-tag rawinput744021 "launchPermission" :flattened? nil :result-wrapper resultWrapper744022), "productCodes" (portkey.aws/search-for-tag rawinput744021 "productCodes" :flattened? nil :result-wrapper resultWrapper744022), "kernel" (portkey.aws/search-for-tag rawinput744021 "kernel" :flattened? nil :result-wrapper resultWrapper744022), "ramdisk" (portkey.aws/search-for-tag rawinput744021 "ramdisk" :flattened? nil :result-wrapper resultWrapper744022), "description" (portkey.aws/search-for-tag rawinput744021 "description" :flattened? nil :result-wrapper resultWrapper744022), "sriovNetSupport" (portkey.aws/search-for-tag rawinput744021 "sriovNetSupport" :flattened? nil :result-wrapper resultWrapper744022), "blockDeviceMapping" (portkey.aws/search-for-tag rawinput744021 "blockDeviceMapping" :flattened? nil :result-wrapper resultWrapper744022)}] (clojure.core/cond-> {} (letvar744023 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar744023 ["imageId" :content]))) (letvar744023 "launchPermission") (clojure.core/assoc :launch-permissions (deser-launch-permission-list (clojure.core/get-in letvar744023 ["launchPermission" :content]))) (letvar744023 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar744023 ["productCodes" :content]))) (letvar744023 "kernel") (clojure.core/assoc :kernel-id (deser-attribute-value (clojure.core/get-in letvar744023 ["kernel" :content]))) (letvar744023 "ramdisk") (clojure.core/assoc :ramdisk-id (deser-attribute-value (clojure.core/get-in letvar744023 ["ramdisk" :content]))) (letvar744023 "description") (clojure.core/assoc :description (deser-attribute-value (clojure.core/get-in letvar744023 ["description" :content]))) (letvar744023 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-attribute-value (clojure.core/get-in letvar744023 ["sriovNetSupport" :content]))) (letvar744023 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar744023 ["blockDeviceMapping" :content])))))))

(clojure.core/defn- response-reject-vpc-peering-connection-result ([input] (response-reject-vpc-peering-connection-result nil input)) ([resultWrapper744025 input] (clojure.core/let [rawinput744024 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744026 {"return" (portkey.aws/search-for-tag rawinput744024 "return" :flattened? nil :result-wrapper resultWrapper744025)}] (clojure.core/cond-> {} (letvar744026 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar744026 ["return" :content])))))))

(clojure.core/defn- response-create-spot-datafeed-subscription-result ([input] (response-create-spot-datafeed-subscription-result nil input)) ([resultWrapper744028 input] (clojure.core/let [rawinput744027 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744029 {"spotDatafeedSubscription" (portkey.aws/search-for-tag rawinput744027 "spotDatafeedSubscription" :flattened? nil :result-wrapper resultWrapper744028)}] (clojure.core/cond-> {} (letvar744029 "spotDatafeedSubscription") (clojure.core/assoc :spot-datafeed-subscription (deser-spot-datafeed-subscription (clojure.core/get-in letvar744029 ["spotDatafeedSubscription" :content])))))))

(clojure.core/defn- response-bundle-instance-result ([input] (response-bundle-instance-result nil input)) ([resultWrapper744031 input] (clojure.core/let [rawinput744030 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744032 {"bundleInstanceTask" (portkey.aws/search-for-tag rawinput744030 "bundleInstanceTask" :flattened? nil :result-wrapper resultWrapper744031)}] (clojure.core/cond-> {} (letvar744032 "bundleInstanceTask") (clojure.core/assoc :bundle-task (deser-bundle-task (clojure.core/get-in letvar744032 ["bundleInstanceTask" :content])))))))

(clojure.core/defn- response-start-instances-result ([input] (response-start-instances-result nil input)) ([resultWrapper744034 input] (clojure.core/let [rawinput744033 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744035 {"instancesSet" (portkey.aws/search-for-tag rawinput744033 "instancesSet" :flattened? nil :result-wrapper resultWrapper744034)}] (clojure.core/cond-> {} (letvar744035 "instancesSet") (clojure.core/assoc :starting-instances (deser-instance-state-change-list (clojure.core/get-in letvar744035 ["instancesSet" :content])))))))

(clojure.core/defn- response-describe-vpn-gateways-result ([input] (response-describe-vpn-gateways-result nil input)) ([resultWrapper744037 input] (clojure.core/let [rawinput744036 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744038 {"vpnGatewaySet" (portkey.aws/search-for-tag rawinput744036 "vpnGatewaySet" :flattened? nil :result-wrapper resultWrapper744037)}] (clojure.core/cond-> {} (letvar744038 "vpnGatewaySet") (clojure.core/assoc :vpn-gateways (deser-vpn-gateway-list (clojure.core/get-in letvar744038 ["vpnGatewaySet" :content])))))))

(clojure.core/defn- response-volume-attachment ([input] (response-volume-attachment nil input)) ([resultWrapper744040 input] (clojure.core/let [rawinput744039 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744041 {"volumeId" (portkey.aws/search-for-tag rawinput744039 "volumeId" :flattened? nil :result-wrapper resultWrapper744040), "instanceId" (portkey.aws/search-for-tag rawinput744039 "instanceId" :flattened? nil :result-wrapper resultWrapper744040), "device" (portkey.aws/search-for-tag rawinput744039 "device" :flattened? nil :result-wrapper resultWrapper744040), "status" (portkey.aws/search-for-tag rawinput744039 "status" :flattened? nil :result-wrapper resultWrapper744040), "attachTime" (portkey.aws/search-for-tag rawinput744039 "attachTime" :flattened? nil :result-wrapper resultWrapper744040), "deleteOnTermination" (portkey.aws/search-for-tag rawinput744039 "deleteOnTermination" :flattened? nil :result-wrapper resultWrapper744040)}] (clojure.core/cond-> {} (letvar744041 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar744041 ["volumeId" :content]))) (letvar744041 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar744041 ["instanceId" :content]))) (letvar744041 "device") (clojure.core/assoc :device (deser-string (clojure.core/get-in letvar744041 ["device" :content]))) (letvar744041 "status") (clojure.core/assoc :state (deser-volume-attachment-state (clojure.core/get-in letvar744041 ["status" :content]))) (letvar744041 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar744041 ["attachTime" :content]))) (letvar744041 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar744041 ["deleteOnTermination" :content])))))))

(clojure.core/defn- response-enable-vpc-classic-link-result ([input] (response-enable-vpc-classic-link-result nil input)) ([resultWrapper744043 input] (clojure.core/let [rawinput744042 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744044 {"return" (portkey.aws/search-for-tag rawinput744042 "return" :flattened? nil :result-wrapper resultWrapper744043)}] (clojure.core/cond-> {} (letvar744044 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar744044 ["return" :content])))))))

(clojure.core/defn- response-describe-security-groups-result ([input] (response-describe-security-groups-result nil input)) ([resultWrapper744046 input] (clojure.core/let [rawinput744045 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744047 {"securityGroupInfo" (portkey.aws/search-for-tag rawinput744045 "securityGroupInfo" :flattened? nil :result-wrapper resultWrapper744046)}] (clojure.core/cond-> {} (letvar744047 "securityGroupInfo") (clojure.core/assoc :security-groups (deser-security-group-list (clojure.core/get-in letvar744047 ["securityGroupInfo" :content])))))))

(clojure.core/defn- response-describe-security-group-references-result ([input] (response-describe-security-group-references-result nil input)) ([resultWrapper744049 input] (clojure.core/let [rawinput744048 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744050 {"securityGroupReferenceSet" (portkey.aws/search-for-tag rawinput744048 "securityGroupReferenceSet" :flattened? nil :result-wrapper resultWrapper744049)}] (clojure.core/cond-> {} (letvar744050 "securityGroupReferenceSet") (clojure.core/assoc :security-group-reference-set (deser-security-group-references (clojure.core/get-in letvar744050 ["securityGroupReferenceSet" :content])))))))

(clojure.core/defn- response-describe-regions-result ([input] (response-describe-regions-result nil input)) ([resultWrapper744052 input] (clojure.core/let [rawinput744051 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744053 {"regionInfo" (portkey.aws/search-for-tag rawinput744051 "regionInfo" :flattened? nil :result-wrapper resultWrapper744052)}] (clojure.core/cond-> {} (letvar744053 "regionInfo") (clojure.core/assoc :regions (deser-region-list (clojure.core/get-in letvar744053 ["regionInfo" :content])))))))

(clojure.core/defn- response-detach-classic-link-vpc-result ([input] (response-detach-classic-link-vpc-result nil input)) ([resultWrapper744055 input] (clojure.core/let [rawinput744054 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744056 {"return" (portkey.aws/search-for-tag rawinput744054 "return" :flattened? nil :result-wrapper resultWrapper744055)}] (clojure.core/cond-> {} (letvar744056 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar744056 ["return" :content])))))))

(clojure.core/defn- response-delete-vpc-peering-connection-result ([input] (response-delete-vpc-peering-connection-result nil input)) ([resultWrapper744058 input] (clojure.core/let [rawinput744057 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744059 {"return" (portkey.aws/search-for-tag rawinput744057 "return" :flattened? nil :result-wrapper resultWrapper744058)}] (clojure.core/cond-> {} (letvar744059 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar744059 ["return" :content])))))))

(clojure.core/defn- response-unmonitor-instances-result ([input] (response-unmonitor-instances-result nil input)) ([resultWrapper744061 input] (clojure.core/let [rawinput744060 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744062 {"instancesSet" (portkey.aws/search-for-tag rawinput744060 "instancesSet" :flattened? nil :result-wrapper resultWrapper744061)}] (clojure.core/cond-> {} (letvar744062 "instancesSet") (clojure.core/assoc :instance-monitorings (deser-instance-monitoring-list (clojure.core/get-in letvar744062 ["instancesSet" :content])))))))

(clojure.core/defn- response-attach-vpn-gateway-result ([input] (response-attach-vpn-gateway-result nil input)) ([resultWrapper744064 input] (clojure.core/let [rawinput744063 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744065 {"attachment" (portkey.aws/search-for-tag rawinput744063 "attachment" :flattened? nil :result-wrapper resultWrapper744064)}] (clojure.core/cond-> {} (letvar744065 "attachment") (clojure.core/assoc :vpc-attachment (deser-vpc-attachment (clojure.core/get-in letvar744065 ["attachment" :content])))))))

(clojure.core/defn- response-describe-spot-fleet-request-history-response ([input] (response-describe-spot-fleet-request-history-response nil input)) ([resultWrapper744067 input] (clojure.core/let [rawinput744066 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar744068 {"spotFleetRequestId" (portkey.aws/search-for-tag rawinput744066 "spotFleetRequestId" :flattened? nil :result-wrapper resultWrapper744067), "startTime" (portkey.aws/search-for-tag rawinput744066 "startTime" :flattened? nil :result-wrapper resultWrapper744067), "lastEvaluatedTime" (portkey.aws/search-for-tag rawinput744066 "lastEvaluatedTime" :flattened? nil :result-wrapper resultWrapper744067), "historyRecordSet" (portkey.aws/search-for-tag rawinput744066 "historyRecordSet" :flattened? nil :result-wrapper resultWrapper744067), "nextToken" (portkey.aws/search-for-tag rawinput744066 "nextToken" :flattened? nil :result-wrapper resultWrapper744067)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar744068 ["spotFleetRequestId" :content])), :start-time (deser-date-time (clojure.core/get-in letvar744068 ["startTime" :content])), :last-evaluated-time (deser-date-time (clojure.core/get-in letvar744068 ["lastEvaluatedTime" :content])), :history-records (deser-history-records (clojure.core/get-in letvar744068 ["historyRecordSet" :content]))} (letvar744068 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar744068 ["nextToken" :content])))))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/zone-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/snapshot-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/owner-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/owner-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/restorable-by-user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/restorable-by-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-snapshots-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-snapshots-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/snapshot-ids :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/owner-ids :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/restorable-by-user-ids :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/filters :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/next-token :portkey.aws.ec2.-2016-09-15.describe-snapshots-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/export-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/export-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/event-code #{:instancestop "instance-retirement" "instance-reboot" :instancereboot "instance-stop" "system-reboot" :instanceretirement :systemmaintenance :systemreboot "system-maintenance"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/flow-log-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/deliver-logs-error-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/deliver-logs-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/deliver-logs-permission-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/flow-log-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/log-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.flow-log/creation-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/flow-log (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.flow-log/flow-log-status :portkey.aws.ec2.-2016-09-15/traffic-type :portkey.aws.ec2.-2016-09-15.flow-log/resource-id :portkey.aws.ec2.-2016-09-15.flow-log/deliver-logs-error-message :portkey.aws.ec2.-2016-09-15.flow-log/deliver-logs-status :portkey.aws.ec2.-2016-09-15.flow-log/deliver-logs-permission-arn :portkey.aws.ec2.-2016-09-15.flow-log/flow-log-id :portkey.aws.ec2.-2016-09-15.flow-log/log-group-name :portkey.aws.ec2.-2016-09-15.flow-log/creation-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpc))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-spot-fleet-request-response/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-spot-fleet-request-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-spot-fleet-request-response/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-monitoring/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/spot-fleet-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-requests-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/spot-fleet-request-ids :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/next-token :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-action/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-action/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-action/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-action/event-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.volume-status-action/code :portkey.aws.ec2.-2016-09-15.volume-status-action/description :portkey.aws.ec2.-2016-09-15.volume-status-action/event-type :portkey.aws.ec2.-2016-09-15.volume-status-action/event-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/permission-group #{:all "all"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/network-interface-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.address/instance-id :portkey.aws.ec2.-2016-09-15.address/public-ip :portkey.aws.ec2.-2016-09-15.address/allocation-id :portkey.aws.ec2.-2016-09-15.address/association-id :portkey.aws.ec2.-2016-09-15.address/domain :portkey.aws.ec2.-2016-09-15.address/network-interface-id :portkey.aws.ec2.-2016-09-15.address/network-interface-owner-id :portkey.aws.ec2.-2016-09-15.address/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task/bundle-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/bundle-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task/update-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/bundle-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.bundle-task/instance-id :portkey.aws.ec2.-2016-09-15.bundle-task/bundle-id :portkey.aws.ec2.-2016-09-15.bundle-task/state :portkey.aws.ec2.-2016-09-15.bundle-task/start-time :portkey.aws.ec2.-2016-09-15.bundle-task/update-time :portkey.aws.ec2.-2016-09-15/storage :portkey.aws.ec2.-2016-09-15.bundle-task/progress :portkey.aws.ec2.-2016-09-15/bundle-task-error]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/role-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/disk-containers (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/image-disk-container-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-image-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.import-image-request/dry-run :portkey.aws.ec2.-2016-09-15.import-image-request/platform :portkey.aws.ec2.-2016-09-15.import-image-request/role-name :portkey.aws.ec2.-2016-09-15/client-data :portkey.aws.ec2.-2016-09-15.import-image-request/description :portkey.aws.ec2.-2016-09-15.import-image-request/disk-containers :portkey.aws.ec2.-2016-09-15.import-image-request/hypervisor :portkey.aws.ec2.-2016-09-15.import-image-request/architecture :portkey.aws.ec2.-2016-09-15.import-image-request/license-type :portkey.aws.ec2.-2016-09-15.import-image-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/security-group-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/security-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-count-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-count))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.confirm-product-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.confirm-product-instance-request/product-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.confirm-product-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/confirm-product-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.confirm-product-instance-request/product-code :portkey.aws.ec2.-2016-09-15.confirm-product-instance-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-09-15.confirm-product-instance-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-conversion-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/conversion-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/instance-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/origin (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/route-origin))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/destination-prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/route-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.route/instance-owner-id :portkey.aws.ec2.-2016-09-15.route/instance-id :portkey.aws.ec2.-2016-09-15.route/nat-gateway-id :portkey.aws.ec2.-2016-09-15.route/network-interface-id :portkey.aws.ec2.-2016-09-15.route/origin :portkey.aws.ec2.-2016-09-15.route/destination-cidr-block :portkey.aws.ec2.-2016-09-15.route/destination-prefix-list-id :portkey.aws.ec2.-2016-09-15.route/vpc-peering-connection-id :portkey.aws.ec2.-2016-09-15.route/state :portkey.aws.ec2.-2016-09-15.route/gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-request/vpn-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-gateway-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpn-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-request/vpn-gateway-ids :portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpn-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpn-connection-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpn-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-vpn-connection-request/vpn-connection-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-vpn-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-screenshot-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-screenshot-result/image-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-console-screenshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.get-console-screenshot-result/instance-id :portkey.aws.ec2.-2016-09-15.get-console-screenshot-result/image-data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/nat-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/nat-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/moving-address-status-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/moving-address-status))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-state-change-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-state-change))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-fleet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-fleet-request/spot-fleet-request-config (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-fleet-request-config-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/request-spot-fleet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.request-spot-fleet-request/spot-fleet-request-config] :opt-un [:portkey.aws.ec2.-2016-09-15.request-spot-fleet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/private-ip-address-config-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/scheduled-instances-private-ip-address-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/scheduled-instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instance-id-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/slot-start-time-range (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/slot-start-time-range-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-scheduled-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/scheduled-instance-ids :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/slot-start-time-range :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/next-token :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/max-results :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-flow-logs-request/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-flow-logs-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-flow-logs-request/flow-log-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device-specification/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device-specification/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ebs-instance-block-device-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.ebs-instance-block-device-specification/volume-id :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device-specification/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-internet-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/internet-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ebs-instance-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/volume-id :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/status :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/attach-time :portkey.aws.ec2.-2016-09-15.ebs-instance-block-device/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table/routes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/route-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table/associations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/route-table-association-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table/propagating-vgws (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/propagating-vgw-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route-table (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.route-table/route-table-id :portkey.aws.ec2.-2016-09-15.route-table/vpc-id :portkey.aws.ec2.-2016-09-15.route-table/routes :portkey.aws.ec2.-2016-09-15.route-table/associations :portkey.aws.ec2.-2016-09-15.route-table/tags :portkey.aws.ec2.-2016-09-15.route-table/propagating-vgws]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/scheduled-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservations-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-host-reservations-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/host-reservation-set :portkey.aws.ec2.-2016-09-15.describe-host-reservations-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.propagating-vgw/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/propagating-vgw (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.propagating-vgw/gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-addresses-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-addresses-request/public-ips (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/public-ip-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-addresses-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-addresses-request/allocation-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/allocation-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-addresses-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-addresses-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-addresses-request/public-ips :portkey.aws.ec2.-2016-09-15.describe-addresses-request/filters :portkey.aws.ec2.-2016-09-15.describe-addresses-request/allocation-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/flow-log-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/flow-log))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/prefix-list-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-network-interface-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-acls-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-acls-request/network-acl-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-acls-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-network-acls-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-network-acls-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-network-acls-request/network-acl-ids :portkey.aws.ec2.-2016-09-15.describe-network-acls-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-connection-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpn-connection))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/reserved-instances-offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/pricing-details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/pricing-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/marketplace (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/recurring-charges-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/scope (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scope))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instances-offering/currency-code :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/reserved-instances-offering-id :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/fixed-price :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/availability-zone :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/pricing-details :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/instance-tenancy :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/marketplace :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/duration :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/usage-price :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/product-description :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/offering-class :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/recurring-charges :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/offering-type :portkey.aws.ec2.-2016-09-15.reserved-instances-offering/scope]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-result/vpc-peering-connections (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-peering-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-result/vpc-peering-connections]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.storage/s-3 (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/s-3-storage))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/storage (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.storage/s-3]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/value-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-id-format-request/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-id-format-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-id-format-request/resource :portkey.aws.ec2.-2016-09-15.modify-id-format-request/use-long-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.peering-connection-options-request/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.peering-connection-options-request/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.peering-connection-options-request/allow-dns-resolution-from-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/peering-connection-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.peering-connection-options-request/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2016-09-15.peering-connection-options-request/allow-egress-from-local-vpc-to-remote-classic-link :portkey.aws.ec2.-2016-09-15.peering-connection-options-request/allow-dns-resolution-from-remote-vpc]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/run-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/instance-id-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/customer-gateway-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ip-ranges (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-status-event-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-status-event))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/public-ip-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-network-interface-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reset-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.reset-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-09-15.reset-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.reset-network-interface-attribute-request/source-dest-check]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.filter/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.filter/values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/filter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.filter/name :portkey.aws.ec2.-2016-09-15.filter/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-result-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-result))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-internet-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-internet-gateways-request/internet-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-internet-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-internet-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-internet-gateways-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-internet-gateways-request/internet-gateway-ids :portkey.aws.ec2.-2016-09-15.describe-internet-gateways-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-attribute-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-attribute-request/enable-dns-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-attribute-request/enable-dns-hostnames (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-vpc-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-attribute-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-attribute-request/enable-dns-support :portkey.aws.ec2.-2016-09-15.modify-vpc-attribute-request/enable-dns-hostnames]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/peering-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-options-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-vpc-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/cidr-block :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/owner-id :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/vpc-id :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-vpc-info/peering-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-customer-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-customer-gateway-request/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-customer-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-customer-gateway-request/customer-gateway-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-customer-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-monitoring-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-monitoring))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/accepter-vpc-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-vpc-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/expiration-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/requester-vpc-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-vpc-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-state-reason))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-peering-connection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc-peering-connection/accepter-vpc-info :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/expiration-time :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/requester-vpc-info :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/status :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/tags :portkey.aws.ec2.-2016-09-15.vpc-peering-connection/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/price-schedules (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/price-schedule-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-reserved-instances-listing-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/reserved-instances-id :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/instance-count :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/price-schedules :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-request/client-token] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/export-task-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/target-reservation-value-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/target-reservation-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-state #{"failed" :pending "error" "invalid" :invalid "transient" :transient :deregistered :error :available "deregistered" "pending" "available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-table-association-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-table-association-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-table-association-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/replace-route-table-association-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.replace-route-table-association-request/association-id :portkey.aws.ec2.-2016-09-15.replace-route-table-association-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-09-15.replace-route-table-association-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-reservation-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-snapshot-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-snapshot-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-09-15.create-snapshot-request/dry-run :portkey.aws.ec2.-2016-09-15.create-snapshot-request/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-state #{:deleted "deleting" :pending :deleting "deleted" :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/account-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/account-attribute))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-hosts-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-hosts-request/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-hosts-request/quantity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-hosts-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/allocate-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.allocate-hosts-request/instance-type :portkey.aws.ec2.-2016-09-15.allocate-hosts-request/quantity :portkey.aws.ec2.-2016-09-15.allocate-hosts-request/availability-zone] :opt-un [:portkey.aws.ec2.-2016-09-15/auto-placement :portkey.aws.ec2.-2016-09-15.allocate-hosts-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-classic-link-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/move-status #{:moving-to-vpc "movingToVpc" :restoring-to-classic "restoringToClassic"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-image-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-image-request/no-reboot (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-image-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-image-request/instance-id :portkey.aws.ec2.-2016-09-15.create-image-request/name] :opt-un [:portkey.aws.ec2.-2016-09-15.create-image-request/dry-run :portkey.aws.ec2.-2016-09-15.create-image-request/description :portkey.aws.ec2.-2016-09-15.create-image-request/no-reboot :portkey.aws.ec2.-2016-09-15.create-image-request/block-device-mappings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.prefix-list-id/prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/prefix-list-id (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.prefix-list-id/prefix-list-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-instance-request-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/security-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/pricing-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/pricing-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-connection-route-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-connection-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpn-connection-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-vpn-connection-route-request/vpn-connection-id :portkey.aws.ec2.-2016-09-15.create-vpn-connection-route-request/destination-cidr-block] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase/host-reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/response-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase/instance-family (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase/upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.purchase/host-reservation-id :portkey.aws.ec2.-2016-09-15.purchase/host-id-set :portkey.aws.ec2.-2016-09-15.purchase/instance-family :portkey.aws.ec2.-2016-09-15/payment-option :portkey.aws.ec2.-2016-09-15.purchase/upfront-price :portkey.aws.ec2.-2016-09-15.purchase/hourly-price :portkey.aws.ec2.-2016-09-15.purchase/currency-code :portkey.aws.ec2.-2016-09-15.purchase/duration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/hypervisor-type #{"ovm" "xen" :ovm :xen})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.history-record/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/history-record (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.history-record/timestamp :portkey.aws.ec2.-2016-09-15/event-type :portkey.aws.ec2.-2016-09-15/event-information] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpn-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/vpn-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/virtualization-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/image-location (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-request/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/register-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.register-image-request/name] :opt-un [:portkey.aws.ec2.-2016-09-15.register-image-request/dry-run :portkey.aws.ec2.-2016-09-15.register-image-request/kernel-id :portkey.aws.ec2.-2016-09-15.register-image-request/sriov-net-support :portkey.aws.ec2.-2016-09-15.register-image-request/description :portkey.aws.ec2.-2016-09-15.register-image-request/block-device-mappings :portkey.aws.ec2.-2016-09-15.register-image-request/architecture :portkey.aws.ec2.-2016-09-15.register-image-request/virtualization-type :portkey.aws.ec2.-2016-09-15.register-image-request/image-location :portkey.aws.ec2.-2016-09-15.register-image-request/root-device-name :portkey.aws.ec2.-2016-09-15.register-image-request/ramdisk-id :portkey.aws.ec2.-2016-09-15.register-image-request/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-hosts-request/host-ids :portkey.aws.ec2.-2016-09-15/auto-placement] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-connection-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route-table-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/route-table))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-subnet-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/subnet]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/rule-number :portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/egress] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-network-acl-entry-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-conversion-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-conversion-tasks-request/conversion-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/conversion-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-conversion-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-conversion-tasks-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-conversion-tasks-request/conversion-task-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/architecture-values #{"x86_64" :i-386 :x-86-64 "i386"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancelled-spot-instance-request/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancelled-spot-instance-request/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-request-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancelled-spot-instance-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.cancelled-spot-instance-request/spot-instance-request-id :portkey.aws.ec2.-2016-09-15.cancelled-spot-instance-request/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/source-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/source-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/copy-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.copy-image-request/source-region :portkey.aws.ec2.-2016-09-15.copy-image-request/source-image-id :portkey.aws.ec2.-2016-09-15.copy-image-request/name] :opt-un [:portkey.aws.ec2.-2016-09-15.copy-image-request/dry-run :portkey.aws.ec2.-2016-09-15.copy-image-request/description :portkey.aws.ec2.-2016-09-15.copy-image-request/client-token :portkey.aws.ec2.-2016-09-15.copy-image-request/encrypted :portkey.aws.ec2.-2016-09-15.copy-image-request/kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-conversion-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-conversion-request/conversion-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-conversion-request/reason-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-conversion-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-conversion-request/conversion-task-id] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-conversion-request/dry-run :portkey.aws.ec2.-2016-09-15.cancel-conversion-request/reason-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-stale-security-groups-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-stale-security-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/stale-security-group-set :portkey.aws.ec2.-2016-09-15.describe-stale-security-groups-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/volume-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-spot-fleet-request-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-spot-fleet-request-request/target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-spot-fleet-request-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-spot-fleet-request-request/spot-fleet-request-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-spot-fleet-request-request/target-capacity :portkey.aws.ec2.-2016-09-15/excess-capacity-termination-policy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.blob-attribute-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/blob-attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.blob-attribute-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/export-environment #{:citrix "microsoft" "citrix" :vmware :microsoft "vmware"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-flow-logs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/flow-log-ids :portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/filter :portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/next-token :portkey.aws.ec2.-2016-09-15.describe-flow-logs-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-security-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-security-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-security-group-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-security-group-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-security-group-request/dry-run :portkey.aws.ec2.-2016-09-15.delete-security-group-request/group-name :portkey.aws.ec2.-2016-09-15.delete-security-group-request/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-export-details/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-export-details/target-environment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/export-environment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-export-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-export-details/instance-id :portkey.aws.ec2.-2016-09-15.instance-export-details/target-environment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instance-reservation-value-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/target-configuration-value-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/target-reservation-value-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/validation-failure-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/output-reserved-instances-will-expire-at (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/payment-due (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/is-valid-exchange (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-rollup (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reservation-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/target-configuration-value-rollup (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reservation-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-reserved-instances-exchange-quote-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-set :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/currency-code :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/target-configuration-value-set :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/validation-failure-reason :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/output-reserved-instances-will-expire-at :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/payment-due :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/is-valid-exchange :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-rollup :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-result/target-configuration-value-rollup]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-attachment-state #{"attached" "detaching" :detached "detached" "attaching" :attaching :attached :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.confirm-product-instance-result/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.confirm-product-instance-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/confirm-product-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.confirm-product-instance-result/owner-id :portkey.aws.ec2.-2016-09-15.confirm-product-instance-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/instance-types (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-type-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/product-descriptions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-description-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-price-history-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/instance-types :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/end-time :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/product-descriptions :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/start-time :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/availability-zone :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/next-token :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/filters :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.internet-gateway-attachment/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.internet-gateway-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/internet-gateway-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.internet-gateway-attachment/vpc-id :portkey.aws.ec2.-2016-09-15.internet-gateway-attachment/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/bundle-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.bundle-instance-request/instance-id :portkey.aws.ec2.-2016-09-15/storage] :opt-un [:portkey.aws.ec2.-2016-09-15.bundle-instance-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-result/reserved-instances-offerings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-offering-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-offerings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-result/reserved-instances-offerings :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-private-ip-address-config/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-private-ip-address-config/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-private-ip-address-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-private-ip-address-config/private-ip-address :portkey.aws.ec2.-2016-09-15.scheduled-instances-private-ip-address-config/primary]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/product-code-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-monitoring/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-monitoring/instance-id :portkey.aws.ec2.-2016-09-15/monitoring]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-price-history-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/spot-price))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-peering-connection-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-peering-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection-options/static-routes-only (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-connection-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpn-connection-options/static-routes-only]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-reserved-instances-result/reserved-instances-modification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-reserved-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-reserved-instances-result/reserved-instances-modification-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl-entry/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl-entry/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl-entry/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl-entry/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-acl-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-acl-entry/rule-number :portkey.aws.ec2.-2016-09-15.network-acl-entry/protocol :portkey.aws.ec2.-2016-09-15/rule-action :portkey.aws.ec2.-2016-09-15.network-acl-entry/egress :portkey.aws.ec2.-2016-09-15.network-acl-entry/cidr-block :portkey.aws.ec2.-2016-09-15/icmp-type-code :portkey.aws.ec2.-2016-09-15/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-route-request/route-table-id :portkey.aws.ec2.-2016-09-15.create-route-request/destination-cidr-block] :opt-un [:portkey.aws.ec2.-2016-09-15.create-route-request/dry-run :portkey.aws.ec2.-2016-09-15.create-route-request/gateway-id :portkey.aws.ec2.-2016-09-15.create-route-request/instance-id :portkey.aws.ec2.-2016-09-15.create-route-request/network-interface-id :portkey.aws.ec2.-2016-09-15.create-route-request/vpc-peering-connection-id :portkey.aws.ec2.-2016-09-15.create-route-request/nat-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/provisioned (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/requested (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/request-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/provision-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/provisioned-bandwidth (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/provisioned :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/requested :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/request-time :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/provision-time :portkey.aws.ec2.-2016-09-15.provisioned-bandwidth/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vgw-telemetry-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vgw-telemetry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-state #{:deleted "deleting" :creating "error" "in-use" :deleting :inuse "creating" "deleted" :error :available "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-placement/availability-zone :portkey.aws.ec2.-2016-09-15.spot-placement/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-classic-link-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-result/vpcs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/ip-permissions-egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.security-group/owner-id :portkey.aws.ec2.-2016-09-15.security-group/group-name :portkey.aws.ec2.-2016-09-15.security-group/group-id :portkey.aws.ec2.-2016-09-15.security-group/description :portkey.aws.ec2.-2016-09-15.security-group/ip-permissions :portkey.aws.ec2.-2016-09-15.security-group/ip-permissions-egress :portkey.aws.ec2.-2016-09-15.security-group/vpc-id :portkey.aws.ec2.-2016-09-15.security-group/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/recurring-charges-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-detail-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/snapshot-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/occurrence-day-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/integer))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.id-format/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.id-format/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.id-format/deadline (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/id-format (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.id-format/resource :portkey.aws.ec2.-2016-09-15.id-format/use-long-ids :portkey.aws.ec2.-2016-09-15.id-format/deadline]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-dhcp-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/dhcp-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.volume/encrypted :portkey.aws.ec2.-2016-09-15.volume/tags :portkey.aws.ec2.-2016-09-15.volume/attachments :portkey.aws.ec2.-2016-09-15.volume/availability-zone :portkey.aws.ec2.-2016-09-15.volume/kms-key-id :portkey.aws.ec2.-2016-09-15.volume/size :portkey.aws.ec2.-2016-09-15.volume/iops :portkey.aws.ec2.-2016-09-15/volume-type :portkey.aws.ec2.-2016-09-15.volume/volume-id :portkey.aws.ec2.-2016-09-15.volume/create-time :portkey.aws.ec2.-2016-09-15.volume/state :portkey.aws.ec2.-2016-09-15.volume/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-instance-type #{:persistent :onetime "persistent" "one-time"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.start-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.start-instances-request/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.start-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/start-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.start-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.start-instances-request/additional-info :portkey.aws.ec2.-2016-09-15.start-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-block-device/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-block-device/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-block-device/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ebs-block-device/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ebs-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.ebs-block-device/snapshot-id :portkey.aws.ec2.-2016-09-15.ebs-block-device/volume-size :portkey.aws.ec2.-2016-09-15.ebs-block-device/delete-on-termination :portkey.aws.ec2.-2016-09-15/volume-type :portkey.aws.ec2.-2016-09-15.ebs-block-device/iops :portkey.aws.ec2.-2016-09-15.ebs-block-device/encrypted]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.new-dhcp-configuration/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.new-dhcp-configuration/values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/new-dhcp-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.new-dhcp-configuration/key :portkey.aws.ec2.-2016-09-15.new-dhcp-configuration/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-interface-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-network-interface-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.placement/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.placement/affinity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.placement/availability-zone :portkey.aws.ec2.-2016-09-15.placement/group-name :portkey.aws.ec2.-2016-09-15/tenancy :portkey.aws.ec2.-2016-09-15.placement/host-id :portkey.aws.ec2.-2016-09-15.placement/affinity]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/request-host-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/scope (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scope))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/availability-zone :portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/platform :portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/instance-count :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.reserved-instances-configuration/scope]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-volume-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-volume-attribute-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-volume-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-request/attribute]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-bucket-details/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-bucket-details/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-bucket-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.user-bucket-details/s-3-bucket :portkey.aws.ec2.-2016-09-15.user-bucket-details/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/occurrence-day-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/integer))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/snapshot))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-lifecycle-type #{"spot" "scheduled" :scheduled :spot})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unmonitor-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unmonitor-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/unmonitor-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.unmonitor-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.unmonitor-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/availability-zone-state #{:unavailable "impaired" :information :impaired :available "information" "unavailable" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volumes-result/volumes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volumes-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-volumes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-volumes-result/volumes :portkey.aws.ec2.-2016-09-15.describe-volumes-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-snapshot-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-snapshot-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-snapshot-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-conversion-tasks-result/conversion-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-conversion-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-conversion-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-conversion-tasks-result/conversion-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/default-for-az (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/available-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/subnet-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.subnet/map-public-ip-on-launch (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.subnet/subnet-id :portkey.aws.ec2.-2016-09-15.subnet/default-for-az :portkey.aws.ec2.-2016-09-15.subnet/tags :portkey.aws.ec2.-2016-09-15.subnet/available-ip-address-count :portkey.aws.ec2.-2016-09-15.subnet/availability-zone :portkey.aws.ec2.-2016-09-15.subnet/cidr-block :portkey.aws.ec2.-2016-09-15.subnet/vpc-id :portkey.aws.ec2.-2016-09-15.subnet/state :portkey.aws.ec2.-2016-09-15.subnet/map-public-ip-on-launch]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-listings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/spot-fleet-request-id] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/next-token :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-request/disk-container (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-disk-container))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-request/role-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-snapshot-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.import-snapshot-request/dry-run :portkey.aws.ec2.-2016-09-15.import-snapshot-request/description :portkey.aws.ec2.-2016-09-15.import-snapshot-request/disk-container :portkey.aws.ec2.-2016-09-15/client-data :portkey.aws.ec2.-2016-09-15.import-snapshot-request/client-token :portkey.aws.ec2.-2016-09-15.import-snapshot-request/role-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/dhcp-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/dhcp-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-reserved-instances-listing-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-reserved-instances-listing-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/datafeed-subscription-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/fault (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-state-fault))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-datafeed-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/owner-id :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/bucket :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/prefix :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/state :portkey.aws.ec2.-2016-09-15.spot-datafeed-subscription/fault]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-result/import-image-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-image-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-import-image-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-result/import-image-tasks :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/include-all-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-instance-status-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-instance-status-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/instance-ids :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/filters :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/next-token :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/max-results :portkey.aws.ec2.-2016-09-15.describe-instance-status-request/include-all-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-count/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/listing-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-count/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-count (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-count/state :portkey.aws.ec2.-2016-09-15.instance-count/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/host-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/bytes-converted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-volume-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-instance-volume-detail-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/bytes-converted :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/availability-zone :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/image :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/volume :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/status] :opt-un [:portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/status-message :portkey.aws.ec2.-2016-09-15.import-instance-volume-detail-item/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/import-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-task-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-import-image-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/import-task-ids :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/next-token :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/max-results :portkey.aws.ec2.-2016-09-15.describe-import-image-tasks-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/source-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/source-snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/destination-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/presigned-url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/copy-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.copy-snapshot-request/source-region :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/source-snapshot-id] :opt-un [:portkey.aws.ec2.-2016-09-15.copy-snapshot-request/dry-run :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/description :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/destination-region :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/presigned-url :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/encrypted :portkey.aws.ec2.-2016-09-15.copy-snapshot-request/kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection-options-specification/static-routes-only (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-connection-options-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpn-connection-options-specification/static-routes-only]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/tenancy #{"host" :default :host "dedicated" :dedicated "default"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-offering-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-internet-gateway-request/internet-gateway-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-security-group-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-volume-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-volume-request/device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.attach-volume-request/volume-id :portkey.aws.ec2.-2016-09-15.attach-volume-request/instance-id :portkey.aws.ec2.-2016-09-15.attach-volume-request/device] :opt-un [:portkey.aws.ec2.-2016-09-15.attach-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/affinity #{"host" :default :host "default"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-network-interface-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/attachment-id :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/device-index :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/status :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/attach-time :portkey.aws.ec2.-2016-09-15.instance-network-interface-attachment/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-result/instance-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-status-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-status-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-instance-status-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-instance-status-result/instance-statuses :portkey.aws.ec2.-2016-09-15.describe-instance-status-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-identity-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-identity-id-format-request/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-identity-id-format-request/principal-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-identity-id-format-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-identity-id-format-request/resource :portkey.aws.ec2.-2016-09-15.modify-identity-id-format-request/use-long-ids :portkey.aws.ec2.-2016-09-15.modify-identity-id-format-request/principal-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/disk-image-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/user-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/user-bucket-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-detail/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.snapshot-detail/disk-image-size :portkey.aws.ec2.-2016-09-15.snapshot-detail/status-message :portkey.aws.ec2.-2016-09-15.snapshot-detail/format :portkey.aws.ec2.-2016-09-15.snapshot-detail/status :portkey.aws.ec2.-2016-09-15.snapshot-detail/progress :portkey.aws.ec2.-2016-09-15.snapshot-detail/url :portkey.aws.ec2.-2016-09-15.snapshot-detail/description :portkey.aws.ec2.-2016-09-15.snapshot-detail/device-name :portkey.aws.ec2.-2016-09-15.snapshot-detail/user-bucket :portkey.aws.ec2.-2016-09-15.snapshot-detail/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-export-task-request/export-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-export-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-export-task-request/export-task-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-state-fault/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-state-fault/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-instance-state-fault/code :portkey.aws.ec2.-2016-09-15.spot-instance-state-fault/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-security-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-security-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-security-group-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-security-group-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-security-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-security-group-request/group-name :portkey.aws.ec2.-2016-09-15.create-security-group-request/description] :opt-un [:portkey.aws.ec2.-2016-09-15.create-security-group-request/dry-run :portkey.aws.ec2.-2016-09-15.create-security-group-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/dhcp-configuration-value-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/attribute-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-association/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-association/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-association/ip-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-network-interface-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-network-interface-association/public-ip :portkey.aws.ec2.-2016-09-15.instance-network-interface-association/public-dns-name :portkey.aws.ec2.-2016-09-15.instance-network-interface-association/ip-owner-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/bundle-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/bundle-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/group-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-placement/availability-zone :portkey.aws.ec2.-2016-09-15.scheduled-instances-placement/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/key-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-network-interface-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/network-interface]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-ebs))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/device-name :portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/no-device :portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/virtual-name :portkey.aws.ec2.-2016-09-15.scheduled-instances-block-device-mapping/ebs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/revoke-security-group-ingress-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/dry-run :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/to-port :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/source-security-group-name :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/ip-protocol :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/group-name :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/group-id :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/from-port :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/ip-permissions :portkey.aws.ec2.-2016-09-15.revoke-security-group-ingress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-network-interface-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/network-interface-id :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/description :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/source-dest-check :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/groups :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-result/attachment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-network-interface-result/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-network-interface-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.attach-network-interface-result/attachment-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-volume-description/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-volume-description/id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disk-image-volume-description (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.disk-image-volume-description/id] :opt-un [:portkey.aws.ec2.-2016-09-15.disk-image-volume-description/size]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/account-attribute-name #{:supportedplatforms :defaultvpc "supported-platforms" "default-vpc"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-properties/sockets (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-properties/cores (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-properties/total-v-cpus (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-properties/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-properties (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.host-properties/sockets :portkey.aws.ec2.-2016-09-15.host-properties/cores :portkey.aws.ec2.-2016-09-15.host-properties/total-v-cpus :portkey.aws.ec2.-2016-09-15.host-properties/instance-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpn-connection-route-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpn-connection-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpn-connection-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-vpn-connection-route-request/vpn-connection-id :portkey.aws.ec2.-2016-09-15.delete-vpn-connection-route-request/destination-cidr-block] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-key-pair-request/key-name] :opt-un [:portkey.aws.ec2.-2016-09-15.create-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-gateway-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-gateway-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-vpn-gateway-request/type] :opt-un [:portkey.aws.ec2.-2016-09-15.create-vpn-gateway-request/dry-run :portkey.aws.ec2.-2016-09-15.create-vpn-gateway-request/availability-zone]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interfaces-result/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-network-interfaces-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-network-interfaces-result/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-vgw-route-propagation-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-vgw-route-propagation-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/enable-vgw-route-propagation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.enable-vgw-route-propagation-request/route-table-id :portkey.aws.ec2.-2016-09-15.enable-vgw-route-propagation-request/gateway-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/term-end-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/network-platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instance-recurrence))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/next-slot-start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/total-scheduled-instance-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/previous-slot-end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/scheduled-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance/term-start-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instance/platform :portkey.aws.ec2.-2016-09-15.scheduled-instance/term-end-date :portkey.aws.ec2.-2016-09-15.scheduled-instance/network-platform :portkey.aws.ec2.-2016-09-15.scheduled-instance/instance-count :portkey.aws.ec2.-2016-09-15.scheduled-instance/recurrence :portkey.aws.ec2.-2016-09-15.scheduled-instance/create-date :portkey.aws.ec2.-2016-09-15.scheduled-instance/instance-type :portkey.aws.ec2.-2016-09-15.scheduled-instance/next-slot-start-time :portkey.aws.ec2.-2016-09-15.scheduled-instance/total-scheduled-instance-hours :portkey.aws.ec2.-2016-09-15.scheduled-instance/availability-zone :portkey.aws.ec2.-2016-09-15.scheduled-instance/hourly-price :portkey.aws.ec2.-2016-09-15.scheduled-instance/slot-duration-in-hours :portkey.aws.ec2.-2016-09-15.scheduled-instance/previous-slot-end-time :portkey.aws.ec2.-2016-09-15.scheduled-instance/scheduled-instance-id :portkey.aws.ec2.-2016-09-15.scheduled-instance/term-start-date]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/active-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/active-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-type #{:r-3large :c-4xlarge "m1.large" :c-3xlarge "cc1.4xlarge" :cg-14xlarge :i-28xlarge :t-2small :c-1xlarge "c1.medium" :c-48xlarge "r3.8xlarge" "d2.xlarge" "m3.2xlarge" "i2.8xlarge" "g2.2xlarge" "c3.8xlarge" "t2.large" :m-42xlarge "p2.16xlarge" "m1.xlarge" "d2.8xlarge" "m4.4xlarge" :t-2large :c-34xlarge :x-116xlarge "cr1.8xlarge" "t1.micro" :d-28xlarge :r-34xlarge :m-32xlarge "c3.2xlarge" "g2.8xlarge" "c4.8xlarge" :g-22xlarge :c-3large "m2.xlarge" "m1.small" "i2.4xlarge" "c3.4xlarge" :t-2micro :c-38xlarge "t2.micro" "d2.2xlarge" "x1.32xlarge" :r-38xlarge "m4.2xlarge" :r-32xlarge "m4.10xlarge" "m1.medium" :cc-14xlarge "c4.4xlarge" "hi1.4xlarge" :d-2xlarge :i-2xlarge "r3.xlarge" :c-44xlarge :m-22xlarge :t-2medium :r-3xlarge "c4.2xlarge" :m-416xlarge :i-22xlarge "t2.small" :m-1small :m-3large "m3.xlarge" "r3.2xlarge" :c-32xlarge "cg1.4xlarge" :c-42xlarge "r3.4xlarge" :p-2xlarge :hs-18xlarge :t-2nano :m-44xlarge :m-24xlarge "c4.xlarge" "m2.2xlarge" "p2.8xlarge" "x1.16xlarge" "m4.large" :m-410xlarge "m4.16xlarge" "r3.large" "d2.4xlarge" "c4.large" :d-24xlarge :m-3medium :g-28xlarge :m-1xlarge "m4.xlarge" "i2.2xlarge" :c-4large :cc-28xlarge :i-24xlarge :m-4xlarge :m-3xlarge "t2.nano" "m2.4xlarge" "c3.xlarge" :m-4large "p2.xlarge" :m-1medium :m-1large "t2.medium" "c3.large" :c-1medium "m3.medium" :cr-18xlarge "i2.xlarge" "cc2.8xlarge" "hs1.8xlarge" :x-132xlarge "m3.large" :p-216xlarge "c1.xlarge" :t-1micro :d-22xlarge :m-2xlarge :p-28xlarge :hi-14xlarge})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route-state #{"blackhole" :active "active" :blackhole})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-regions-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-regions-request/region-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/region-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-regions-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-regions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-regions-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-regions-request/region-names :portkey.aws.ec2.-2016-09-15.describe-regions-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-type-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-type))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/subnet-state #{:pending :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/stale-ip-permission-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/stale-ip-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-attribute-name #{:description "kernel" "productCodes" "blockDeviceMapping" :ramdisk :product-codes "launchPermission" :block-device-mapping "ramdisk" :sriov-net-support :kernel :launch-permission "description" "sriovNetSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-connections-request/vpn-connection-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-connection-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-connections-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpn-connections-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpn-connections-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-vpn-connections-request/vpn-connection-ids :portkey.aws.ec2.-2016-09-15.describe-vpn-connections-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/replace-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.replace-route-request/route-table-id :portkey.aws.ec2.-2016-09-15.replace-route-request/destination-cidr-block] :opt-un [:portkey.aws.ec2.-2016-09-15.replace-route-request/dry-run :portkey.aws.ec2.-2016-09-15.replace-route-request/gateway-id :portkey.aws.ec2.-2016-09-15.replace-route-request/instance-id :portkey.aws.ec2.-2016-09-15.replace-route-request/network-interface-id :portkey.aws.ec2.-2016-09-15.replace-route-request/vpc-peering-connection-id :portkey.aws.ec2.-2016-09-15.replace-route-request/nat-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification-result/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification-result/target-configuration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-configuration))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instances-modification-result/reserved-instances-id :portkey.aws.ec2.-2016-09-15.reserved-instances-modification-result/target-configuration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-result/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-result/auto-enable-io (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-result/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-volume-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-volume-attribute-result/volume-id :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-result/auto-enable-io :portkey.aws.ec2.-2016-09-15.describe-volume-attribute-result/product-codes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-task-details/volumes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-instance-volume-detail-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-task-details/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-task-details/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-task-details/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-instance-task-details (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.import-instance-task-details/volumes] :opt-un [:portkey.aws.ec2.-2016-09-15.import-instance-task-details/instance-id :portkey.aws.ec2.-2016-09-15.import-instance-task-details/platform :portkey.aws.ec2.-2016-09-15.import-instance-task-details/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-result/reserved-instances-modifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-result/reserved-instances-modifications :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-bundle-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/bundle-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-permission/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-permission/group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-volume-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-volume-permission/user-id :portkey.aws.ec2.-2016-09-15.create-volume-permission/group]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/purchase (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/purchase-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/total-upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/total-hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-host-reservation-purchase-preview-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/purchase :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/total-upfront-price :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/total-hourly-price :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-result/currency-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-spot-datafeed-subscription-request/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-spot-datafeed-subscription-request/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-spot-datafeed-subscription-request/bucket] :opt-un [:portkey.aws.ec2.-2016-09-15.create-spot-datafeed-subscription-request/dry-run :portkey.aws.ec2.-2016-09-15.create-spot-datafeed-subscription-request/prefix]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-availability-zones-result/availability-zones (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-availability-zones-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-availability-zones-result/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-details/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/status-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-details/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/status-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-details/impaired-since (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-status-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-status-details/name :portkey.aws.ec2.-2016-09-15.instance-status-details/status :portkey.aws.ec2.-2016-09-15.instance-status-details/impaired-since]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-request/snapshot-id :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/authorize-security-group-egress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/group-id] :opt-un [:portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/dry-run :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/to-port :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/source-security-group-name :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/ip-protocol :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/from-port :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/ip-permissions :portkey.aws.ec2.-2016-09-15.authorize-security-group-egress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-key-pair-request/public-key-material (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.import-key-pair-request/key-name :portkey.aws.ec2.-2016-09-15.import-key-pair-request/public-key-material] :opt-un [:portkey.aws.ec2.-2016-09-15.import-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.iam-instance-profile-specification/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.iam-instance-profile-specification/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/iam-instance-profile-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.iam-instance-profile-specification/arn :portkey.aws.ec2.-2016-09-15.iam-instance-profile-specification/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-instance-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/spot-instance-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/placement-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-detail/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-detail (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.volume-detail/size] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/region-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/region))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-tags-request/resources (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/resource-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-tags-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-tags-request/resources] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-tags-request/dry-run :portkey.aws.ec2.-2016-09-15.delete-tags-request/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-reserved-instances-listing-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-reserved-instances-listing-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-reserved-instances-listing-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-dhcp-options-request/dhcp-options-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/dhcp-options-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-dhcp-options-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-dhcp-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-dhcp-options-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-dhcp-options-request/dhcp-options-ids :portkey.aws.ec2.-2016-09-15.describe-dhcp-options-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.restore-address-to-classic-result/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/restore-address-to-classic-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/status :portkey.aws.ec2.-2016-09-15.restore-address-to-classic-result/public-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/response-host-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-description/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-format))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-description/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-description/import-manifest-url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-description/checksum (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disk-image-description (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.disk-image-description/format :portkey.aws.ec2.-2016-09-15.disk-image-description/size :portkey.aws.ec2.-2016-09-15.disk-image-description/import-manifest-url] :opt-un [:portkey.aws.ec2.-2016-09-15.disk-image-description/checksum]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-tenancy #{"host" :host "dedicated" :dedicated})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.available-capacity/available-instance-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/available-instance-capacity-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.available-capacity/available-v-cpus (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/available-capacity (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.available-capacity/available-instance-capacity :portkey.aws.ec2.-2016-09-15.available-capacity/available-v-cpus]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/bundle-task-state #{:waitingforshutdown :bundling "failed" "waiting-for-shutdown" :pending "complete" "storing" "cancelling" :complete "bundling" :cancelling "pending" :storing :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.icmp-type-code/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.icmp-type-code/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/icmp-type-code (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.icmp-type-code/type :portkey.aws.ec2.-2016-09-15.icmp-type-code/code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-private-ip-address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-private-ip-address/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-private-ip-address/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-private-ip-address/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-private-ip-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-private-ip-address/private-ip-address :portkey.aws.ec2.-2016-09-15.instance-private-ip-address/private-dns-name :portkey.aws.ec2.-2016-09-15.instance-private-ip-address/primary :portkey.aws.ec2.-2016-09-15.instance-private-ip-address/association]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-acls-result/network-acls (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-acl-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-network-acls-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-network-acls-result/network-acls]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-listing-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instances-listing))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-classic-link/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-classic-link/classic-link-enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-classic-link/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-classic-link (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc-classic-link/vpc-id :portkey.aws.ec2.-2016-09-15.vpc-classic-link/classic-link-enabled :portkey.aws.ec2.-2016-09-15.vpc-classic-link/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-import-task-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-import-task-result/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-import-task-result/previous-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-import-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-import-task-result/import-task-id :portkey.aws.ec2.-2016-09-15.cancel-import-task-result/state :portkey.aws.ec2.-2016-09-15.cancel-import-task-result/previous-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/disk-image-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/user-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/user-bucket-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-task-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.snapshot-task-detail/disk-image-size :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/status-message :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/format :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/status :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/progress :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/url :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/description :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/user-bucket :portkey.aws.ec2.-2016-09-15.snapshot-task-detail/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.launch-specification/kernel-id :portkey.aws.ec2.-2016-09-15.launch-specification/image-id :portkey.aws.ec2.-2016-09-15.launch-specification/placement :portkey.aws.ec2.-2016-09-15.launch-specification/addressing-type :portkey.aws.ec2.-2016-09-15.launch-specification/subnet-id :portkey.aws.ec2.-2016-09-15.launch-specification/security-groups :portkey.aws.ec2.-2016-09-15.launch-specification/ebs-optimized :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.launch-specification/key-name :portkey.aws.ec2.-2016-09-15.launch-specification/monitoring :portkey.aws.ec2.-2016-09-15.launch-specification/block-device-mappings :portkey.aws.ec2.-2016-09-15.launch-specification/ramdisk-id :portkey.aws.ec2.-2016-09-15.launch-specification/user-data :portkey.aws.ec2.-2016-09-15.launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-09-15.launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/id-format-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/id-format))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.register-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/register-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.register-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservations-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservations-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservations-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-host-reservations-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/host-reservation-id-set :portkey.aws.ec2.-2016-09-15.describe-host-reservations-request/filter :portkey.aws.ec2.-2016-09-15.describe-host-reservations-request/max-results :portkey.aws.ec2.-2016-09-15.describe-host-reservations-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/snapshot-details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-detail-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-result/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.import-image-result/platform :portkey.aws.ec2.-2016-09-15.import-image-result/import-task-id :portkey.aws.ec2.-2016-09-15.import-image-result/image-id :portkey.aws.ec2.-2016-09-15.import-image-result/status-message :portkey.aws.ec2.-2016-09-15.import-image-result/status :portkey.aws.ec2.-2016-09-15.import-image-result/progress :portkey.aws.ec2.-2016-09-15.import-image-result/description :portkey.aws.ec2.-2016-09-15.import-image-result/snapshot-details :portkey.aws.ec2.-2016-09-15.import-image-result/hypervisor :portkey.aws.ec2.-2016-09-15.import-image-result/architecture :portkey.aws.ec2.-2016-09-15.import-image-result/license-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-attribute-name #{:auto-enable-io "productCodes" "autoEnableIO" :product-codes})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/prefix-list-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/prefix-list))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/private-ip-address-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/allow-reassignment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/assign-private-ip-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/private-ip-addresses :portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/secondary-private-ip-address-count :portkey.aws.ec2.-2016-09-15.assign-private-ip-addresses-request/allow-reassignment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-network-interface-request/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-network-interface-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/detach-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.detach-network-interface-request/attachment-id] :opt-un [:portkey.aws.ec2.-2016-09-15.detach-network-interface-request/dry-run :portkey.aws.ec2.-2016-09-15.detach-network-interface-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instance-id-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-request/allow-reassociation (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/associate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.associate-address-request/dry-run :portkey.aws.ec2.-2016-09-15.associate-address-request/instance-id :portkey.aws.ec2.-2016-09-15.associate-address-request/public-ip :portkey.aws.ec2.-2016-09-15.associate-address-request/allocation-id :portkey.aws.ec2.-2016-09-15.associate-address-request/network-interface-id :portkey.aws.ec2.-2016-09-15.associate-address-request/private-ip-address :portkey.aws.ec2.-2016-09-15.associate-address-request/allow-reassociation]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attribute-boolean-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attribute-boolean-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.attribute-boolean-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.price-schedule-specification/term (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.price-schedule-specification/price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.price-schedule-specification/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/price-schedule-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.price-schedule-specification/term :portkey.aws.ec2.-2016-09-15.price-schedule-specification/price :portkey.aws.ec2.-2016-09-15.price-schedule-specification/currency-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-to-s-3-task-specification/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-to-s-3-task-specification/s-3-prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/export-to-s-3-task-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/disk-image-format :portkey.aws.ec2.-2016-09-15/container-format :portkey.aws.ec2.-2016-09-15.export-to-s-3-task-specification/s-3-bucket :portkey.aws.ec2.-2016-09-15.export-to-s-3-task-specification/s-3-prefix]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.monitor-instances-result/instance-monitorings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-monitoring-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/monitor-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.monitor-instances-result/instance-monitorings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-internet-gateway-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpc-endpoint-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/vpc-endpoint :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/availability-zone-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/actual-block-hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/launched-availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/launch-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/fault (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-state-fault))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-instance-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-instance-request/availability-zone-group :portkey.aws.ec2.-2016-09-15.spot-instance-request/spot-instance-request-id :portkey.aws.ec2.-2016-09-15.spot-instance-request/instance-id :portkey.aws.ec2.-2016-09-15.spot-instance-request/type :portkey.aws.ec2.-2016-09-15.spot-instance-request/actual-block-hourly-price :portkey.aws.ec2.-2016-09-15.spot-instance-request/block-duration-minutes :portkey.aws.ec2.-2016-09-15.spot-instance-request/valid-from :portkey.aws.ec2.-2016-09-15/launch-specification :portkey.aws.ec2.-2016-09-15.spot-instance-request/tags :portkey.aws.ec2.-2016-09-15.spot-instance-request/status :portkey.aws.ec2.-2016-09-15.spot-instance-request/spot-price :portkey.aws.ec2.-2016-09-15.spot-instance-request/launched-availability-zone :portkey.aws.ec2.-2016-09-15.spot-instance-request/launch-group :portkey.aws.ec2.-2016-09-15.spot-instance-request/product-description :portkey.aws.ec2.-2016-09-15.spot-instance-request/create-time :portkey.aws.ec2.-2016-09-15.spot-instance-request/fault :portkey.aws.ec2.-2016-09-15.spot-instance-request/state :portkey.aws.ec2.-2016-09-15.spot-instance-request/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/rule-action #{"allow" :allow "deny" :deny})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpc-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-instance-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-instance-requests-request/spot-instance-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-request-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-requests-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-instance-requests-request/spot-instance-request-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-instance-requests-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-output-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-output-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-console-output-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.get-console-output-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-09-15.get-console-output-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-key-pair-result/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-key-pair-result/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-key-pair-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.import-key-pair-result/key-name :portkey.aws.ec2.-2016-09-15.import-key-pair-result/key-fingerprint]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-network-acl-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/network-acl]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-route-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-route-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/nat-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-nat-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/nat-gateway-ids :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/filter :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/max-results :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-static-route/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-static-route/source (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-static-route-source))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-static-route/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-static-route (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpn-static-route/destination-cidr-block :portkey.aws.ec2.-2016-09-15.vpn-static-route/source :portkey.aws.ec2.-2016-09-15.vpn-static-route/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-route-table-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/route-table]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/fleet-type #{:request "maintain" :maintain "request"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-endpoint/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-endpoint/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-endpoint/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-endpoint/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-endpoint/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-endpoint/creation-timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc-endpoint/vpc-endpoint-id :portkey.aws.ec2.-2016-09-15.vpc-endpoint/vpc-id :portkey.aws.ec2.-2016-09-15.vpc-endpoint/service-name :portkey.aws.ec2.-2016-09-15/state :portkey.aws.ec2.-2016-09-15.vpc-endpoint/policy-document :portkey.aws.ec2.-2016-09-15.vpc-endpoint/route-table-ids :portkey.aws.ec2.-2016-09-15.vpc-endpoint/creation-timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-status-result/volume-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-status-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-status-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-volume-status-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-volume-status-result/volume-statuses :portkey.aws.ec2.-2016-09-15.describe-volume-status-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-request/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-vpc-request/cidr-block] :opt-un [:portkey.aws.ec2.-2016-09-15.create-vpc-request/dry-run :portkey.aws.ec2.-2016-09-15.create-vpc-request/instance-tenancy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/availability-zone-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-spot-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/launch-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/request-spot-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.request-spot-instances-request/spot-price] :opt-un [:portkey.aws.ec2.-2016-09-15.request-spot-instances-request/availability-zone-group :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/type :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/instance-count :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/block-duration-minutes :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/valid-from :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/launch-specification :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/launch-group :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/client-token :portkey.aws.ec2.-2016-09-15.request-spot-instances-request/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/key-pair-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/key-pair-info))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchased-scheduled-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/scheduled-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-route-tables-result/route-tables (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/route-table-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-route-tables-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-route-tables-result/route-tables]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/group-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/group-identifier))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-network-acl-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-network-acl-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.create-network-acl-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error-item/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-error-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error-item/spot-fleet-request-id :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error-item/error] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-export-tasks-result/export-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/export-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-export-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-export-tasks-result/export-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/payment-option #{"AllUpfront" "PartialUpfront" "NoUpfront" :no-upfront :all-upfront :partial-upfront})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-status-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-status-details))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.key-pair-info/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.key-pair-info/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/key-pair-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.key-pair-info/key-name :portkey.aws.ec2.-2016-09-15.key-pair-info/key-fingerprint]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-request/bundle-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/bundle-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-bundle-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-request/bundle-ids :portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/price-schedule-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/price-schedule-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/mac-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-private-ip-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-network-interface/attachment :portkey.aws.ec2.-2016-09-15.instance-network-interface/subnet-id :portkey.aws.ec2.-2016-09-15.instance-network-interface/owner-id :portkey.aws.ec2.-2016-09-15.instance-network-interface/mac-address :portkey.aws.ec2.-2016-09-15.instance-network-interface/network-interface-id :portkey.aws.ec2.-2016-09-15.instance-network-interface/source-dest-check :portkey.aws.ec2.-2016-09-15.instance-network-interface/status :portkey.aws.ec2.-2016-09-15.instance-network-interface/private-dns-name :portkey.aws.ec2.-2016-09-15.instance-network-interface/description :portkey.aws.ec2.-2016-09-15.instance-network-interface/vpc-id :portkey.aws.ec2.-2016-09-15.instance-network-interface/groups :portkey.aws.ec2.-2016-09-15.instance-network-interface/private-ip-addresses :portkey.aws.ec2.-2016-09-15.instance-network-interface/association :portkey.aws.ec2.-2016-09-15.instance-network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-instances-request/instance-ids :portkey.aws.ec2.-2016-09-15.describe-instances-request/filters :portkey.aws.ec2.-2016-09-15.describe-instances-request/next-token :portkey.aws.ec2.-2016-09-15.describe-instances-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-nat-gateway-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-nat-gateway-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-nat-gateway-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-nat-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-nat-gateway-request/subnet-id :portkey.aws.ec2.-2016-09-15.create-nat-gateway-request/allocation-id] :opt-un [:portkey.aws.ec2.-2016-09-15.create-nat-gateway-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-batch-error-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-error (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error/code :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-error/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-static-route-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpn-static-route))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation/reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation/requester-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reservation (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reservation/reservation-id :portkey.aws.ec2.-2016-09-15.reservation/owner-id :portkey.aws.ec2.-2016-09-15.reservation/requester-id :portkey.aws.ec2.-2016-09-15.reservation/groups :portkey.aws.ec2.-2016-09-15.reservation/instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unsuccessful-item-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unsuccessful-item-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/unsuccessful-item-error (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.unsuccessful-item-error/code :portkey.aws.ec2.-2016-09-15.unsuccessful-item-error/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-association-result/new-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/replace-network-acl-association-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.replace-network-acl-association-result/new-association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/volume-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-volume-status-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-volume-status-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/volume-ids :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/filters :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/next-token :portkey.aws.ec2.-2016-09-15.describe-volume-status-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpc-peering-connection))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/unsuccessful-item-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/unsuccessful-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/security-group-references (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/security-group-reference))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-address-request/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/allocate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.allocate-address-request/dry-run :portkey.aws.ec2.-2016-09-15.allocate-address-request/domain]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.import-snapshot-result/import-task-id :portkey.aws.ec2.-2016-09-15/snapshot-task-detail :portkey.aws.ec2.-2016-09-15.import-snapshot-result/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-ip-permission/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-ip-permission/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-ip-permission/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/prefix-list-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-ip-permission/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-ip-permission/user-id-group-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/user-id-group-pair-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/stale-ip-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.stale-ip-permission/from-port :portkey.aws.ec2.-2016-09-15.stale-ip-permission/ip-protocol :portkey.aws.ec2.-2016-09-15/ip-ranges :portkey.aws.ec2.-2016-09-15.stale-ip-permission/prefix-list-ids :portkey.aws.ec2.-2016-09-15.stale-ip-permission/to-port :portkey.aws.ec2.-2016-09-15.stale-ip-permission/user-id-group-pairs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/traffic-type #{:all "REJECT" :reject "ALL" "ACCEPT" :accept})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/availability-zone))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.availability-zone/zone-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.availability-zone/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/availability-zone-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.availability-zone/region-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.availability-zone/messages (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/availability-zone-message-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.availability-zone/zone-name :portkey.aws.ec2.-2016-09-15.availability-zone/state :portkey.aws.ec2.-2016-09-15.availability-zone/region-name :portkey.aws.ec2.-2016-09-15.availability-zone/messages]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/import-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-task-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-import-snapshot-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/import-task-ids :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/next-token :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/max-results :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route-origin #{"EnableVgwRoutePropagation" "CreateRouteTable" "CreateRoute" :create-route :create-route-table :enable-vgw-route-propagation})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/allocation-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-volume-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/create-volume-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/status #{:move-in-progress :in-classic "InClassic" "MoveInProgress" :in-vpc "InVpc"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-type #{"natGateway" :interface "interface" :nat-gateway})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancelled-spot-instance-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/cancelled-spot-instance-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-disk-container-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/image-disk-container))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/event-type #{:fleet-request-change "fleetRequestChange" "instanceChange" :instance-change "error" :error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.moving-address-status/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/moving-address-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.moving-address-status/public-ip :portkey.aws.ec2.-2016-09-15/move-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-request/vpc-peering-connection-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-peering-connections-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-request/vpc-peering-connection-ids :portkey.aws.ec2.-2016-09-15.describe-vpc-peering-connections-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/start (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/fixed-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/usage-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/recurring-charges (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/recurring-charges-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances/scope (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scope))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instances/currency-code :portkey.aws.ec2.-2016-09-15.reserved-instances/instance-count :portkey.aws.ec2.-2016-09-15.reserved-instances/start :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.reserved-instances/fixed-price :portkey.aws.ec2.-2016-09-15.reserved-instances/end :portkey.aws.ec2.-2016-09-15.reserved-instances/tags :portkey.aws.ec2.-2016-09-15.reserved-instances/availability-zone :portkey.aws.ec2.-2016-09-15.reserved-instances/instance-tenancy :portkey.aws.ec2.-2016-09-15.reserved-instances/duration :portkey.aws.ec2.-2016-09-15.reserved-instances/usage-price :portkey.aws.ec2.-2016-09-15.reserved-instances/product-description :portkey.aws.ec2.-2016-09-15.reserved-instances/reserved-instances-id :portkey.aws.ec2.-2016-09-15.reserved-instances/state :portkey.aws.ec2.-2016-09-15.reserved-instances/offering-class :portkey.aws.ec2.-2016-09-15.reserved-instances/recurring-charges :portkey.aws.ec2.-2016-09-15.reserved-instances/offering-type :portkey.aws.ec2.-2016-09-15.reserved-instances/scope]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-attribute))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-network-interface-attribute-request/attribute]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/restorable-by-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/next-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.restore-address-to-classic-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.restore-address-to-classic-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/restore-address-to-classic-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.restore-address-to-classic-request/public-ip] :opt-un [:portkey.aws.ec2.-2016-09-15.restore-address-to-classic-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-dns-support-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-dns-support-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.slot-start-time-range-request/earliest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.slot-start-time-range-request/latest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/slot-start-time-range-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.slot-start-time-range-request/earliest-time :portkey.aws.ec2.-2016-09-15.slot-start-time-range-request/latest-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-route-table-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-route-table-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/excess-capacity-termination-policy #{:default "noTermination" "default" :no-termination})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.prefix-list/prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.prefix-list/prefix-list-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.prefix-list/cidrs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/prefix-list (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.prefix-list/prefix-list-id :portkey.aws.ec2.-2016-09-15.prefix-list/prefix-list-name :portkey.aws.ec2.-2016-09-15.prefix-list/cidrs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-instance-volume-detail-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/import-instance-volume-detail-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/status-type #{:initializing :passed :insufficientdata "failed" "initializing" "insufficient-data" :failed "passed"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-fleet-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-fleet-monitoring/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ebs-instance-block-device-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/device-name :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/ebs :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/virtual-name :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping-specification/no-device]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/listing-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/price-schedules (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/price-schedule-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/update-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/instance-counts (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-count-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-listing (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instances-listing/status-message :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/create-date :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/tags :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/status :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/price-schedules :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/update-date :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/reserved-instances-id :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/reserved-instances-listing-id :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/instance-counts :portkey.aws.ec2.-2016-09-15.reserved-instances-listing/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-image-attribute-request/image-id :portkey.aws.ec2.-2016-09-15.describe-image-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-image-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-summary/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/summary-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-summary/details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-status-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-status-summary (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-status-summary/status :portkey.aws.ec2.-2016-09-15.instance-status-summary/details]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway-address/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway-address/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway-address/private-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway-address/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/nat-gateway-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.nat-gateway-address/public-ip :portkey.aws.ec2.-2016-09-15.nat-gateway-address/allocation-id :portkey.aws.ec2.-2016-09-15.nat-gateway-address/private-ip :portkey.aws.ec2.-2016-09-15.nat-gateway-address/network-interface-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-status-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-status))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/placement-group-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/placement-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.release-hosts-result/successful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.release-hosts-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/unsuccessful-item-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/release-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.release-hosts-result/successful :portkey.aws.ec2.-2016-09-15.release-hosts-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-dns-support-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.disable-vpc-classic-link-dns-support-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/bgp-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-customer-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/type :portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/public-ip :portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/bgp-asn] :opt-un [:portkey.aws.ec2.-2016-09-15.create-customer-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instances-offering))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-request/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-request/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.import-volume-request/availability-zone :portkey.aws.ec2.-2016-09-15.import-volume-request/image :portkey.aws.ec2.-2016-09-15.import-volume-request/volume] :opt-un [:portkey.aws.ec2.-2016-09-15.import-volume-request/dry-run :portkey.aws.ec2.-2016-09-15.import-volume-request/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/group-ids (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-tags-result/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-description-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-tags-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-tags-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-tags-result/tags :portkey.aws.ec2.-2016-09-15.describe-tags-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-placement-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-placement-request/tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/host-tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-placement-request/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-instance-placement-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-instance-placement-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-instance-placement-request/tenancy :portkey.aws.ec2.-2016-09-15/affinity :portkey.aws.ec2.-2016-09-15.modify-instance-placement-request/host-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-result/moving-address-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/moving-address-status-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-moving-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-moving-addresses-result/moving-address-statuses :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instances))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/image))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-images-result/images (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/image-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-images-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-images-result/images]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/peer-vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/peer-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/dry-run :portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/vpc-id :portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/peer-vpc-id :portkey.aws.ec2.-2016-09-15.create-vpc-peering-connection-request/peer-owner-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-result/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-flow-logs-result/flow-log-ids :portkey.aws.ec2.-2016-09-15.create-flow-logs-result/client-token :portkey.aws.ec2.-2016-09-15.create-flow-logs-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-id-group-pair-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/user-id-group-pair))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.s-3-storage/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.s-3-storage/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.s-3-storage/aws-access-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.s-3-storage/upload-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.s-3-storage/upload-policy-signature (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/s-3-storage (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.s-3-storage/bucket :portkey.aws.ec2.-2016-09-15.s-3-storage/prefix :portkey.aws.ec2.-2016-09-15.s-3-storage/aws-access-key-id :portkey.aws.ec2.-2016-09-15.s-3-storage/upload-policy :portkey.aws.ec2.-2016-09-15.s-3-storage/upload-policy-signature]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.recurring-charge/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/recurring-charge-frequency))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.recurring-charge/amount (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.recurring-charge/frequency :portkey.aws.ec2.-2016-09-15.recurring-charge/amount]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-fleet-request-config-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/spot-fleet-request-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/launch-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/launch-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/price-schedule-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/price-schedule))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-result/spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-instance-requests-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-result/spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disable-vgw-route-propagation-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disable-vgw-route-propagation-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disable-vgw-route-propagation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.disable-vgw-route-propagation-request/route-table-id :portkey.aws.ec2.-2016-09-15.disable-vgw-route-propagation-request/gateway-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-private-ip-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-private-ip-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.group-identifier/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.group-identifier/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/group-identifier (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.group-identifier/group-name :portkey.aws.ec2.-2016-09-15.group-identifier/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-price/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-price/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-price/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-price/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-price (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.spot-price/product-description :portkey.aws.ec2.-2016-09-15.spot-price/spot-price :portkey.aws.ec2.-2016-09-15.spot-price/timestamp :portkey.aws.ec2.-2016-09-15.spot-price/availability-zone]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-request/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-request/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-listings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-request/reserved-instances-id :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-request/reserved-instances-listing-id :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-listings-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-subnet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-subnet-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-subnet-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-subnet-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-subnet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-subnet-request/vpc-id :portkey.aws.ec2.-2016-09-15.create-subnet-request/cidr-block] :opt-un [:portkey.aws.ec2.-2016-09-15.create-subnet-request/dry-run :portkey.aws.ec2.-2016-09-15.create-subnet-request/availability-zone]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instance-availability-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/scheduled-instance-availability))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/delete-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/failure-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/nat-gateway-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/nat-gateway-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/nat-gateway-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.nat-gateway/failure-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/nat-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.nat-gateway/delete-time :portkey.aws.ec2.-2016-09-15/provisioned-bandwidth :portkey.aws.ec2.-2016-09-15.nat-gateway/subnet-id :portkey.aws.ec2.-2016-09-15.nat-gateway/nat-gateway-id :portkey.aws.ec2.-2016-09-15.nat-gateway/failure-message :portkey.aws.ec2.-2016-09-15.nat-gateway/vpc-id :portkey.aws.ec2.-2016-09-15.nat-gateway/nat-gateway-addresses :portkey.aws.ec2.-2016-09-15.nat-gateway/create-time :portkey.aws.ec2.-2016-09-15.nat-gateway/state :portkey.aws.ec2.-2016-09-15.nat-gateway/failure-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-customer-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/customer-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-hosts-result/hosts (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/host-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-hosts-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-hosts-result/hosts :portkey.aws.ec2.-2016-09-15.describe-hosts-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-status/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-status/update-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-instance-status/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-instance-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-instance-status/code :portkey.aws.ec2.-2016-09-15.spot-instance-status/update-time :portkey.aws.ec2.-2016-09-15.spot-instance-status/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-dns-support-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-dns-support-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.tag-description/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.tag-description/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.tag-description/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/tag-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.tag-description/resource-id :portkey.aws.ec2.-2016-09-15/resource-type :portkey.aws.ec2.-2016-09-15.tag-description/key :portkey.aws.ec2.-2016-09-15.tag-description/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/account-attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/account-attribute-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/requester-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/peering-connection-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/accepter-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/peering-connection-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-vpc-peering-connection-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/dry-run :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/requester-peering-connection-options :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-request/accepter-peering-connection-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-snapshot-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/import-snapshot-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.dhcp-options/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.dhcp-options/dhcp-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/dhcp-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.dhcp-options/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/dhcp-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.dhcp-options/dhcp-options-id :portkey.aws.ec2.-2016-09-15.dhcp-options/dhcp-configurations :portkey.aws.ec2.-2016-09-15.dhcp-options/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-monitoring-enabled/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/run-instances-monitoring-enabled (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.run-instances-monitoring-enabled/enabled] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-id-group-pair-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/user-id-group-pair))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-password-data-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-password-data-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-password-data-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.get-password-data-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-09-15.get-password-data-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disk-image-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/disk-image))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/tag-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/tag))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.client-data/upload-start (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.client-data/upload-end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.client-data/upload-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.client-data/comment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/client-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.client-data/upload-start :portkey.aws.ec2.-2016-09-15.client-data/upload-end :portkey.aws.ec2.-2016-09-15.client-data/upload-size :portkey.aws.ec2.-2016-09-15.client-data/comment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-acl-association-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/network-acl-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-volume-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-volume-attribute-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-volume-attribute-request/auto-enable-io (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-volume-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-volume-attribute-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-volume-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.modify-volume-attribute-request/auto-enable-io]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-identity-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-identity-id-format-request/principal-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-identity-id-format-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-identity-id-format-request/principal-arn] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-identity-id-format-request/resource]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-disk-container/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-disk-container/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-disk-container/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-disk-container/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-disk-container/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-disk-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.image-disk-container/description :portkey.aws.ec2.-2016-09-15.image-disk-container/format :portkey.aws.ec2.-2016-09-15.image-disk-container/url :portkey.aws.ec2.-2016-09-15/user-bucket :portkey.aws.ec2.-2016-09-15.image-disk-container/device-name :portkey.aws.ec2.-2016-09-15.image-disk-container/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/product-code-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/product-code))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-datafeed-subscription-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-info-status #{:insufficientdata "impaired" :ok "insufficient-data" :impaired "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/fleet-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/iam-fleet-role (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/fulfilled-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/terminate-instances-with-expiration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/launch-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/launch-specs-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-fleet-request-config-data (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/spot-price :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/target-capacity :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/iam-fleet-role :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/launch-specifications] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/type :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/valid-from :portkey.aws.ec2.-2016-09-15/excess-capacity-termination-policy :portkey.aws.ec2.-2016-09-15/allocation-strategy :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/fulfilled-capacity :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/terminate-instances-with-expiration :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/client-token :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config-data/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/rule-number :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/protocol :portkey.aws.ec2.-2016-09-15/rule-action :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/egress :portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/cidr-block] :opt-un [:portkey.aws.ec2.-2016-09-15.create-network-acl-entry-request/dry-run :portkey.aws.ec2.-2016-09-15/icmp-type-code :portkey.aws.ec2.-2016-09-15/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-offering/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-offering/instance-family (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-offering/upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-offering/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-offering/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-offering/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.host-offering/offering-id :portkey.aws.ec2.-2016-09-15.host-offering/instance-family :portkey.aws.ec2.-2016-09-15/payment-option :portkey.aws.ec2.-2016-09-15.host-offering/upfront-price :portkey.aws.ec2.-2016-09-15.host-offering/hourly-price :portkey.aws.ec2.-2016-09-15.host-offering/currency-code :portkey.aws.ec2.-2016-09-15.host-offering/duration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/conversion-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-key-pair-request/key-name] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/listing-state #{:pending "sold" :sold "cancelled" :cancelled :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-events-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/volume-status-event))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/datafeed-subscription-state #{:inactive "Active" "Inactive" :active})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stop-instances-result/stopping-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/stop-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.stop-instances-result/stopping-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-batch-error-code #{:fleet-request-id-does-not-exist "fleetRequestIdDoesNotExist" "unexpectedError" "fleetRequestIdMalformed" :fleet-request-not-in-cancellable-state "fleetRequestNotInCancellableState" :fleet-request-id-malformed :unexpected-error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-result/vpc-endpoints (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-endpoint-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoints-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-result/vpc-endpoints :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.deregister-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.deregister-image-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/deregister-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.deregister-image-request/image-id] :opt-un [:portkey.aws.ec2.-2016-09-15.deregister-image-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.target-configuration/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.target-configuration/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/target-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.target-configuration/offering-id :portkey.aws.ec2.-2016-09-15.target-configuration/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/allocation-strategy #{"lowestPrice" :diversified :lowest-price "diversified"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/status-name #{:reachability "reachability"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-event/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-event/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-event/not-before (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-event/not-after (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-event/event-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.volume-status-event/event-type :portkey.aws.ec2.-2016-09-15.volume-status-event/description :portkey.aws.ec2.-2016-09-15.volume-status-event/not-before :portkey.aws.ec2.-2016-09-15.volume-status-event/not-after :portkey.aws.ec2.-2016-09-15.volume-status-event/event-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/target-reservation-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/target-configuration :portkey.aws.ec2.-2016-09-15/reservation-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-endpoints-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-endpoints-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpc-endpoints-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-endpoints-request/vpc-endpoint-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-endpoints-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-intances-ids (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instances-id))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-result/scheduled-instance-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/purchased-scheduled-instance-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-result/scheduled-instance-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attribute-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.attribute-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-dhcp-options-request/dhcp-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/new-dhcp-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-dhcp-options-request/dhcp-configurations] :opt-un [:portkey.aws.ec2.-2016-09-15.create-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl-association/network-acl-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl-association/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl-association/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-acl-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-acl-association/network-acl-association-id :portkey.aws.ec2.-2016-09-15.network-acl-association/network-acl-id :portkey.aws.ec2.-2016-09-15.network-acl-association/subnet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/private-ip-address-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/private-ip-address-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/auto-placement #{"off" "on" :off :on})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-addresses-result/addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-addresses-result/addresses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/purchase (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/purchase-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/total-upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/total-hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-host-reservation-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/purchase :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/total-upfront-price :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/total-hourly-price :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/currency-code :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-result/prefix-lists (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/prefix-list-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-prefix-lists-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-prefix-lists-result/prefix-lists :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-route-tables-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-route-tables-request/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-route-tables-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-route-tables-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-route-tables-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-route-tables-request/route-table-ids :portkey.aws.ec2.-2016-09-15.describe-route-tables-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/prefix-list-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/prefix-list-id))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-identity-id-format-result/statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-identity-id-format-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-identity-id-format-result/statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/availability-zone-message-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/availability-zone-message))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-attribute-name #{:enable-dns-support :enable-dns-hostnames "enableDnsHostnames" "enableDnsSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/history-records (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/history-record))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-datafeed-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/spot-datafeed-subscription]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/target-environment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/export-environment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/export-to-s-3-task (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/export-to-s-3-task-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-instance-export-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/description :portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/target-environment :portkey.aws.ec2.-2016-09-15.create-instance-export-task-request/export-to-s-3-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/tag-description-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/tag-description))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-tags-request/resources (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/resource-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-tags-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-tags-request/resources :portkey.aws.ec2.-2016-09-15.create-tags-request/tags] :opt-un [:portkey.aws.ec2.-2016-09-15.create-tags-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/product-code-values #{"marketplace" :devpay :marketplace "devpay"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-reserved-instances-listing-request/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-reserved-instances-listing-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-reserved-instances-listing-request/reserved-instances-listing-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/purchase))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-vpn-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.attach-vpn-gateway-request/vpn-gateway-id :portkey.aws.ec2.-2016-09-15.attach-vpn-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.attach-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/conversion-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/placement-strategy #{"cluster" :cluster})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-request/spot-fleet-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-request/terminate-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-request/spot-fleet-request-ids :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-request/terminate-instances] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-route-table-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-route-table-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/associate-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.associate-route-table-request/subnet-id :portkey.aws.ec2.-2016-09-15.associate-route-table-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-09-15.associate-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/internet-gateway-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/internet-gateway-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-key-pairs-result/key-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/key-pair-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-key-pairs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-key-pairs-result/key-pairs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-internet-gateways-result/internet-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/internet-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-internet-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-internet-gateways-result/internet-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-dns-support-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/classic-link-dns-support-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-dns-support-result/vpcs :portkey.aws.ec2.-2016-09-15/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-internet-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/detach-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.detach-internet-gateway-request/internet-gateway-id :portkey.aws.ec2.-2016-09-15.detach-internet-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.detach-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/volume-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-ebs (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/snapshot-id :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/volume-size :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/delete-on-termination :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/volume-type :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/iops :portkey.aws.ec2.-2016-09-15.scheduled-instances-ebs/encrypted]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-id-format-result/statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-id-format-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-id-format-result/statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-info/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-status-info-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-info/details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-status-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.volume-status-info/status :portkey.aws.ec2.-2016-09-15.volume-status-info/details]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-capacity/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-capacity/available-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-capacity/total-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-capacity (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-capacity/instance-type :portkey.aws.ec2.-2016-09-15.instance-capacity/available-capacity :portkey.aws.ec2.-2016-09-15.instance-capacity/total-capacity]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ebs-instance-block-device))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-block-device-mapping/device-name :portkey.aws.ec2.-2016-09-15.instance-block-device-mapping/ebs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/target-configuration-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/target-configuration-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-result/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-result/create-volume-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-result/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-result/snapshot-id :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-result/create-volume-permissions :portkey.aws.ec2.-2016-09-15.describe-snapshot-attribute-result/product-codes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/customer-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/customer-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.classic-link-dns-support/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.classic-link-dns-support/classic-link-dns-supported (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/classic-link-dns-support (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.classic-link-dns-support/vpc-id :portkey.aws.ec2.-2016-09-15.classic-link-dns-support/classic-link-dns-supported]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-volume-io-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-volume-io-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/enable-volume-io-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.enable-volume-io-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-09-15.enable-volume-io-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/monitoring-state #{:disabled :pending "enabled" :disabling "disabling" "disabled" "pending" :enabled})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instance-reservation-value-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instance-reservation-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-output-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-output-result/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-output-result/output (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-console-output-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.get-console-output-result/instance-id :portkey.aws.ec2.-2016-09-15.get-console-output-result/timestamp :portkey.aws.ec2.-2016-09-15.get-console-output-result/output]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-subnet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-subnet-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-subnet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-subnet-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-subnet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-placement-groups-result/placement-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/placement-group-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-placement-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-placement-groups-result/placement-groups]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/dhcp-options-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/vpc-peering-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scope #{"Availability Zone" :availability-zone :region "Region"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reset-image-attribute-name #{"launchPermission" :launch-permission})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-hosts-result/successful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-hosts-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/unsuccessful-item-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-hosts-result/successful :portkey.aws.ec2.-2016-09-15.modify-hosts-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/device-type #{:ebs "ebs" "instance-store" :instancestore})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpn-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/vpn-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/route))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.pricing-detail/price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.pricing-detail/count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/pricing-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.pricing-detail/price :portkey.aws.ec2.-2016-09-15.pricing-detail/count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-task-details/bytes-converted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-task-details/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-task-details/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-task-details/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-volume-task-details/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-volume-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-volume-task-details (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.import-volume-task-details/bytes-converted :portkey.aws.ec2.-2016-09-15.import-volume-task-details/availability-zone :portkey.aws.ec2.-2016-09-15.import-volume-task-details/image :portkey.aws.ec2.-2016-09-15.import-volume-task-details/volume] :opt-un [:portkey.aws.ec2.-2016-09-15.import-volume-task-details/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-customer-gateways-result/customer-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/customer-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-customer-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-customer-gateways-result/customer-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-security-group-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-monitoring))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-block-device-mapping-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-iam-instance-profile))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-network-interface-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-launch-specification (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/image-id] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/kernel-id :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/security-group-ids :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/placement :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/subnet-id :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/ebs-optimized :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/instance-type :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/key-name :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/monitoring :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/block-device-mappings :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/ramdisk-id :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/user-data :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-09-15.scheduled-instances-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/product-description-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-account-attributes-result/account-attributes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/account-attribute-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-account-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-account-attributes-result/account-attributes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-status #{"detaching" "in-use" :inuse "attaching" :attaching :available "available" :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-scheduled-instances-result/next-token :portkey.aws.ec2.-2016-09-15/scheduled-instance-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-subnet-attribute-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-subnet-attribute-request/map-public-ip-on-launch (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-subnet-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-subnet-attribute-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-subnet-attribute-request/map-public-ip-on-launch]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-result/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-reserved-instances-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-result/reserved-instances-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-classic-link-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpc-classic-link))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/group-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-disk-container/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-disk-container/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot-disk-container/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-disk-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.snapshot-disk-container/description :portkey.aws.ec2.-2016-09-15.snapshot-disk-container/format :portkey.aws.ec2.-2016-09-15.snapshot-disk-container/url :portkey.aws.ec2.-2016-09-15/user-bucket]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-spot-datafeed-subscription-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-instances-result/spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/request-spot-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.request-spot-instances-result/spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.price-schedule/term (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.price-schedule/price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.price-schedule/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.price-schedule/active (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/price-schedule (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.price-schedule/term :portkey.aws.ec2.-2016-09-15.price-schedule/price :portkey.aws.ec2.-2016-09-15.price-schedule/currency-code :portkey.aws.ec2.-2016-09-15.price-schedule/active]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-result/service-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoint-services-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-result/service-names :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-group-references-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-group-references-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-ids))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-security-group-references-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-security-group-references-request/group-id] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-security-group-references-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-placement-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-instance-placement-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-instance-placement-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpcs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpcs-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpcs-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpcs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpcs-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-vpcs-request/vpc-ids :portkey.aws.ec2.-2016-09-15.describe-vpcs-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instance-state #{:retired :paymentfailed :paymentpending :active "payment-pending" "payment-failed" "active" "retired"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-route-request/route-table-id :portkey.aws.ec2.-2016-09-15.delete-route-request/destination-cidr-block] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-route-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoint-services-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-request/max-results :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoint-services-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/allocation-state #{"released" "released-permanent-failure" :underassessment :releasedpermanentfailure :released "permanent-failure" "under-assessment" :available :permanentfailure "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reboot-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reboot-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reboot-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.reboot-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.reboot-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/export-task-state #{:completed "completed" "cancelling" "cancelled" :cancelled :active "active" :cancelling})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-state-change/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-state-change/current-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-state-change/previous-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-state-change (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-state-change/instance-id :portkey.aws.ec2.-2016-09-15.instance-state-change/current-state :portkey.aws.ec2.-2016-09-15.instance-state-change/previous-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-result/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-result/enable-dns-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-result/enable-dns-hostnames (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-result/vpc-id :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-result/enable-dns-support :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-result/enable-dns-hostnames]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.monitoring/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/monitoring-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.monitoring/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-flow-logs-result/flow-logs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/flow-log-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-flow-logs-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-flow-logs-result/flow-logs :portkey.aws.ec2.-2016-09-15.describe-flow-logs-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-scheduled-instance-availability-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-result/next-token :portkey.aws.ec2.-2016-09-15/scheduled-instance-availability-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/replace-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/rule-number :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/protocol :portkey.aws.ec2.-2016-09-15/rule-action :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/egress :portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/cidr-block] :opt-un [:portkey.aws.ec2.-2016-09-15.replace-network-acl-entry-request/dry-run :portkey.aws.ec2.-2016-09-15/icmp-type-code :portkey.aws.ec2.-2016-09-15/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.event-information/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.event-information/event-sub-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.event-information/event-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/event-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.event-information/instance-id :portkey.aws.ec2.-2016-09-15.event-information/event-sub-type :portkey.aws.ec2.-2016-09-15.event-information/event-description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/vpc]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-address-result/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-address-result/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-address-result/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/allocate-address-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.allocate-address-result/public-ip :portkey.aws.ec2.-2016-09-15.allocate-address-result/domain :portkey.aws.ec2.-2016-09-15.allocate-address-result/allocation-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/launch-specs-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/spot-fleet-launch-specification :min-count 1))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volumes-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volumes-request/volume-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volumes-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volumes-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-volumes-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-volumes-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-volumes-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-volumes-request/volume-ids :portkey.aws.ec2.-2016-09-15.describe-volumes-request/filters :portkey.aws.ec2.-2016-09-15.describe-volumes-request/next-token :portkey.aws.ec2.-2016-09-15.describe-volumes-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-details/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-status-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-details/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.volume-status-details/name :portkey.aws.ec2.-2016-09-15.volume-status-details/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.move-address-to-vpc-result/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/move-address-to-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.move-address-to-vpc-result/allocation-id :portkey.aws.ec2.-2016-09-15/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ip-permission/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ip-permission/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ip-permission/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ip-permission/user-id-group-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/user-id-group-pair-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ip-permission/ip-ranges (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ip-range-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ip-permission/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/prefix-list-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ip-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.ip-permission/ip-protocol :portkey.aws.ec2.-2016-09-15.ip-permission/from-port :portkey.aws.ec2.-2016-09-15.ip-permission/to-port :portkey.aws.ec2.-2016-09-15.ip-permission/user-id-group-pairs :portkey.aws.ec2.-2016-09-15.ip-permission/ip-ranges :portkey.aws.ec2.-2016-09-15.ip-permission/prefix-list-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ip-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/ip-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-result/bundle-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/bundle-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-bundle-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-bundle-tasks-result/bundle-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.slot-date-time-range-request/earliest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.slot-date-time-range-request/latest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/slot-date-time-range-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.slot-date-time-range-request/earliest-time :portkey.aws.ec2.-2016-09-15.slot-date-time-range-request/latest-time] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-account-attributes-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-account-attributes-request/attribute-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/account-attribute-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-account-attributes-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-account-attributes-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-account-attributes-request/attribute-names]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-dns-support-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-dns-support-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ri-product-description #{"Windows (Amazon VPC)" :windows :linux-unix :windows-amazon-vpc :linux-unix-amazon-vpc "Windows" "Linux/UNIX" "Linux/UNIX (Amazon VPC)"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/volume))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-result/snapshots (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-snapshots-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-snapshots-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-snapshots-result/snapshots :portkey.aws.ec2.-2016-09-15.describe-snapshots-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/dhcp-options-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/dhcp-options))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unsuccessful-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/unsuccessful-item-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unsuccessful-item/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/unsuccessful-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.unsuccessful-item/error] :opt-un [:portkey.aws.ec2.-2016-09-15.unsuccessful-item/resource-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-tags-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-tags-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-tags-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-tags-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-tags-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-tags-request/filters :portkey.aws.ec2.-2016-09-15.describe-tags-request/max-results :portkey.aws.ec2.-2016-09-15.describe-tags-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-network-interface-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-network-interface-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-network-interface-request/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.attach-network-interface-request/network-interface-id :portkey.aws.ec2.-2016-09-15.attach-network-interface-request/instance-id :portkey.aws.ec2.-2016-09-15.attach-network-interface-request/device-index] :opt-un [:portkey.aws.ec2.-2016-09-15.attach-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instance-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-success-item/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-success-item/current-spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-success-item/previous-spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-success-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-success-item/spot-fleet-request-id :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-success-item/current-spot-fleet-request-state :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-success-item/previous-spot-fleet-request-state] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.release-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/release-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.release-hosts-request/host-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-request/reserved-instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instance-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-request/target-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/target-configuration-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-reserved-instances-exchange-quote-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-request/reserved-instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-request/dry-run :portkey.aws.ec2.-2016-09-15.get-reserved-instances-exchange-quote-request/target-configurations]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/propagating-vgw-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/propagating-vgw))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disk-image-format #{"VHD" "VMDK" :vmdk :raw :vhd "RAW"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment/instance-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-interface-attachment/attachment-id :portkey.aws.ec2.-2016-09-15.network-interface-attachment/instance-id :portkey.aws.ec2.-2016-09-15.network-interface-attachment/instance-owner-id :portkey.aws.ec2.-2016-09-15.network-interface-attachment/device-index :portkey.aws.ec2.-2016-09-15.network-interface-attachment/status :portkey.aws.ec2.-2016-09-15.network-interface-attachment/attach-time :portkey.aws.ec2.-2016-09-15.network-interface-attachment/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-network-interface-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/scheduled-instances-network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/security-group-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/spot-fleet-request-config (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-fleet-request-config-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-fleet-request-config (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/spot-fleet-request-id :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/spot-fleet-request-state :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/spot-fleet-request-config :portkey.aws.ec2.-2016-09-15.spot-fleet-request-config/create-time] :opt-un [:portkey.aws.ec2.-2016-09-15/activity-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/domain-type #{"standard" "vpc" :vpc :standard})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vgw-telemetry/outside-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vgw-telemetry/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/telemetry-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vgw-telemetry/last-status-change (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vgw-telemetry/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vgw-telemetry/accepted-route-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vgw-telemetry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vgw-telemetry/outside-ip-address :portkey.aws.ec2.-2016-09-15.vgw-telemetry/status :portkey.aws.ec2.-2016-09-15.vgw-telemetry/last-status-change :portkey.aws.ec2.-2016-09-15.vgw-telemetry/status-message :portkey.aws.ec2.-2016-09-15.vgw-telemetry/accepted-route-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-request-state #{:open :closed :completed "completed" "closed" "cancelled" :cancelled :active "active" "open"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.report-instance-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.report-instance-status-request/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.report-instance-status-request/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/report-status-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.report-instance-status-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.report-instance-status-request/end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.report-instance-status-request/reason-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reason-codes-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.report-instance-status-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/report-instance-status-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.report-instance-status-request/instances :portkey.aws.ec2.-2016-09-15.report-instance-status-request/status :portkey.aws.ec2.-2016-09-15.report-instance-status-request/reason-codes] :opt-un [:portkey.aws.ec2.-2016-09-15.report-instance-status-request/dry-run :portkey.aws.ec2.-2016-09-15.report-instance-status-request/start-time :portkey.aws.ec2.-2016-09-15.report-instance-status-request/end-time :portkey.aws.ec2.-2016-09-15.report-instance-status-request/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/resource-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/resource-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/flow-logs-resource-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/log-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/deliver-logs-permission-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-flow-logs-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-flow-logs-request/resource-ids :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/resource-type :portkey.aws.ec2.-2016-09-15/traffic-type :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/log-group-name :portkey.aws.ec2.-2016-09-15.create-flow-logs-request/deliver-logs-permission-arn] :opt-un [:portkey.aws.ec2.-2016-09-15.create-flow-logs-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-images-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-images-request/image-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/image-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-images-request/owners (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/owner-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-images-request/executable-users (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/executable-by-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-images-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-images-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-images-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-images-request/image-ids :portkey.aws.ec2.-2016-09-15.describe-images-request/owners :portkey.aws.ec2.-2016-09-15.describe-images-request/executable-users :portkey.aws.ec2.-2016-09-15.describe-images-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/tag-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/interface-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/mac-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/requester-managed (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-private-ip-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/requester-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-interface/attachment :portkey.aws.ec2.-2016-09-15.network-interface/tag-set :portkey.aws.ec2.-2016-09-15.network-interface/interface-type :portkey.aws.ec2.-2016-09-15.network-interface/subnet-id :portkey.aws.ec2.-2016-09-15.network-interface/owner-id :portkey.aws.ec2.-2016-09-15.network-interface/mac-address :portkey.aws.ec2.-2016-09-15.network-interface/network-interface-id :portkey.aws.ec2.-2016-09-15.network-interface/source-dest-check :portkey.aws.ec2.-2016-09-15.network-interface/availability-zone :portkey.aws.ec2.-2016-09-15.network-interface/status :portkey.aws.ec2.-2016-09-15.network-interface/private-dns-name :portkey.aws.ec2.-2016-09-15.network-interface/requester-managed :portkey.aws.ec2.-2016-09-15.network-interface/description :portkey.aws.ec2.-2016-09-15.network-interface/vpc-id :portkey.aws.ec2.-2016-09-15.network-interface/groups :portkey.aws.ec2.-2016-09-15.network-interface/private-ip-addresses :portkey.aws.ec2.-2016-09-15.network-interface/association :portkey.aws.ec2.-2016-09-15.network-interface/requester-id :portkey.aws.ec2.-2016-09-15.network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-attachment-changes))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/description :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/source-dest-check :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/groups :portkey.aws.ec2.-2016-09-15.modify-network-interface-attribute-request/attachment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-bundle-task-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-bundle-task-request/bundle-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-bundle-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.cancel-bundle-task-request/bundle-id] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-bundle-task-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/state-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/owner-alias (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/data-encryption-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.snapshot/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.snapshot/start-time :portkey.aws.ec2.-2016-09-15.snapshot/state-message :portkey.aws.ec2.-2016-09-15.snapshot/owner-id :portkey.aws.ec2.-2016-09-15.snapshot/encrypted :portkey.aws.ec2.-2016-09-15.snapshot/tags :portkey.aws.ec2.-2016-09-15.snapshot/owner-alias :portkey.aws.ec2.-2016-09-15.snapshot/progress :portkey.aws.ec2.-2016-09-15.snapshot/description :portkey.aws.ec2.-2016-09-15.snapshot/data-encryption-key-id :portkey.aws.ec2.-2016-09-15.snapshot/kms-key-id :portkey.aws.ec2.-2016-09-15.snapshot/volume-id :portkey.aws.ec2.-2016-09-15.snapshot/state :portkey.aws.ec2.-2016-09-15.snapshot/volume-size :portkey.aws.ec2.-2016-09-15.snapshot/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/flow-logs-resource-type #{:network-interface "Subnet" :vpc "NetworkInterface" :subnet "VPC"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/resource-type #{:networkacl "vpn-gateway" "subnet" :dhcpoptions "vpc" "spot-instances-request" :instance "route-table" "image" :securitygroup :vpngateway :routetable "snapshot" "vpn-connection" :reservedinstances :volume "internet-gateway" :vpnconnection :snapshot "reserved-instances" "instance" :vpc :spotinstancesrequest "network-interface" "security-group" "volume" "dhcp-options" :image :networkinterface "customer-gateway" :customergateway :subnet "network-acl" :internetgateway})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-event/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/event-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-event/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-event/not-before (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status-event/not-after (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-status-event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-status-event/code :portkey.aws.ec2.-2016-09-15.instance-status-event/description :portkey.aws.ec2.-2016-09-15.instance-status-event/not-before :portkey.aws.ec2.-2016-09-15.instance-status-event/not-after]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-options-description/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-options-description/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-options-description/allow-dns-resolution-from-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-options-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc-peering-connection-options-description/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-options-description/allow-egress-from-local-vpc-to-remote-classic-link :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-options-description/allow-dns-resolution-from-remote-vpc]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-name #{:ioperformance :ioenabled "io-performance" "io-enabled"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.internet-gateway/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.internet-gateway/attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/internet-gateway-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.internet-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/internet-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.internet-gateway/internet-gateway-id :portkey.aws.ec2.-2016-09-15.internet-gateway/attachments :portkey.aws.ec2.-2016-09-15.internet-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-result/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/classic-link-instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-classic-link-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-result/instances :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc/is-default (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc/vpc-id :portkey.aws.ec2.-2016-09-15.vpc/state :portkey.aws.ec2.-2016-09-15.vpc/cidr-block :portkey.aws.ec2.-2016-09-15.vpc/dhcp-options-id :portkey.aws.ec2.-2016-09-15.vpc/tags :portkey.aws.ec2.-2016-09-15.vpc/instance-tenancy :portkey.aws.ec2.-2016-09-15.vpc/is-default]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reset-image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reset-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.reset-image-attribute-request/image-id :portkey.aws.ec2.-2016-09-15.reset-image-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-09-15.reset-image-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-import-task-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-import-task-request/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-import-task-request/cancel-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-import-task-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-import-task-request/dry-run :portkey.aws.ec2.-2016-09-15.cancel-import-task-request/import-task-id :portkey.aws.ec2.-2016-09-15.cancel-import-task-request/cancel-reason]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-classic-link-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/instance-ids :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/filters :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/next-token :portkey.aws.ec2.-2016-09-15.describe-classic-link-instances-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/batch-state #{:cancelled-terminating :modifying :cancelled-running "cancelled_running" "failed" :submitted "cancelled" :cancelled :active "submitted" "modifying" "active" "cancelled_terminating" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/operation-type #{:remove "remove" "add" :add})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoints-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/vpc-endpoint-ids :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/filters :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/max-results :portkey.aws.ec2.-2016-09-15.describe-vpc-endpoints-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instance-recurrence-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/first-slot-start-time-range (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/slot-date-time-range-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/min-slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/max-slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-scheduled-instance-availability-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/recurrence :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/first-slot-start-time-range] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/min-slot-duration-in-hours :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/max-slot-duration-in-hours :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/next-token :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/max-results :portkey.aws.ec2.-2016-09-15.describe-scheduled-instance-availability-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation-value/remaining-total-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation-value/remaining-upfront-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reservation-value/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reservation-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reservation-value/remaining-total-value :portkey.aws.ec2.-2016-09-15.reservation-value/remaining-upfront-value :portkey.aws.ec2.-2016-09-15.reservation-value/hourly-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.host-instance/instance-id :portkey.aws.ec2.-2016-09-15.host-instance/instance-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instances-result/reservations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reservation-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-instances-result/reservations :portkey.aws.ec2.-2016-09-15.describe-instances-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-attribute-name #{"productCodes" "createVolumePermission" :product-codes :create-volume-permission})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/currency-code-values #{:usd "USD"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-attribute #{:description "groupSet" :group-set :source-dest-check "attachment" "sourceDestCheck" "description" :attachment})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/snapshot-details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-detail-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-image-task/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-image-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.import-image-task/platform :portkey.aws.ec2.-2016-09-15.import-image-task/import-task-id :portkey.aws.ec2.-2016-09-15.import-image-task/image-id :portkey.aws.ec2.-2016-09-15.import-image-task/status-message :portkey.aws.ec2.-2016-09-15.import-image-task/status :portkey.aws.ec2.-2016-09-15.import-image-task/progress :portkey.aws.ec2.-2016-09-15.import-image-task/description :portkey.aws.ec2.-2016-09-15.import-image-task/snapshot-details :portkey.aws.ec2.-2016-09-15.import-image-task/hypervisor :portkey.aws.ec2.-2016-09-15.import-image-task/architecture :portkey.aws.ec2.-2016-09-15.import-image-task/license-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-customer-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-customer-gateways-request/customer-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/customer-gateway-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-customer-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-customer-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-customer-gateways-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-customer-gateways-request/customer-gateway-ids :portkey.aws.ec2.-2016-09-15.describe-customer-gateways-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/report-instance-reason-codes #{"password-not-available" "performance-instance-store" :other :performancenetwork :performanceebsvolume "not-accepting-credentials" "unresponsive" :performanceother :passwordnotavailable "other" "performance-ebs-volume" :notacceptingcredentials "instance-stuck-in-state" :performanceinstancestore "performance-network" :instancestuckinstate :unresponsive "performance-other"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/min-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/max-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-host-reservation-offerings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/offering-id :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/min-duration :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/max-duration :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/filter :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/max-results :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reset-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.reset-snapshot-attribute-request/snapshot-id :portkey.aws.ec2.-2016-09-15.reset-snapshot-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-09-15.reset-snapshot-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/volume-status-details))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/summary-status #{:initializing :insufficientdata :notapplicable "impaired" "initializing" :ok "insufficient-data" :impaired "not-applicable" "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-vpn-gateway-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-flow-logs-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-flow-logs-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/bundle-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-classic-link-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/instance-id :portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/vpc-id :portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/groups] :opt-un [:portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/user-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/create-volume-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-volume-permission-modifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/attribute :portkey.aws.ec2.-2016-09-15/operation-type :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/user-ids :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/group-names :portkey.aws.ec2.-2016-09-15.modify-snapshot-attribute-request/create-volume-permission]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-fleet-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/request-spot-fleet-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.request-spot-fleet-response/spot-fleet-request-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-response/spot-fleet-request-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-fleet-request-config-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-requests-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-response/spot-fleet-request-configs] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-requests-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-type #{"standard" "sc1" "io1" :sc-1 :st-1 "gp2" "st1" :io-1 :standard :gp-2})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.customer-gateway/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.customer-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.customer-gateway/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.customer-gateway/ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.customer-gateway/bgp-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.customer-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/customer-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.customer-gateway/customer-gateway-id :portkey.aws.ec2.-2016-09-15.customer-gateway/state :portkey.aws.ec2.-2016-09-15.customer-gateway/type :portkey.aws.ec2.-2016-09-15.customer-gateway/ip-address :portkey.aws.ec2.-2016-09-15.customer-gateway/bgp-asn :portkey.aws.ec2.-2016-09-15.customer-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-connections-result/vpn-connections (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-connection-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpn-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpn-connections-result/vpn-connections]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/response-host-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/account-attribute-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/account-attribute-name))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/copy-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.copy-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-request/reserved-instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instance-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-request/target-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/target-configuration-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/accept-reserved-instances-exchange-quote-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-request/reserved-instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-request/dry-run :portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-request/target-configurations]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/accept-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/vpc-peering-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/host))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-volume-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-volume-request/device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-volume-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/detach-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.detach-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-09-15.detach-volume-request/dry-run :portkey.aws.ec2.-2016-09-15.detach-volume-request/instance-id :portkey.aws.ec2.-2016-09-15.detach-volume-request/device :portkey.aws.ec2.-2016-09-15.detach-volume-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/reserved-instances-offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/limit-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instance-limit-price))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-reserved-instances-offering-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/reserved-instances-offering-id :portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/instance-count] :opt-un [:portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/dry-run :portkey.aws.ec2.-2016-09-15.purchase-reserved-instances-offering-request/limit-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/stale-security-group-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/stale-security-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-permission-modifications/add (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-permission-modifications/remove (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/launch-permission-modifications (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.launch-permission-modifications/add :portkey.aws.ec2.-2016-09-15.launch-permission-modifications/remove]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unassign-private-ip-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unassign-private-ip-addresses-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/private-ip-address-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/unassign-private-ip-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.unassign-private-ip-addresses-request/network-interface-id :portkey.aws.ec2.-2016-09-15.unassign-private-ip-addresses-request/private-ip-addresses] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.terminate-instances-result/terminating-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/terminate-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.terminate-instances-result/terminating-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/volume-status-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpcs-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpcs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpcs-result/vpcs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.monitor-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.monitor-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/monitor-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.monitor-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.monitor-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-task/export-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/export-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/export-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.export-task/export-task-id :portkey.aws.ec2.-2016-09-15.export-task/description :portkey.aws.ec2.-2016-09-15.export-task/state :portkey.aws.ec2.-2016-09-15.export-task/status-message :portkey.aws.ec2.-2016-09-15/instance-export-details :portkey.aws.ec2.-2016-09-15/export-to-s-3-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-endpoints-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpc-endpoints-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-endpoints-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-private-ip-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/private-ip-address :portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/private-dns-name :portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/primary :portkey.aws.ec2.-2016-09-15.network-interface-private-ip-address/association]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-placement-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-placement-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-placement-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-placement-group-request/group-name] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-placement-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/max-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/min-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-instances-request/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/run-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.run-instances-request/image-id :portkey.aws.ec2.-2016-09-15.run-instances-request/min-count :portkey.aws.ec2.-2016-09-15.run-instances-request/max-count] :opt-un [:portkey.aws.ec2.-2016-09-15.run-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.run-instances-request/kernel-id :portkey.aws.ec2.-2016-09-15.run-instances-request/security-group-ids :portkey.aws.ec2.-2016-09-15/placement :portkey.aws.ec2.-2016-09-15.run-instances-request/subnet-id :portkey.aws.ec2.-2016-09-15.run-instances-request/security-groups :portkey.aws.ec2.-2016-09-15.run-instances-request/ebs-optimized :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.run-instances-request/key-name :portkey.aws.ec2.-2016-09-15.run-instances-request/additional-info :portkey.aws.ec2.-2016-09-15.run-instances-request/disable-api-termination :portkey.aws.ec2.-2016-09-15.run-instances-request/monitoring :portkey.aws.ec2.-2016-09-15.run-instances-request/block-device-mappings :portkey.aws.ec2.-2016-09-15.run-instances-request/ramdisk-id :portkey.aws.ec2.-2016-09-15.run-instances-request/user-data :portkey.aws.ec2.-2016-09-15.run-instances-request/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-09-15.run-instances-request/iam-instance-profile :portkey.aws.ec2.-2016-09-15.run-instances-request/client-token :portkey.aws.ec2.-2016-09-15.run-instances-request/private-ip-address :portkey.aws.ec2.-2016-09-15.run-instances-request/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/placement-group-state #{:deleted "deleting" :pending :deleting "deleted" :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-actions-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/volume-status-action))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-static-route-source #{:static "Static"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-response/active-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/active-instance-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-instances-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-response/spot-fleet-request-id :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-response/active-instances] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-instances-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-result/spot-price-history (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-price-history-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-price-history-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-price-history-result/spot-price-history :portkey.aws.ec2.-2016-09-15.describe-spot-price-history-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reset-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reset-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.reset-instance-attribute-request/instance-id :portkey.aws.ec2.-2016-09-15.reset-instance-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-09-15.reset-instance-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-request/purchase-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/purchase-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-scheduled-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-request/purchase-requests] :opt-un [:portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.purchase-scheduled-instances-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-offering-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/host-offering))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.move-address-to-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.move-address-to-vpc-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/move-address-to-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.move-address-to-vpc-request/public-ip] :opt-un [:portkey.aws.ec2.-2016-09-15.move-address-to-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-endpoint-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpc-endpoint))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.copy-snapshot-result/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/copy-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.copy-snapshot-result/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-export-tasks-request/export-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/export-task-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-export-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-export-tasks-request/export-task-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/subnet-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instance-limit-price/amount (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instance-limit-price/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instance-limit-price (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instance-limit-price/amount :portkey.aws.ec2.-2016-09-15.reserved-instance-limit-price/currency-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/interval (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/occurrence-relative-to-end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/occurrence-unit (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instance-recurrence (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/frequency :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/interval :portkey.aws.ec2.-2016-09-15/occurrence-day-set :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/occurrence-relative-to-end :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence/occurrence-unit]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-classic-link-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.attach-classic-link-vpc-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-connection-options-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpn-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/type :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/customer-gateway-id :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/dry-run :portkey.aws.ec2.-2016-09-15.create-vpn-connection-request/options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disassociate-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disassociate-route-table-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disassociate-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.disassociate-route-table-request/association-id] :opt-un [:portkey.aws.ec2.-2016-09-15.disassociate-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-hosts-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-hosts-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-hosts-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-hosts-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-hosts-request/host-ids :portkey.aws.ec2.-2016-09-15.describe-hosts-request/next-token :portkey.aws.ec2.-2016-09-15.describe-hosts-request/max-results :portkey.aws.ec2.-2016-09-15.describe-hosts-request/filter]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-state/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-state/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-state-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-state (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-state/code :portkey.aws.ec2.-2016-09-15.instance-state/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/region-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/interval (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/occurrence-days (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/occurrence-day-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/occurrence-relative-to-end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/occurrence-unit (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instance-recurrence-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/frequency :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/interval :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/occurrence-days :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/occurrence-relative-to-end :portkey.aws.ec2.-2016-09-15.scheduled-instance-recurrence-request/occurrence-unit]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-item/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-item/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-item/volume-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-status-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-item/events (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-status-events-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-status-item/actions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-status-actions-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-status-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.volume-status-item/volume-id :portkey.aws.ec2.-2016-09-15.volume-status-item/availability-zone :portkey.aws.ec2.-2016-09-15.volume-status-item/volume-status :portkey.aws.ec2.-2016-09-15.volume-status-item/events :portkey.aws.ec2.-2016-09-15.volume-status-item/actions]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-instance-attribute-request/instance-id :portkey.aws.ec2.-2016-09-15.describe-instance-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-instance-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-instance-state #{:open :closed "failed" "closed" "cancelled" :cancelled :active "active" "open" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-response/unsuccessful-fleet-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-error-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-response/successful-fleet-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-success-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-response/unsuccessful-fleet-requests :portkey.aws.ec2.-2016-09-15.cancel-spot-fleet-requests-response/successful-fleet-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/detach-classic-link-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-request/instance-id :portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-state-name #{"stopping" "running" "terminated" :pending :shuttingdown :running :stopping :stopped "stopped" :terminated "shutting-down" "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/public-ips (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-moving-addresses-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/public-ips :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/next-token :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/filters :portkey.aws.ec2.-2016-09-15.describe-moving-addresses-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.availability-zone-message/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/availability-zone-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.availability-zone-message/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-nat-gateway-result/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-nat-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-nat-gateway-result/nat-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-bucket/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-bucket/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-bucket (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.user-bucket/s-3-bucket :portkey.aws.ec2.-2016-09-15.user-bucket/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-reservation-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/host-reservation))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/unsuccessful-item-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/unsuccessful-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.allocate-hosts-result/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/allocate-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.allocate-hosts-result/host-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/virtualization-type #{:hvm :paravirtual "paravirtual" "hvm"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.accept-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.accept-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/accept-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.accept-vpc-peering-connection-request/dry-run :portkey.aws.ec2.-2016-09-15.accept-vpc-peering-connection-request/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-attribute/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-attribute/kernel-id :portkey.aws.ec2.-2016-09-15.instance-attribute/instance-id :portkey.aws.ec2.-2016-09-15.instance-attribute/ebs-optimized :portkey.aws.ec2.-2016-09-15.instance-attribute/instance-type :portkey.aws.ec2.-2016-09-15.instance-attribute/sriov-net-support :portkey.aws.ec2.-2016-09-15.instance-attribute/source-dest-check :portkey.aws.ec2.-2016-09-15.instance-attribute/disable-api-termination :portkey.aws.ec2.-2016-09-15.instance-attribute/groups :portkey.aws.ec2.-2016-09-15.instance-attribute/block-device-mappings :portkey.aws.ec2.-2016-09-15.instance-attribute/product-codes :portkey.aws.ec2.-2016-09-15.instance-attribute/root-device-name :portkey.aws.ec2.-2016-09-15.instance-attribute/ramdisk-id :portkey.aws.ec2.-2016-09-15.instance-attribute/user-data :portkey.aws.ec2.-2016-09-15.instance-attribute/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-09-15.instance-attribute/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-id/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-id (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instances-id/reserved-instances-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/reserved-instances-ids :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/filters :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/offering-type :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-request/offering-class]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/private-ip-address-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/private-ip-address-config-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-security-group-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/associate-public-ip-address :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/private-ip-address-configs :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/subnet-id :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/network-interface-id :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/device-index :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/description :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/groups :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/delete-on-termination :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/secondary-private-ip-address-count :portkey.aws.ec2.-2016-09-15.scheduled-instances-network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-request/vpc-id :portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/max-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/min-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/include-marketplace (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/max-instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/reserved-instances-offering-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-offering-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-offerings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/max-duration :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/min-duration :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/availability-zone :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/next-token :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/instance-tenancy :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/include-marketplace :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/filters :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/product-description :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/max-results :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/offering-class :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/offering-type :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/max-instance-count :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-offerings-request/reserved-instances-offering-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-vpc-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/vpc-id :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/service-name] :opt-un [:portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/dry-run :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/policy-document :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/route-table-ids :portkey.aws.ec2.-2016-09-15.create-vpc-endpoint-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.target-configuration-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.target-configuration-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/target-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.target-configuration-request/offering-id] :opt-un [:portkey.aws.ec2.-2016-09-15.target-configuration-request/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instances-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-vpc-endpoint-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interfaces-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interfaces-request/network-interface-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-interface-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-network-interfaces-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-network-interfaces-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-network-interfaces-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-network-interfaces-request/network-interface-ids :portkey.aws.ec2.-2016-09-15.describe-network-interfaces-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-network-interface-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-network-interface-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.conversion-task/conversion-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.conversion-task/expiration-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.conversion-task/import-instance (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-instance-task-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.conversion-task/import-volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-volume-task-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.conversion-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/conversion-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.conversion-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.conversion-task/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/conversion-task (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.conversion-task/conversion-task-id :portkey.aws.ec2.-2016-09-15.conversion-task/state] :opt-un [:portkey.aws.ec2.-2016-09-15.conversion-task/expiration-time :portkey.aws.ec2.-2016-09-15.conversion-task/import-instance :portkey.aws.ec2.-2016-09-15.conversion-task/import-volume :portkey.aws.ec2.-2016-09-15.conversion-task/status-message :portkey.aws.ec2.-2016-09-15.conversion-task/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-subnets-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-subnets-request/subnet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/subnet-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-subnets-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-subnets-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-subnets-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-subnets-request/subnet-ids :portkey.aws.ec2.-2016-09-15.describe-subnets-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.bundle-task-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/bundle-task-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.bundle-task-error/code :portkey.aws.ec2.-2016-09-15.bundle-task-error/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.dhcp-configuration/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.dhcp-configuration/values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/dhcp-configuration-value-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/dhcp-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.dhcp-configuration/key :portkey.aws.ec2.-2016-09-15.dhcp-configuration/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.key-pair/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.key-pair/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.key-pair/key-material (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/key-pair (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.key-pair/key-name :portkey.aws.ec2.-2016-09-15.key-pair/key-fingerprint :portkey.aws.ec2.-2016-09-15.key-pair/key-material]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-nat-gateway-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-nat-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-nat-gateway-request/nat-gateway-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ebs-block-device))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.block-device-mapping/virtual-name :portkey.aws.ec2.-2016-09-15.block-device-mapping/device-name :portkey.aws.ec2.-2016-09-15.block-device-mapping/ebs :portkey.aws.ec2.-2016-09-15.block-device-mapping/no-device]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/state #{:deleted :pending :deleting "Deleting" "Deleted" :available "Pending" "Available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-to-s-3-task/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.export-to-s-3-task/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/export-to-s-3-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/disk-image-format :portkey.aws.ec2.-2016-09-15/container-format :portkey.aws.ec2.-2016-09-15.export-to-s-3-task/s-3-bucket :portkey.aws.ec2.-2016-09-15.export-to-s-3-task/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-acl-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/network-acl))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/max-results (clojure.spec.alpha/int-in 5 255))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.tag/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.tag/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.tag/key :portkey.aws.ec2.-2016-09-15.tag/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-subnets-result/subnets (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/subnet-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-subnets-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-subnets-result/subnets]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-address-result/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/associate-address-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.associate-address-result/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/recurring-charge-frequency #{"Hourly" :hourly})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/executable-by-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-instance-export-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/export-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-result/requester-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/peering-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-result/accepter-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/peering-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-vpc-peering-connection-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-result/requester-peering-connection-options :portkey.aws.ec2.-2016-09-15.modify-vpc-peering-connection-options-result/accepter-peering-connection-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-availability-zones-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-availability-zones-request/zone-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/zone-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-availability-zones-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-availability-zones-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-availability-zones-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-availability-zones-request/zone-names :portkey.aws.ec2.-2016-09-15.describe-availability-zones-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-route-table-result/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/associate-route-table-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.associate-route-table-result/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/platform-values #{:windows "Windows"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disk-image (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.disk-image/image :portkey.aws.ec2.-2016-09-15.disk-image/description :portkey.aws.ec2.-2016-09-15.disk-image/volume]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disassociate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disassociate-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disassociate-address-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disassociate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.disassociate-address-request/dry-run :portkey.aws.ec2.-2016-09-15.disassociate-address-request/public-ip :portkey.aws.ec2.-2016-09-15.disassociate-address-request/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-success-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-success-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.product-code/product-code-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.product-code/product-code-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/product-code (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.product-code/product-code-id :portkey.aws.ec2.-2016-09-15.product-code/product-code-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.port-range/from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.port-range/to (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/port-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.port-range/from :portkey.aws.ec2.-2016-09-15.port-range/to]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-state #{:pending :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attachment-status #{"attached" "detaching" :detached "detached" "attaching" :attaching :attached :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.peering-connection-options/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.peering-connection-options/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.peering-connection-options/allow-dns-resolution-from-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/peering-connection-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.peering-connection-options/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2016-09-15.peering-connection-options/allow-egress-from-local-vpc-to-remote-classic-link :portkey.aws.ec2.-2016-09-15.peering-connection-options/allow-dns-resolution-from-remote-vpc]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-attachment/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc-attachment/vpc-id :portkey.aws.ec2.-2016-09-15.vpc-attachment/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/revoke-security-group-egress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/group-id] :opt-un [:portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/dry-run :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/to-port :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/source-security-group-name :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/ip-protocol :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/from-port :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/ip-permissions :portkey.aws.ec2.-2016-09-15.revoke-security-group-egress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status/events (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-status-event-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status/system-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-status-summary))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-status/instance-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-status-summary))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-status/instance-id :portkey.aws.ec2.-2016-09-15.instance-status/availability-zone :portkey.aws.ec2.-2016-09-15.instance-status/events :portkey.aws.ec2.-2016-09-15/instance-state :portkey.aws.ec2.-2016-09-15.instance-status/system-status :portkey.aws.ec2.-2016-09-15.instance-status/instance-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-fleet-monitoring))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/weighted-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/spot-fleet-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/kernel-id :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/image-id :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/placement :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/addressing-type :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/subnet-id :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/security-groups :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/ebs-optimized :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/key-name :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/spot-price :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/monitoring :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/weighted-capacity :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/block-device-mappings :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/ramdisk-id :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/user-data :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-09-15.spot-fleet-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-vpn-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/detach-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.detach-vpn-gateway-request/vpn-gateway-id :portkey.aws.ec2.-2016-09-15.detach-vpn-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.detach-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.ip-range/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ip-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.ip-range/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-security-group/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-security-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-security-group/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-security-group/stale-ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/stale-ip-permission-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stale-security-group/stale-ip-permissions-egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/stale-ip-permission-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/stale-security-group (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.stale-security-group/group-id] :opt-un [:portkey.aws.ec2.-2016-09-15.stale-security-group/group-name :portkey.aws.ec2.-2016-09-15.stale-security-group/description :portkey.aws.ec2.-2016-09-15.stale-security-group/vpc-id :portkey.aws.ec2.-2016-09-15.stale-security-group/stale-ip-permissions :portkey.aws.ec2.-2016-09-15.stale-security-group/stale-ip-permissions-egress]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/block-device-mapping-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-task/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-snapshot-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-snapshot-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.import-snapshot-task/import-task-id :portkey.aws.ec2.-2016-09-15/snapshot-task-detail :portkey.aws.ec2.-2016-09-15.import-snapshot-task/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/container-format #{:ova "ova"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/purchase-request :min-count 1))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-security-group-result/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-security-group-result/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-state-reason/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-state-reason-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-state-reason/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-state-reason (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpc-peering-connection-state-reason/code :portkey.aws.ec2.-2016-09-15.vpc-peering-connection-state-reason/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/new-dhcp-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/new-dhcp-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-password-data-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-password-data-result/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-password-data-result/password-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-password-data-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.get-password-data-result/instance-id :portkey.aws.ec2.-2016-09-15.get-password-data-result/timestamp :portkey.aws.ec2.-2016-09-15.get-password-data-result/password-data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-prefix-lists-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/prefix-list-ids :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/filters :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/max-results :portkey.aws.ec2.-2016-09-15.describe-prefix-lists-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-volume-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/conversion-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/instance-lifecycle (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-lifecycle-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/root-device-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/device-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/hypervisor-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/launch-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/ami-launch-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/state-transition-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance/public-dns-name :portkey.aws.ec2.-2016-09-15.instance/kernel-id :portkey.aws.ec2.-2016-09-15.instance/spot-instance-request-id :portkey.aws.ec2.-2016-09-15.instance/instance-id :portkey.aws.ec2.-2016-09-15.instance/instance-lifecycle :portkey.aws.ec2.-2016-09-15.instance/platform :portkey.aws.ec2.-2016-09-15.instance/image-id :portkey.aws.ec2.-2016-09-15/placement :portkey.aws.ec2.-2016-09-15.instance/subnet-id :portkey.aws.ec2.-2016-09-15.instance/root-device-type :portkey.aws.ec2.-2016-09-15.instance/security-groups :portkey.aws.ec2.-2016-09-15.instance/ebs-optimized :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.instance/sriov-net-support :portkey.aws.ec2.-2016-09-15.instance/tags :portkey.aws.ec2.-2016-09-15.instance/source-dest-check :portkey.aws.ec2.-2016-09-15.instance/key-name :portkey.aws.ec2.-2016-09-15.instance/private-dns-name :portkey.aws.ec2.-2016-09-15.instance/vpc-id :portkey.aws.ec2.-2016-09-15/monitoring :portkey.aws.ec2.-2016-09-15.instance/block-device-mappings :portkey.aws.ec2.-2016-09-15.instance/hypervisor :portkey.aws.ec2.-2016-09-15.instance/architecture :portkey.aws.ec2.-2016-09-15/virtualization-type :portkey.aws.ec2.-2016-09-15.instance/product-codes :portkey.aws.ec2.-2016-09-15.instance/state :portkey.aws.ec2.-2016-09-15.instance/root-device-name :portkey.aws.ec2.-2016-09-15.instance/ramdisk-id :portkey.aws.ec2.-2016-09-15.instance/launch-time :portkey.aws.ec2.-2016-09-15.instance/public-ip-address :portkey.aws.ec2.-2016-09-15/state-reason :portkey.aws.ec2.-2016-09-15/iam-instance-profile :portkey.aws.ec2.-2016-09-15.instance/ami-launch-index :portkey.aws.ec2.-2016-09-15.instance/client-token :portkey.aws.ec2.-2016-09-15.instance/state-transition-reason :portkey.aws.ec2.-2016-09-15.instance/private-ip-address :portkey.aws.ec2.-2016-09-15.instance/network-interfaces :portkey.aws.ec2.-2016-09-15.instance/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.terminate-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.terminate-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/terminate-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.terminate-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.terminate-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-reserved-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-reserved-instances-request/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-reserved-instances-request/target-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-reserved-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-reserved-instances-request/reserved-instances-ids :portkey.aws.ec2.-2016-09-15.modify-reserved-instances-request/target-configurations] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-reserved-instances-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-acl-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-network-acl-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-network-acl-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-network-acl-request/network-acl-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-network-acl-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-placement-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-placement-groups-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/placement-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-placement-groups-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-placement-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-placement-groups-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-placement-groups-request/group-names :portkey.aws.ec2.-2016-09-15.describe-placement-groups-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/user-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/user-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/user-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/launch-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/launch-permission-modifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/image-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/user-ids :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/attribute :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/value :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/description :portkey.aws.ec2.-2016-09-15/operation-type :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/product-codes :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/user-groups :portkey.aws.ec2.-2016-09-15.modify-image-attribute-request/launch-permission]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/nat-gateway-state #{:deleted "deleting" "failed" :pending :deleting "deleted" :available "pending" "available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-result/reserved-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-result/reserved-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-result/nat-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/nat-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-nat-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-nat-gateways-result/nat-gateways :portkey.aws.ec2.-2016-09-15.describe-nat-gateways-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-result/exchange-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/accept-reserved-instances-exchange-quote-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.accept-reserved-instances-exchange-quote-result/exchange-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/block-device-mapping-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/blob clojure.core/bytes?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group-reference/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group-reference/referencing-vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.security-group-reference/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/security-group-reference (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.security-group-reference/group-id :portkey.aws.ec2.-2016-09-15.security-group-reference/referencing-vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.security-group-reference/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/classic-link-dns-support-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/classic-link-dns-support))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/gateway-type #{:ipsec-1 "ipsec.1"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-iam-instance-profile/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instances-iam-instance-profile/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-iam-instance-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instances-iam-instance-profile/arn :portkey.aws.ec2.-2016-09-15.scheduled-instances-iam-instance-profile/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/root-device-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/device-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/public (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/hypervisor-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/image-owner-alias (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/creation-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/image-location (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/image-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/image-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/image-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.image/kernel-id :portkey.aws.ec2.-2016-09-15.image/platform :portkey.aws.ec2.-2016-09-15.image/image-id :portkey.aws.ec2.-2016-09-15.image/root-device-type :portkey.aws.ec2.-2016-09-15.image/owner-id :portkey.aws.ec2.-2016-09-15.image/sriov-net-support :portkey.aws.ec2.-2016-09-15.image/tags :portkey.aws.ec2.-2016-09-15.image/public :portkey.aws.ec2.-2016-09-15.image/description :portkey.aws.ec2.-2016-09-15.image/block-device-mappings :portkey.aws.ec2.-2016-09-15.image/hypervisor :portkey.aws.ec2.-2016-09-15.image/architecture :portkey.aws.ec2.-2016-09-15.image/image-owner-alias :portkey.aws.ec2.-2016-09-15.image/creation-date :portkey.aws.ec2.-2016-09-15/virtualization-type :portkey.aws.ec2.-2016-09-15.image/product-codes :portkey.aws.ec2.-2016-09-15.image/image-location :portkey.aws.ec2.-2016-09-15.image/state :portkey.aws.ec2.-2016-09-15.image/image-type :portkey.aws.ec2.-2016-09-15.image/root-device-name :portkey.aws.ec2.-2016-09-15.image/ramdisk-id :portkey.aws.ec2.-2016-09-15.image/name :portkey.aws.ec2.-2016-09-15/state-reason :portkey.aws.ec2.-2016-09-15.image/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/report-status-type #{"impaired" :ok :impaired "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-result/offering-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/host-offering-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-host-reservation-offerings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-result/offering-set :portkey.aws.ec2.-2016-09-15.describe-host-reservation-offerings-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/ip-range-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/ip-range))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-route-table-association-result/new-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/replace-route-table-association-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.replace-route-table-association-result/new-association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-type-values #{"kernel" :ramdisk "machine" "ramdisk" :machine :kernel})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-groups-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-groups-request/group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-groups-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-security-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-security-groups-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-security-groups-request/group-names :portkey.aws.ec2.-2016-09-15.describe-security-groups-request/group-ids :portkey.aws.ec2.-2016-09-15.describe-security-groups-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-instance-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/placement :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/subnet-id :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/group-ids :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/additional-info :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/monitoring :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/architecture :portkey.aws.ec2.-2016-09-15/user-data :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/group-names :portkey.aws.ec2.-2016-09-15.import-instance-launch-specification/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.classic-link-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.classic-link-instance/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.classic-link-instance/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.classic-link-instance/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/classic-link-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.classic-link-instance/instance-id :portkey.aws.ec2.-2016-09-15.classic-link-instance/vpc-id :portkey.aws.ec2.-2016-09-15.classic-link-instance/groups :portkey.aws.ec2.-2016-09-15.classic-link-instance/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.cancel-spot-instance-requests-result/cancelled-spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancelled-spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-requests-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.cancel-spot-instance-requests-result/cancelled-spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-result/import-snapshot-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-snapshot-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-import-snapshot-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-result/import-snapshot-tasks :portkey.aws.ec2.-2016-09-15.describe-import-snapshot-tasks-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-instance-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-request/disk-images (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.import-instance-request/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.import-instance-request/platform] :opt-un [:portkey.aws.ec2.-2016-09-15.import-instance-request/dry-run :portkey.aws.ec2.-2016-09-15.import-instance-request/description :portkey.aws.ec2.-2016-09-15.import-instance-request/launch-specification :portkey.aws.ec2.-2016-09-15.import-instance-request/disk-images]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-classic-link-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-request/vpc-ids :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/authorize-security-group-ingress-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/dry-run :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/to-port :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/source-security-group-name :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/ip-protocol :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/group-name :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/group-id :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/from-port :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/ip-permissions :portkey.aws.ec2.-2016-09-15.authorize-security-group-ingress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instances-block-device-mapping-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/scheduled-instances-block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-error-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-error-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-request/purchase-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.purchase-request/purchase-token :portkey.aws.ec2.-2016-09-15.purchase-request/instance-count] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-request/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-request/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-volume-request/availability-zone] :opt-un [:portkey.aws.ec2.-2016-09-15.create-volume-request/dry-run :portkey.aws.ec2.-2016-09-15.create-volume-request/size :portkey.aws.ec2.-2016-09-15.create-volume-request/snapshot-id :portkey.aws.ec2.-2016-09-15/volume-type :portkey.aws.ec2.-2016-09-15.create-volume-request/iops :portkey.aws.ec2.-2016-09-15.create-volume-request/encrypted :portkey.aws.ec2.-2016-09-15.create-volume-request/kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reserved-instances-modification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-acl-entry-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/network-acl-entry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-dhcp-options-result/dhcp-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/dhcp-options-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-dhcp-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-dhcp-options-result/dhcp-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/ramdisk (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-block-device-mapping-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/kernel (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/blob-attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/dry-run :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/ebs-optimized :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/instance-type :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/ramdisk :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/sriov-net-support :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/source-dest-check :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/attribute :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/value :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/disable-api-termination :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/groups :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/block-device-mappings :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/kernel :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/user-data :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-09-15.modify-instance-attribute-request/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-nat-gateway-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-nat-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/nat-gateway :portkey.aws.ec2.-2016-09-15.create-nat-gateway-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.release-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.release-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.release-address-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/release-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.release-address-request/dry-run :portkey.aws.ec2.-2016-09-15.release-address-request/public-ip :portkey.aws.ec2.-2016-09-15.release-address-request/allocation-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-dns-support-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-classic-link-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpc-classic-link-dns-support-request/vpc-ids :portkey.aws.ec2.-2016-09-15/max-results :portkey.aws.ec2.-2016-09-15/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-private-ip-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/network-interface-private-ip-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/launch-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.image-attribute/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.image-attribute/image-id :portkey.aws.ec2.-2016-09-15.image-attribute/launch-permissions :portkey.aws.ec2.-2016-09-15.image-attribute/product-codes :portkey.aws.ec2.-2016-09-15.image-attribute/kernel-id :portkey.aws.ec2.-2016-09-15.image-attribute/ramdisk-id :portkey.aws.ec2.-2016-09-15.image-attribute/description :portkey.aws.ec2.-2016-09-15.image-attribute/sriov-net-support :portkey.aws.ec2.-2016-09-15.image-attribute/block-device-mappings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/resource-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reject-vpc-peering-connection-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reject-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reject-vpc-peering-connection-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-request/reserved-instances-modification-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-modifications-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-request/reserved-instances-modification-ids :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-request/next-token :portkey.aws.ec2.-2016-09-15.describe-reserved-instances-modifications-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/conversion-task-state #{:completed "completed" "cancelling" "cancelled" :cancelled :active "active" :cancelling})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-interface-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-interface-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-interface-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-interface-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-interface-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-interface-request/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-network-interface-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-09-15.create-network-interface-request/description :portkey.aws.ec2.-2016-09-15.create-network-interface-request/private-ip-address :portkey.aws.ec2.-2016-09-15.create-network-interface-request/groups :portkey.aws.ec2.-2016-09-15.create-network-interface-request/private-ip-addresses :portkey.aws.ec2.-2016-09-15.create-network-interface-request/secondary-private-ip-address-count :portkey.aws.ec2.-2016-09-15.create-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/offering-class-type #{"standard" "convertible" :standard :convertible})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/request-host-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-stale-security-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-stale-security-groups-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-stale-security-groups-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-stale-security-groups-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-stale-security-groups-request/dry-run :portkey.aws.ec2.-2016-09-15/max-results :portkey.aws.ec2.-2016-09-15/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/nat-gateway-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/nat-gateway-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/reserved-instances-modification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/modification-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-instances-modification-result-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reserved-intances-ids))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/update-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/effective-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instances-modification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instances-modification/status-message :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/create-date :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/reserved-instances-modification-id :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/status :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/modification-results :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/reserved-instances-ids :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/update-date :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/effective-date :portkey.aws.ec2.-2016-09-15.reserved-instances-modification/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/listing-status #{:closed :pending "closed" "cancelled" :cancelled :active "active" "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-spot-datafeed-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/spot-datafeed-subscription]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/image-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/bundle-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/bundle-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-route-table-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-route-table-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.create-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-attribute-name #{:instance-initiated-shutdown-behavior "kernel" "groupSet" "productCodes" :group-set :ena-support "blockDeviceMapping" :source-dest-check :disable-api-termination :ramdisk :root-device-name :product-codes "disableApiTermination" :instance-type :ebs-optimized "sourceDestCheck" :user-data "userData" "ebsOptimized" :block-device-mapping "ramdisk" :sriov-net-support "instanceType" :kernel "enaSupport" "rootDeviceName" "instanceInitiatedShutdownBehavior" "sriovNetSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/classic-link-instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/classic-link-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-image-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/import-image-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route-table-association-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/route-table-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.start-instances-result/starting-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/start-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.start-instances-result/starting-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disk-image-format))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-detail/bytes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.disk-image-detail/import-manifest-url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/disk-image-detail (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.disk-image-detail/format :portkey.aws.ec2.-2016-09-15.disk-image-detail/bytes :portkey.aws.ec2.-2016-09-15.disk-image-detail/import-manifest-url] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-data/data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.user-data/data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/offering-type-values #{"All Upfront" :heavy-utilization :no-upfront :medium-utilization :all-upfront :light-utilization :partial-upfront "No Upfront" "Heavy Utilization" "Light Utilization" "Partial Upfront" "Medium Utilization"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/float clojure.core/float?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-result/vpn-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-vpn-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-vpn-gateways-result/vpn-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl/is-default (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl/entries (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-acl-entry-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl/associations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/network-acl-association-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-acl/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-acl (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-acl/network-acl-id :portkey.aws.ec2.-2016-09-15.network-acl/vpc-id :portkey.aws.ec2.-2016-09-15.network-acl/is-default :portkey.aws.ec2.-2016-09-15.network-acl/entries :portkey.aws.ec2.-2016-09-15.network-acl/associations :portkey.aws.ec2.-2016-09-15.network-acl/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-attachment/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-attachment/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-attachment/device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-attachment-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.volume-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/volume-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.volume-attachment/volume-id :portkey.aws.ec2.-2016-09-15.volume-attachment/instance-id :portkey.aws.ec2.-2016-09-15.volume-attachment/device :portkey.aws.ec2.-2016-09-15.volume-attachment/state :portkey.aws.ec2.-2016-09-15.volume-attachment/attach-time :portkey.aws.ec2.-2016-09-15.volume-attachment/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-dhcp-options-request/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.associate-dhcp-options-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/associate-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.associate-dhcp-options-request/dhcp-options-id :portkey.aws.ec2.-2016-09-15.associate-dhcp-options-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.associate-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment-changes/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-attachment-changes/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-attachment-changes (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-interface-attachment-changes/attachment-id :portkey.aws.ec2.-2016-09-15.network-interface-attachment-changes/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table-association/route-table-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table-association/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table-association/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.route-table-association/main (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/route-table-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.route-table-association/route-table-association-id :portkey.aws.ec2.-2016-09-15.route-table-association/route-table-id :portkey.aws.ec2.-2016-09-15.route-table-association/subnet-id :portkey.aws.ec2.-2016-09-15.route-table-association/main]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reject-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reject-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reject-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.reject-vpc-peering-connection-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2016-09-15.reject-vpc-peering-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/private-ip-address-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/routes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-static-route-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/vgw-telemetry (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vgw-telemetry-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-connection/customer-gateway-configuration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-connection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpn-connection/type :portkey.aws.ec2.-2016-09-15.vpn-connection/tags :portkey.aws.ec2.-2016-09-15.vpn-connection/routes :portkey.aws.ec2.-2016-09-15.vpn-connection/customer-gateway-id :portkey.aws.ec2.-2016-09-15.vpn-connection/vpn-gateway-id :portkey.aws.ec2.-2016-09-15.vpn-connection/vgw-telemetry :portkey.aws.ec2.-2016-09-15.vpn-connection/vpn-connection-id :portkey.aws.ec2.-2016-09-15.vpn-connection/state :portkey.aws.ec2.-2016-09-15.vpn-connection/options :portkey.aws.ec2.-2016-09-15.vpn-connection/customer-gateway-configuration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.region/region-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.region/endpoint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/region (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.region/region-name :portkey.aws.ec2.-2016-09-15.region/endpoint]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.state-reason/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.state-reason/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/state-reason (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.state-reason/code :portkey.aws.ec2.-2016-09-15.state-reason/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-association-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-association-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.replace-network-acl-association-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/replace-network-acl-association-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.replace-network-acl-association-request/association-id :portkey.aws.ec2.-2016-09-15.replace-network-acl-association-request/network-acl-id] :opt-un [:portkey.aws.ec2.-2016-09-15.replace-network-acl-association-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.iam-instance-profile/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.iam-instance-profile/id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/iam-instance-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.iam-instance-profile/arn :portkey.aws.ec2.-2016-09-15.iam-instance-profile/id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.enable-vpc-classic-link-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/owner-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/max-term-duration-in-days (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/network-platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instance-recurrence))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/total-scheduled-instance-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/purchase-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/first-slot-start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/available-instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/min-term-duration-in-days (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/scheduled-instance-availability (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/max-term-duration-in-days :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/platform :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/network-platform :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/recurrence :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/instance-type :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/total-scheduled-instance-hours :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/availability-zone :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/hourly-price :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/purchase-token :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/slot-duration-in-hours :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/first-slot-start-time :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/available-instance-count :portkey.aws.ec2.-2016-09-15.scheduled-instance-availability/min-term-duration-in-days]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/scheduled-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/scheduled-instances-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/run-scheduled-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/scheduled-instance-id :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/launch-specification] :opt-un [:portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/client-token :portkey.aws.ec2.-2016-09-15.run-scheduled-instances-request/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-request/spot-instance-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-instance-request-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-instance-requests-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-request/spot-instance-request-ids :portkey.aws.ec2.-2016-09-15.describe-spot-instance-requests-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-permission-modifications/add (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-volume-permission-modifications/remove (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-volume-permission-modifications (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.create-volume-permission-modifications/add :portkey.aws.ec2.-2016-09-15.create-volume-permission-modifications/remove]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.active-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.active-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.active-instance/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/active-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.active-instance/instance-type :portkey.aws.ec2.-2016-09-15.active-instance/instance-id :portkey.aws.ec2.-2016-09-15.active-instance/spot-instance-request-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.attach-internet-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.attach-internet-gateway-request/internet-gateway-id :portkey.aws.ec2.-2016-09-15.attach-internet-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-09-15.attach-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stop-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stop-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.stop-instances-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/stop-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.stop-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-09-15.stop-instances-request/dry-run :portkey.aws.ec2.-2016-09-15.stop-instances-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reason-codes-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/report-instance-reason-codes))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/subnet))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/filter-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/filter))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-groups-result/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-security-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-security-groups-result/security-groups]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.account-attribute-value/attribute-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/account-attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.account-attribute-value/attribute-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpc-peering-connection-state-reason-code #{:deleted :pendingacceptance "expired" "deleting" :rejected "failed" :deleting "initiating-request" "provisioning" :initiatingrequest :active "deleted" :expired :provisioning "pending-acceptance" "active" "rejected" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-permission/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.launch-permission/group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/launch-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.launch-permission/user-id :portkey.aws.ec2.-2016-09-15.launch-permission/group]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/internet-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/internet-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.account-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.account-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/account-attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/account-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.account-attribute/attribute-name :portkey.aws.ec2.-2016-09-15.account-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host/host-reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/allocation-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/host-instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/host-properties :portkey.aws.ec2.-2016-09-15.host/host-id :portkey.aws.ec2.-2016-09-15/available-capacity :portkey.aws.ec2.-2016-09-15.host/availability-zone :portkey.aws.ec2.-2016-09-15/auto-placement :portkey.aws.ec2.-2016-09-15.host/host-reservation-id :portkey.aws.ec2.-2016-09-15.host/state :portkey.aws.ec2.-2016-09-15.host/instances :portkey.aws.ec2.-2016-09-15.host/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-security-group-references-result/security-group-reference-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-references))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-security-group-references-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-security-group-references-result/security-group-reference-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-regions-result/regions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/region-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-regions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-regions-result/regions]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/detach-classic-link-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.detach-classic-link-vpc-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/activity-status #{"error" "pending_termination" :pending-fulfillment :fulfilled :error "fulfilled" "pending_fulfillment" :pending-termination})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.placement-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.placement-group/strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/placement-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.placement-group/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/placement-group-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/placement-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.placement-group/group-name :portkey.aws.ec2.-2016-09-15.placement-group/strategy :portkey.aws.ec2.-2016-09-15.placement-group/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-gateway-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.reserved-instance-reservation-value/reserved-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reserved-instance-reservation-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.reserved-instance-reservation-value/reserved-instance-id :portkey.aws.ec2.-2016-09-15/reservation-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.private-ip-address-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.private-ip-address-specification/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/private-ip-address-specification (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.private-ip-address-specification/private-ip-address] :opt-un [:portkey.aws.ec2.-2016-09-15.private-ip-address-specification/primary]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/request-spot-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/kernel-id :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/security-group-ids :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/image-id :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/placement :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/addressing-type :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/subnet-id :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/security-groups :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/ebs-optimized :portkey.aws.ec2.-2016-09-15/instance-type :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/key-name :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/monitoring :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/block-device-mappings :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/ramdisk-id :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/user-data :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-09-15.request-spot-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reservation-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/reservation))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-vpc-peering-connection-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-vpc-peering-connection-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/limit-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/purchase-host-reservation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/offering-id :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/host-id-set] :opt-un [:portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/limit-price :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/currency-code :portkey.aws.ec2.-2016-09-15.purchase-host-reservation-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-request/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-host-reservation-purchase-preview-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-request/offering-id :portkey.aws.ec2.-2016-09-15.get-host-reservation-purchase-preview-request/host-id-set] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/reset-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/add-route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/remove-route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/modify-vpc-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/vpc-endpoint-id] :opt-un [:portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/dry-run :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/reset-policy :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/policy-document :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/add-route-table-ids :portkey.aws.ec2.-2016-09-15.modify-vpc-endpoint-request/remove-route-table-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-id-group-pair/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-id-group-pair/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-id-group-pair/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-id-group-pair/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-id-group-pair/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.user-id-group-pair/peering-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/user-id-group-pair (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.user-id-group-pair/user-id :portkey.aws.ec2.-2016-09-15.user-id-group-pair/group-name :portkey.aws.ec2.-2016-09-15.user-id-group-pair/group-id :portkey.aws.ec2.-2016-09-15.user-id-group-pair/vpc-id :portkey.aws.ec2.-2016-09-15.user-id-group-pair/vpc-peering-connection-id :portkey.aws.ec2.-2016-09-15.user-id-group-pair/peering-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/response-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/start (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/instance-family (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/host-reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.host-reservation/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reservation-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/host-reservation (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.host-reservation/currency-code :portkey.aws.ec2.-2016-09-15.host-reservation/upfront-price :portkey.aws.ec2.-2016-09-15.host-reservation/host-id-set :portkey.aws.ec2.-2016-09-15.host-reservation/start :portkey.aws.ec2.-2016-09-15.host-reservation/end :portkey.aws.ec2.-2016-09-15.host-reservation/count :portkey.aws.ec2.-2016-09-15/payment-option :portkey.aws.ec2.-2016-09-15.host-reservation/hourly-price :portkey.aws.ec2.-2016-09-15.host-reservation/offering-id :portkey.aws.ec2.-2016-09-15.host-reservation/duration :portkey.aws.ec2.-2016-09-15.host-reservation/instance-family :portkey.aws.ec2.-2016-09-15.host-reservation/host-reservation-id :portkey.aws.ec2.-2016-09-15.host-reservation/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-screenshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-screenshot-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.get-console-screenshot-request/wake-up (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/get-console-screenshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.get-console-screenshot-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-09-15.get-console-screenshot-request/dry-run :portkey.aws.ec2.-2016-09-15.get-console-screenshot-request/wake-up]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/telemetry-status #{:down "UP" "DOWN" :up})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-id-format-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-id-format-request/resource]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/import-task-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-gateway/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-gateway/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-gateway/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-gateway/vpc-attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/vpc-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.vpn-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.vpn-gateway/vpn-gateway-id :portkey.aws.ec2.-2016-09-15.vpn-gateway/state :portkey.aws.ec2.-2016-09-15.vpn-gateway/type :portkey.aws.ec2.-2016-09-15.vpn-gateway/availability-zone :portkey.aws.ec2.-2016-09-15.vpn-gateway/vpc-attachments :portkey.aws.ec2.-2016-09-15.vpn-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-association/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-association/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-association/ip-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-association/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.network-interface-association/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/network-interface-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.network-interface-association/public-ip :portkey.aws.ec2.-2016-09-15.network-interface-association/public-dns-name :portkey.aws.ec2.-2016-09-15.network-interface-association/ip-owner-id :portkey.aws.ec2.-2016-09-15.network-interface-association/allocation-id :portkey.aws.ec2.-2016-09-15.network-interface-association/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/date-time clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-key-pairs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-key-pairs-request/key-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/key-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-key-pairs-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-key-pairs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-key-pairs-request/dry-run :portkey.aws.ec2.-2016-09-15.describe-key-pairs-request/key-names :portkey.aws.ec2.-2016-09-15.describe-key-pairs-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.delete-dhcp-options-request/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/delete-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.delete-dhcp-options-request/dhcp-options-id] :opt-un [:portkey.aws.ec2.-2016-09-15.delete-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-request-history-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/spot-fleet-request-id :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/start-time] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/dry-run :portkey.aws.ec2.-2016-09-15/event-type :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/next-token :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/shutdown-behavior #{"stop" :terminate "terminate" :stop})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.unmonitor-instances-result/instance-monitorings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-monitoring-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/unmonitor-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.unmonitor-instances-result/instance-monitorings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-placement-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-placement-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.create-placement-group-request/strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/placement-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/create-placement-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.create-placement-group-request/group-name :portkey.aws.ec2.-2016-09-15.create-placement-group-request/strategy] :opt-un [:portkey.aws.ec2.-2016-09-15.create-placement-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/instance-network-interface-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/associate-public-ip-address :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/subnet-id :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/network-interface-id :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/device-index :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/description :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/groups :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/delete-on-termination :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/private-ip-addresses :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/secondary-private-ip-address-count :portkey.aws.ec2.-2016-09-15.instance-network-interface-specification/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/attach-vpn-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-09-15/vpc-attachment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/reservation-state #{:retired :paymentfailed :paymentpending :active "payment-pending" "payment-failed" "active" "retired"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/available-instance-capacity-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/instance-capacity))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/last-evaluated-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-request-history-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/spot-fleet-request-id :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/start-time :portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/last-evaluated-time :portkey.aws.ec2.-2016-09-15/history-records] :opt-un [:portkey.aws.ec2.-2016-09-15.describe-spot-fleet-request-history-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/snapshot-state #{:pending :completed "error" "completed" :error "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-09-15/vpn-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-09-15/vpn-gateway))

(clojure.core/defn describe-spot-fleet-instances "Describes the running instances for the specified Spot fleet." ([describe-spot-fleet-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-spot-fleet-instances-request describe-spot-fleet-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-instances-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSpotFleetInstances", :http.request.configuration/output-deser-fn response-describe-spot-fleet-instances-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-instances-response))

(clojure.core/defn get-password-data "Retrieves the encrypted administrator password for an instance running Windows.\n The Windows password is generated at boot if the EC2Config service plugin,\nEc2SetPassword, is enabled. This usually only happens the first time an AMI is\nlaunched, and then Ec2SetPassword is automatically disabled. The password is not\ngenerated for rebundled AMIs unless Ec2SetPassword is enabled before bundling.\n The password is encrypted using the key pair that you specified when you\nlaunched the instance. You must provide the corresponding key pair file.\n Password generation and encryption takes a few moments. We recommend that you\nwait up to 15 minutes after launching an instance before trying to retrieve the\ngenerated password." ([get-password-data-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-password-data-request get-password-data-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/get-password-data-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/get-password-data-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetPasswordData", :http.request.configuration/output-deser-fn response-get-password-data-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-password-data :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/get-password-data-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/get-password-data-result))

(clojure.core/defn describe-import-snapshot-tasks "Describes your import snapshot tasks." ([] (describe-import-snapshot-tasks {})) ([describe-import-snapshot-tasks-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-import-snapshot-tasks-request describe-import-snapshot-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-import-snapshot-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-import-snapshot-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeImportSnapshotTasks", :http.request.configuration/output-deser-fn response-describe-import-snapshot-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-import-snapshot-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-import-snapshot-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-import-snapshot-tasks-result))

(clojure.core/defn modify-subnet-attribute "Modifies a subnet attribute." ([modify-subnet-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-subnet-attribute-request modify-subnet-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-subnet-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifySubnetAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-subnet-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-subnet-attribute-request) :ret clojure.core/true?)

(clojure.core/defn create-network-acl-entry "Creates an entry (a rule) in a network ACL with the specified rule number. Each\nnetwork ACL has a set of numbered ingress rules and a separate set of numbered\negress rules. When determining whether a packet should be allowed in or out of a\nsubnet associated with the ACL, we process the entries in the ACL according to\nthe rule numbers, in ascending order. Each network ACL has a set of ingress\nrules and a separate set of egress rules.\n We recommend that you leave room between the rule numbers (for example, 100,\n110, 120, ...), and not number them one right after the other (for example, 101,\n102, 103, ...). This makes it easier to add a rule between existing ones without\nhaving to renumber the rules.\n After you add an entry, you can't modify it; you must either replace it, or\ncreate an entry and delete the old one.\n For more information about network ACLs, see Network ACLs\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html) in the\nAmazon Virtual Private Cloud User Guide." ([create-network-acl-entry-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-network-acl-entry-request create-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn modify-hosts "Modify the auto-placement setting of a Dedicated Host. When auto-placement is\nenabled, AWS will place instances that you launch with a tenancy of host, but\nwithout targeting a specific host ID, onto any available Dedicated Host in your\naccount which has auto-placement enabled. When auto-placement is disabled, you\nneed to provide a host ID if you want the instance to launch onto a specific\nhost. If no host ID is provided, the instance will be launched onto a suitable\nhost which has auto-placement enabled." ([modify-hosts-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-hosts-request modify-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/modify-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyHosts", :http.request.configuration/output-deser-fn response-modify-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/modify-hosts-result))

(clojure.core/defn describe-instance-status "Describes the status of one or more instances. By default, only running\ninstances are described, unless specified otherwise.\n Instance status includes the following components:\n * Status checks - Amazon EC2 performs status checks on running EC2 instances to\nidentify hardware and software issues. For more information, see Status Checks\nfor Your Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html)\nand Troubleshooting Instances with Failed Status Checks\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html)\nin the Amazon Elastic Compute Cloud User Guide.\n * Scheduled events - Amazon EC2 can schedule events (such as reboot, stop, or\nterminate) for your instances related to hardware issues, software updates, or\nsystem maintenance. For more information, see Scheduled Events for Your\nInstances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html)\nin the Amazon Elastic Compute Cloud User Guide.\n * Instance state - You can manage your instances from the moment you launch\nthem through their termination. For more information, see Instance Lifecycle\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)\nin the Amazon Elastic Compute Cloud User Guide." ([] (describe-instance-status {})) ([describe-instance-status-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-instance-status-request describe-instance-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-instance-status-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-instance-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeInstanceStatus", :http.request.configuration/output-deser-fn response-describe-instance-status-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instance-status :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-instance-status-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-instance-status-result))

(clojure.core/defn accept-vpc-peering-connection "Accept a VPC peering connection request. To accept a request, the VPC peering\nconnection must be in the pending-acceptance state, and you must be the owner of\nthe peer VPC. Use the DescribeVpcPeeringConnections request to view your\noutstanding VPC peering connection requests." ([] (accept-vpc-peering-connection {})) ([accept-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-accept-vpc-peering-connection-request accept-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/accept-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/accept-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AcceptVpcPeeringConnection", :http.request.configuration/output-deser-fn response-accept-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef accept-vpc-peering-connection :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/accept-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/accept-vpc-peering-connection-result))

(clojure.core/defn describe-volumes "Describes the specified EBS volumes.\n If you are describing a long list of volumes, you can paginate the output to\nmake the list more manageable. The MaxResults parameter sets the maximum number\nof results returned in a single page. If the list of results exceeds your\nMaxResults value, then that number of results is returned along with a NextToken\nvalue that can be passed to a subsequent DescribeVolumes request to retrieve the\nremaining results.\n For more information about EBS volumes, see Amazon EBS Volumes\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (describe-volumes {})) ([describe-volumes-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-volumes-request describe-volumes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-volumes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-volumes-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVolumes", :http.request.configuration/output-deser-fn response-describe-volumes-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volumes :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-volumes-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-volumes-result))

(clojure.core/defn describe-key-pairs "Describes one or more of your key pairs.\n For more information about key pairs, see Key Pairs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (describe-key-pairs {})) ([describe-key-pairs-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-key-pairs-request describe-key-pairs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-key-pairs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-key-pairs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeKeyPairs", :http.request.configuration/output-deser-fn response-describe-key-pairs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-key-pairs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-key-pairs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-key-pairs-result))

(clojure.core/defn describe-reserved-instances "Describes one or more of the Reserved Instances that you purchased.\n For more information about Reserved Instances, see Reserved Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html)\nin the Amazon Elastic Compute Cloud User Guide." ([] (describe-reserved-instances {})) ([describe-reserved-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-instances-request describe-reserved-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeReservedInstances", :http.request.configuration/output-deser-fn response-describe-reserved-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-result))

(clojure.core/defn enable-vpc-classic-link-dns-support "Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled,\nthe DNS hostname of a linked EC2-Classic instance resolves to its private IP\naddress when addressed from an instance in the VPC to which it's linked.\nSimilarly, the DNS hostname of an instance in a VPC resolves to its private IP\naddress when addressed from a linked EC2-Classic instance. For more information\nabout ClassicLink, see ClassicLink\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (enable-vpc-classic-link-dns-support {})) ([enable-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-enable-vpc-classic-link-dns-support-request enable-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "EnableVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn response-enable-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-dns-support-result))

(clojure.core/defn delete-placement-group "Deletes the specified placement group. You must terminate all instances in the\nplacement group before you can delete the placement group. For more information\nabout placement groups and cluster instances, see Cluster Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html)\nin the Amazon Elastic Compute Cloud User Guide." ([delete-placement-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-placement-group-request delete-placement-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-placement-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeletePlacementGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-placement-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-placement-group-request) :ret clojure.core/true?)

(clojure.core/defn create-dhcp-options "Creates a set of DHCP options for your VPC. After creating the set, you must\nassociate it with the VPC, causing all existing and new instances that you\nlaunch in the VPC to use this set of DHCP options. The following are the\nindividual DHCP options you can specify. For more information about the options,\nsee RFC 2132 (http://www.ietf.org/rfc/rfc2132.txt).\n * domain-name-servers - The IP addresses of up to four domain name servers, or\nAmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If\nspecifying more than one domain name server, specify the IP addresses in a\nsingle parameter, separated by commas. If you want your instance to receive a\ncustom DNS hostname as specified in domain-name, you must set\ndomain-name-servers to a custom DNS server.\n * domain-name - If you're using AmazonProvidedDNS in \"us-east-1\", specify\n\"ec2.internal\". If you're using AmazonProvidedDNS in another region, specify\n\"region.compute.internal\" (for example, \"ap-northeast-1.compute.internal\").\nOtherwise, specify a domain name (for example, \"MyCompany.com\"). This value is\nused to complete unqualified DNS hostnames. Important: Some Linux operating\nsystems accept multiple domain names separated by spaces. However, Windows and\nother Linux operating systems treat the value as a single domain, which results\nin unexpected behavior. If your DHCP options set is associated with a VPC that\nhas instances with multiple operating systems, specify only one domain name.\n * ntp-servers - The IP addresses of up to four Network Time Protocol (NTP)\nservers.\n * netbios-name-servers - The IP addresses of up to four NetBIOS name servers.\n * netbios-node-type - The NetBIOS node type (1, 2, 4, or 8). We recommend that\nyou specify 2 (broadcast and multicast are not currently supported). For more\ninformation about these node types, see RFC 2132\n(http://www.ietf.org/rfc/rfc2132.txt).\n Your VPC automatically starts out with a set of DHCP options that includes only\na DNS server that we provide (AmazonProvidedDNS). If you create a set of\noptions, and if your VPC has an Internet gateway, make sure to set the\ndomain-name-servers option either to AmazonProvidedDNS or to a domain name\nserver of your choice. For more information about DHCP options, see DHCP Options\nSets\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html) in\nthe Amazon Virtual Private Cloud User Guide." ([create-dhcp-options-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-dhcp-options-request create-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-dhcp-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDhcpOptions", :http.request.configuration/output-deser-fn response-create-dhcp-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-dhcp-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-dhcp-options-result))

(clojure.core/defn create-reserved-instances-listing "Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the\nReserved Instance Marketplace. You can submit one Standard Reserved Instance\nlisting at a time. To get a list of your Standard Reserved Instances, you can\nuse the DescribeReservedInstances operation.\n The Reserved Instance Marketplace matches sellers who want to resell Standard\nReserved Instance capacity that they no longer need with buyers who want to\npurchase additional capacity. Reserved Instances bought and sold through the\nReserved Instance Marketplace work like any other Reserved Instances.\n To sell your Standard Reserved Instances, you must first register as a seller\nin the Reserved Instance Marketplace. After completing the registration process,\nyou can create a Reserved Instance Marketplace listing of some or all of your\nStandard Reserved Instances, and specify the upfront price to receive for them.\nYour Standard Reserved Instance listings then become available for purchase. To\nview the details of your Standard Reserved Instance listing, you can use the\nDescribeReservedInstancesListings operation.\n For more information, see Reserved Instance Marketplace\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([create-reserved-instances-listing-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-reserved-instances-listing-request create-reserved-instances-listing-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-reserved-instances-listing-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-reserved-instances-listing-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateReservedInstancesListing", :http.request.configuration/output-deser-fn response-create-reserved-instances-listing-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-reserved-instances-listing :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-reserved-instances-listing-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-reserved-instances-listing-result))

(clojure.core/defn disassociate-route-table "Disassociates a subnet from a route table.\n After you perform this action, the subnet no longer uses the routes in the\nroute table. Instead, it uses the routes in the VPC's main route table. For more\ninformation about route tables, see Route Tables\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html) in\nthe Amazon Virtual Private Cloud User Guide." ([disassociate-route-table-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-disassociate-route-table-request disassociate-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/disassociate-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisassociateRouteTable", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/disassociate-route-table-request) :ret clojure.core/true?)

(clojure.core/defn import-snapshot "Imports a disk into an EBS snapshot." ([] (import-snapshot {})) ([import-snapshot-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-import-snapshot-request import-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/import-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/import-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ImportSnapshot", :http.request.configuration/output-deser-fn response-import-snapshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-snapshot :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/import-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-snapshot-result))

(clojure.core/defn delete-vpn-connection-route "Deletes the specified static route associated with a VPN connection between an\nexisting virtual private gateway and a VPN customer gateway. The static route\nallows traffic to be routed from the virtual private gateway to the VPN customer\ngateway." ([delete-vpn-connection-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-vpn-connection-route-request delete-vpn-connection-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-vpn-connection-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVpnConnectionRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-connection-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-vpn-connection-route-request) :ret clojure.core/true?)

(clojure.core/defn attach-volume "Attaches an EBS volume to a running or stopped instance and exposes it to the\ninstance with the specified device name.\n Encrypted EBS volumes may only be attached to instances that support Amazon EBS\nencryption. For more information, see Amazon EBS Encryption\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) in the\nAmazon Elastic Compute Cloud User Guide.\n For a list of supported device names, see Attaching an EBS Volume to an\nInstance\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html).\nAny device names that aren't reserved for instance store volumes can be used for\nEBS volumes. For more information, see Amazon EC2 Instance Store\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the\nAmazon Elastic Compute Cloud User Guide.\n If a volume has an AWS Marketplace product code:\n * The volume can be attached only to a stopped instance.\n * AWS Marketplace product codes are copied from the volume to the instance.\n * You must be subscribed to the product.\n * The instance type and operating system of the instance must support the\nproduct. For example, you can't detach a volume from a Windows instance and\nattach it to a Linux instance.\n For an overview of the AWS Marketplace, see Introducing AWS Marketplace\n(https://aws.amazon.com/marketplace/help/200900000).\n For more information about EBS volumes, see Attaching Amazon EBS Volumes\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html)\nin the Amazon Elastic Compute Cloud User Guide." ([attach-volume-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-volume-request attach-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/volume-attachment, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/attach-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachVolume", :http.request.configuration/output-deser-fn response-volume-attachment, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/attach-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-attachment))

(clojure.core/defn delete-security-group "Deletes a security group.\n If you attempt to delete a security group that is associated with an instance,\nor is referenced by another security group, the operation fails with\nInvalidGroup.InUse in EC2-Classic or DependencyViolation in EC2-VPC." ([] (delete-security-group {})) ([delete-security-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-security-group-request delete-security-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-security-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-security-group :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/delete-security-group-request) :ret clojure.core/true?)

(clojure.core/defn delete-key-pair "Deletes the specified key pair, by removing the public key from Amazon EC2." ([delete-key-pair-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-key-pair-request delete-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteKeyPair", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-key-pair-request) :ret clojure.core/true?)

(clojure.core/defn describe-host-reservations "Describes Dedicated Host Reservations which are associated with Dedicated Hosts\nin your account." ([] (describe-host-reservations {})) ([describe-host-reservations-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-host-reservations-request describe-host-reservations-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-host-reservations-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-host-reservations-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeHostReservations", :http.request.configuration/output-deser-fn response-describe-host-reservations-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-host-reservations :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-host-reservations-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-host-reservations-result))

(clojure.core/defn get-console-output "Gets the console output for the specified instance.\n Instances do not have a physical monitor through which you can view their\nconsole output. They also lack physical controls that allow you to power up,\nreboot, or shut them down. To allow these actions, we provide them through the\nAmazon EC2 API and command line interface.\n Instance console output is buffered and posted shortly after instance boot,\nreboot, and termination. Amazon EC2 preserves the most recent 64 KB output which\nis available for at least one hour after the most recent post.\n For Linux instances, the instance console output displays the exact console\noutput that would normally be displayed on a physical monitor attached to a\ncomputer. This output is buffered because the instance produces it and then\nposts it to a store where the instance's owner can retrieve it.\n For Windows instances, the instance console output includes output from the\nEC2Config service." ([get-console-output-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-console-output-request get-console-output-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/get-console-output-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/get-console-output-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetConsoleOutput", :http.request.configuration/output-deser-fn response-get-console-output-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-console-output :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/get-console-output-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/get-console-output-result))

(clojure.core/defn reset-instance-attribute "Resets an attribute of an instance to its default value. To reset the kernel or\nramdisk, the instance must be in a stopped state. To reset the sourceDestCheck,\nthe instance can be either running or stopped.\n The sourceDestCheck attribute controls whether source/destination checking is\nenabled. The default value is true, which means checking is enabled. This value\nmust be false for a NAT instance to perform NAT. For more information, see NAT\nInstances\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html) in\nthe Amazon Virtual Private Cloud User Guide." ([reset-instance-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-instance-attribute-request reset-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/reset-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ResetInstanceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/reset-instance-attribute-request) :ret clojure.core/true?)

(clojure.core/defn modify-vpc-attribute "Modifies the specified attribute of the specified VPC." ([modify-vpc-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-vpc-attribute-request modify-vpc-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-vpc-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyVpcAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-vpc-attribute-request) :ret clojure.core/true?)

(clojure.core/defn describe-volume-status "Describes the status of the specified volumes. Volume status provides the result\nof the checks performed on your volumes to determine events that can impair the\nperformance of your volumes. The performance of a volume can be affected if an\nissue occurs on the volume's underlying host. If the volume's underlying host\nexperiences a power outage or system issue, after the system is restored, there\ncould be data inconsistencies on the volume. Volume events notify you if this\noccurs. Volume actions notify you if any action needs to be taken in response to\nthe event.\n The DescribeVolumeStatus operation provides the following information about the\nspecified volumes:\n Status: Reflects the current status of the volume. The possible values are ok,\nimpaired , warning, or insufficient-data. If all checks pass, the overall status\nof the volume is ok. If the check fails, the overall status is impaired. If the\nstatus is insufficient-data, then the checks may still be taking place on your\nvolume at the time. We recommend that you retry the request. For more\ninformation on volume status, see Monitoring the Status of Your Volumes\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html).\n Events: Reflect the cause of a volume status and may require you to take\naction. For example, if your volume returns an impaired status, then the volume\nevent might be potential-data-inconsistency. This means that your volume has\nbeen affected by an issue with the underlying host, has all I/O operations\ndisabled, and may have inconsistent data.\n Actions: Reflect the actions you may have to take in response to an event. For\nexample, if the status of the volume is impaired and the volume event shows\npotential-data-inconsistency, then the action shows enable-volume-io. This means\nthat you may want to enable the I/O operations for the volume by calling the\nEnableVolumeIO action and then check the volume for data consistency.\n Volume status is based on the volume status checks, and does not reflect the\nvolume state. Therefore, volume status does not indicate volumes in the error\nstate (for example, when a volume is incapable of accepting I/O.)" ([] (describe-volume-status {})) ([describe-volume-status-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-volume-status-request describe-volume-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-volume-status-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-volume-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVolumeStatus", :http.request.configuration/output-deser-fn response-describe-volume-status-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volume-status :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-volume-status-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-volume-status-result))

(clojure.core/defn describe-conversion-tasks "Describes one or more of your conversion tasks. For more information, see the VM\nImport/Export User Guide\n(http://docs.aws.amazon.com/vm-import/latest/userguide/).\n For information about the import manifest referenced by this API action, see VM\nImport Manifest\n(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html)." ([] (describe-conversion-tasks {})) ([describe-conversion-tasks-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-conversion-tasks-request describe-conversion-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-conversion-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-conversion-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeConversionTasks", :http.request.configuration/output-deser-fn response-describe-conversion-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-conversion-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-conversion-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-conversion-tasks-result))

(clojure.core/defn delete-network-acl-entry "Deletes the specified ingress or egress entry (rule) from the specified network\nACL." ([delete-network-acl-entry-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-network-acl-entry-request delete-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn create-volume "Creates an EBS volume that can be attached to an instance in the same\nAvailability Zone. The volume is created in the regional endpoint that you send\nthe HTTP request to. For more information see Regions and Endpoints\n(http://docs.aws.amazon.com/general/latest/gr/rande.html).\n You can create a new empty volume or restore a volume from an EBS snapshot. Any\nAWS Marketplace product codes from the snapshot are propagated to the volume.\n You can create encrypted volumes with the Encrypted parameter. Encrypted\nvolumes may only be attached to instances that support Amazon EBS encryption.\nVolumes that are created from encrypted snapshots are also automatically\nencrypted. For more information, see Amazon EBS Encryption\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) in the\nAmazon Elastic Compute Cloud User Guide.\n For more information, see Creating or Restoring an Amazon EBS Volume\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([create-volume-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-volume-request create-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/volume, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateVolume", :http.request.configuration/output-deser-fn response-volume, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume))

(clojure.core/defn enable-vgw-route-propagation "Enables a virtual private gateway (VGW) to propagate routes to the specified\nroute table of a VPC." ([enable-vgw-route-propagation-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-enable-vgw-route-propagation-request enable-vgw-route-propagation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/enable-vgw-route-propagation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "EnableVgwRoutePropagation", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vgw-route-propagation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/enable-vgw-route-propagation-request) :ret clojure.core/true?)

(clojure.core/defn replace-network-acl-association "Changes which network ACL a subnet is associated with. By default when you\ncreate a subnet, it's automatically associated with the default network ACL. For\nmore information about network ACLs, see Network ACLs\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html) in the\nAmazon Virtual Private Cloud User Guide." ([replace-network-acl-association-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-replace-network-acl-association-request replace-network-acl-association-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/replace-network-acl-association-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/replace-network-acl-association-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ReplaceNetworkAclAssociation", :http.request.configuration/output-deser-fn response-replace-network-acl-association-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-network-acl-association :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/replace-network-acl-association-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/replace-network-acl-association-result))

(clojure.core/defn modify-reserved-instances "Modifies the Availability Zone, instance count, instance type, or network\nplatform (EC2-Classic or EC2-VPC) of your Standard Reserved Instances. The\nReserved Instances to be modified must be identical, except for Availability\nZone, network platform, and instance type.\n For more information, see Modifying Reserved Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html) in the\nAmazon Elastic Compute Cloud User Guide." ([modify-reserved-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-reserved-instances-request modify-reserved-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/modify-reserved-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-reserved-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyReservedInstances", :http.request.configuration/output-deser-fn response-modify-reserved-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-reserved-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-reserved-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/modify-reserved-instances-result))

(clojure.core/defn describe-reserved-instances-modifications "Describes the modifications made to your Reserved Instances. If no parameter is\nspecified, information about all your Reserved Instances modification requests\nis returned. If a modification ID is specified, only information about the\nspecific modification is returned.\n For more information, see Modifying Reserved Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (describe-reserved-instances-modifications {})) ([describe-reserved-instances-modifications-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-instances-modifications-request describe-reserved-instances-modifications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-modifications-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeReservedInstancesModifications", :http.request.configuration/output-deser-fn response-describe-reserved-instances-modifications-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-modifications :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-modifications-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-modifications-result))

(clojure.core/defn create-route-table "Creates a route table for the specified VPC. After you create a route table, you\ncan add routes and associate the table with a subnet.\n For more information about route tables, see Route Tables\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html) in\nthe Amazon Virtual Private Cloud User Guide." ([create-route-table-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-route-table-request create-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-route-table-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateRouteTable", :http.request.configuration/output-deser-fn response-create-route-table-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-route-table-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-route-table-result))

(clojure.core/defn disassociate-address "Disassociates an Elastic IP address from the instance or network interface it's\nassociated with.\n An Elastic IP address is for use in either the EC2-Classic platform or in a\nVPC. For more information, see Elastic IP Addresses\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)\nin the Amazon Elastic Compute Cloud User Guide.\n This is an idempotent operation. If you perform the operation more than once,\nAmazon EC2 doesn't return an error." ([] (disassociate-address {})) ([disassociate-address-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-disassociate-address-request disassociate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/disassociate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisassociateAddress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/disassociate-address-request) :ret clojure.core/true?)

(clojure.core/defn describe-network-interface-attribute "Describes a network interface attribute. You can specify only one attribute at a\ntime." ([describe-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-network-interface-attribute-request describe-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-network-interface-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn response-describe-network-interface-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-network-interface-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-network-interface-attribute-result))

(clojure.core/defn describe-prefix-lists "Describes available AWS services in a prefix list format, which includes the\nprefix list name and prefix list ID of the service and the IP address range for\nthe service. A prefix list ID is required for creating an outbound security\ngroup rule that allows traffic from a VPC to access an AWS service through a VPC\nendpoint." ([] (describe-prefix-lists {})) ([describe-prefix-lists-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-prefix-lists-request describe-prefix-lists-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-prefix-lists-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-prefix-lists-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribePrefixLists", :http.request.configuration/output-deser-fn response-describe-prefix-lists-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-prefix-lists :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-prefix-lists-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-prefix-lists-result))

(clojure.core/defn describe-availability-zones "Describes one or more of the Availability Zones that are available to you. The\nresults include zones only for the region you're currently using. If there is an\nevent impacting an Availability Zone, you can use this request to view the state\nand any provided message for that Availability Zone.\n For more information, see Regions and Availability Zones\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html)\nin the Amazon Elastic Compute Cloud User Guide." ([] (describe-availability-zones {})) ([describe-availability-zones-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-availability-zones-request describe-availability-zones-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-availability-zones-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-availability-zones-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeAvailabilityZones", :http.request.configuration/output-deser-fn response-describe-availability-zones-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-availability-zones :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-availability-zones-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-availability-zones-result))

(clojure.core/defn create-route "Creates a route in a route table within a VPC.\n You must specify one of the following targets: Internet gateway or virtual\nprivate gateway, NAT instance, NAT gateway, VPC peering connection, or network\ninterface.\n When determining how to route traffic, we use the route with the most specific\nmatch. For example, let's say the traffic is destined for 192.0.2.3, and the\nroute table includes the following two routes:\n * 192.0.2.0/24 (goes to some target A)\n * 192.0.2.0/28 (goes to some target B)\n Both routes apply to the traffic destined for 192.0.2.3. However, the second\nroute in the list covers a smaller number of IP addresses and is therefore more\nspecific, so we use that route to determine where to target the traffic.\n For more information about route tables, see Route Tables\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html) in\nthe Amazon Virtual Private Cloud User Guide." ([create-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-route-request create-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-route-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateRoute", :http.request.configuration/output-deser-fn response-create-route-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-route-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-route-result))

(clojure.core/defn create-nat-gateway "Creates a NAT gateway in the specified subnet. A NAT gateway can be used to\nenable instances in a private subnet to connect to the Internet. This action\ncreates a network interface in the specified subnet with a private IP address\nfrom the IP address range of the subnet. For more information, see NAT Gateways\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html) in\nthe Amazon Virtual Private Cloud User Guide." ([create-nat-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-nat-gateway-request create-nat-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-nat-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-nat-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateNatGateway", :http.request.configuration/output-deser-fn response-create-nat-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-nat-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-nat-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-nat-gateway-result))

(clojure.core/defn describe-snapshot-attribute "Describes the specified attribute of the specified snapshot. You can specify\nonly one attribute at a time.\n For more information about EBS snapshots, see Amazon EBS Snapshots\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html) in the\nAmazon Elastic Compute Cloud User Guide." ([describe-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-snapshot-attribute-request describe-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSnapshotAttribute", :http.request.configuration/output-deser-fn response-describe-snapshot-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-snapshot-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-snapshot-attribute-result))

(clojure.core/defn delete-customer-gateway "Deletes the specified customer gateway. You must delete the VPN connection\nbefore you can delete the customer gateway." ([delete-customer-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-customer-gateway-request delete-customer-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-customer-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCustomerGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-customer-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-customer-gateway-request) :ret clojure.core/true?)

(clojure.core/defn detach-network-interface "Detaches a network interface from an instance." ([detach-network-interface-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-network-interface-request detach-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/detach-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachNetworkInterface", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/detach-network-interface-request) :ret clojure.core/true?)

(clojure.core/defn attach-internet-gateway "Attaches an Internet gateway to a VPC, enabling connectivity between the\nInternet and the VPC. For more information about your VPC and Internet gateway,\nsee the Amazon Virtual Private Cloud User Guide\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/)." ([attach-internet-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-internet-gateway-request attach-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/attach-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/attach-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn associate-address "Associates an Elastic IP address with an instance or a network interface.\n An Elastic IP address is for use in either the EC2-Classic platform or in a\nVPC. For more information, see Elastic IP Addresses\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)\nin the Amazon Elastic Compute Cloud User Guide.\n [EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is\nalready associated with a different instance, it is disassociated from that\ninstance and associated with the specified instance.\n [VPC in an EC2-Classic account] If you don't specify a private IP address, the\nElastic IP address is associated with the primary IP address. If the Elastic IP\naddress is already associated with a different instance or a network interface,\nyou get an error unless you allow reassociation.\n This is an idempotent operation. If you perform the operation more than once,\nAmazon EC2 doesn't return an error, and you may be charged for each time the\nElastic IP address is remapped to the same instance. For more information, see\nthe Elastic IP Addresses section of Amazon EC2 Pricing\n(http://aws.amazon.com/ec2/pricing/)." ([] (associate-address {})) ([associate-address-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-associate-address-request associate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/associate-address-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/associate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssociateAddress", :http.request.configuration/output-deser-fn response-associate-address-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/associate-address-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/associate-address-result))

(clojure.core/defn delete-tags "Deletes the specified set of tags from the specified set of resources. This call\nis designed to follow a DescribeTags request.\n For more information about tags, see Tagging Your Resources\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html) in the\nAmazon Elastic Compute Cloud User Guide." ([delete-tags-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-tags-request delete-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteTags", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-tags :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-tags-request) :ret clojure.core/true?)

(clojure.core/defn describe-moving-addresses "Describes your Elastic IP addresses that are being moved to the EC2-VPC\nplatform, or that are being restored to the EC2-Classic platform. This request\ndoes not return information about any other Elastic IP addresses in your\naccount." ([] (describe-moving-addresses {})) ([describe-moving-addresses-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-moving-addresses-request describe-moving-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-moving-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-moving-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeMovingAddresses", :http.request.configuration/output-deser-fn response-describe-moving-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-moving-addresses :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-moving-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-moving-addresses-result))

(clojure.core/defn modify-instance-attribute "Modifies the specified attribute of the specified instance. You can specify only\none attribute at a time.\n To modify some attributes, the instance must be stopped. For more information,\nsee Modifying Attributes of a Stopped Instance\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html)\nin the Amazon Elastic Compute Cloud User Guide." ([modify-instance-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-instance-attribute-request modify-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyInstanceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-instance-attribute-request) :ret clojure.core/true?)

(clojure.core/defn cancel-export-task "Cancels an active export task. The request removes all artifacts of the export,\nincluding any partially-created Amazon S3 objects. If the export task is\ncomplete or is in the process of transferring the final disk image, the command\nfails and returns an error." ([cancel-export-task-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-cancel-export-task-request cancel-export-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/cancel-export-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CancelExportTask", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-export-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/cancel-export-task-request) :ret clojure.core/true?)

(clojure.core/defn describe-images "Describes one or more of the images (AMIs, AKIs, and ARIs) available to you.\nImages available to you include public images, private images that you own, and\nprivate images owned by other AWS accounts but for which you have explicit\nlaunch permissions.\n Deregistered images are included in the returned results for an unspecified\ninterval after deregistration." ([] (describe-images {})) ([describe-images-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-images-request describe-images-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-images-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-images-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeImages", :http.request.configuration/output-deser-fn response-describe-images-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-images :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-images-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-images-result))

(clojure.core/defn describe-instance-attribute "Describes the specified attribute of the specified instance. You can specify\nonly one attribute at a time. Valid attribute values are: instanceType | kernel\n| ramdisk | userData | disableApiTermination | instanceInitiatedShutdownBehavior\n| rootDeviceName | blockDeviceMapping | productCodes | sourceDestCheck |\ngroupSet | ebsOptimized | sriovNetSupport" ([describe-instance-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-instance-attribute-request describe-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/instance-attribute, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeInstanceAttribute", :http.request.configuration/output-deser-fn response-instance-attribute, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-instance-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/instance-attribute))

(clojure.core/defn describe-id-format "Describes the ID format settings for your resources on a per-region basis, for\nexample, to view which resource types are enabled for longer IDs. This request\nonly returns information about resource types whose ID formats can be modified;\nit does not return information about other resource types.\n The following resource types support longer IDs: instance | reservation |\nsnapshot | volume.\n These settings apply to the IAM user who makes the request; they do not apply\nto the entire AWS account. By default, an IAM user defaults to the same settings\nas the root user, unless they explicitly override the settings by running the\nModifyIdFormat command. Resources created with longer IDs are visible to all IAM\nusers, regardless of these settings and provided that they have permission to\nuse the relevant Describe command for the resource type." ([] (describe-id-format {})) ([describe-id-format-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-id-format-request describe-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-id-format-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeIdFormat", :http.request.configuration/output-deser-fn response-describe-id-format-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-id-format :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-id-format-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-id-format-result))

(clojure.core/defn reset-network-interface-attribute "Resets a network interface attribute. You can specify only one attribute at a\ntime." ([reset-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-network-interface-attribute-request reset-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/reset-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ResetNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/reset-network-interface-attribute-request) :ret clojure.core/true?)

(clojure.core/defn describe-reserved-instances-listings "Describes your account's Reserved Instance listings in the Reserved Instance\nMarketplace.\n The Reserved Instance Marketplace matches sellers who want to resell Reserved\nInstance capacity that they no longer need with buyers who want to purchase\nadditional capacity. Reserved Instances bought and sold through the Reserved\nInstance Marketplace work like any other Reserved Instances.\n As a seller, you choose to list some or all of your Reserved Instances, and you\nspecify the upfront price to receive for them. Your Reserved Instances are then\nlisted in the Reserved Instance Marketplace and are available for purchase.\n As a buyer, you specify the configuration of the Reserved Instance to purchase,\nand the Marketplace matches what you're searching for with what's available. The\nMarketplace first sells the lowest priced Reserved Instances to you, and\ncontinues to sell available Reserved Instance listings to you until your demand\nis met. You are charged based on the total price of all of the listings that you\npurchase.\n For more information, see Reserved Instance Marketplace\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([] (describe-reserved-instances-listings {})) ([describe-reserved-instances-listings-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-instances-listings-request describe-reserved-instances-listings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-listings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-listings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeReservedInstancesListings", :http.request.configuration/output-deser-fn response-describe-reserved-instances-listings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-listings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-listings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-listings-result))

(clojure.core/defn describe-security-group-references "[EC2-VPC only] Describes the VPCs on the other side of a VPC peering connection\nthat are referencing the security groups you've specified in this request." ([describe-security-group-references-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-security-group-references-request describe-security-group-references-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-security-group-references-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-security-group-references-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSecurityGroupReferences", :http.request.configuration/output-deser-fn response-describe-security-group-references-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-security-group-references :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-security-group-references-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-security-group-references-result))

(clojure.core/defn associate-dhcp-options "Associates a set of DHCP options (that you've previously created) with the\nspecified VPC, or associates no DHCP options with the VPC.\n After you associate the options with the VPC, any existing instances and all\nnew instances that you launch in that VPC use the options. You don't need to\nrestart or relaunch the instances. They automatically pick up the changes within\na few hours, depending on how frequently the instance renews its DHCP lease. You\ncan explicitly renew the lease using the operating system on the instance.\n For more information, see DHCP Options Sets\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html) in\nthe Amazon Virtual Private Cloud User Guide." ([associate-dhcp-options-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-associate-dhcp-options-request associate-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/associate-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssociateDhcpOptions", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/associate-dhcp-options-request) :ret clojure.core/true?)

(clojure.core/defn create-tags "Adds or overwrites one or more tags for the specified Amazon EC2 resource or\nresources. Each resource can have a maximum of 50 tags. Each tag consists of a\nkey and optional value. Tag keys must be unique per resource.\n For more information about tags, see Tagging Your Resources\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html) in the\nAmazon Elastic Compute Cloud User Guide. For more information about creating IAM\npolicies that control users' access to resources based on tags, see Supported\nResource-Level Permissions for Amazon EC2 API Actions\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html)\nin the Amazon Elastic Compute Cloud User Guide." ([create-tags-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-tags-request create-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateTags", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-tags :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-tags-request) :ret clojure.core/true?)

(clojure.core/defn revoke-security-group-ingress "Removes one or more ingress rules from a security group. The values that you\nspecify in the revoke request (for example, ports) must match the existing\nrule's values for the rule to be removed.\n Each rule consists of the protocol and the CIDR range or source security group.\nFor the TCP and UDP protocols, you must also specify the destination port or\nrange of ports. For the ICMP protocol, you must also specify the ICMP type and\ncode.\n Rule changes are propagated to instances within the security group as quickly\nas possible. However, a small delay might occur." ([] (revoke-security-group-ingress {})) ([revoke-security-group-ingress-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-revoke-security-group-ingress-request revoke-security-group-ingress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/revoke-security-group-ingress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RevokeSecurityGroupIngress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef revoke-security-group-ingress :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/revoke-security-group-ingress-request) :ret clojure.core/true?)

(clojure.core/defn authorize-security-group-ingress "Adds one or more ingress rules to a security group.\n EC2-Classic: You can have up to 100 rules per group.\n EC2-VPC: You can have up to 50 rules per group (covering both ingress and\negress rules).\n Rule changes are propagated to instances within the security group as quickly\nas possible. However, a small delay might occur.\n [EC2-Classic] This action gives one or more CIDR IP address ranges permission\nto access a security group in your account, or gives one or more security groups\n(called the source groups) permission to access a security group for your\naccount. A source group can be for your own AWS account, or another.\n [EC2-VPC] This action gives one or more CIDR IP address ranges permission to\naccess a security group in your VPC, or gives one or more other security groups\n(called the source groups) permission to access a security group for your VPC.\nThe security groups must all be for the same VPC." ([] (authorize-security-group-ingress {})) ([authorize-security-group-ingress-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-authorize-security-group-ingress-request authorize-security-group-ingress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/authorize-security-group-ingress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AuthorizeSecurityGroupIngress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef authorize-security-group-ingress :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/authorize-security-group-ingress-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-endpoint-services "Describes all supported AWS services that can be specified when creating a VPC\nendpoint." ([] (describe-vpc-endpoint-services {})) ([describe-vpc-endpoint-services-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpc-endpoint-services-request describe-vpc-endpoint-services-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoint-services-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoint-services-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpcEndpointServices", :http.request.configuration/output-deser-fn response-describe-vpc-endpoint-services-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoint-services :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoint-services-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoint-services-result))

(clojure.core/defn create-snapshot "Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use\nsnapshots for backups, to make copies of EBS volumes, and to save data before\nshutting down an instance.\n When a snapshot is created, any AWS Marketplace product codes that are\nassociated with the source volume are propagated to the snapshot.\n You can take a snapshot of an attached volume that is in use. However,\nsnapshots only capture data that has been written to your EBS volume at the time\nthe snapshot command is issued; this may exclude any data that has been cached\nby any applications or the operating system. If you can pause any file systems\non the volume long enough to take a snapshot, your snapshot should be complete.\nHowever, if you cannot pause all file writes to the volume, you should unmount\nthe volume from within the instance, issue the snapshot command, and then\nremount the volume to ensure a consistent and complete snapshot. You may remount\nand use your volume while the snapshot status is pending.\n To create a snapshot for EBS volumes that serve as root devices, you should\nstop the instance before taking the snapshot.\n Snapshots that are taken from encrypted volumes are automatically encrypted.\nVolumes that are created from encrypted snapshots are also automatically\nencrypted. Your encrypted volumes and any associated snapshots always remain\nprotected.\n For more information, see Amazon Elastic Block Store\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html) and Amazon\nEBS Encryption\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) in the\nAmazon Elastic Compute Cloud User Guide." ([create-snapshot-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-snapshot-request create-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/snapshot, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSnapshot", :http.request.configuration/output-deser-fn response-snapshot, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/snapshot))

(clojure.core/defn import-key-pair "Imports the public key from an RSA key pair that you created with a third-party\ntool. Compare this with CreateKeyPair, in which AWS creates the key pair and\ngives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair,\nyou create the key pair and give AWS just the public key. The private key is\nnever transferred between you and AWS.\n For more information about key pairs, see Key Pairs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the\nAmazon Elastic Compute Cloud User Guide." ([import-key-pair-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-import-key-pair-request import-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/import-key-pair-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/import-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ImportKeyPair", :http.request.configuration/output-deser-fn response-import-key-pair-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/import-key-pair-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-key-pair-result))

(clojure.core/defn describe-export-tasks "Describes one or more of your export tasks." ([] (describe-export-tasks {})) ([describe-export-tasks-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-export-tasks-request describe-export-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-export-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-export-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeExportTasks", :http.request.configuration/output-deser-fn response-describe-export-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-export-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-export-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-export-tasks-result))

(clojure.core/defn describe-volume-attribute "Describes the specified attribute of the specified volume. You can specify only\none attribute at a time.\n For more information about EBS volumes, see Amazon EBS Volumes\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html) in the\nAmazon Elastic Compute Cloud User Guide." ([describe-volume-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-volume-attribute-request describe-volume-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-volume-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-volume-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVolumeAttribute", :http.request.configuration/output-deser-fn response-describe-volume-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volume-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-volume-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-volume-attribute-result))

(clojure.core/defn describe-scheduled-instances "Describes one or more of your Scheduled Instances." ([] (describe-scheduled-instances {})) ([describe-scheduled-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-scheduled-instances-request describe-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeScheduledInstances", :http.request.configuration/output-deser-fn response-describe-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-scheduled-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-scheduled-instances-result))

(clojure.core/defn describe-spot-datafeed-subscription "Describes the data feed for Spot instances. For more information, see Spot\nInstance Data Feed\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (describe-spot-datafeed-subscription {})) ([describe-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-spot-datafeed-subscription-request describe-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-spot-datafeed-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSpotDatafeedSubscription", :http.request.configuration/output-deser-fn response-describe-spot-datafeed-subscription-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-datafeed-subscription :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-spot-datafeed-subscription-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-spot-datafeed-subscription-result))

(clojure.core/defn delete-vpn-gateway "Deletes the specified virtual private gateway. We recommend that before you\ndelete a virtual private gateway, you detach it from the VPC and delete the VPN\nconnection. Note that you don't need to delete the virtual private gateway if\nyou plan to delete and recreate the VPN connection between your VPC and your\nnetwork." ([delete-vpn-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-vpn-gateway-request delete-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVpnGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-vpn-gateway-request) :ret clojure.core/true?)

(clojure.core/defn purchase-host-reservation "Purchase a reservation with configurations that match those of your Dedicated\nHost. You must have active Dedicated Hosts in your account before you purchase a\nreservation. This action results in the specified reservation being purchased\nand charged to your account." ([purchase-host-reservation-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-purchase-host-reservation-request purchase-host-reservation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/purchase-host-reservation-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/purchase-host-reservation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PurchaseHostReservation", :http.request.configuration/output-deser-fn response-purchase-host-reservation-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-host-reservation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/purchase-host-reservation-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/purchase-host-reservation-result))

(clojure.core/defn reject-vpc-peering-connection "Rejects a VPC peering connection request. The VPC peering connection must be in\nthe pending-acceptance state. Use the DescribeVpcPeeringConnections request to\nview your outstanding VPC peering connection requests. To delete an active VPC\npeering connection, or to delete a VPC peering connection request that you\ninitiated, use DeleteVpcPeeringConnection." ([reject-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-reject-vpc-peering-connection-request reject-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/reject-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/reject-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RejectVpcPeeringConnection", :http.request.configuration/output-deser-fn response-reject-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reject-vpc-peering-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/reject-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reject-vpc-peering-connection-result))

(clojure.core/defn reboot-instances "Requests a reboot of one or more instances. This operation is asynchronous; it\nonly queues a request to reboot the specified instances. The operation succeeds\nif the instances are valid and belong to you. Requests to reboot terminated\ninstances are ignored.\n If an instance does not cleanly shut down within four minutes, Amazon EC2\nperforms a hard reboot.\n For more information about troubleshooting, see Getting Console Output and\nRebooting Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([reboot-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-reboot-instances-request reboot-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/reboot-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RebootInstances", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reboot-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/reboot-instances-request) :ret clojure.core/true?)

(clojure.core/defn describe-dhcp-options "Describes one or more of your DHCP options sets.\n For more information about DHCP options sets, see DHCP Options Sets\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html) in\nthe Amazon Virtual Private Cloud User Guide." ([] (describe-dhcp-options {})) ([describe-dhcp-options-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-dhcp-options-request describe-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-dhcp-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeDhcpOptions", :http.request.configuration/output-deser-fn response-describe-dhcp-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-dhcp-options :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-dhcp-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-dhcp-options-result))

(clojure.core/defn delete-volume "Deletes the specified EBS volume. The volume must be in the available state (not\nattached to an instance).\n The volume may remain in the deleting state for several minutes.\n For more information, see Deleting an Amazon EBS Volume\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([delete-volume-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-volume-request delete-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVolume", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-volume-request) :ret clojure.core/true?)

(clojure.core/defn allocate-hosts "Allocates a Dedicated Host to your account. At minimum you need to specify the\ninstance size type, Availability Zone, and quantity of hosts you want to\nallocate." ([allocate-hosts-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-allocate-hosts-request allocate-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/allocate-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/allocate-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AllocateHosts", :http.request.configuration/output-deser-fn response-allocate-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef allocate-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/allocate-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/allocate-hosts-result))

(clojure.core/defn describe-spot-fleet-request-history "Describes the events for the specified Spot fleet request during the specified\ntime.\n Spot fleet events are delayed by up to 30 seconds before they can be described.\nThis ensures that you can query by the last evaluated time and not miss a\nrecorded event." ([describe-spot-fleet-request-history-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-spot-fleet-request-history-request describe-spot-fleet-request-history-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-request-history-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-request-history-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSpotFleetRequestHistory", :http.request.configuration/output-deser-fn response-describe-spot-fleet-request-history-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-request-history :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-request-history-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-request-history-response))

(clojure.core/defn register-image "Registers an AMI. When you're creating an AMI, this is the final step you must\ncomplete before you can launch an instance from the AMI. For more information\nabout creating AMIs, see Creating Your Own AMIs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html) in the\nAmazon Elastic Compute Cloud User Guide.\n For Amazon EBS-backed instances, CreateImage creates and registers the AMI in a\nsingle request, so you don't have to register the AMI yourself.\n You can also use RegisterImage to create an Amazon EBS-backed Linux AMI from a\nsnapshot of a root device volume. For more information, see Launching an\nInstance from a Snapshot\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_LaunchingInstanceFromSnapshot.html)\nin the Amazon Elastic Compute Cloud User Guide.\n Some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE\nLinux Enterprise Server (SLES), use the EC2 billingProduct code associated with\nan AMI to verify subscription status for package updates. Creating an AMI from\nan EBS snapshot does not maintain this billing code, and subsequent instances\nlaunched from such an AMI will not be able to connect to package update\ninfrastructure.\n Similarly, although you can create a Windows AMI from a snapshot, you can't\nsuccessfully launch an instance from the AMI.\n To create Windows AMIs or to create AMIs for Linux operating systems that must\nretain AMI billing codes to work properly, see CreateImage.\n If needed, you can deregister an AMI at any time. Any modifications you make to\nan AMI backed by an instance store volume invalidates its registration. If you\nmake changes to an image, deregister the previous image and register the new\nimage.\n You can't register an image where a secondary (non-root) snapshot has AWS\nMarketplace product codes." ([register-image-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-register-image-request register-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/register-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/register-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RegisterImage", :http.request.configuration/output-deser-fn response-register-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef register-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/register-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/register-image-result))

(clojure.core/defn assign-private-ip-addresses "Assigns one or more secondary private IP addresses to the specified network\ninterface. You can specify one or more specific secondary IP addresses, or you\ncan specify the number of secondary IP addresses to be automatically assigned\nwithin the subnet's CIDR block range. The number of secondary IP addresses that\nyou can assign to an instance varies by instance type. For information about\ninstance types, see Instance Types\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the\nAmazon Elastic Compute Cloud User Guide. For more information about Elastic IP\naddresses, see Elastic IP Addresses\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)\nin the Amazon Elastic Compute Cloud User Guide.\n AssignPrivateIpAddresses is available only in EC2-VPC." ([assign-private-ip-addresses-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-assign-private-ip-addresses-request assign-private-ip-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/assign-private-ip-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssignPrivateIpAddresses", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef assign-private-ip-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/assign-private-ip-addresses-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpn-gateways "Describes one or more of your virtual private gateways.\n For more information about virtual private gateways, see Adding an IPsec\nHardware VPN to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide." ([] (describe-vpn-gateways {})) ([describe-vpn-gateways-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpn-gateways-request describe-vpn-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpn-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpn-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpnGateways", :http.request.configuration/output-deser-fn response-describe-vpn-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpn-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpn-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpn-gateways-result))

(clojure.core/defn delete-internet-gateway "Deletes the specified Internet gateway. You must detach the Internet gateway\nfrom the VPC before you can delete it." ([delete-internet-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-internet-gateway-request delete-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn create-internet-gateway "Creates an Internet gateway for use with a VPC. After creating the Internet\ngateway, you attach it to a VPC using AttachInternetGateway.\n For more information about your VPC and Internet gateway, see the Amazon\nVirtual Private Cloud User Guide\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/)." ([] (create-internet-gateway {})) ([create-internet-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-internet-gateway-request create-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-internet-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateInternetGateway", :http.request.configuration/output-deser-fn response-create-internet-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-internet-gateway :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/create-internet-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-internet-gateway-result))

(clojure.core/defn describe-network-interfaces "Describes one or more of your network interfaces." ([] (describe-network-interfaces {})) ([describe-network-interfaces-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-network-interfaces-request describe-network-interfaces-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-network-interfaces-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-network-interfaces-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeNetworkInterfaces", :http.request.configuration/output-deser-fn response-describe-network-interfaces-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-interfaces :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-network-interfaces-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-network-interfaces-result))

(clojure.core/defn import-image "Import single or multi-volume disk images or EBS snapshots into an Amazon\nMachine Image (AMI). For more information, see Importing a VM as an Image Using\nVM Import/Export\n(http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html)\nin the VM Import/Export User Guide." ([] (import-image {})) ([import-image-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-import-image-request import-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/import-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/import-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ImportImage", :http.request.configuration/output-deser-fn response-import-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-image :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/import-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-image-result))

(clojure.core/defn modify-network-interface-attribute "Modifies the specified network interface attribute. You can specify only one\nattribute at a time." ([modify-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-network-interface-attribute-request modify-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-network-interface-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-vpc "Deletes the specified VPC. You must detach or delete all gateways and resources\nthat are associated with the VPC before you can delete it. For example, you must\nterminate all instances running in the VPC, delete all security groups\nassociated with the VPC (except the default one), delete all route tables\nassociated with the VPC (except the default one), and so on." ([delete-vpc-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-vpc-request delete-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVpc", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-vpc-request) :ret clojure.core/true?)

(clojure.core/defn describe-network-acls "Describes one or more of your network ACLs.\n For more information about network ACLs, see Network ACLs\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html) in the\nAmazon Virtual Private Cloud User Guide." ([] (describe-network-acls {})) ([describe-network-acls-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-network-acls-request describe-network-acls-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-network-acls-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-network-acls-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeNetworkAcls", :http.request.configuration/output-deser-fn response-describe-network-acls-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-acls :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-network-acls-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-network-acls-result))

(clojure.core/defn describe-vpc-classic-link "Describes the ClassicLink status of one or more VPCs." ([] (describe-vpc-classic-link {})) ([describe-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpc-classic-link-request describe-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpcClassicLink", :http.request.configuration/output-deser-fn response-describe-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-classic-link :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-result))

(clojure.core/defn describe-subnets "Describes one or more of your subnets.\n For more information about subnets, see Your VPC and Subnets\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the\nAmazon Virtual Private Cloud User Guide." ([] (describe-subnets {})) ([describe-subnets-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-subnets-request describe-subnets-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-subnets-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-subnets-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSubnets", :http.request.configuration/output-deser-fn response-describe-subnets-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-subnets :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-subnets-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-subnets-result))

(clojure.core/defn describe-bundle-tasks "Describes one or more of your bundling tasks.\n Completed bundle tasks are listed for only a limited time. If your bundle task\nis no longer in the list, you can still register an AMI from it. Just use\nRegisterImage with the Amazon S3 bucket name and image manifest name you\nprovided to the bundle task." ([] (describe-bundle-tasks {})) ([describe-bundle-tasks-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-bundle-tasks-request describe-bundle-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-bundle-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-bundle-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeBundleTasks", :http.request.configuration/output-deser-fn response-describe-bundle-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-bundle-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-bundle-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-bundle-tasks-result))

(clojure.core/defn describe-scheduled-instance-availability "Finds available schedules that meet the specified criteria.\n You can search for an available schedule no more than 3 months in advance. You\nmust meet the minimum required duration of 1,200 hours per year. For example,\nthe minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours,\nand the minimum monthly schedule is 100 hours.\n After you find a schedule that meets your needs, call\nPurchaseScheduledInstances to purchase Scheduled Instances with that schedule." ([describe-scheduled-instance-availability-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-scheduled-instance-availability-request describe-scheduled-instance-availability-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-scheduled-instance-availability-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-scheduled-instance-availability-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeScheduledInstanceAvailability", :http.request.configuration/output-deser-fn response-describe-scheduled-instance-availability-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-scheduled-instance-availability :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-scheduled-instance-availability-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-scheduled-instance-availability-result))

(clojure.core/defn delete-nat-gateway "Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its\nElastic IP address, but does not release the address from your account. Deleting\na NAT gateway does not delete any NAT gateway routes in your route tables." ([delete-nat-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-nat-gateway-request delete-nat-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/delete-nat-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-nat-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteNatGateway", :http.request.configuration/output-deser-fn response-delete-nat-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-nat-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-nat-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/delete-nat-gateway-result))

(clojure.core/defn report-instance-status "Submits feedback about the status of an instance. The instance must be in the\nrunning state. If your experience with the instance differs from the instance\nstatus returned by DescribeInstanceStatus, use ReportInstanceStatus to report\nyour experience with the instance. Amazon EC2 collects this information to\nimprove the accuracy of status checks.\n Use of this action does not change the value returned by\nDescribeInstanceStatus." ([report-instance-status-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-report-instance-status-request report-instance-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/report-instance-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ReportInstanceStatus", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef report-instance-status :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/report-instance-status-request) :ret clojure.core/true?)

(clojure.core/defn enable-vpc-classic-link "Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your\nClassicLink-enabled VPC to allow communication over private IP addresses. You\ncannot enable your VPC for ClassicLink if any of your VPC's route tables have\nexisting routes for address ranges within the 10.0.0.0/8 IP address range,\nexcluding local routes for VPCs in the 10.0.0.0/16 and 10.1.0.0/16 IP address\nranges. For more information, see ClassicLink\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in the\nAmazon Elastic Compute Cloud User Guide." ([enable-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-enable-vpc-classic-link-request enable-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "EnableVpcClassicLink", :http.request.configuration/output-deser-fn response-enable-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vpc-classic-link :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/enable-vpc-classic-link-result))

(clojure.core/defn describe-spot-price-history "Describes the Spot price history. The prices returned are listed in\nchronological order, from the oldest to the most recent, for up to the past 90\ndays. For more information, see Spot Instance Pricing History\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html)\nin the Amazon Elastic Compute Cloud User Guide.\n When you specify a start and end time, this operation returns the prices of the\ninstance types within the time range that you specified and the time when the\nprice changed. The price is valid within the time period that you specified; the\nresponse merely indicates the last time that the price changed." ([] (describe-spot-price-history {})) ([describe-spot-price-history-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-spot-price-history-request describe-spot-price-history-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-spot-price-history-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-spot-price-history-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSpotPriceHistory", :http.request.configuration/output-deser-fn response-describe-spot-price-history-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-price-history :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-spot-price-history-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-spot-price-history-result))

(clojure.core/defn create-subnet "Creates a subnet in an existing VPC.\n When you create each subnet, you provide the VPC ID and the CIDR block you want\nfor the subnet. After you create a subnet, you can't change its CIDR block. The\nsubnet's CIDR block can be the same as the VPC's CIDR block (assuming you want\nonly a single subnet in the VPC), or a subset of the VPC's CIDR block. If you\ncreate more than one subnet in a VPC, the subnets' CIDR blocks must not overlap.\nThe smallest subnet (and VPC) you can create uses a /28 netmask (16 IP\naddresses), and the largest uses a /16 netmask (65,536 IP addresses).\n AWS reserves both the first four and the last IP address in each subnet's CIDR\nblock. They're not available for use.\n If you add more than one subnet to a VPC, they're set up in a star topology\nwith a logical router in the middle.\n If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP\naddress doesn't change if you stop and restart the instance (unlike a similar\ninstance launched outside a VPC, which gets a new IP address when restarted).\nIt's therefore possible to have a subnet with no running instances (they're all\nstopped), but no remaining IP addresses available.\n For more information about subnets, see Your VPC and Subnets\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the\nAmazon Virtual Private Cloud User Guide." ([create-subnet-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-subnet-request create-subnet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-subnet-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-subnet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSubnet", :http.request.configuration/output-deser-fn response-create-subnet-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-subnet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-subnet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-subnet-result))

(clojure.core/defn create-vpn-gateway "Creates a virtual private gateway. A virtual private gateway is the endpoint on\nthe VPC side of your VPN connection. You can create a virtual private gateway\nbefore creating the VPC itself.\n For more information about virtual private gateways, see Adding a Hardware\nVirtual Private Gateway to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide." ([create-vpn-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-vpn-gateway-request create-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-vpn-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateVpnGateway", :http.request.configuration/output-deser-fn response-create-vpn-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-vpn-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-vpn-gateway-result))

(clojure.core/defn disable-vgw-route-propagation "Disables a virtual private gateway (VGW) from propagating routes to a specified\nroute table of a VPC." ([disable-vgw-route-propagation-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-disable-vgw-route-propagation-request disable-vgw-route-propagation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/disable-vgw-route-propagation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisableVgwRoutePropagation", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vgw-route-propagation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/disable-vgw-route-propagation-request) :ret clojure.core/true?)

(clojure.core/defn reset-image-attribute "Resets an attribute of an AMI to its default value.\n The productCodes attribute can't be reset." ([reset-image-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-image-attribute-request reset-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/reset-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ResetImageAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/reset-image-attribute-request) :ret clojure.core/true?)

(clojure.core/defn allocate-address "Acquires an Elastic IP address.\n An Elastic IP address is for use either in the EC2-Classic platform or in a\nVPC. For more information, see Elastic IP Addresses\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)\nin the Amazon Elastic Compute Cloud User Guide." ([] (allocate-address {})) ([allocate-address-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-allocate-address-request allocate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/allocate-address-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/allocate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AllocateAddress", :http.request.configuration/output-deser-fn response-allocate-address-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef allocate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/allocate-address-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/allocate-address-result))

(clojure.core/defn modify-instance-placement "Set the instance affinity value for a specific stopped instance and modify the\ninstance tenancy setting.\n Instance affinity is disabled by default. When instance affinity is host and it\nis not associated with a specific Dedicated Host, the next time it is launched\nit will automatically be associated with the host it lands on. This relationship\nwill persist if the instance is stopped/started, or rebooted.\n You can modify the host ID associated with a stopped instance. If a stopped\ninstance has a new host ID association, the instance will target that host when\nrestarted.\n You can modify the tenancy of a stopped instance with a tenancy of host or\ndedicated.\n Affinity, hostID, and tenancy are not required parameters, but at least one of\nthem must be specified in the request. Affinity and tenancy can be modified in\nthe same request, but tenancy can only be modified on instances that are\nstopped." ([modify-instance-placement-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-instance-placement-request modify-instance-placement-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/modify-instance-placement-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-instance-placement-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyInstancePlacement", :http.request.configuration/output-deser-fn response-modify-instance-placement-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-instance-placement :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-instance-placement-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/modify-instance-placement-result))

(clojure.core/defn create-image "Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is\neither running or stopped.\n If you customized your instance with instance store volumes or EBS volumes in\naddition to the root device volume, the new AMI contains block device mapping\ninformation for those volumes. When you launch an instance from this new AMI,\nthe instance automatically launches with those additional volumes.\n For more information, see Creating Amazon EBS-Backed Linux AMIs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([create-image-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-image-request create-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateImage", :http.request.configuration/output-deser-fn response-create-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-image-result))

(clojure.core/defn purchase-reserved-instances-offering "Purchases a Reserved Instance for use with your account. With Reserved\nInstances, you pay a lower hourly rate compared to On-Demand instance pricing.\n Use DescribeReservedInstancesOfferings to get a list of Reserved Instance\nofferings that match your specifications. After you've purchased a Reserved\nInstance, you can check for your new Reserved Instance with\nDescribeReservedInstances.\n For more information, see Reserved Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html)\nand Reserved Instance Marketplace\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([purchase-reserved-instances-offering-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-purchase-reserved-instances-offering-request purchase-reserved-instances-offering-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/purchase-reserved-instances-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/purchase-reserved-instances-offering-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PurchaseReservedInstancesOffering", :http.request.configuration/output-deser-fn response-purchase-reserved-instances-offering-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-reserved-instances-offering :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/purchase-reserved-instances-offering-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/purchase-reserved-instances-offering-result))

(clojure.core/defn create-vpc "Creates a VPC with the specified CIDR block.\n The smallest VPC you can create uses a /28 netmask (16 IP addresses), and the\nlargest uses a /16 netmask (65,536 IP addresses). To help you decide how big to\nmake your VPC, see Your VPC and Subnets\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the\nAmazon Virtual Private Cloud User Guide.\n By default, each instance you launch in the VPC has the default DHCP options,\nwhich includes only a default DNS server that we provide (AmazonProvidedDNS).\nFor more information about DHCP options, see DHCP Options Sets\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html) in\nthe Amazon Virtual Private Cloud User Guide.\n You can specify the instance tenancy value for the VPC when you create it. You\ncan't change this value for the VPC after you create it. For more information,\nsee Dedicated Instances\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/dedicated-instance.html.html)\nin the Amazon Virtual Private Cloud User Guide." ([create-vpc-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-vpc-request create-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateVpc", :http.request.configuration/output-deser-fn response-create-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-vpc-result))

(clojure.core/defn describe-internet-gateways "Describes one or more of your Internet gateways." ([] (describe-internet-gateways {})) ([describe-internet-gateways-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-internet-gateways-request describe-internet-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-internet-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-internet-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeInternetGateways", :http.request.configuration/output-deser-fn response-describe-internet-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-internet-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-internet-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-internet-gateways-result))

(clojure.core/defn describe-tags "Describes one or more of the tags for your EC2 resources.\n For more information about tags, see Tagging Your Resources\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (describe-tags {})) ([describe-tags-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-tags-request describe-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-tags-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeTags", :http.request.configuration/output-deser-fn response-describe-tags-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-tags :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-tags-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-tags-result))

(clojure.core/defn request-spot-instances "Creates a Spot instance request. Spot instances are instances that Amazon EC2\nlaunches when the bid price that you specify exceeds the current Spot price.\nAmazon EC2 periodically sets the Spot price based on available Spot Instance\ncapacity and current Spot instance requests. For more information, see Spot\nInstance Requests\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html) in the\nAmazon Elastic Compute Cloud User Guide." ([request-spot-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-request-spot-instances-request request-spot-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/request-spot-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/request-spot-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RequestSpotInstances", :http.request.configuration/output-deser-fn response-request-spot-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef request-spot-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/request-spot-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-spot-instances-result))

(clojure.core/defn describe-security-groups "Describes one or more of your security groups.\n A security group is for use with instances either in the EC2-Classic platform\nor in a specific VPC. For more information, see Amazon EC2 Security Groups\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html)\nin the Amazon Elastic Compute Cloud User Guide and Security Groups for Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)\nin the Amazon Virtual Private Cloud User Guide." ([] (describe-security-groups {})) ([describe-security-groups-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-security-groups-request describe-security-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-security-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-security-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSecurityGroups", :http.request.configuration/output-deser-fn response-describe-security-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-security-groups :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-security-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-security-groups-result))

(clojure.core/defn disable-vpc-classic-link-dns-support "Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve\nto public IP addresses when addressed between a linked EC2-Classic instance and\ninstances in the VPC to which it's linked. For more information about\nClassicLink, see ClassicLink\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (disable-vpc-classic-link-dns-support {})) ([disable-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-disable-vpc-classic-link-dns-support-request disable-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisableVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn response-disable-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-dns-support-result))

(clojure.core/defn accept-reserved-instances-exchange-quote "Purchases Convertible Reserved Instance offerings described in the\nGetReservedInstancesExchangeQuote call." ([accept-reserved-instances-exchange-quote-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-accept-reserved-instances-exchange-quote-request accept-reserved-instances-exchange-quote-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/accept-reserved-instances-exchange-quote-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/accept-reserved-instances-exchange-quote-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AcceptReservedInstancesExchangeQuote", :http.request.configuration/output-deser-fn response-accept-reserved-instances-exchange-quote-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef accept-reserved-instances-exchange-quote :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/accept-reserved-instances-exchange-quote-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/accept-reserved-instances-exchange-quote-result))

(clojure.core/defn describe-vpcs "Describes one or more of your VPCs." ([] (describe-vpcs {})) ([describe-vpcs-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpcs-request describe-vpcs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpcs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpcs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpcs", :http.request.configuration/output-deser-fn response-describe-vpcs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpcs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpcs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpcs-result))

(clojure.core/defn delete-subnet "Deletes the specified subnet. You must terminate all running instances in the\nsubnet before you can delete the subnet." ([delete-subnet-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-subnet-request delete-subnet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-subnet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSubnet", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-subnet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-subnet-request) :ret clojure.core/true?)

(clojure.core/defn describe-classic-link-instances "Describes one or more of your linked EC2-Classic instances. This request only\nreturns information about EC2-Classic instances linked to a VPC through\nClassicLink; you cannot use this request to return information about other\ninstances." ([] (describe-classic-link-instances {})) ([describe-classic-link-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-classic-link-instances-request describe-classic-link-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-classic-link-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-classic-link-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeClassicLinkInstances", :http.request.configuration/output-deser-fn response-describe-classic-link-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-classic-link-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-classic-link-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-classic-link-instances-result))

(clojure.core/defn modify-spot-fleet-request "Modifies the specified Spot fleet request.\n While the Spot fleet request is being modified, it is in the modifying state.\n To scale up your Spot fleet, increase its target capacity. The Spot fleet\nlaunches the additional Spot instances according to the allocation strategy for\nthe Spot fleet request. If the allocation strategy is lowestPrice, the Spot\nfleet launches instances using the Spot pool with the lowest price. If the\nallocation strategy is diversified, the Spot fleet distributes the instances\nacross the Spot pools.\n To scale down your Spot fleet, decrease its target capacity. First, the Spot\nfleet cancels any open bids that exceed the new target capacity. You can request\nthat the Spot fleet terminate Spot instances until the size of the fleet no\nlonger exceeds the new target capacity. If the allocation strategy is\nlowestPrice, the Spot fleet terminates the instances with the highest price per\nunit. If the allocation strategy is diversified, the Spot fleet terminates\ninstances across the Spot pools. Alternatively, you can request that the Spot\nfleet keep the fleet at its current size, but not replace any Spot instances\nthat are interrupted or that you terminate manually." ([modify-spot-fleet-request-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-spot-fleet-request-request modify-spot-fleet-request-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/modify-spot-fleet-request-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-spot-fleet-request-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifySpotFleetRequest", :http.request.configuration/output-deser-fn response-modify-spot-fleet-request-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-spot-fleet-request :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-spot-fleet-request-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/modify-spot-fleet-request-response))

(clojure.core/defn get-reserved-instances-exchange-quote "Returns details about the values and term of your specified Convertible Reserved\nInstances. When an offering ID is specified it returns information about whether\nthe exchange is valid and can be performed." ([get-reserved-instances-exchange-quote-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-reserved-instances-exchange-quote-request get-reserved-instances-exchange-quote-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/get-reserved-instances-exchange-quote-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/get-reserved-instances-exchange-quote-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetReservedInstancesExchangeQuote", :http.request.configuration/output-deser-fn response-get-reserved-instances-exchange-quote-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-reserved-instances-exchange-quote :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/get-reserved-instances-exchange-quote-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/get-reserved-instances-exchange-quote-result))

(clojure.core/defn attach-network-interface "Attaches a network interface to an instance." ([attach-network-interface-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-network-interface-request attach-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/attach-network-interface-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/attach-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachNetworkInterface", :http.request.configuration/output-deser-fn response-attach-network-interface-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/attach-network-interface-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attach-network-interface-result))

(clojure.core/defn delete-snapshot "Deletes the specified snapshot.\n When you make periodic snapshots of a volume, the snapshots are incremental,\nand only the blocks on the device that have changed since your last snapshot are\nsaved in the new snapshot. When you delete a snapshot, only the data not needed\nfor any other snapshot is removed. So regardless of which prior snapshots have\nbeen deleted, all active snapshots will have access to all the information\nneeded to restore the volume.\n You cannot delete a snapshot of the root device of an EBS volume used by a\nregistered AMI. You must first de-register the AMI before you can delete the\nsnapshot.\n For more information, see Deleting an Amazon EBS Snapshot\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html)\nin the Amazon Elastic Compute Cloud User Guide." ([delete-snapshot-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-snapshot-request delete-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSnapshot", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-snapshot-request) :ret clojure.core/true?)

(clojure.core/defn describe-stale-security-groups "[EC2-VPC only] Describes the stale security group rules for security groups in a\nspecified VPC. Rules are stale when they reference a deleted security group in a\npeer VPC, or a security group in a peer VPC for which the VPC peering connection\nhas been deleted." ([describe-stale-security-groups-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-stale-security-groups-request describe-stale-security-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-stale-security-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-stale-security-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeStaleSecurityGroups", :http.request.configuration/output-deser-fn response-describe-stale-security-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-stale-security-groups :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-stale-security-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-stale-security-groups-result))

(clojure.core/defn cancel-conversion-task "Cancels an active conversion task. The task can be the import of an instance or\nvolume. The action removes all artifacts of the conversion, including a\npartially uploaded volume or instance. If the conversion is complete or is in\nthe process of transferring the final disk image, the command fails and returns\nan exception.\n For more information, see Importing a Virtual Machine Using the Amazon EC2 CLI\n(http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html)." ([cancel-conversion-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-cancel-conversion-request cancel-conversion-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/cancel-conversion-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CancelConversionTask", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-conversion-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/cancel-conversion-request) :ret clojure.core/true?)

(clojure.core/defn describe-customer-gateways "Describes one or more of your VPN customer gateways.\n For more information about VPN customer gateways, see Adding a Hardware Virtual\nPrivate Gateway to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide." ([] (describe-customer-gateways {})) ([describe-customer-gateways-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-customer-gateways-request describe-customer-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-customer-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-customer-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeCustomerGateways", :http.request.configuration/output-deser-fn response-describe-customer-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-customer-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-customer-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-customer-gateways-result))

(clojure.core/defn delete-vpc-endpoints "Deletes one or more specified VPC endpoints. Deleting the endpoint also deletes\nthe endpoint routes in the route tables that were associated with the endpoint." ([delete-vpc-endpoints-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-vpc-endpoints-request delete-vpc-endpoints-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/delete-vpc-endpoints-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-vpc-endpoints-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVpcEndpoints", :http.request.configuration/output-deser-fn response-delete-vpc-endpoints-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-endpoints :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-vpc-endpoints-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/delete-vpc-endpoints-result))

(clojure.core/defn describe-spot-instance-requests "Describes the Spot instance requests that belong to your account. Spot instances\nare instances that Amazon EC2 launches when the bid price that you specify\nexceeds the current Spot price. Amazon EC2 periodically sets the Spot price\nbased on available Spot instance capacity and current Spot instance requests.\nFor more information, see Spot Instance Requests\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html) in the\nAmazon Elastic Compute Cloud User Guide.\n You can use DescribeSpotInstanceRequests to find a running Spot instance by\nexamining the response. If the status of the Spot instance is fulfilled, the\ninstance ID appears in the response and contains the identifier of the instance.\nAlternatively, you can use DescribeInstances with a filter to look for instances\nwhere the instance lifecycle is spot.\n Spot instance requests are deleted 4 hours after they are canceled and their\ninstances are terminated." ([] (describe-spot-instance-requests {})) ([describe-spot-instance-requests-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-spot-instance-requests-request describe-spot-instance-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-spot-instance-requests-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-spot-instance-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSpotInstanceRequests", :http.request.configuration/output-deser-fn response-describe-spot-instance-requests-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-instance-requests :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-spot-instance-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-spot-instance-requests-result))

(clojure.core/defn delete-route "Deletes the specified route from the specified route table." ([delete-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-route-request delete-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-route-request) :ret clojure.core/true?)

(clojure.core/defn describe-addresses "Describes one or more of your Elastic IP addresses.\n An Elastic IP address is for use in either the EC2-Classic platform or in a\nVPC. For more information, see Elastic IP Addresses\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)\nin the Amazon Elastic Compute Cloud User Guide." ([] (describe-addresses {})) ([describe-addresses-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-addresses-request describe-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeAddresses", :http.request.configuration/output-deser-fn response-describe-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-addresses :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-addresses-result))

(clojure.core/defn describe-route-tables "Describes one or more of your route tables.\n Each subnet in your VPC must be associated with a route table. If a subnet is\nnot explicitly associated with any route table, it is implicitly associated with\nthe main route table. This command does not return the subnet ID for implicit\nassociations.\n For more information about route tables, see Route Tables\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html) in\nthe Amazon Virtual Private Cloud User Guide." ([] (describe-route-tables {})) ([describe-route-tables-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-route-tables-request describe-route-tables-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-route-tables-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-route-tables-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeRouteTables", :http.request.configuration/output-deser-fn response-describe-route-tables-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-route-tables :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-route-tables-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-route-tables-result))

(clojure.core/defn run-scheduled-instances "Launches the specified Scheduled Instances.\n Before you can launch a Scheduled Instance, you must purchase it and obtain an\nidentifier using PurchaseScheduledInstances.\n You must launch a Scheduled Instance during its scheduled time period. You\ncan't stop or reboot a Scheduled Instance, but you can terminate it as needed.\nIf you terminate a Scheduled Instance before the current scheduled time period\nends, you can launch it again after a few minutes. For more information, see\nScheduled Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html)\nin the Amazon Elastic Compute Cloud User Guide." ([run-scheduled-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-run-scheduled-instances-request run-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/run-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/run-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RunScheduledInstances", :http.request.configuration/output-deser-fn response-run-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef run-scheduled-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/run-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/run-scheduled-instances-result))

(clojure.core/defn release-address "Releases the specified Elastic IP address.\n After releasing an Elastic IP address, it is released to the IP address pool\nand might be unavailable to you. Be sure to update your DNS records and any\nservers or devices that communicate with the address. If you attempt to release\nan Elastic IP address that you already released, you'll get an AuthFailure error\nif the address is already allocated to another AWS account.\n [EC2-Classic, default VPC] Releasing an Elastic IP address automatically\ndisassociates it from any instance that it's associated with. To disassociate an\nElastic IP address without releasing it, use DisassociateAddress.\n [Nondefault VPC] You must use DisassociateAddress to disassociate the Elastic\nIP address before you try to release it. Otherwise, Amazon EC2 returns an error\n(InvalidIPAddress.InUse)." ([] (release-address {})) ([release-address-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-release-address-request release-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/release-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ReleaseAddress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef release-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/release-address-request) :ret clojure.core/true?)

(clojure.core/defn delete-route-table "Deletes the specified route table. You must disassociate the route table from\nany subnets before you can delete it. You can't delete the main route table." ([delete-route-table-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-route-table-request delete-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteRouteTable", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-route-table-request) :ret clojure.core/true?)

(clojure.core/defn describe-reserved-instances-offerings "Describes Reserved Instance offerings that are available for purchase. With\nReserved Instances, you purchase the right to launch instances for a period of\ntime. During that time period, you do not receive insufficient capacity errors,\nand you pay a lower usage rate than the rate charged for On-Demand instances for\nthe actual time used.\n If you have listed your own Reserved Instances for sale in the Reserved\nInstance Marketplace, they will be excluded from these results. This is to\nensure that you do not purchase your own Reserved Instances.\n For more information, see Reserved Instance Marketplace\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([] (describe-reserved-instances-offerings {})) ([describe-reserved-instances-offerings-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-instances-offerings-request describe-reserved-instances-offerings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-offerings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-offerings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeReservedInstancesOfferings", :http.request.configuration/output-deser-fn response-describe-reserved-instances-offerings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-offerings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-offerings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-reserved-instances-offerings-result))

(clojure.core/defn import-volume "Creates an import volume task using metadata from the specified disk image.For\nmore information, see Importing Disks to Amazon EBS\n(http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html).\n For information about the import manifest referenced by this API action, see VM\nImport Manifest\n(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html)." ([import-volume-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-import-volume-request import-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/import-volume-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/import-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ImportVolume", :http.request.configuration/output-deser-fn response-import-volume-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/import-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-volume-result))

(clojure.core/defn create-network-acl "Creates a network ACL in a VPC. Network ACLs provide an optional layer of\nsecurity (in addition to security groups) for the instances in your VPC.\n For more information about network ACLs, see Network ACLs\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html) in the\nAmazon Virtual Private Cloud User Guide." ([create-network-acl-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-network-acl-request create-network-acl-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-network-acl-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-network-acl-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateNetworkAcl", :http.request.configuration/output-deser-fn response-create-network-acl-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-acl :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-network-acl-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-network-acl-result))

(clojure.core/defn describe-nat-gateways "Describes one or more of the your NAT gateways." ([] (describe-nat-gateways {})) ([describe-nat-gateways-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-nat-gateways-request describe-nat-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-nat-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-nat-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeNatGateways", :http.request.configuration/output-deser-fn response-describe-nat-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-nat-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-nat-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-nat-gateways-result))

(clojure.core/defn modify-image-attribute "Modifies the specified attribute of the specified AMI. You can specify only one\nattribute at a time.\n AWS Marketplace product codes cannot be modified. Images with an AWS\nMarketplace product code cannot be made public.\n The SriovNetSupport enhanced networking attribute cannot be changed using this\ncommand. Instead, enable SriovNetSupport on an instance and create an AMI from\nthe instance. This will result in an image with SriovNetSupport enabled." ([modify-image-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-image-attribute-request modify-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyImageAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-image-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-network-acl "Deletes the specified network ACL. You can't delete the ACL if it's associated\nwith any subnets. You can't delete the default network ACL." ([delete-network-acl-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-network-acl-request delete-network-acl-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-network-acl-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteNetworkAcl", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-acl :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-network-acl-request) :ret clojure.core/true?)

(clojure.core/defn describe-spot-fleet-requests "Describes your Spot fleet requests.\n Spot fleet requests are deleted 48 hours after they are canceled and their\ninstances are terminated." ([] (describe-spot-fleet-requests {})) ([describe-spot-fleet-requests-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-spot-fleet-requests-request describe-spot-fleet-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-requests-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSpotFleetRequests", :http.request.configuration/output-deser-fn response-describe-spot-fleet-requests-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-requests :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-spot-fleet-requests-response))

(clojure.core/defn cancel-import-task "Cancels an in-process import virtual machine or import snapshot task." ([] (cancel-import-task {})) ([cancel-import-task-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-cancel-import-task-request cancel-import-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/cancel-import-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/cancel-import-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CancelImportTask", :http.request.configuration/output-deser-fn response-cancel-import-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-import-task :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/cancel-import-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-import-task-result))

(clojure.core/defn create-vpn-connection-route "Creates a static route associated with a VPN connection between an existing\nvirtual private gateway and a VPN customer gateway. The static route allows\ntraffic to be routed from the virtual private gateway to the VPN customer\ngateway.\n For more information about VPN connections, see Adding a Hardware Virtual\nPrivate Gateway to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide." ([create-vpn-connection-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-vpn-connection-route-request create-vpn-connection-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-vpn-connection-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateVpnConnectionRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-connection-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-vpn-connection-route-request) :ret clojure.core/true?)

(clojure.core/defn get-host-reservation-purchase-preview "Preview a reservation purchase with configurations that match those of your\nDedicated Host. You must have active Dedicated Hosts in your account before you\npurchase a reservation.\n This is a preview of the PurchaseHostReservation action and does not result in\nthe offering being purchased." ([get-host-reservation-purchase-preview-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-host-reservation-purchase-preview-request get-host-reservation-purchase-preview-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/get-host-reservation-purchase-preview-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/get-host-reservation-purchase-preview-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetHostReservationPurchasePreview", :http.request.configuration/output-deser-fn response-get-host-reservation-purchase-preview-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-host-reservation-purchase-preview :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/get-host-reservation-purchase-preview-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/get-host-reservation-purchase-preview-result))

(clojure.core/defn describe-vpc-attribute "Describes the specified attribute of the specified VPC. You can specify only one\nattribute at a time." ([describe-vpc-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpc-attribute-request describe-vpc-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpcAttribute", :http.request.configuration/output-deser-fn response-describe-vpc-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-vpc-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpc-attribute-result))

(clojure.core/defn describe-identity-id-format "Describes the ID format settings for resources for the specified IAM user, IAM\nrole, or root user. For example, you can view the resource types that are\nenabled for longer IDs. This request only returns information about resource\ntypes whose ID formats can be modified; it does not return information about\nother resource types. For more information, see Resource IDs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html) in the\nAmazon Elastic Compute Cloud User Guide.\n The following resource types support longer IDs: instance | reservation |\nsnapshot | volume.\n These settings apply to the principal specified in the request. They do not\napply to the principal that makes the request." ([describe-identity-id-format-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-identity-id-format-request describe-identity-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-identity-id-format-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-identity-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeIdentityIdFormat", :http.request.configuration/output-deser-fn response-describe-identity-id-format-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-identity-id-format :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-identity-id-format-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-identity-id-format-result))

(clojure.core/defn get-console-screenshot "Retrieve a JPG-format screenshot of a running instance to help with\ntroubleshooting.\n The returned content is Base64-encoded." ([get-console-screenshot-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-console-screenshot-request get-console-screenshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/get-console-screenshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/get-console-screenshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetConsoleScreenshot", :http.request.configuration/output-deser-fn response-get-console-screenshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-console-screenshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/get-console-screenshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/get-console-screenshot-result))

(clojure.core/defn revoke-security-group-egress "[EC2-VPC only] Removes one or more egress rules from a security group for\nEC2-VPC. This action doesn't apply to security groups for use in EC2-Classic.\nThe values that you specify in the revoke request (for example, ports) must\nmatch the existing rule's values for the rule to be revoked.\n Each rule consists of the protocol and the CIDR range or source security group.\nFor the TCP and UDP protocols, you must also specify the destination port or\nrange of ports. For the ICMP protocol, you must also specify the ICMP type and\ncode.\n Rule changes are propagated to instances within the security group as quickly\nas possible. However, a small delay might occur." ([revoke-security-group-egress-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-revoke-security-group-egress-request revoke-security-group-egress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/revoke-security-group-egress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RevokeSecurityGroupEgress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef revoke-security-group-egress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/revoke-security-group-egress-request) :ret clojure.core/true?)

(clojure.core/defn create-instance-export-task "Exports a running or stopped instance to an S3 bucket.\n For information about the supported operating systems, image formats, and known\nlimitations for the types of instances you can export, see Exporting an Instance\nas a VM Using VM Import/Export\n(http://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html) in the VM\nImport/Export User Guide." ([create-instance-export-task-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-instance-export-task-request create-instance-export-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-instance-export-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-instance-export-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateInstanceExportTask", :http.request.configuration/output-deser-fn response-create-instance-export-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-instance-export-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-instance-export-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-instance-export-task-result))

(clojure.core/defn disable-vpc-classic-link "Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that\nhas EC2-Classic instances linked to it." ([disable-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-disable-vpc-classic-link-request disable-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisableVpcClassicLink", :http.request.configuration/output-deser-fn response-disable-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vpc-classic-link :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/disable-vpc-classic-link-result))

(clojure.core/defn import-instance "Creates an import instance task using metadata from the specified disk image.\nImportInstance only supports single-volume VMs. To import multi-volume VMs, use\nImportImage. For more information, see Importing a Virtual Machine Using the\nAmazon EC2 CLI\n(http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html).\n For information about the import manifest referenced by this API action, see VM\nImport Manifest\n(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html)." ([import-instance-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-import-instance-request import-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/import-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/import-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ImportInstance", :http.request.configuration/output-deser-fn response-import-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/import-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/import-instance-result))

(clojure.core/defn describe-instances "Describes one or more of your instances.\n If you specify one or more instance IDs, Amazon EC2 returns information for\nthose instances. If you do not specify instance IDs, Amazon EC2 returns\ninformation for all relevant instances. If you specify an instance ID that is\nnot valid, an error is returned. If you specify an instance that you do not own,\nit is not included in the returned results.\n Recently terminated instances might appear in the returned results. This\ninterval is usually less than one hour.\n If you describe instances in the rare case where an Availability Zone is\nexperiencing a service disruption and you specify instance IDs that are in the\naffected zone, or do not specify any instance IDs at all, the call fails. If you\ndescribe instances and specify only instance IDs that are in an unaffected zone,\nthe call works normally." ([] (describe-instances {})) ([describe-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-instances-request describe-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeInstances", :http.request.configuration/output-deser-fn response-describe-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-instances-result))

(clojure.core/defn delete-dhcp-options "Deletes the specified set of DHCP options. You must disassociate the set of DHCP\noptions before you can delete it. You can disassociate the set of DHCP options\nby associating either a new set of options or the default set of options with\nthe VPC." ([delete-dhcp-options-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-dhcp-options-request delete-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDhcpOptions", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-dhcp-options-request) :ret clojure.core/true?)

(clojure.core/defn describe-account-attributes "Describes attributes of your AWS account. The following are the supported\naccount attributes:\n * supported-platforms: Indicates whether your account can launch instances into\nEC2-Classic and EC2-VPC, or only into EC2-VPC.\n * default-vpc: The ID of the default VPC for your account, or none.\n * max-instances: The maximum number of On-Demand instances that you can run.\n * vpc-max-security-groups-per-interface: The maximum number of security groups\nthat you can assign to a network interface.\n * max-elastic-ips: The maximum number of Elastic IP addresses that you can\nallocate for use with EC2-Classic.\n * vpc-max-elastic-ips: The maximum number of Elastic IP addresses that you can\nallocate for use with EC2-VPC." ([] (describe-account-attributes {})) ([describe-account-attributes-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-account-attributes-request describe-account-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-account-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-account-attributes-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeAccountAttributes", :http.request.configuration/output-deser-fn response-describe-account-attributes-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-account-attributes :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-account-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-account-attributes-result))

(clojure.core/defn create-spot-datafeed-subscription "Creates a data feed for Spot instances, enabling you to view Spot instance usage\nlogs. You can create one data feed per AWS account. For more information, see\nSpot Instance Data Feed\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html) in the\nAmazon Elastic Compute Cloud User Guide." ([create-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-spot-datafeed-subscription-request create-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-spot-datafeed-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSpotDatafeedSubscription", :http.request.configuration/output-deser-fn response-create-spot-datafeed-subscription-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-spot-datafeed-subscription :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-spot-datafeed-subscription-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-spot-datafeed-subscription-result))

(clojure.core/defn create-customer-gateway "Provides information to AWS about your VPN customer gateway device. The customer\ngateway is the appliance at your end of the VPN connection. (The device on the\nAWS side of the VPN connection is the virtual private gateway.) You must provide\nthe Internet-routable IP address of the customer gateway's external interface.\nThe IP address must be static and may be behind a device performing network\naddress translation (NAT).\n For devices that use Border Gateway Protocol (BGP), you can also provide the\ndevice's BGP Autonomous System Number (ASN). You can use an existing ASN\nassigned to your network. If you don't have an ASN already, you can use a\nprivate ASN (in the 64512 - 65534 range).\n Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the\nexception of 7224, which is reserved in the us-east-1 region, and 9059, which is\nreserved in the eu-west-1 region.\n For more information about VPN customer gateways, see Adding a Hardware Virtual\nPrivate Gateway to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide.\n You cannot create more than one customer gateway with the same VPN type, IP\naddress, and BGP ASN parameter values. If you run an identical request more than\none time, the first request creates the customer gateway, and subsequent\nrequests return information about the existing customer gateway. The subsequent\nrequests do not create new customer gateway resources." ([create-customer-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-customer-gateway-request create-customer-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-customer-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-customer-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateCustomerGateway", :http.request.configuration/output-deser-fn response-create-customer-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-customer-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-customer-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-customer-gateway-result))

(clojure.core/defn replace-network-acl-entry "Replaces an entry (rule) in a network ACL. For more information about network\nACLs, see Network ACLs\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html) in the\nAmazon Virtual Private Cloud User Guide." ([replace-network-acl-entry-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-replace-network-acl-entry-request replace-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/replace-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ReplaceNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/replace-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn describe-host-reservation-offerings "Describes the Dedicated Host Reservations that are available to purchase.\n The results describe all the Dedicated Host Reservation offerings, including\nofferings that may not match the instance family and region of your Dedicated\nHosts. When purchasing an offering, ensure that the the instance family and\nregion of the offering matches that of the Dedicated Host/s it will be\nassociated with. For an overview of supported instance types, see Dedicated\nHosts Overview\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html)\nin the Amazon Elastic Compute Cloud User Guide." ([] (describe-host-reservation-offerings {})) ([describe-host-reservation-offerings-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-host-reservation-offerings-request describe-host-reservation-offerings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-host-reservation-offerings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-host-reservation-offerings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeHostReservationOfferings", :http.request.configuration/output-deser-fn response-describe-host-reservation-offerings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-host-reservation-offerings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-host-reservation-offerings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-host-reservation-offerings-result))

(clojure.core/defn modify-vpc-peering-connection-options "Modifies the VPC peering connection options on one side of a VPC peering\nconnection. You can do the following:\n * Enable/disable communication over the peering connection between an\nEC2-Classic instance that's linked to your VPC (using ClassicLink) and instances\nin the peer VPC.\n * Enable/disable communication over the peering connection between instances in\nyour VPC and an EC2-Classic instance that's linked to the peer VPC.\n * Enable/disable a local VPC to resolve public DNS hostnames to private IP\naddresses when queried from instances in the peer VPC.\n If the peered VPCs are in different accounts, each owner must initiate a\nseparate request to modify the peering connection options, depending on whether\ntheir VPC was the requester or accepter for the VPC peering connection. If the\npeered VPCs are in the same account, you can modify the requester and accepter\noptions in the same request. To confirm which VPC is the accepter and requester\nfor a VPC peering connection, use the DescribeVpcPeeringConnections command." ([modify-vpc-peering-connection-options-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-vpc-peering-connection-options-request modify-vpc-peering-connection-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/modify-vpc-peering-connection-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-vpc-peering-connection-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyVpcPeeringConnectionOptions", :http.request.configuration/output-deser-fn response-modify-vpc-peering-connection-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-peering-connection-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-vpc-peering-connection-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/modify-vpc-peering-connection-options-result))

(clojure.core/defn replace-route "Replaces an existing route within a route table in a VPC. You must provide only\none of the following: Internet gateway or virtual private gateway, NAT instance,\nNAT gateway, VPC peering connection, or network interface.\n For more information about route tables, see Route Tables\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html) in\nthe Amazon Virtual Private Cloud User Guide." ([replace-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-replace-route-request replace-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/replace-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ReplaceRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/replace-route-request) :ret clojure.core/true?)

(clojure.core/defn describe-placement-groups "Describes one or more of your placement groups. For more information about\nplacement groups and cluster instances, see Cluster Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html)\nin the Amazon Elastic Compute Cloud User Guide." ([] (describe-placement-groups {})) ([describe-placement-groups-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-placement-groups-request describe-placement-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-placement-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-placement-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribePlacementGroups", :http.request.configuration/output-deser-fn response-describe-placement-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-placement-groups :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-placement-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-placement-groups-result))

(clojure.core/defn describe-import-image-tasks "Displays details about an import virtual machine or import snapshot tasks that\nare already created." ([] (describe-import-image-tasks {})) ([describe-import-image-tasks-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-import-image-tasks-request describe-import-image-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-import-image-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-import-image-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeImportImageTasks", :http.request.configuration/output-deser-fn response-describe-import-image-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-import-image-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-import-image-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-import-image-tasks-result))

(clojure.core/defn modify-identity-id-format "Modifies the ID format of a resource for a specified IAM user, IAM role, or the\nroot user for an account; or all IAM users, IAM roles, and the root user for an\naccount. You can specify that resources should receive longer IDs (17-character\nIDs) when they are created.\n The following resource types support longer IDs: instance | reservation |\nsnapshot | volume. For more information, see Resource IDs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html) in the\nAmazon Elastic Compute Cloud User Guide.\n This setting applies to the principal specified in the request; it does not\napply to the principal that makes the request.\n Resources created with longer IDs are visible to all IAM roles and users,\nregardless of these settings and provided that they have permission to use the\nrelevant Describe command for the resource type." ([modify-identity-id-format-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-identity-id-format-request modify-identity-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-identity-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyIdentityIdFormat", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-identity-id-format :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-identity-id-format-request) :ret clojure.core/true?)

(clojure.core/defn copy-image "Initiates the copy of an AMI from the specified source region to the current\nregion. You specify the destination region by using its endpoint when making the\nrequest.\n For more information, see Copying AMIs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html) in the\nAmazon Elastic Compute Cloud User Guide." ([copy-image-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-image-request copy-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/copy-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/copy-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CopyImage", :http.request.configuration/output-deser-fn response-copy-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef copy-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/copy-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/copy-image-result))

(clojure.core/defn create-flow-logs "Creates one or more flow logs to capture IP traffic for a specific network\ninterface, subnet, or VPC. Flow logs are delivered to a specified log group in\nAmazon CloudWatch Logs. If you specify a VPC or subnet in the request, a log\nstream is created in CloudWatch Logs for each network interface in the subnet or\nVPC. Log streams can include information about accepted and rejected traffic to\na network interface. You can view the data in your log streams using Amazon\nCloudWatch Logs.\n In your request, you must also specify an IAM role that has permission to\npublish logs to CloudWatch Logs." ([create-flow-logs-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-flow-logs-request create-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateFlowLogs", :http.request.configuration/output-deser-fn response-create-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-flow-logs :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-flow-logs-result))

(clojure.core/defn associate-route-table "Associates a subnet with a route table. The subnet and route table must be in\nthe same VPC. This association causes traffic originating from the subnet to be\nrouted according to the routes in the route table. The action returns an\nassociation ID, which you need in order to disassociate the route table from the\nsubnet later. A route table can be associated with multiple subnets.\n For more information about route tables, see Route Tables\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html) in\nthe Amazon Virtual Private Cloud User Guide." ([associate-route-table-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-associate-route-table-request associate-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/associate-route-table-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/associate-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssociateRouteTable", :http.request.configuration/output-deser-fn response-associate-route-table-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/associate-route-table-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/associate-route-table-result))

(clojure.core/defn describe-snapshots "Describes one or more of the EBS snapshots available to you. Available snapshots\ninclude public snapshots available for any AWS account to launch, private\nsnapshots that you own, and private snapshots owned by another AWS account but\nfor which you've been given explicit create volume permissions.\n The create volume permissions fall into the following categories:\n * public: The owner of the snapshot granted create volume permissions for the\nsnapshot to the all group. All AWS accounts have create volume permissions for\nthese snapshots.\n * explicit: The owner of the snapshot granted create volume permissions to a\nspecific AWS account.\n * implicit: An AWS account has implicit create volume permissions for all\nsnapshots it owns.\n The list of snapshots returned can be modified by specifying snapshot IDs,\nsnapshot owners, or AWS accounts with create volume permissions. If no options\nare specified, Amazon EC2 returns all snapshots for which you have create volume\npermissions.\n If you specify one or more snapshot IDs, only snapshots that have the specified\nIDs are returned. If you specify an invalid snapshot ID, an error is returned.\nIf you specify a snapshot ID for which you do not have access, it is not\nincluded in the returned results.\n If you specify one or more snapshot owners using the OwnerIds option, only\nsnapshots from the specified owners and for which you have access are returned.\nThe results can include the AWS account IDs of the specified owners, amazon for\nsnapshots owned by Amazon, or self for snapshots that you own.\n If you specify a list of restorable users, only snapshots with create snapshot\npermissions for those users are returned. You can specify AWS account IDs (if\nyou own the snapshots), self for snapshots for which you own or have explicit\npermissions, or all for public snapshots.\n If you are describing a long list of snapshots, you can paginate the output to\nmake the list more manageable. The MaxResults parameter sets the maximum number\nof results returned in a single page. If the list of results exceeds your\nMaxResults value, then that number of results is returned along with a NextToken\nvalue that can be passed to a subsequent DescribeSnapshots request to retrieve\nthe remaining results.\n For more information about EBS snapshots, see Amazon EBS Snapshots\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (describe-snapshots {})) ([describe-snapshots-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-snapshots-request describe-snapshots-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-snapshots-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-snapshots-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeSnapshots", :http.request.configuration/output-deser-fn response-describe-snapshots-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-snapshots :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-snapshots-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-snapshots-result))

(clojure.core/defn bundle-instance "Bundles an Amazon instance store-backed Windows instance.\n During bundling, only the root device volume (C:\\) is bundled. Data on other\ninstance store volumes is not preserved.\n This action is not applicable for Linux/Unix instances or Windows instances\nthat are backed by Amazon EBS.\n For more information, see Creating an Instance Store-Backed Windows AMI\n(http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/Creating_InstanceStoreBacked_WinAMI.html)." ([bundle-instance-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-bundle-instance-request bundle-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/bundle-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/bundle-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "BundleInstance", :http.request.configuration/output-deser-fn response-bundle-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef bundle-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/bundle-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/bundle-instance-result))

(clojure.core/defn replace-route-table-association "Changes the route table associated with a given subnet in a VPC. After the\noperation completes, the subnet uses the routes in the new route table it's\nassociated with. For more information about route tables, see Route Tables\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html) in\nthe Amazon Virtual Private Cloud User Guide.\n You can also use ReplaceRouteTableAssociation to change which table is the main\nroute table in the VPC. You just specify the main route table's association ID\nand the route table to be the new main route table." ([replace-route-table-association-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-replace-route-table-association-request replace-route-table-association-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/replace-route-table-association-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/replace-route-table-association-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ReplaceRouteTableAssociation", :http.request.configuration/output-deser-fn response-replace-route-table-association-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-route-table-association :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/replace-route-table-association-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/replace-route-table-association-result))

(clojure.core/defn release-hosts "When you no longer want to use an On-Demand Dedicated Host it can be released.\nOn-Demand billing is stopped and the host goes into released state. The host ID\nof Dedicated Hosts that have been released can no longer be specified in another\nrequest, e.g., ModifyHosts. You must stop or terminate all instances on a host\nbefore it can be released.\n When Dedicated Hosts are released, it make take some time for them to stop\ncounting toward your limit and you may receive capacity errors when trying to\nallocate new Dedicated hosts. Try waiting a few minutes, and then try again.\n Released hosts will still appear in a DescribeHosts response." ([release-hosts-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-release-hosts-request release-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/release-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/release-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ReleaseHosts", :http.request.configuration/output-deser-fn response-release-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef release-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/release-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/release-hosts-result))

(clojure.core/defn copy-snapshot "Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You\ncan copy the snapshot within the same region or from one region to another. You\ncan use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). The\nsnapshot is copied to the regional endpoint that you send the HTTP request to.\n Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted\nsnapshots remain unencrypted, unless the Encrypted flag is specified during the\nsnapshot copy operation. By default, encrypted snapshot copies use the default\nAWS Key Management Service (AWS KMS) customer master key (CMK); however, you can\nspecify a non-default CMK with the KmsKeyId parameter.\n To copy an encrypted snapshot that has been shared from another account, you\nmust have permissions for the CMK used to encrypt the snapshot.\n Snapshots created by the CopySnapshot action have an arbitrary volume ID that\nshould not be used for any purpose.\n For more information, see Copying an Amazon EBS Snapshot\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([copy-snapshot-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-snapshot-request copy-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/copy-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/copy-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CopySnapshot", :http.request.configuration/output-deser-fn response-copy-snapshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef copy-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/copy-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/copy-snapshot-result))

(clojure.core/defn stop-instances "Stops an Amazon EBS-backed instance.\n We don't charge hourly usage for a stopped instance, or data transfer fees;\nhowever, your root partition Amazon EBS volume remains, continues to persist\nyour data, and you are charged for Amazon EBS volume usage. Each time you\ntransition an instance from stopped to started, Amazon EC2 charges a full\ninstance hour, even if transitions happen multiple times within a single hour.\n You can't start or stop Spot instances, and you can't stop instance\nstore-backed instances.\n When you stop an instance, we shut it down. You can restart your instance at\nany time. Before stopping an instance, make sure it is in a state from which it\ncan be restarted. Stopping an instance does not preserve data stored in RAM.\n Stopping an instance is different to rebooting or terminating it. For example,\nwhen you stop an instance, the root device and any other devices attached to the\ninstance persist. When you terminate an instance, the root device and any other\ndevices attached during the instance launch are automatically deleted. For more\ninformation about the differences between rebooting, stopping, and terminating\ninstances, see Instance Lifecycle\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)\nin the Amazon Elastic Compute Cloud User Guide.\n When you stop an instance, we attempt to shut it down forcibly after a short\nwhile. If your instance appears stuck in the stopping state after a period of\ntime, there may be an issue with the underlying host computer. For more\ninformation, see Troubleshooting Stopping Your Instance\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html)\nin the Amazon Elastic Compute Cloud User Guide." ([stop-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-stop-instances-request stop-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/stop-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/stop-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StopInstances", :http.request.configuration/output-deser-fn response-stop-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef stop-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/stop-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/stop-instances-result))

(clojure.core/defn describe-vpn-connections "Describes one or more of your VPN connections.\n For more information about VPN connections, see Adding a Hardware Virtual\nPrivate Gateway to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide." ([] (describe-vpn-connections {})) ([describe-vpn-connections-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpn-connections-request describe-vpn-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpn-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpn-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpnConnections", :http.request.configuration/output-deser-fn response-describe-vpn-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpn-connections :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpn-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpn-connections-result))

(clojure.core/defn detach-internet-gateway "Detaches an Internet gateway from a VPC, disabling connectivity between the\nInternet and the VPC. The VPC must not contain any running instances with\nElastic IP addresses." ([detach-internet-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-internet-gateway-request detach-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/detach-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/detach-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-classic-link-dns-support "Describes the ClassicLink DNS support status of one or more VPCs. If enabled,\nthe DNS hostname of a linked EC2-Classic instance resolves to its private IP\naddress when addressed from an instance in the VPC to which it's linked.\nSimilarly, the DNS hostname of an instance in a VPC resolves to its private IP\naddress when addressed from a linked EC2-Classic instance. For more information\nabout ClassicLink, see ClassicLink\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in the\nAmazon Elastic Compute Cloud User Guide." ([] (describe-vpc-classic-link-dns-support {})) ([describe-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpc-classic-link-dns-support-request describe-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn response-describe-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpc-classic-link-dns-support-result))

(clojure.core/defn move-address-to-vpc "Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC\nplatform. The Elastic IP address must be allocated to your account for more than\n24 hours, and it must not be associated with an instance. After the Elastic IP\naddress is moved, it is no longer available for use in the EC2-Classic platform,\nunless you move it back using the RestoreAddressToClassic request. You cannot\nmove an Elastic IP address that was originally allocated for use in the EC2-VPC\nplatform to the EC2-Classic platform." ([move-address-to-vpc-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-move-address-to-vpc-request move-address-to-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/move-address-to-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/move-address-to-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "MoveAddressToVpc", :http.request.configuration/output-deser-fn response-move-address-to-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef move-address-to-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/move-address-to-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/move-address-to-vpc-result))

(clojure.core/defn deregister-image "Deregisters the specified AMI. After you deregister an AMI, it can't be used to\nlaunch new instances.\n This command does not delete the AMI." ([deregister-image-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-deregister-image-request deregister-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/deregister-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeregisterImage", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef deregister-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/deregister-image-request) :ret clojure.core/true?)

(clojure.core/defn unmonitor-instances "Disables monitoring for a running instance. For more information about\nmonitoring instances, see Monitoring Your Instances and Volumes\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([unmonitor-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-unmonitor-instances-request unmonitor-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/unmonitor-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/unmonitor-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UnmonitorInstances", :http.request.configuration/output-deser-fn response-unmonitor-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef unmonitor-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/unmonitor-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/unmonitor-instances-result))

(clojure.core/defn reset-snapshot-attribute "Resets permission settings for the specified snapshot.\n For more information on modifying snapshot permissions, see Sharing Snapshots\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html)\nin the Amazon Elastic Compute Cloud User Guide." ([reset-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-snapshot-attribute-request reset-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/reset-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ResetSnapshotAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/reset-snapshot-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-flow-logs "Deletes one or more flow logs." ([delete-flow-logs-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-flow-logs-request delete-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/delete-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteFlowLogs", :http.request.configuration/output-deser-fn response-delete-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-flow-logs :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/delete-flow-logs-result))

(clojure.core/defn authorize-security-group-egress "[EC2-VPC only] Adds one or more egress rules to a security group for use with a\nVPC. Specifically, this action permits instances to send traffic to one or more\ndestination CIDR IP address ranges, or to one or more destination security\ngroups for the same VPC. This action doesn't apply to security groups for use in\nEC2-Classic. For more information, see Security Groups for Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)\nin the Amazon Virtual Private Cloud User Guide.\n You can have up to 50 rules per security group (covering both ingress and\negress rules).\n Each rule consists of the protocol (for example, TCP), plus either a CIDR range\nor a source group. For the TCP and UDP protocols, you must also specify the\ndestination port or port range. For the ICMP protocol, you must also specify the\nICMP type and code. You can use -1 for the type or code to mean all types or all\ncodes.\n Rule changes are propagated to affected instances as quickly as possible.\nHowever, a small delay might occur." ([authorize-security-group-egress-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-authorize-security-group-egress-request authorize-security-group-egress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/authorize-security-group-egress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AuthorizeSecurityGroupEgress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef authorize-security-group-egress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/authorize-security-group-egress-request) :ret clojure.core/true?)

(clojure.core/defn unassign-private-ip-addresses "Unassigns one or more secondary private IP addresses from a network interface." ([unassign-private-ip-addresses-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-unassign-private-ip-addresses-request unassign-private-ip-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/unassign-private-ip-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UnassignPrivateIpAddresses", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef unassign-private-ip-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/unassign-private-ip-addresses-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-peering-connections "Describes one or more of your VPC peering connections." ([] (describe-vpc-peering-connections {})) ([describe-vpc-peering-connections-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpc-peering-connections-request describe-vpc-peering-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-peering-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-peering-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpcPeeringConnections", :http.request.configuration/output-deser-fn response-describe-vpc-peering-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-peering-connections :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpc-peering-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpc-peering-connections-result))

(clojure.core/defn monitor-instances "Enables monitoring for a running instance. For more information about monitoring\ninstances, see Monitoring Your Instances and Volumes\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([monitor-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-monitor-instances-request monitor-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/monitor-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/monitor-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "MonitorInstances", :http.request.configuration/output-deser-fn response-monitor-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef monitor-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/monitor-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/monitor-instances-result))

(clojure.core/defn describe-flow-logs "Describes one or more flow logs. To view the information in your flow logs (the\nlog streams for the network interfaces), you must use the CloudWatch Logs\nconsole or the CloudWatch Logs API." ([] (describe-flow-logs {})) ([describe-flow-logs-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-flow-logs-request describe-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeFlowLogs", :http.request.configuration/output-deser-fn response-describe-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-flow-logs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-flow-logs-result))

(clojure.core/defn detach-vpn-gateway "Detaches a virtual private gateway from a VPC. You do this if you're planning to\nturn off the VPC and not use it anymore. You can confirm a virtual private\ngateway has been completely detached from a VPC by describing the virtual\nprivate gateway (any attachments to the virtual private gateway are also\ndescribed).\n You must wait for the attachment's state to switch to detached before you can\ndelete the VPC or attach a different VPC to the virtual private gateway." ([detach-vpn-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-vpn-gateway-request detach-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/detach-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachVpnGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/detach-vpn-gateway-request) :ret clojure.core/true?)

(clojure.core/defn cancel-spot-fleet-requests "Cancels the specified Spot fleet requests.\n After you cancel a Spot fleet request, the Spot fleet launches no new Spot\ninstances. You must specify whether the Spot fleet should also terminate its\nSpot instances. If you terminate the instances, the Spot fleet request enters\nthe cancelled_terminating state. Otherwise, the Spot fleet request enters the\ncancelled_running state and the instances continue to run until they are\ninterrupted or you terminate them manually." ([cancel-spot-fleet-requests-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-cancel-spot-fleet-requests-request cancel-spot-fleet-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CancelSpotFleetRequests", :http.request.configuration/output-deser-fn response-cancel-spot-fleet-requests-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-spot-fleet-requests :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-spot-fleet-requests-response))

(clojure.core/defn cancel-reserved-instances-listing "Cancels the specified Reserved Instance listing in the Reserved Instance\nMarketplace.\n For more information, see Reserved Instance Marketplace\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([cancel-reserved-instances-listing-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-cancel-reserved-instances-listing-request cancel-reserved-instances-listing-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/cancel-reserved-instances-listing-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/cancel-reserved-instances-listing-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CancelReservedInstancesListing", :http.request.configuration/output-deser-fn response-cancel-reserved-instances-listing-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-reserved-instances-listing :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/cancel-reserved-instances-listing-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-reserved-instances-listing-result))

(clojure.core/defn modify-volume-attribute "Modifies a volume attribute.\n By default, all I/O operations for the volume are suspended when the data on\nthe volume is determined to be potentially inconsistent, to prevent\nundetectable, latent data corruption. The I/O access to the volume can be\nresumed by first enabling I/O access and then checking the data consistency on\nyour volume.\n You can change the default behavior to resume I/O operations. We recommend that\nyou change this only for boot volumes or for volumes that are stateless or\ndisposable." ([modify-volume-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-volume-attribute-request modify-volume-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-volume-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyVolumeAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-volume-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-volume-attribute-request) :ret clojure.core/true?)

(clojure.core/defn modify-snapshot-attribute "Adds or removes permission settings for the specified snapshot. You may add or\nremove specified AWS account IDs from a snapshot's list of create volume\npermissions, but you cannot do both in a single API call. If you need to both\nadd and remove account IDs for a snapshot, you must use multiple API calls.\n Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be\nmade public. Snapshots encrypted with your default CMK cannot be shared with\nother accounts.\n For more information on modifying snapshot permissions, see Sharing Snapshots\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html)\nin the Amazon Elastic Compute Cloud User Guide." ([modify-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-snapshot-attribute-request modify-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifySnapshotAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-snapshot-attribute-request) :ret clojure.core/true?)

(clojure.core/defn attach-vpn-gateway "Attaches a virtual private gateway to a VPC. For more information, see Adding a\nHardware Virtual Private Gateway to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide." ([attach-vpn-gateway-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-vpn-gateway-request attach-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/attach-vpn-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/attach-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachVpnGateway", :http.request.configuration/output-deser-fn response-attach-vpn-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/attach-vpn-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attach-vpn-gateway-result))

(clojure.core/defn purchase-scheduled-instances "Purchases one or more Scheduled Instances with the specified schedule.\n Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the\nhour for a one-year term. Before you can purchase a Scheduled Instance, you must\ncall DescribeScheduledInstanceAvailability to check for available schedules and\nobtain a purchase token. After you purchase a Scheduled Instance, you must call\nRunScheduledInstances during each scheduled time period.\n After you purchase a Scheduled Instance, you can't cancel, modify, or resell\nyour purchase." ([purchase-scheduled-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-purchase-scheduled-instances-request purchase-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/purchase-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/purchase-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PurchaseScheduledInstances", :http.request.configuration/output-deser-fn response-purchase-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-scheduled-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/purchase-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/purchase-scheduled-instances-result))

(clojure.core/defn create-security-group "Creates a security group.\n A security group is for use with instances either in the EC2-Classic platform\nor in a specific VPC. For more information, see Amazon EC2 Security Groups\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html)\nin the Amazon Elastic Compute Cloud User Guide and Security Groups for Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)\nin the Amazon Virtual Private Cloud User Guide.\n EC2-Classic: You can have up to 500 security groups.\n EC2-VPC: You can create up to 500 security groups per VPC.\n When you create a security group, you specify a friendly name of your choice.\nYou can have a security group for use in EC2-Classic with the same name as a\nsecurity group for use in a VPC. However, you can't have two security groups for\nuse in EC2-Classic with the same name or two security groups for use in a VPC\nwith the same name.\n You have a default security group for use in EC2-Classic and a default security\ngroup for use in your VPC. If you don't specify a security group when you launch\nan instance, the instance is launched into the appropriate default security\ngroup. A default security group includes a default rule that grants instances\nunrestricted network access to each other.\n You can add or remove rules from your security groups using\nAuthorizeSecurityGroupIngress, AuthorizeSecurityGroupEgress,\nRevokeSecurityGroupIngress, and RevokeSecurityGroupEgress." ([create-security-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-security-group-request create-security-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-security-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSecurityGroup", :http.request.configuration/output-deser-fn response-create-security-group-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-security-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-security-group-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-security-group-result))

(clojure.core/defn cancel-bundle-task "Cancels a bundling operation for an instance store-backed Windows instance." ([cancel-bundle-task-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-cancel-bundle-task-request cancel-bundle-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/cancel-bundle-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/cancel-bundle-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CancelBundleTask", :http.request.configuration/output-deser-fn response-cancel-bundle-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-bundle-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/cancel-bundle-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-bundle-task-result))

(clojure.core/defn restore-address-to-classic "Restores an Elastic IP address that was previously moved to the EC2-VPC platform\nback to the EC2-Classic platform. You cannot move an Elastic IP address that was\noriginally allocated for use in EC2-VPC. The Elastic IP address must not be\nassociated with an instance or network interface." ([restore-address-to-classic-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-address-to-classic-request restore-address-to-classic-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/restore-address-to-classic-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/restore-address-to-classic-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RestoreAddressToClassic", :http.request.configuration/output-deser-fn response-restore-address-to-classic-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef restore-address-to-classic :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/restore-address-to-classic-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/restore-address-to-classic-result))

(clojure.core/defn terminate-instances "Shuts down one or more instances. This operation is idempotent; if you terminate\nan instance more than once, each call succeeds.\n If you specify multiple instances and the request fails (for example, because\nof a single incorrect instance ID), none of the instances are terminated.\n Terminated instances remain visible after termination (for approximately one\nhour).\n By default, Amazon EC2 deletes all EBS volumes that were attached when the\ninstance launched. Volumes attached after instance launch continue running.\n You can stop, start, and terminate EBS-backed instances. You can only terminate\ninstance store-backed instances. What happens to an instance differs if you stop\nit or terminate it. For example, when you stop an instance, the root device and\nany other devices attached to the instance persist. When you terminate an\ninstance, any attached EBS volumes with the DeleteOnTermination block device\nmapping parameter set to true are automatically deleted. For more information\nabout the differences between stopping and terminating instances, see Instance\nLifecycle\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)\nin the Amazon Elastic Compute Cloud User Guide.\n For more information about troubleshooting, see Troubleshooting Terminating\nYour Instance\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html)\nin the Amazon Elastic Compute Cloud User Guide." ([terminate-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-terminate-instances-request terminate-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/terminate-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/terminate-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "TerminateInstances", :http.request.configuration/output-deser-fn response-terminate-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef terminate-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/terminate-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/terminate-instances-result))

(clojure.core/defn describe-regions "Describes one or more regions that are currently available to you.\n For a list of the regions supported by Amazon EC2, see Regions and Endpoints\n(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)." ([] (describe-regions {})) ([describe-regions-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-regions-request describe-regions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-regions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-regions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeRegions", :http.request.configuration/output-deser-fn response-describe-regions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-regions :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-regions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-regions-result))

(clojure.core/defn create-network-interface "Creates a network interface in the specified subnet.\n For more information about network interfaces, see Elastic Network Interfaces\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html) in the\nAmazon Elastic Compute Cloud User Guide." ([create-network-interface-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-network-interface-request create-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-network-interface-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateNetworkInterface", :http.request.configuration/output-deser-fn response-create-network-interface-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-network-interface-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-network-interface-result))

(clojure.core/defn create-vpc-peering-connection "Requests a VPC peering connection between two VPCs: a requester VPC that you own\nand a peer VPC with which to create the connection. The peer VPC can belong to\nanother AWS account. The requester VPC and peer VPC cannot have overlapping CIDR\nblocks.\n The owner of the peer VPC must accept the peering request to activate the\npeering connection. The VPC peering connection request expires after 7 days,\nafter which it cannot be accepted or rejected.\n A CreateVpcPeeringConnection request between VPCs with overlapping CIDR blocks\nresults in the VPC peering connection having a status of failed." ([] (create-vpc-peering-connection {})) ([create-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-vpc-peering-connection-request create-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateVpcPeeringConnection", :http.request.configuration/output-deser-fn response-create-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-peering-connection :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/create-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-vpc-peering-connection-result))

(clojure.core/defn create-vpc-endpoint "Creates a VPC endpoint for a specified AWS service. An endpoint enables you to\ncreate a private connection between your VPC and another AWS service in your\naccount. You can specify an endpoint policy to attach to the endpoint that will\ncontrol access to the service from your VPC. You can also specify the VPC route\ntables that use the endpoint.\n Currently, only endpoints to Amazon S3 are supported." ([create-vpc-endpoint-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-vpc-endpoint-request create-vpc-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-vpc-endpoint-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-vpc-endpoint-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateVpcEndpoint", :http.request.configuration/output-deser-fn response-create-vpc-endpoint-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-vpc-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-vpc-endpoint-result))

(clojure.core/defn create-placement-group "Creates a placement group that you launch cluster instances into. You must give\nthe group a name that's unique within the scope of your account.\n For more information about placement groups and cluster instances, see Cluster\nInstances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html)\nin the Amazon Elastic Compute Cloud User Guide." ([create-placement-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-placement-group-request create-placement-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-placement-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreatePlacementGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-placement-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-placement-group-request) :ret clojure.core/true?)

(clojure.core/defn attach-classic-link-vpc "Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more\nof the VPC's security groups. You cannot link an EC2-Classic instance to more\nthan one VPC at a time. You can only link an instance that's in the running\nstate. An instance is automatically unlinked from a VPC when it's stopped - you\ncan link it to the VPC again when you restart it.\n After you've linked an instance, you cannot change the VPC security groups that\nare associated with it. To change the security groups, you must first unlink the\ninstance, and then link it again.\n Linking your instance to a VPC is sometimes referred to as attaching your\ninstance." ([attach-classic-link-vpc-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-classic-link-vpc-request attach-classic-link-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/attach-classic-link-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/attach-classic-link-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachClassicLinkVpc", :http.request.configuration/output-deser-fn response-attach-classic-link-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-classic-link-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/attach-classic-link-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/attach-classic-link-vpc-result))

(clojure.core/defn request-spot-fleet "Creates a Spot fleet request.\n You can submit a single request that includes multiple launch specifications\nthat vary by instance type, AMI, Availability Zone, or subnet.\n By default, the Spot fleet requests Spot instances in the Spot pool where the\nprice per unit is the lowest. Each launch specification can include its own\ninstance weighting that reflects the value of the instance type to your\napplication workload.\n Alternatively, you can specify that the Spot fleet distribute the target\ncapacity across the Spot pools included in its launch specifications. By\nensuring that the Spot instances in your Spot fleet are in different Spot pools,\nyou can improve the availability of your fleet.\n For more information, see Spot Fleet Requests\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html) in\nthe Amazon Elastic Compute Cloud User Guide." ([request-spot-fleet-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-request-spot-fleet-request request-spot-fleet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/request-spot-fleet-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/request-spot-fleet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RequestSpotFleet", :http.request.configuration/output-deser-fn response-request-spot-fleet-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef request-spot-fleet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/request-spot-fleet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/request-spot-fleet-response))

(clojure.core/defn detach-classic-link-vpc "Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance\nhas been unlinked, the VPC security groups are no longer associated with it. An\ninstance is automatically unlinked from a VPC when it's stopped." ([detach-classic-link-vpc-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-classic-link-vpc-request detach-classic-link-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/detach-classic-link-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/detach-classic-link-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachClassicLinkVpc", :http.request.configuration/output-deser-fn response-detach-classic-link-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-classic-link-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/detach-classic-link-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/detach-classic-link-vpc-result))

(clojure.core/defn create-vpn-connection "Creates a VPN connection between an existing virtual private gateway and a VPN\ncustomer gateway. The only supported connection type is ipsec.1.\n The response includes information that you need to give to your network\nadministrator to configure your customer gateway.\n We strongly recommend that you use HTTPS when calling this operation because\nthe response contains sensitive cryptographic information for configuring your\ncustomer gateway.\n If you decide to shut down your VPN connection for any reason and later create\na new VPN connection, you must reconfigure your customer gateway with the new\ninformation returned from this call.\n This is an idempotent operation. If you perform the operation more than once,\nAmazon EC2 doesn't return an error.\n For more information about VPN connections, see Adding a Hardware Virtual\nPrivate Gateway to Your VPC\n(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html) in the\nAmazon Virtual Private Cloud User Guide." ([create-vpn-connection-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-vpn-connection-request create-vpn-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/create-vpn-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-vpn-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateVpnConnection", :http.request.configuration/output-deser-fn response-create-vpn-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-vpn-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/create-vpn-connection-result))

(clojure.core/defn modify-vpc-endpoint "Modifies attributes of a specified VPC endpoint. You can modify the policy\nassociated with the endpoint, and you can add and remove route tables associated\nwith the endpoint." ([modify-vpc-endpoint-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-vpc-endpoint-request modify-vpc-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/modify-vpc-endpoint-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-vpc-endpoint-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyVpcEndpoint", :http.request.configuration/output-deser-fn response-modify-vpc-endpoint-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-vpc-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/modify-vpc-endpoint-result))

(clojure.core/defn enable-volume-io "Enables I/O operations for a volume that had I/O operations disabled because the\ndata on the volume was potentially inconsistent." ([enable-volume-io-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-enable-volume-io-request enable-volume-io-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/enable-volume-io-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "EnableVolumeIO", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-volume-io :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/enable-volume-io-request) :ret clojure.core/true?)

(clojure.core/defn modify-id-format "Modifies the ID format for the specified resource on a per-region basis. You can\nspecify that resources should receive longer IDs (17-character IDs) when they\nare created. The following resource types support longer IDs: instance |\nreservation | snapshot | volume.\n This setting applies to the IAM user who makes the request; it does not apply\nto the entire AWS account. By default, an IAM user defaults to the same settings\nas the root user. If you're using this action as the root user, then these\nsettings apply to the entire account, unless an IAM user explicitly overrides\nthese settings for themselves. For more information, see Resource IDs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html) in the\nAmazon Elastic Compute Cloud User Guide.\n Resources created with longer IDs are visible to all IAM roles and users,\nregardless of these settings and provided that they have permission to use the\nrelevant Describe command for the resource type." ([modify-id-format-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-id-format-request modify-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/modify-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ModifyIdFormat", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-id-format :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/modify-id-format-request) :ret clojure.core/true?)

(clojure.core/defn run-instances "Launches the specified number of instances using an AMI for which you have\npermissions.\n When you launch an instance, it enters the pending state. After the instance is\nready for you, it enters the running state. To check the state of your instance,\ncall DescribeInstances.\n To ensure faster instance launches, break up large requests into smaller\nbatches. For example, create five separate launch requests for 100 instances\neach instead of one launch request for 500 instances.\n To tag your instance, ensure that it is running as CreateTags requires a\nresource ID. For more information about tagging, see Tagging Your Amazon EC2\nResources (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html).\n If you don't specify a security group when launching an instance, Amazon EC2\nuses the default security group. For more information, see Security Groups\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html)\nin the Amazon Elastic Compute Cloud User Guide.\n [EC2-VPC only accounts] If you don't specify a subnet in the request, we choose\na default subnet from your default VPC for you.\n [EC2-Classic accounts] If you're launching into EC2-Classic and you don't\nspecify an Availability Zone, we choose one for you.\n Linux instances have access to the public key of the key pair at boot. You can\nuse this key to provide secure access to the instance. Amazon EC2 public images\nuse this feature to provide secure access without passwords. For more\ninformation, see Key Pairs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the\nAmazon Elastic Compute Cloud User Guide.\n You can provide optional user data when launching an instance. For more\ninformation, see Instance Metadata\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html)\nin the Amazon Elastic Compute Cloud User Guide.\n If any of the AMIs have a product code attached for which the user has not\nsubscribed, RunInstances fails.\n Some instance types can only be launched into a VPC. If you do not have a\ndefault VPC, or if you do not specify a subnet ID in the request, RunInstances\nfails. For more information, see Instance Types Available Only in a VPC\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types).\n For more information about troubleshooting, see What To Do If An Instance\nImmediately Terminates\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html),\nand Troubleshooting Connecting to Your Instance\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html)\nin the Amazon Elastic Compute Cloud User Guide." ([run-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-run-instances-request run-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/reservation, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/run-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RunInstances", :http.request.configuration/output-deser-fn response-reservation, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef run-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/run-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/reservation))

(clojure.core/defn create-key-pair "Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the\npublic key and displays the private key for you to save to a file. The private\nkey is returned as an unencrypted PEM encoded PKCS#8 private key. If a key with\nthe specified name already exists, Amazon EC2 returns an error.\n You can have up to five thousand key pairs per region.\n The key pair returned to you is available only in the region in which you\ncreate it. To create a key pair that is available in all regions, use\nImportKeyPair.\n For more information about key pairs, see Key Pairs\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the\nAmazon Elastic Compute Cloud User Guide." ([create-key-pair-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-key-pair-request create-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/key-pair, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/create-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateKeyPair", :http.request.configuration/output-deser-fn response-key-pair, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/create-key-pair-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/key-pair))

(clojure.core/defn delete-network-interface "Deletes the specified network interface. You must detach the network interface\nbefore you can delete it." ([delete-network-interface-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-network-interface-request delete-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteNetworkInterface", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-network-interface-request) :ret clojure.core/true?)

(clojure.core/defn delete-spot-datafeed-subscription "Deletes the data feed for Spot instances." ([] (delete-spot-datafeed-subscription {})) ([delete-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-spot-datafeed-subscription-request delete-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSpotDatafeedSubscription", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-spot-datafeed-subscription :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/delete-spot-datafeed-subscription-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-endpoints "Describes one or more of your VPC endpoints." ([] (describe-vpc-endpoints {})) ([describe-vpc-endpoints-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-vpc-endpoints-request describe-vpc-endpoints-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoints-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoints-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVpcEndpoints", :http.request.configuration/output-deser-fn response-describe-vpc-endpoints-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoints :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoints-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-vpc-endpoints-result))

(clojure.core/defn describe-hosts "Describes one or more of your Dedicated Hosts.\n The results describe only the Dedicated Hosts in the region you're currently\nusing. All listed instances consume capacity on your Dedicated Host. Dedicated\nHosts that have recently been released will be listed with the state released." ([] (describe-hosts {})) ([describe-hosts-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-hosts-request describe-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/describe-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeHosts", :http.request.configuration/output-deser-fn response-describe-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-hosts :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-09-15/describe-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/describe-hosts-result))

(clojure.core/defn delete-vpn-connection "Deletes the specified VPN connection.\n If you're deleting the VPC and its associated components, we recommend that you\ndetach the virtual private gateway from the VPC and delete the VPC before\ndeleting the VPN connection. If you believe that the tunnel credentials for your\nVPN connection have been compromised, you can delete the VPN connection and\ncreate a new one that has new keys, without needing to delete the VPC or virtual\nprivate gateway. If you create a new VPN connection, you must reconfigure the\ncustomer gateway using the new configuration information returned with the new\nVPN connection ID." ([delete-vpn-connection-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-vpn-connection-request delete-vpn-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-vpn-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVpnConnection", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-vpn-connection-request) :ret clojure.core/true?)

(clojure.core/defn start-instances "Starts an Amazon EBS-backed AMI that you've previously stopped.\n Instances that use Amazon EBS volumes as their root devices can be quickly\nstopped and started. When an instance is stopped, the compute resources are\nreleased and you are not billed for hourly instance usage. However, your root\npartition Amazon EBS volume remains, continues to persist your data, and you are\ncharged for Amazon EBS volume usage. You can restart your instance at any time.\nEach time you transition an instance from stopped to started, Amazon EC2 charges\na full instance hour, even if transitions happen multiple times within a single\nhour.\n Before stopping an instance, make sure it is in a state from which it can be\nrestarted. Stopping an instance does not preserve data stored in RAM.\n Performing this operation on an instance that uses an instance store as its\nroot device returns an error.\n For more information, see Stopping Instances\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html) in the\nAmazon Elastic Compute Cloud User Guide." ([start-instances-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-start-instances-request start-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/start-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/start-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StartInstances", :http.request.configuration/output-deser-fn response-start-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef start-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/start-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/start-instances-result))

(clojure.core/defn detach-volume "Detaches an EBS volume from an instance. Make sure to unmount any file systems\non the device within your operating system before detaching the volume. Failure\nto do so can result in the volume becoming stuck in the busy state while\ndetaching. If this happens, detachment can be delayed indefinitely until you\nunmount the volume, force detachment, reboot the instance, or all three. If an\nEBS volume is the root device of an instance, it can't be detached while the\ninstance is running. To detach the root volume, stop the instance first.\n When a volume with an AWS Marketplace product code is detached from an\ninstance, the product code is no longer associated with the instance.\n For more information, see Detaching an Amazon EBS Volume\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html)\nin the Amazon Elastic Compute Cloud User Guide." ([detach-volume-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-volume-request detach-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/volume-attachment, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/detach-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachVolume", :http.request.configuration/output-deser-fn response-volume-attachment, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/detach-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/volume-attachment))

(clojure.core/defn confirm-product-instance "Determines whether a product code is associated with an instance. This action\ncan only be used by the owner of the product code. It is useful when a product\ncode owner needs to verify whether another user's instance is eligible for\nsupport." ([confirm-product-instance-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-confirm-product-instance-request confirm-product-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/confirm-product-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/confirm-product-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ConfirmProductInstance", :http.request.configuration/output-deser-fn response-confirm-product-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef confirm-product-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/confirm-product-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/confirm-product-instance-result))

(clojure.core/defn delete-vpc-peering-connection "Deletes a VPC peering connection. Either the owner of the requester VPC or the\nowner of the peer VPC can delete the VPC peering connection if it's in the\nactive state. The owner of the requester VPC can delete a VPC peering connection\nin the pending-acceptance state." ([delete-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-vpc-peering-connection-request delete-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/delete-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/delete-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVpcPeeringConnection", :http.request.configuration/output-deser-fn response-delete-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-peering-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/delete-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/delete-vpc-peering-connection-result))

(clojure.core/defn describe-image-attribute "Describes the specified attribute of the specified AMI. You can specify only one\nattribute at a time." ([describe-image-attribute-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-image-attribute-request describe-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/image-attribute, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/describe-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeImageAttribute", :http.request.configuration/output-deser-fn response-image-attribute, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/describe-image-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/image-attribute))

(clojure.core/defn cancel-spot-instance-requests "Cancels one or more Spot instance requests. Spot instances are instances that\nAmazon EC2 starts on your behalf when the bid price that you specify exceeds the\ncurrent Spot price. Amazon EC2 periodically sets the Spot price based on\navailable Spot instance capacity and current Spot instance requests. For more\ninformation, see Spot Instance Requests\n(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html) in the\nAmazon Elastic Compute Cloud User Guide.\n Canceling a Spot instance request does not terminate running Spot instances\nassociated with the request." ([cancel-spot-instance-requests-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-cancel-spot-instance-requests-request cancel-spot-instance-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-09-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-requests-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-09-15", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CancelSpotInstanceRequests", :http.request.configuration/output-deser-fn response-cancel-spot-instance-requests-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-spot-instance-requests :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-09-15/cancel-spot-instance-requests-result))
