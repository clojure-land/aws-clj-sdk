(ns portkey.aws.ec2.-2015-10-01 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "ec2", :region "ap-northeast-1"},
    :ssl-common-name "ec2.ap-northeast-1.amazonaws.com",
    :endpoint "https://ec2.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "ec2", :region "eu-west-1"},
    :ssl-common-name "ec2.eu-west-1.amazonaws.com",
    :endpoint "https://ec2.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "ec2", :region "us-east-2"},
    :ssl-common-name "ec2.us-east-2.amazonaws.com",
    :endpoint "https://ec2.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "ec2", :region "ap-southeast-2"},
    :ssl-common-name "ec2.ap-southeast-2.amazonaws.com",
    :endpoint "https://ec2.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "ec2", :region "cn-north-1"},
    :ssl-common-name "ec2.cn-north-1.amazonaws.com.cn",
    :endpoint "https://ec2.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "ec2", :region "sa-east-1"},
    :ssl-common-name "ec2.sa-east-1.amazonaws.com",
    :endpoint "https://ec2.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "ec2", :region "ap-southeast-1"},
    :ssl-common-name "ec2.ap-southeast-1.amazonaws.com",
    :endpoint "https://ec2.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "ec2", :region "cn-northwest-1"},
    :ssl-common-name "ec2.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://ec2.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "ec2", :region "ap-northeast-2"},
    :ssl-common-name "ec2.ap-northeast-2.amazonaws.com",
    :endpoint "https://ec2.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "ec2", :region "eu-west-3"},
    :ssl-common-name "ec2.eu-west-3.amazonaws.com",
    :endpoint "https://ec2.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "ec2", :region "ca-central-1"},
    :ssl-common-name "ec2.ca-central-1.amazonaws.com",
    :endpoint "https://ec2.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "ec2", :region "eu-central-1"},
    :ssl-common-name "ec2.eu-central-1.amazonaws.com",
    :endpoint "https://ec2.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "ec2", :region "eu-west-2"},
    :ssl-common-name "ec2.eu-west-2.amazonaws.com",
    :endpoint "https://ec2.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "ec2", :region "us-gov-west-1"},
    :ssl-common-name "ec2.us-gov-west-1.amazonaws.com",
    :endpoint "https://ec2.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "ec2", :region "us-west-2"},
    :ssl-common-name "ec2.us-west-2.amazonaws.com",
    :endpoint "https://ec2.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "ec2", :region "us-east-1"},
    :ssl-common-name "ec2.us-east-1.amazonaws.com",
    :endpoint "https://ec2.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "ec2", :region "us-west-1"},
    :ssl-common-name "ec2.us-west-1.amazonaws.com",
    :endpoint "https://ec2.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "ec2", :region "ap-south-1"},
    :ssl-common-name "ec2.ap-south-1.amazonaws.com",
    :endpoint "https://ec2.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-zone-name-string-list)

(clojure.core/declare ser-scheduled-instances-monitoring)

(clojure.core/declare ser-permission-group)

(clojure.core/declare ser-double)

(clojure.core/declare ser-private-ip-address-config-set)

(clojure.core/declare ser-ebs-instance-block-device-specification)

(clojure.core/declare ser-storage)

(clojure.core/declare ser-value-string-list)

(clojure.core/declare ser-peering-connection-options-request)

(clojure.core/declare ser-customer-gateway-id-string-list)

(clojure.core/declare ser-public-ip-string-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-export-task-id-string-list)

(clojure.core/declare ser-vpc-classic-link-id-list)

(clojure.core/declare ser-prefix-list-id)

(clojure.core/declare ser-spot-instance-request-id-list)

(clojure.core/declare ser-security-group-string-list)

(clojure.core/declare ser-vpn-connection-id-string-list)

(clojure.core/declare ser-architecture-values)

(clojure.core/declare ser-blob-attribute-value)

(clojure.core/declare ser-export-environment)

(clojure.core/declare ser-scheduled-instances-private-ip-address-config)

(clojure.core/declare ser-product-code-string-list)

(clojure.core/declare ser-spot-placement)

(clojure.core/declare ser-occurrence-day-request-set)

(clojure.core/declare ser-spot-instance-type)

(clojure.core/declare ser-ebs-block-device)

(clojure.core/declare ser-new-dhcp-configuration)

(clojure.core/declare ser-placement)

(clojure.core/declare ser-network-interface-id-list)

(clojure.core/declare ser-reserved-instances-configuration)

(clojure.core/declare ser-vpn-connection-options-specification)

(clojure.core/declare ser-tenancy)

(clojure.core/declare ser-reserved-instances-offering-id-string-list)

(clojure.core/declare ser-scheduled-instances-security-group-id-set)

(clojure.core/declare ser-affinity)

(clojure.core/declare ser-group-name-string-list)

(clojure.core/declare ser-scheduled-instances-placement)

(clojure.core/declare ser-key-name-string-list)

(clojure.core/declare ser-scheduled-instances-block-device-mapping)

(clojure.core/declare ser-account-attribute-name)

(clojure.core/declare ser-instance-type)

(clojure.core/declare ser-instance-type-list)

(clojure.core/declare ser-instance-id-string-list)

(clojure.core/declare ser-image-attribute-name)

(clojure.core/declare ser-create-volume-permission)

(clojure.core/declare ser-iam-instance-profile-specification)

(clojure.core/declare ser-placement-group-string-list)

(clojure.core/declare ser-volume-detail)

(clojure.core/declare ser-host-tenancy)

(clojure.core/declare ser-icmp-type-code)

(clojure.core/declare ser-volume-attribute-name)

(clojure.core/declare ser-scheduled-instance-id-request-set)

(clojure.core/declare ser-attribute-boolean-value)

(clojure.core/declare ser-vpc-id-string-list)

(clojure.core/declare ser-price-schedule-specification)

(clojure.core/declare ser-export-to-s-3-task-specification)

(clojure.core/declare ser-rule-action)

(clojure.core/declare ser-fleet-type)

(clojure.core/declare ser-group-identifier-list)

(clojure.core/declare ser-price-schedule-specification-list)

(clojure.core/declare ser-traffic-type)

(clojure.core/declare ser-allocation-id-list)

(clojure.core/declare ser-create-volume-permission-list)

(clojure.core/declare ser-image-disk-container-list)

(clojure.core/declare ser-event-type)

(clojure.core/declare ser-restorable-by-string-list)

(clojure.core/declare ser-next-token)

(clojure.core/declare ser-slot-start-time-range-request)

(clojure.core/declare ser-excess-capacity-termination-policy)

(clojure.core/declare ser-spot-fleet-monitoring)

(clojure.core/declare ser-instance-block-device-mapping-specification)

(clojure.core/declare ser-group-ids)

(clojure.core/declare ser-user-id-group-pair-list)

(clojure.core/declare ser-s-3-storage)

(clojure.core/declare ser-launch-permission-list)

(clojure.core/declare ser-reserved-instances-id-string-list)

(clojure.core/declare ser-group-identifier)

(clojure.core/declare ser-run-instances-monitoring-enabled)

(clojure.core/declare ser-disk-image-list)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-client-data)

(clojure.core/declare ser-image-disk-container)

(clojure.core/declare ser-spot-fleet-request-config-data)

(clojure.core/declare ser-conversion-id-string-list)

(clojure.core/declare ser-allocation-strategy)

(clojure.core/declare ser-attribute-value)

(clojure.core/declare ser-private-ip-address-specification-list)

(clojure.core/declare ser-auto-placement)

(clojure.core/declare ser-prefix-list-id-list)

(clojure.core/declare ser-vpc-attribute-name)

(clojure.core/declare ser-instance-block-device-mapping-specification-list)

(clojure.core/declare ser-placement-strategy)

(clojure.core/declare ser-user-group-string-list)

(clojure.core/declare ser-scheduled-instances-ebs)

(clojure.core/declare ser-volume-id-string-list)

(clojure.core/declare ser-dhcp-options-id-string-list)

(clojure.core/declare ser-reset-image-attribute-name)

(clojure.core/declare ser-scheduled-instances-launch-specification)

(clojure.core/declare ser-product-description-list)

(clojure.core/declare ser-group-id-string-list)

(clojure.core/declare ser-snapshot-disk-container)

(clojure.core/declare ser-launch-specs-list)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-ip-permission)

(clojure.core/declare ser-ip-permission-list)

(clojure.core/declare ser-slot-date-time-range-request)

(clojure.core/declare ser-ri-product-description)

(clojure.core/declare ser-disk-image-format)

(clojure.core/declare ser-scheduled-instances-network-interface-set)

(clojure.core/declare ser-security-group-id-string-list)

(clojure.core/declare ser-domain-type)

(clojure.core/declare ser-flow-logs-resource-type)

(clojure.core/declare ser-operation-type)

(clojure.core/declare ser-snapshot-attribute-name)

(clojure.core/declare ser-currency-code-values)

(clojure.core/declare ser-network-interface-attribute)

(clojure.core/declare ser-report-instance-reason-codes)

(clojure.core/declare ser-bundle-id-string-list)

(clojure.core/declare ser-volume-type)

(clojure.core/declare ser-account-attribute-name-string-list)

(clojure.core/declare ser-launch-permission-modifications)

(clojure.core/declare ser-long)

(clojure.core/declare ser-subnet-id-string-list)

(clojure.core/declare ser-reserved-instance-limit-price)

(clojure.core/declare ser-region-name-string-list)

(clojure.core/declare ser-scheduled-instance-recurrence-request)

(clojure.core/declare ser-user-bucket)

(clojure.core/declare ser-scheduled-instances-network-interface)

(clojure.core/declare ser-reserved-instances-configuration-list)

(clojure.core/declare ser-instance-network-interface-specification-list)

(clojure.core/declare ser-block-device-mapping)

(clojure.core/declare ser-max-results)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-user-id-string-list)

(clojure.core/declare ser-executable-by-string-list)

(clojure.core/declare ser-platform-values)

(clojure.core/declare ser-disk-image)

(clojure.core/declare ser-port-range)

(clojure.core/declare ser-spot-fleet-launch-specification)

(clojure.core/declare ser-ip-range)

(clojure.core/declare ser-block-device-mapping-request-list)

(clojure.core/declare ser-container-format)

(clojure.core/declare ser-purchase-request-set)

(clojure.core/declare ser-new-dhcp-configuration-list)

(clojure.core/declare ser-block-device-mapping-list)

(clojure.core/declare ser-blob)

(clojure.core/declare ser-gateway-type)

(clojure.core/declare ser-scheduled-instances-iam-instance-profile)

(clojure.core/declare ser-report-status-type)

(clojure.core/declare ser-ip-range-list)

(clojure.core/declare ser-import-instance-launch-specification)

(clojure.core/declare ser-scheduled-instances-block-device-mapping-set)

(clojure.core/declare ser-purchase-request)

(clojure.core/declare ser-reserved-instances-modification-id-string-list)

(clojure.core/declare ser-resource-id-list)

(clojure.core/declare ser-request-host-id-list)

(clojure.core/declare ser-image-id-string-list)

(clojure.core/declare ser-instance-attribute-name)

(clojure.core/declare ser-disk-image-detail)

(clojure.core/declare ser-user-data)

(clojure.core/declare ser-offering-type-values)

(clojure.core/declare ser-network-interface-attachment-changes)

(clojure.core/declare ser-private-ip-address-string-list)

(clojure.core/declare ser-owner-string-list)

(clojure.core/declare ser-create-volume-permission-modifications)

(clojure.core/declare ser-reason-codes-list)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-launch-permission)

(clojure.core/declare ser-vpn-gateway-id-string-list)

(clojure.core/declare ser-private-ip-address-specification)

(clojure.core/declare ser-request-spot-launch-specification)

(clojure.core/declare ser-user-id-group-pair)

(clojure.core/declare ser-import-task-id-list)

(clojure.core/declare ser-date-time)

(clojure.core/declare ser-snapshot-id-string-list)

(clojure.core/declare ser-shutdown-behavior)

(clojure.core/declare ser-boolean)

(clojure.core/declare ser-instance-network-interface-specification)

(clojure.core/defn- ser-zone-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ZoneName"}))) input), :shape "ZoneNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-monitoring [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesMonitoring", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean"}))))

(clojure.core/defn- ser-permission-group [input] #:http.request.field{:value (clojure.core/get {"all" "all", :all "all"} input), :shape "PermissionGroup"})

(clojure.core/defn- ser-double [input] #:http.request.field{:value input, :shape "Double"})

(clojure.core/defn- ser-private-ip-address-config-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-private-ip-address-config coll) #:http.request.field{:shape "ScheduledInstancesPrivateIpAddressConfig", :location-name "PrivateIpAddressConfigSet"}))) input), :shape "PrivateIpAddressConfigSet", :type "list"})

(clojure.core/defn- ser-ebs-instance-block-device-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "EbsInstanceBlockDeviceSpecification", :type "structure"} (clojure.core/contains? input :volume-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String", :location-name "volumeId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"}))))

(clojure.core/defn- ser-storage [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Storage", :type "structure"} (clojure.core/contains? input :s-3) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-s-3-storage (input :s-3)) #:http.request.field{:name "S3", :shape "S3Storage"}))))

(clojure.core/defn- ser-value-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ValueStringList", :type "list"})

(clojure.core/defn- ser-peering-connection-options-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-boolean (:allow-egress-from-local-classic-link-to-remote-vpc input)) #:http.request.field{:name "AllowEgressFromLocalClassicLinkToRemoteVpc", :shape "Boolean"}) (clojure.core/into (ser-boolean (:allow-egress-from-local-vpc-to-remote-classic-link input)) #:http.request.field{:name "AllowEgressFromLocalVpcToRemoteClassicLink", :shape "Boolean"})], :shape "PeeringConnectionOptionsRequest", :type "structure"}))

(clojure.core/defn- ser-customer-gateway-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CustomerGatewayId"}))) input), :shape "CustomerGatewayIdStringList", :type "list"})

(clojure.core/defn- ser-public-ip-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PublicIp"}))) input), :shape "PublicIpStringList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Filter", :type "structure"} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :values)) #:http.request.field{:name "Values", :shape "ValueStringList", :location-name "Value"}))))

(clojure.core/defn- ser-export-task-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ExportTaskId"}))) input), :shape "ExportTaskIdStringList", :type "list"})

(clojure.core/defn- ser-vpc-classic-link-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcId"}))) input), :shape "VpcClassicLinkIdList", :type "list"})

(clojure.core/defn- ser-prefix-list-id [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PrefixListId", :type "structure"} (clojure.core/contains? input :prefix-list-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix-list-id)) #:http.request.field{:name "PrefixListId", :shape "String", :location-name "prefixListId"}))))

(clojure.core/defn- ser-spot-instance-request-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SpotInstanceRequestId"}))) input), :shape "SpotInstanceRequestIdList", :type "list"})

(clojure.core/defn- ser-security-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroup"}))) input), :shape "SecurityGroupStringList", :type "list"})

(clojure.core/defn- ser-vpn-connection-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpnConnectionId"}))) input), :shape "VpnConnectionIdStringList", :type "list"})

(clojure.core/defn- ser-architecture-values [input] #:http.request.field{:value (clojure.core/get {"i386" "i386", :i-386 "i386", "x86_64" "x86_64", :x-86-64 "x86_64"} input), :shape "ArchitectureValues"})

(clojure.core/defn- ser-blob-attribute-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BlobAttributeValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob (input :value)) #:http.request.field{:name "Value", :shape "Blob", :location-name "value"}))))

(clojure.core/defn- ser-export-environment [input] #:http.request.field{:value (clojure.core/get {"citrix" "citrix", :citrix "citrix", "vmware" "vmware", :vmware "vmware", "microsoft" "microsoft", :microsoft "microsoft"} input), :shape "ExportEnvironment"})

(clojure.core/defn- ser-scheduled-instances-private-ip-address-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesPrivateIpAddressConfig", :type "structure"} (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String"})) (clojure.core/contains? input :primary) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :primary)) #:http.request.field{:name "Primary", :shape "Boolean"}))))

(clojure.core/defn- ser-product-code-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ProductCode"}))) input), :shape "ProductCodeStringList", :type "list"})

(clojure.core/defn- ser-spot-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotPlacement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"}))))

(clojure.core/defn- ser-occurrence-day-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-integer coll) #:http.request.field{:shape "Integer", :location-name "OccurenceDay"}))) input), :shape "OccurrenceDayRequestSet", :type "list"})

(clojure.core/defn- ser-spot-instance-type [input] #:http.request.field{:value (clojure.core/get {"one-time" "one-time", :onetime "one-time", "persistent" "persistent", :persistent "persistent"} input), :shape "SpotInstanceType"})

(clojure.core/defn- ser-ebs-block-device [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "EbsBlockDevice", :type "structure"} (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String", :location-name "snapshotId"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer", :location-name "volumeSize"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType", :location-name "volumeType"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer", :location-name "iops"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"}))))

(clojure.core/defn- ser-new-dhcp-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NewDhcpConfiguration", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String", :location-name "key"})) (clojure.core/contains? input :values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :values)) #:http.request.field{:name "Values", :shape "ValueStringList", :location-name "Value"}))))

(clojure.core/defn- ser-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Placement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "Tenancy", :location-name "tenancy"})) (clojure.core/contains? input :host-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-id)) #:http.request.field{:name "HostId", :shape "String", :location-name "hostId"})) (clojure.core/contains? input :affinity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :affinity)) #:http.request.field{:name "Affinity", :shape "String", :location-name "affinity"}))))

(clojure.core/defn- ser-network-interface-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "NetworkInterfaceIdList", :type "list"})

(clojure.core/defn- ser-reserved-instances-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReservedInstancesConfiguration", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :platform) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :platform)) #:http.request.field{:name "Platform", :shape "String", :location-name "platform"})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"}))))

(clojure.core/defn- ser-vpn-connection-options-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "VpnConnectionOptionsSpecification", :type "structure"} (clojure.core/contains? input :static-routes-only) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :static-routes-only)) #:http.request.field{:name "StaticRoutesOnly", :shape "Boolean", :location-name "staticRoutesOnly"}))))

(clojure.core/defn- ser-tenancy [input] #:http.request.field{:value (clojure.core/get {"default" "default", :default "default", "dedicated" "dedicated", :dedicated "dedicated", "host" "host", :host "host"} input), :shape "Tenancy"})

(clojure.core/defn- ser-reserved-instances-offering-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ReservedInstancesOfferingIdStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-security-group-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "ScheduledInstancesSecurityGroupIdSet", :type "list"})

(clojure.core/defn- ser-affinity [input] #:http.request.field{:value (clojure.core/get {"default" "default", :default "default", "host" "host", :host "host"} input), :shape "Affinity"})

(clojure.core/defn- ser-group-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "GroupName"}))) input), :shape "GroupNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesPlacement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"}))))

(clojure.core/defn- ser-key-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "KeyName"}))) input), :shape "KeyNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-block-device-mapping [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesBlockDeviceMapping", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-ebs (input :ebs)) #:http.request.field{:name "Ebs", :shape "ScheduledInstancesEbs"}))))

(clojure.core/defn- ser-account-attribute-name [input] #:http.request.field{:value (clojure.core/get {"supported-platforms" "supported-platforms", :supportedplatforms "supported-platforms", "default-vpc" "default-vpc", :defaultvpc "default-vpc"} input), :shape "AccountAttributeName"})

(clojure.core/defn- ser-instance-type [input] #:http.request.field{:value (clojure.core/get {:r-3large "r3.large", :c-4xlarge "c4.xlarge", "m1.large" "m1.large", :c-3xlarge "c3.xlarge", "cc1.4xlarge" "cc1.4xlarge", :cg-14xlarge "cg1.4xlarge", :i-28xlarge "i2.8xlarge", :t-2small "t2.small", :c-1xlarge "c1.xlarge", "c1.medium" "c1.medium", :c-48xlarge "c4.8xlarge", "r3.8xlarge" "r3.8xlarge", "d2.xlarge" "d2.xlarge", "m3.2xlarge" "m3.2xlarge", "i2.8xlarge" "i2.8xlarge", "g2.2xlarge" "g2.2xlarge", "c3.8xlarge" "c3.8xlarge", "t2.large" "t2.large", :m-42xlarge "m4.2xlarge", "m1.xlarge" "m1.xlarge", "d2.8xlarge" "d2.8xlarge", "m4.4xlarge" "m4.4xlarge", :t-2large "t2.large", :c-34xlarge "c3.4xlarge", :x-116xlarge "x1.16xlarge", "cr1.8xlarge" "cr1.8xlarge", "t1.micro" "t1.micro", :d-28xlarge "d2.8xlarge", :r-34xlarge "r3.4xlarge", :m-32xlarge "m3.2xlarge", "c3.2xlarge" "c3.2xlarge", "g2.8xlarge" "g2.8xlarge", :x-14xlarge "x1.4xlarge", "c4.8xlarge" "c4.8xlarge", :g-22xlarge "g2.2xlarge", :c-3large "c3.large", "m2.xlarge" "m2.xlarge", "m1.small" "m1.small", "i2.4xlarge" "i2.4xlarge", "c3.4xlarge" "c3.4xlarge", :t-2micro "t2.micro", :c-38xlarge "c3.8xlarge", "t2.micro" "t2.micro", "d2.2xlarge" "d2.2xlarge", "x1.32xlarge" "x1.32xlarge", :r-38xlarge "r3.8xlarge", "m4.2xlarge" "m4.2xlarge", :r-32xlarge "r3.2xlarge", "m4.10xlarge" "m4.10xlarge", "m1.medium" "m1.medium", :cc-14xlarge "cc1.4xlarge", "c4.4xlarge" "c4.4xlarge", "hi1.4xlarge" "hi1.4xlarge", :d-2xlarge "d2.xlarge", :i-2xlarge "i2.xlarge", "r3.xlarge" "r3.xlarge", :x-18xlarge "x1.8xlarge", :c-44xlarge "c4.4xlarge", :m-22xlarge "m2.2xlarge", :t-2medium "t2.medium", :r-3xlarge "r3.xlarge", "c4.2xlarge" "c4.2xlarge", :i-22xlarge "i2.2xlarge", "t2.small" "t2.small", :m-1small "m1.small", :m-3large "m3.large", "m3.xlarge" "m3.xlarge", "r3.2xlarge" "r3.2xlarge", :c-32xlarge "c3.2xlarge", "cg1.4xlarge" "cg1.4xlarge", "x1.4xlarge" "x1.4xlarge", :c-42xlarge "c4.2xlarge", "r3.4xlarge" "r3.4xlarge", :hs-18xlarge "hs1.8xlarge", :t-2nano "t2.nano", :m-44xlarge "m4.4xlarge", :m-24xlarge "m2.4xlarge", "c4.xlarge" "c4.xlarge", "m2.2xlarge" "m2.2xlarge", "x1.16xlarge" "x1.16xlarge", "m4.large" "m4.large", :m-410xlarge "m4.10xlarge", "r3.large" "r3.large", "d2.4xlarge" "d2.4xlarge", "c4.large" "c4.large", :d-24xlarge "d2.4xlarge", :m-3medium "m3.medium", :g-28xlarge "g2.8xlarge", :m-1xlarge "m1.xlarge", "m4.xlarge" "m4.xlarge", "i2.2xlarge" "i2.2xlarge", :c-4large "c4.large", :cc-28xlarge "cc2.8xlarge", :i-24xlarge "i2.4xlarge", :m-4xlarge "m4.xlarge", :m-3xlarge "m3.xlarge", "t2.nano" "t2.nano", "m2.4xlarge" "m2.4xlarge", "c3.xlarge" "c3.xlarge", :m-4large "m4.large", :m-1medium "m1.medium", :m-1large "m1.large", "t2.medium" "t2.medium", "c3.large" "c3.large", :c-1medium "c1.medium", "m3.medium" "m3.medium", :cr-18xlarge "cr1.8xlarge", "i2.xlarge" "i2.xlarge", "x1.8xlarge" "x1.8xlarge", "cc2.8xlarge" "cc2.8xlarge", "hs1.8xlarge" "hs1.8xlarge", :x-132xlarge "x1.32xlarge", "m3.large" "m3.large", "c1.xlarge" "c1.xlarge", :t-1micro "t1.micro", :d-22xlarge "d2.2xlarge", :m-2xlarge "m2.xlarge", :hi-14xlarge "hi1.4xlarge"} input), :shape "InstanceType"})

(clojure.core/defn- ser-instance-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-type coll) #:http.request.field{:shape "InstanceType"}))) input), :shape "InstanceTypeList", :type "list"})

(clojure.core/defn- ser-instance-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "InstanceId"}))) input), :shape "InstanceIdStringList", :type "list"})

(clojure.core/defn- ser-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {:description "description", "kernel" "kernel", "productCodes" "productCodes", "blockDeviceMapping" "blockDeviceMapping", :ramdisk "ramdisk", :product-codes "productCodes", "launchPermission" "launchPermission", :block-device-mapping "blockDeviceMapping", "ramdisk" "ramdisk", :sriov-net-support "sriovNetSupport", :kernel "kernel", :launch-permission "launchPermission", "description" "description", "sriovNetSupport" "sriovNetSupport"} input), :shape "ImageAttributeName"})

(clojure.core/defn- ser-create-volume-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CreateVolumePermission", :type "structure"} (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"})) (clojure.core/contains? input :group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission-group (input :group)) #:http.request.field{:name "Group", :shape "PermissionGroup", :location-name "group"}))))

(clojure.core/defn- ser-iam-instance-profile-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IamInstanceProfileSpecification", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String", :location-name "arn"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"}))))

(clojure.core/defn- ser-placement-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "PlacementGroupStringList", :type "list"})

(clojure.core/defn- ser-volume-detail [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-long (:size input)) #:http.request.field{:name "Size", :shape "Long", :location-name "size"})], :shape "VolumeDetail", :type "structure"}))

(clojure.core/defn- ser-host-tenancy [input] #:http.request.field{:value (clojure.core/get {"dedicated" "dedicated", :dedicated "dedicated", "host" "host", :host "host"} input), :shape "HostTenancy"})

(clojure.core/defn- ser-icmp-type-code [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IcmpTypeCode", :type "structure"} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :type)) #:http.request.field{:name "Type", :shape "Integer", :location-name "type"})) (clojure.core/contains? input :code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :code)) #:http.request.field{:name "Code", :shape "Integer", :location-name "code"}))))

(clojure.core/defn- ser-volume-attribute-name [input] #:http.request.field{:value (clojure.core/get {"autoEnableIO" "autoEnableIO", :auto-enable-io "autoEnableIO", "productCodes" "productCodes", :product-codes "productCodes"} input), :shape "VolumeAttributeName"})

(clojure.core/defn- ser-scheduled-instance-id-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ScheduledInstanceId"}))) input), :shape "ScheduledInstanceIdRequestSet", :type "list"})

(clojure.core/defn- ser-attribute-boolean-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AttributeBooleanValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :value)) #:http.request.field{:name "Value", :shape "Boolean", :location-name "value"}))))

(clojure.core/defn- ser-vpc-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcId"}))) input), :shape "VpcIdStringList", :type "list"})

(clojure.core/defn- ser-price-schedule-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PriceScheduleSpecification", :type "structure"} (clojure.core/contains? input :term) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :term)) #:http.request.field{:name "Term", :shape "Long", :location-name "term"})) (clojure.core/contains? input :price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :price)) #:http.request.field{:name "Price", :shape "Double", :location-name "price"})) (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues", :location-name "currencyCode"}))))

(clojure.core/defn- ser-export-to-s-3-task-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ExportToS3TaskSpecification", :type "structure"} (clojure.core/contains? input :disk-image-format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-format (input :disk-image-format)) #:http.request.field{:name "DiskImageFormat", :shape "DiskImageFormat", :location-name "diskImageFormat"})) (clojure.core/contains? input :container-format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-container-format (input :container-format)) #:http.request.field{:name "ContainerFormat", :shape "ContainerFormat", :location-name "containerFormat"})) (clojure.core/contains? input :s-3-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-bucket)) #:http.request.field{:name "S3Bucket", :shape "String", :location-name "s3Bucket"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String", :location-name "s3Prefix"}))))

(clojure.core/defn- ser-rule-action [input] #:http.request.field{:value (clojure.core/get {"allow" "allow", :allow "allow", "deny" "deny", :deny "deny"} input), :shape "RuleAction"})

(clojure.core/defn- ser-fleet-type [input] #:http.request.field{:value (clojure.core/get {"request" "request", :request "request", "maintain" "maintain", :maintain "maintain"} input), :shape "FleetType"})

(clojure.core/defn- ser-group-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-group-identifier coll) #:http.request.field{:shape "GroupIdentifier", :location-name "item"}))) input), :shape "GroupIdentifierList", :type "list"})

(clojure.core/defn- ser-price-schedule-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-price-schedule-specification coll) #:http.request.field{:shape "PriceScheduleSpecification", :location-name "item"}))) input), :shape "PriceScheduleSpecificationList", :type "list"})

(clojure.core/defn- ser-traffic-type [input] #:http.request.field{:value (clojure.core/get {"ACCEPT" "ACCEPT", :accept "ACCEPT", "REJECT" "REJECT", :reject "REJECT", "ALL" "ALL", :all "ALL"} input), :shape "TrafficType"})

(clojure.core/defn- ser-allocation-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AllocationId"}))) input), :shape "AllocationIdList", :type "list"})

(clojure.core/defn- ser-create-volume-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-create-volume-permission coll) #:http.request.field{:shape "CreateVolumePermission", :location-name "item"}))) input), :shape "CreateVolumePermissionList", :type "list"})

(clojure.core/defn- ser-image-disk-container-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-image-disk-container coll) #:http.request.field{:shape "ImageDiskContainer", :location-name "item"}))) input), :shape "ImageDiskContainerList", :type "list"})

(clojure.core/defn- ser-event-type [input] #:http.request.field{:value (clojure.core/get {"instanceChange" "instanceChange", :instance-change "instanceChange", "fleetRequestChange" "fleetRequestChange", :fleet-request-change "fleetRequestChange", "error" "error", :error "error"} input), :shape "EventType"})

(clojure.core/defn- ser-restorable-by-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "RestorableByStringList", :type "list"})

(clojure.core/defn- ser-next-token [input] #:http.request.field{:value input, :shape "NextToken"})

(clojure.core/defn- ser-slot-start-time-range-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SlotStartTimeRangeRequest", :type "structure"} (clojure.core/contains? input :earliest-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :earliest-time)) #:http.request.field{:name "EarliestTime", :shape "DateTime"})) (clojure.core/contains? input :latest-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :latest-time)) #:http.request.field{:name "LatestTime", :shape "DateTime"}))))

(clojure.core/defn- ser-excess-capacity-termination-policy [input] #:http.request.field{:value (clojure.core/get {"noTermination" "noTermination", :no-termination "noTermination", "default" "default", :default "default"} input), :shape "ExcessCapacityTerminationPolicy"})

(clojure.core/defn- ser-spot-fleet-monitoring [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotFleetMonitoring", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean", :location-name "enabled"}))))

(clojure.core/defn- ser-instance-block-device-mapping-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceBlockDeviceMappingSpecification", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String", :location-name "deviceName"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ebs-instance-block-device-specification (input :ebs)) #:http.request.field{:name "Ebs", :shape "EbsInstanceBlockDeviceSpecification", :location-name "ebs"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String", :location-name "virtualName"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String", :location-name "noDevice"}))))

(clojure.core/defn- ser-group-ids [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "GroupIds", :type "list"})

(clojure.core/defn- ser-user-id-group-pair-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-user-id-group-pair coll) #:http.request.field{:shape "UserIdGroupPair", :location-name "item"}))) input), :shape "UserIdGroupPairList", :type "list"})

(clojure.core/defn- ser-s-3-storage [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "S3Storage", :type "structure"} (clojure.core/contains? input :bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :bucket)) #:http.request.field{:name "Bucket", :shape "String", :location-name "bucket"})) (clojure.core/contains? input :prefix) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix)) #:http.request.field{:name "Prefix", :shape "String", :location-name "prefix"})) (clojure.core/contains? input :aws-access-key-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :aws-access-key-id)) #:http.request.field{:name "AWSAccessKeyId", :shape "String"})) (clojure.core/contains? input :upload-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob (input :upload-policy)) #:http.request.field{:name "UploadPolicy", :shape "Blob", :location-name "uploadPolicy"})) (clojure.core/contains? input :upload-policy-signature) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :upload-policy-signature)) #:http.request.field{:name "UploadPolicySignature", :shape "String", :location-name "uploadPolicySignature"}))))

(clojure.core/defn- ser-launch-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-permission coll) #:http.request.field{:shape "LaunchPermission", :location-name "item"}))) input), :shape "LaunchPermissionList", :type "list"})

(clojure.core/defn- ser-reserved-instances-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstancesId"}))) input), :shape "ReservedInstancesIdStringList", :type "list"})

(clojure.core/defn- ser-group-identifier [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "GroupIdentifier", :type "structure"} (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"}))))

(clojure.core/defn- ser-run-instances-monitoring-enabled [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-boolean (:enabled input)) #:http.request.field{:name "Enabled", :shape "Boolean", :location-name "enabled"})], :shape "RunInstancesMonitoringEnabled", :type "structure"}))

(clojure.core/defn- ser-disk-image-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-disk-image coll) #:http.request.field{:shape "DiskImage"}))) input), :shape "DiskImageList", :type "list"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "item"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-client-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ClientData", :type "structure"} (clojure.core/contains? input :upload-start) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :upload-start)) #:http.request.field{:name "UploadStart", :shape "DateTime"})) (clojure.core/contains? input :upload-end) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :upload-end)) #:http.request.field{:name "UploadEnd", :shape "DateTime"})) (clojure.core/contains? input :upload-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :upload-size)) #:http.request.field{:name "UploadSize", :shape "Double"})) (clojure.core/contains? input :comment) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :comment)) #:http.request.field{:name "Comment", :shape "String"}))))

(clojure.core/defn- ser-image-disk-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ImageDiskContainer", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :format)) #:http.request.field{:name "Format", :shape "String"})) (clojure.core/contains? input :url) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :url)) #:http.request.field{:name "Url", :shape "String"})) (clojure.core/contains? input :user-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-bucket (input :user-bucket)) #:http.request.field{:name "UserBucket", :shape "UserBucket"})) (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"}))))

(clojure.core/defn- ser-spot-fleet-request-config-data [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:spot-price input)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"}) (clojure.core/into (ser-integer (:target-capacity input)) #:http.request.field{:name "TargetCapacity", :shape "Integer", :location-name "targetCapacity"}) (clojure.core/into (ser-string (:iam-fleet-role input)) #:http.request.field{:name "IamFleetRole", :shape "String", :location-name "iamFleetRole"}) (clojure.core/into (ser-launch-specs-list (:launch-specifications input)) #:http.request.field{:name "LaunchSpecifications", :shape "LaunchSpecsList", :location-name "launchSpecifications"})], :shape "SpotFleetRequestConfigData", :type "structure"} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-type (input :type)) #:http.request.field{:name "Type", :shape "FleetType", :location-name "type"})) (clojure.core/contains? input :valid-from) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-from)) #:http.request.field{:name "ValidFrom", :shape "DateTime", :location-name "validFrom"})) (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "ExcessCapacityTerminationPolicy", :location-name "excessCapacityTerminationPolicy"})) (clojure.core/contains? input :allocation-strategy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allocation-strategy (input :allocation-strategy)) #:http.request.field{:name "AllocationStrategy", :shape "AllocationStrategy", :location-name "allocationStrategy"})) (clojure.core/contains? input :fulfilled-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :fulfilled-capacity)) #:http.request.field{:name "FulfilledCapacity", :shape "Double", :location-name "fulfilledCapacity"})) (clojure.core/contains? input :terminate-instances-with-expiration) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :terminate-instances-with-expiration)) #:http.request.field{:name "TerminateInstancesWithExpiration", :shape "Boolean", :location-name "terminateInstancesWithExpiration"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime", :location-name "validUntil"}))))

(clojure.core/defn- ser-conversion-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ConversionIdStringList", :type "list"})

(clojure.core/defn- ser-allocation-strategy [input] #:http.request.field{:value (clojure.core/get {"lowestPrice" "lowestPrice", :lowest-price "lowestPrice", "diversified" "diversified", :diversified "diversified"} input), :shape "AllocationStrategy"})

(clojure.core/defn- ser-attribute-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AttributeValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"}))))

(clojure.core/defn- ser-private-ip-address-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-private-ip-address-specification coll) #:http.request.field{:shape "PrivateIpAddressSpecification", :location-name "item"}))) input), :shape "PrivateIpAddressSpecificationList", :type "list"})

(clojure.core/defn- ser-auto-placement [input] #:http.request.field{:value (clojure.core/get {"on" "on", :on "on", "off" "off", :off "off"} input), :shape "AutoPlacement"})

(clojure.core/defn- ser-prefix-list-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-prefix-list-id coll) #:http.request.field{:shape "PrefixListId", :location-name "item"}))) input), :shape "PrefixListIdList", :type "list"})

(clojure.core/defn- ser-vpc-attribute-name [input] #:http.request.field{:value (clojure.core/get {"enableDnsSupport" "enableDnsSupport", :enable-dns-support "enableDnsSupport", "enableDnsHostnames" "enableDnsHostnames", :enable-dns-hostnames "enableDnsHostnames"} input), :shape "VpcAttributeName"})

(clojure.core/defn- ser-instance-block-device-mapping-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-block-device-mapping-specification coll) #:http.request.field{:shape "InstanceBlockDeviceMappingSpecification", :location-name "item"}))) input), :shape "InstanceBlockDeviceMappingSpecificationList", :type "list"})

(clojure.core/defn- ser-placement-strategy [input] #:http.request.field{:value (clojure.core/get {"cluster" "cluster", :cluster "cluster"} input), :shape "PlacementStrategy"})

(clojure.core/defn- ser-user-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "UserGroup"}))) input), :shape "UserGroupStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-ebs [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesEbs", :type "structure"} (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean"}))))

(clojure.core/defn- ser-volume-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VolumeId"}))) input), :shape "VolumeIdStringList", :type "list"})

(clojure.core/defn- ser-dhcp-options-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DhcpOptionsId"}))) input), :shape "DhcpOptionsIdStringList", :type "list"})

(clojure.core/defn- ser-reset-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {"launchPermission" "launchPermission", :launch-permission "launchPermission"} input), :shape "ResetImageAttributeName"})

(clojure.core/defn- ser-scheduled-instances-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:image-id input)) #:http.request.field{:name "ImageId", :shape "String"})], :shape "ScheduledInstancesLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-security-group-id-set (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "ScheduledInstancesSecurityGroupIdSet", :location-name "SecurityGroupId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-placement (input :placement)) #:http.request.field{:name "Placement", :shape "ScheduledInstancesPlacement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-monitoring (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "ScheduledInstancesMonitoring"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-block-device-mapping-set (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "ScheduledInstancesBlockDeviceMappingSet", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-iam-instance-profile (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "ScheduledInstancesIamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-network-interface-set (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "ScheduledInstancesNetworkInterfaceSet", :location-name "NetworkInterface"}))))

(clojure.core/defn- ser-product-description-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ProductDescriptionList", :type "list"})

(clojure.core/defn- ser-group-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "groupId"}))) input), :shape "GroupIdStringList", :type "list"})

(clojure.core/defn- ser-snapshot-disk-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SnapshotDiskContainer", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :format)) #:http.request.field{:name "Format", :shape "String"})) (clojure.core/contains? input :url) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :url)) #:http.request.field{:name "Url", :shape "String"})) (clojure.core/contains? input :user-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-bucket (input :user-bucket)) #:http.request.field{:name "UserBucket", :shape "UserBucket"}))))

(clojure.core/defn- ser-launch-specs-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-spot-fleet-launch-specification coll) #:http.request.field{:shape "SpotFleetLaunchSpecification", :location-name "item"}))) input), :shape "LaunchSpecsList", :type "list", :min 1})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-ip-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IpPermission", :type "structure"} (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :user-id-group-pairs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-group-pair-list (input :user-id-group-pairs)) #:http.request.field{:name "UserIdGroupPairs", :shape "UserIdGroupPairList", :location-name "groups"})) (clojure.core/contains? input :ip-ranges) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-range-list (input :ip-ranges)) #:http.request.field{:name "IpRanges", :shape "IpRangeList", :location-name "ipRanges"})) (clojure.core/contains? input :prefix-list-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-prefix-list-id-list (input :prefix-list-ids)) #:http.request.field{:name "PrefixListIds", :shape "PrefixListIdList", :location-name "prefixListIds"}))))

(clojure.core/defn- ser-ip-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-ip-permission coll) #:http.request.field{:shape "IpPermission", :location-name "item"}))) input), :shape "IpPermissionList", :type "list"})

(clojure.core/defn- ser-slot-date-time-range-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-date-time (:earliest-time input)) #:http.request.field{:name "EarliestTime", :shape "DateTime"}) (clojure.core/into (ser-date-time (:latest-time input)) #:http.request.field{:name "LatestTime", :shape "DateTime"})], :shape "SlotDateTimeRangeRequest", :type "structure"}))

(clojure.core/defn- ser-ri-product-description [input] #:http.request.field{:value (clojure.core/get {"Linux/UNIX" "Linux/UNIX", :linux-unix "Linux/UNIX", "Linux/UNIX (Amazon VPC)" "Linux/UNIX (Amazon VPC)", :linux-unix-amazon-vpc "Linux/UNIX (Amazon VPC)", "Windows" "Windows", :windows "Windows", "Windows (Amazon VPC)" "Windows (Amazon VPC)", :windows-amazon-vpc "Windows (Amazon VPC)"} input), :shape "RIProductDescription"})

(clojure.core/defn- ser-disk-image-format [input] #:http.request.field{:value (clojure.core/get {"VMDK" "VMDK", :vmdk "VMDK", "RAW" "RAW", :raw "RAW", "VHD" "VHD", :vhd "VHD"} input), :shape "DiskImageFormat"})

(clojure.core/defn- ser-scheduled-instances-network-interface-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-network-interface coll) #:http.request.field{:shape "ScheduledInstancesNetworkInterface", :location-name "NetworkInterface"}))) input), :shape "ScheduledInstancesNetworkInterfaceSet", :type "list"})

(clojure.core/defn- ser-security-group-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "SecurityGroupIdStringList", :type "list"})

(clojure.core/defn- ser-domain-type [input] #:http.request.field{:value (clojure.core/get {"vpc" "vpc", :vpc "vpc", "standard" "standard", :standard "standard"} input), :shape "DomainType"})

(clojure.core/defn- ser-flow-logs-resource-type [input] #:http.request.field{:value (clojure.core/get {"VPC" "VPC", :vpc "VPC", "Subnet" "Subnet", :subnet "Subnet", "NetworkInterface" "NetworkInterface", :network-interface "NetworkInterface"} input), :shape "FlowLogsResourceType"})

(clojure.core/defn- ser-operation-type [input] #:http.request.field{:value (clojure.core/get {"add" "add", :add "add", "remove" "remove", :remove "remove"} input), :shape "OperationType"})

(clojure.core/defn- ser-snapshot-attribute-name [input] #:http.request.field{:value (clojure.core/get {"productCodes" "productCodes", :product-codes "productCodes", "createVolumePermission" "createVolumePermission", :create-volume-permission "createVolumePermission"} input), :shape "SnapshotAttributeName"})

(clojure.core/defn- ser-currency-code-values [input] #:http.request.field{:value (clojure.core/get {"USD" "USD", :usd "USD"} input), :shape "CurrencyCodeValues"})

(clojure.core/defn- ser-network-interface-attribute [input] #:http.request.field{:value (clojure.core/get {"description" "description", :description "description", "groupSet" "groupSet", :group-set "groupSet", "sourceDestCheck" "sourceDestCheck", :source-dest-check "sourceDestCheck", "attachment" "attachment", :attachment "attachment"} input), :shape "NetworkInterfaceAttribute"})

(clojure.core/defn- ser-report-instance-reason-codes [input] #:http.request.field{:value (clojure.core/get {"password-not-available" "password-not-available", "performance-instance-store" "performance-instance-store", :other "other", :performancenetwork "performance-network", :performanceebsvolume "performance-ebs-volume", "not-accepting-credentials" "not-accepting-credentials", "unresponsive" "unresponsive", :performanceother "performance-other", :passwordnotavailable "password-not-available", "other" "other", "performance-ebs-volume" "performance-ebs-volume", :notacceptingcredentials "not-accepting-credentials", "instance-stuck-in-state" "instance-stuck-in-state", :performanceinstancestore "performance-instance-store", "performance-network" "performance-network", :instancestuckinstate "instance-stuck-in-state", :unresponsive "unresponsive", "performance-other" "performance-other"} input), :shape "ReportInstanceReasonCodes"})

(clojure.core/defn- ser-bundle-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "BundleId"}))) input), :shape "BundleIdStringList", :type "list"})

(clojure.core/defn- ser-volume-type [input] #:http.request.field{:value (clojure.core/get {"standard" "standard", "sc1" "sc1", "io1" "io1", :sc-1 "sc1", :st-1 "st1", "gp2" "gp2", "st1" "st1", :io-1 "io1", :standard "standard", :gp-2 "gp2"} input), :shape "VolumeType"})

(clojure.core/defn- ser-account-attribute-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-account-attribute-name coll) #:http.request.field{:shape "AccountAttributeName", :location-name "attributeName"}))) input), :shape "AccountAttributeNameStringList", :type "list"})

(clojure.core/defn- ser-launch-permission-modifications [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchPermissionModifications", :type "structure"} (clojure.core/contains? input :add) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-list (input :add)) #:http.request.field{:name "Add", :shape "LaunchPermissionList"})) (clojure.core/contains? input :remove) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-list (input :remove)) #:http.request.field{:name "Remove", :shape "LaunchPermissionList"}))))

(clojure.core/defn- ser-long [input] #:http.request.field{:value input, :shape "Long"})

(clojure.core/defn- ser-subnet-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetId"}))) input), :shape "SubnetIdStringList", :type "list"})

(clojure.core/defn- ser-reserved-instance-limit-price [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReservedInstanceLimitPrice", :type "structure"} (clojure.core/contains? input :amount) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :amount)) #:http.request.field{:name "Amount", :shape "Double", :location-name "amount"})) (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues", :location-name "currencyCode"}))))

(clojure.core/defn- ser-region-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "RegionName"}))) input), :shape "RegionNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instance-recurrence-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstanceRecurrenceRequest", :type "structure"} (clojure.core/contains? input :frequency) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :frequency)) #:http.request.field{:name "Frequency", :shape "String"})) (clojure.core/contains? input :interval) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :interval)) #:http.request.field{:name "Interval", :shape "Integer"})) (clojure.core/contains? input :occurrence-days) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-occurrence-day-request-set (input :occurrence-days)) #:http.request.field{:name "OccurrenceDays", :shape "OccurrenceDayRequestSet", :location-name "OccurrenceDay"})) (clojure.core/contains? input :occurrence-relative-to-end) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :occurrence-relative-to-end)) #:http.request.field{:name "OccurrenceRelativeToEnd", :shape "Boolean"})) (clojure.core/contains? input :occurrence-unit) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :occurrence-unit)) #:http.request.field{:name "OccurrenceUnit", :shape "String"}))))

(clojure.core/defn- ser-user-bucket [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserBucket", :type "structure"} (clojure.core/contains? input :s-3-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-bucket)) #:http.request.field{:name "S3Bucket", :shape "String"})) (clojure.core/contains? input :s-3-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-key)) #:http.request.field{:name "S3Key", :shape "String"}))))

(clojure.core/defn- ser-scheduled-instances-network-interface [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesNetworkInterface", :type "structure"} (clojure.core/contains? input :associate-public-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :associate-public-ip-address)) #:http.request.field{:name "AssociatePublicIpAddress", :shape "Boolean"})) (clojure.core/contains? input :private-ip-address-configs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-config-set (input :private-ip-address-configs)) #:http.request.field{:name "PrivateIpAddressConfigs", :shape "PrivateIpAddressConfigSet", :location-name "PrivateIpAddressConfig"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String"})) (clojure.core/contains? input :device-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-security-group-id-set (input :groups)) #:http.request.field{:name "Groups", :shape "ScheduledInstancesSecurityGroupIdSet", :location-name "Group"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String"}))))

(clojure.core/defn- ser-reserved-instances-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-reserved-instances-configuration coll) #:http.request.field{:shape "ReservedInstancesConfiguration", :location-name "item"}))) input), :shape "ReservedInstancesConfigurationList", :type "list"})

(clojure.core/defn- ser-instance-network-interface-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-network-interface-specification coll) #:http.request.field{:shape "InstanceNetworkInterfaceSpecification", :location-name "item"}))) input), :shape "InstanceNetworkInterfaceSpecificationList", :type "list"})

(clojure.core/defn- ser-block-device-mapping [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BlockDeviceMapping", :type "structure"} (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String", :location-name "virtualName"})) (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String", :location-name "deviceName"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ebs-block-device (input :ebs)) #:http.request.field{:name "Ebs", :shape "EbsBlockDevice", :location-name "ebs"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String", :location-name "noDevice"}))))

(clojure.core/defn- ser-max-results [input] #:http.request.field{:value input, :shape "MaxResults"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String", :location-name "key"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"}))))

(clojure.core/defn- ser-user-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "UserId"}))) input), :shape "UserIdStringList", :type "list"})

(clojure.core/defn- ser-executable-by-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ExecutableBy"}))) input), :shape "ExecutableByStringList", :type "list"})

(clojure.core/defn- ser-platform-values [input] #:http.request.field{:value (clojure.core/get {"Windows" "Windows", :windows "Windows"} input), :shape "PlatformValues"})

(clojure.core/defn- ser-disk-image [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DiskImage", :type "structure"} (clojure.core/contains? input :image) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-detail (input :image)) #:http.request.field{:name "Image", :shape "DiskImageDetail"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :volume) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-detail (input :volume)) #:http.request.field{:name "Volume", :shape "VolumeDetail"}))))

(clojure.core/defn- ser-port-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PortRange", :type "structure"} (clojure.core/contains? input :from) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from)) #:http.request.field{:name "From", :shape "Integer", :location-name "from"})) (clojure.core/contains? input :to) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to)) #:http.request.field{:name "To", :shape "Integer", :location-name "to"}))))

(clojure.core/defn- ser-spot-fleet-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotFleetLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String", :location-name "imageId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-placement (input :placement)) #:http.request.field{:name "Placement", :shape "SpotPlacement", :location-name "placement"})) (clojure.core/contains? input :addressing-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :addressing-type)) #:http.request.field{:name "AddressingType", :shape "String", :location-name "addressingType"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-identifier-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "GroupIdentifierList", :location-name "groupSet"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"})) (clojure.core/contains? input :spot-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-fleet-monitoring (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "SpotFleetMonitoring", :location-name "monitoring"})) (clojure.core/contains? input :weighted-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :weighted-capacity)) #:http.request.field{:name "WeightedCapacity", :shape "Double", :location-name "weightedCapacity"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String", :location-name "userData"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "networkInterfaceSet"}))))

(clojure.core/defn- ser-ip-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IpRange", :type "structure"} (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- ser-block-device-mapping-request-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-block-device-mapping coll) #:http.request.field{:shape "BlockDeviceMapping", :location-name "BlockDeviceMapping"}))) input), :shape "BlockDeviceMappingRequestList", :type "list"})

(clojure.core/defn- ser-container-format [input] #:http.request.field{:value (clojure.core/get {"ova" "ova", :ova "ova"} input), :shape "ContainerFormat"})

(clojure.core/defn- ser-purchase-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-purchase-request coll) #:http.request.field{:shape "PurchaseRequest", :location-name "PurchaseRequest"}))) input), :shape "PurchaseRequestSet", :type "list", :min 1})

(clojure.core/defn- ser-new-dhcp-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-new-dhcp-configuration coll) #:http.request.field{:shape "NewDhcpConfiguration", :location-name "item"}))) input), :shape "NewDhcpConfigurationList", :type "list"})

(clojure.core/defn- ser-block-device-mapping-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-block-device-mapping coll) #:http.request.field{:shape "BlockDeviceMapping", :location-name "item"}))) input), :shape "BlockDeviceMappingList", :type "list"})

(clojure.core/defn- ser-blob [input] #:http.request.field{:value (portkey.aws/base64-encode input), :shape "Blob"})

(clojure.core/defn- ser-gateway-type [input] #:http.request.field{:value (clojure.core/get {"ipsec.1" "ipsec.1", :ipsec-1 "ipsec.1"} input), :shape "GatewayType"})

(clojure.core/defn- ser-scheduled-instances-iam-instance-profile [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesIamInstanceProfile", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-report-status-type [input] #:http.request.field{:value (clojure.core/get {"ok" "ok", :ok "ok", "impaired" "impaired", :impaired "impaired"} input), :shape "ReportStatusType"})

(clojure.core/defn- ser-ip-range-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-ip-range coll) #:http.request.field{:shape "IpRange", :location-name "item"}))) input), :shape "IpRangeList", :type "list"})

(clojure.core/defn- ser-import-instance-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ImportInstanceLaunchSpecification", :type "structure"} (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement (input :placement)) #:http.request.field{:name "Placement", :shape "Placement", :location-name "placement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :group-ids)) #:http.request.field{:name "GroupIds", :shape "SecurityGroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "Boolean", :location-name "monitoring"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture-values (input :architecture)) #:http.request.field{:name "Architecture", :shape "ArchitectureValues", :location-name "architecture"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-data (input :user-data)) #:http.request.field{:name "UserData", :shape "UserData", :location-name "userData"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-behavior (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "ShutdownBehavior", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "SecurityGroupStringList", :location-name "GroupName"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"}))))

(clojure.core/defn- ser-scheduled-instances-block-device-mapping-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-block-device-mapping coll) #:http.request.field{:shape "ScheduledInstancesBlockDeviceMapping", :location-name "BlockDeviceMapping"}))) input), :shape "ScheduledInstancesBlockDeviceMappingSet", :type "list"})

(clojure.core/defn- ser-purchase-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:purchase-token input)) #:http.request.field{:name "PurchaseToken", :shape "String"}) (clojure.core/into (ser-integer (:instance-count input)) #:http.request.field{:name "InstanceCount", :shape "Integer"})], :shape "PurchaseRequest", :type "structure"}))

(clojure.core/defn- ser-reserved-instances-modification-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstancesModificationId"}))) input), :shape "ReservedInstancesModificationIdStringList", :type "list"})

(clojure.core/defn- ser-resource-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ResourceIdList", :type "list"})

(clojure.core/defn- ser-request-host-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "RequestHostIdList", :type "list"})

(clojure.core/defn- ser-image-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ImageId"}))) input), :shape "ImageIdStringList", :type "list"})

(clojure.core/defn- ser-instance-attribute-name [input] #:http.request.field{:value (clojure.core/get {:instance-initiated-shutdown-behavior "instanceInitiatedShutdownBehavior", "kernel" "kernel", "groupSet" "groupSet", "productCodes" "productCodes", :group-set "groupSet", "blockDeviceMapping" "blockDeviceMapping", :source-dest-check "sourceDestCheck", :disable-api-termination "disableApiTermination", :ramdisk "ramdisk", :root-device-name "rootDeviceName", :product-codes "productCodes", "disableApiTermination" "disableApiTermination", :instance-type "instanceType", :ebs-optimized "ebsOptimized", "sourceDestCheck" "sourceDestCheck", :user-data "userData", "userData" "userData", "ebsOptimized" "ebsOptimized", :block-device-mapping "blockDeviceMapping", "ramdisk" "ramdisk", :sriov-net-support "sriovNetSupport", "instanceType" "instanceType", :kernel "kernel", "rootDeviceName" "rootDeviceName", "instanceInitiatedShutdownBehavior" "instanceInitiatedShutdownBehavior", "sriovNetSupport" "sriovNetSupport"} input), :shape "InstanceAttributeName"})

(clojure.core/defn- ser-disk-image-detail [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-disk-image-format (:format input)) #:http.request.field{:name "Format", :shape "DiskImageFormat", :location-name "format"}) (clojure.core/into (ser-long (:bytes input)) #:http.request.field{:name "Bytes", :shape "Long", :location-name "bytes"}) (clojure.core/into (ser-string (:import-manifest-url input)) #:http.request.field{:name "ImportManifestUrl", :shape "String", :location-name "importManifestUrl"})], :shape "DiskImageDetail", :type "structure"}))

(clojure.core/defn- ser-user-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserData", :type "structure"} (clojure.core/contains? input :data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data)) #:http.request.field{:name "Data", :shape "String", :location-name "data"}))))

(clojure.core/defn- ser-offering-type-values [input] #:http.request.field{:value (clojure.core/get {"All Upfront" "All Upfront", :heavy-utilization "Heavy Utilization", :no-upfront "No Upfront", :medium-utilization "Medium Utilization", :all-upfront "All Upfront", :light-utilization "Light Utilization", :partial-upfront "Partial Upfront", "No Upfront" "No Upfront", "Heavy Utilization" "Heavy Utilization", "Light Utilization" "Light Utilization", "Partial Upfront" "Partial Upfront", "Medium Utilization" "Medium Utilization"} input), :shape "OfferingTypeValues"})

(clojure.core/defn- ser-network-interface-attachment-changes [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NetworkInterfaceAttachmentChanges", :type "structure"} (clojure.core/contains? input :attachment-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :attachment-id)) #:http.request.field{:name "AttachmentId", :shape "String", :location-name "attachmentId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"}))))

(clojure.core/defn- ser-private-ip-address-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PrivateIpAddress"}))) input), :shape "PrivateIpAddressStringList", :type "list"})

(clojure.core/defn- ser-owner-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Owner"}))) input), :shape "OwnerStringList", :type "list"})

(clojure.core/defn- ser-create-volume-permission-modifications [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CreateVolumePermissionModifications", :type "structure"} (clojure.core/contains? input :add) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-list (input :add)) #:http.request.field{:name "Add", :shape "CreateVolumePermissionList"})) (clojure.core/contains? input :remove) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-list (input :remove)) #:http.request.field{:name "Remove", :shape "CreateVolumePermissionList"}))))

(clojure.core/defn- ser-reason-codes-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-report-instance-reason-codes coll) #:http.request.field{:shape "ReportInstanceReasonCodes", :location-name "item"}))) input), :shape "ReasonCodesList", :type "list"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-launch-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchPermission", :type "structure"} (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"})) (clojure.core/contains? input :group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission-group (input :group)) #:http.request.field{:name "Group", :shape "PermissionGroup", :location-name "group"}))))

(clojure.core/defn- ser-vpn-gateway-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpnGatewayId"}))) input), :shape "VpnGatewayIdStringList", :type "list"})

(clojure.core/defn- ser-private-ip-address-specification [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:private-ip-address input)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})], :shape "PrivateIpAddressSpecification", :type "structure"} (clojure.core/contains? input :primary) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :primary)) #:http.request.field{:name "Primary", :shape "Boolean", :location-name "primary"}))))

(clojure.core/defn- ser-request-spot-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "RequestSpotLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "ValueStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String", :location-name "imageId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-placement (input :placement)) #:http.request.field{:name "Placement", :shape "SpotPlacement", :location-name "placement"})) (clojure.core/contains? input :addressing-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :addressing-type)) #:http.request.field{:name "AddressingType", :shape "String", :location-name "addressingType"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "ValueStringList", :location-name "SecurityGroup"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-run-instances-monitoring-enabled (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "RunInstancesMonitoringEnabled", :location-name "monitoring"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String", :location-name "userData"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "NetworkInterface"}))))

(clojure.core/defn- ser-user-id-group-pair [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserIdGroupPair", :type "structure"} (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :peering-status) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peering-status)) #:http.request.field{:name "PeeringStatus", :shape "String", :location-name "peeringStatus"}))))

(clojure.core/defn- ser-import-task-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ImportTaskId"}))) input), :shape "ImportTaskIdList", :type "list"})

(clojure.core/defn- ser-date-time [input] #:http.request.field{:value input, :shape "DateTime"})

(clojure.core/defn- ser-snapshot-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SnapshotId"}))) input), :shape "SnapshotIdStringList", :type "list"})

(clojure.core/defn- ser-shutdown-behavior [input] #:http.request.field{:value (clojure.core/get {"stop" "stop", :stop "stop", "terminate" "terminate", :terminate "terminate"} input), :shape "ShutdownBehavior"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- ser-instance-network-interface-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceNetworkInterfaceSpecification", :type "structure"} (clojure.core/contains? input :associate-public-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :associate-public-ip-address)) #:http.request.field{:name "AssociatePublicIpAddress", :shape "Boolean", :location-name "associatePublicIpAddress"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :device-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer", :location-name "deviceIndex"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-specification-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressSpecificationList", :location-name "privateIpAddressesSet", :query-name "PrivateIpAddresses"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"}))))

(clojure.core/defn- req-describe-snapshots-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :snapshot-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-id-string-list (input :snapshot-ids)) #:http.request.field{:name "SnapshotIds", :shape "SnapshotIdStringList", :location-name "SnapshotId"})) (clojure.core/contains? input :owner-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-owner-string-list (input :owner-ids)) #:http.request.field{:name "OwnerIds", :shape "OwnerStringList", :location-name "Owner"})) (clojure.core/contains? input :restorable-by-user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-restorable-by-string-list (input :restorable-by-user-ids)) #:http.request.field{:name "RestorableByUserIds", :shape "RestorableByStringList", :location-name "RestorableBy"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-describe-spot-fleet-requests-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :spot-fleet-request-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :spot-fleet-request-ids)) #:http.request.field{:name "SpotFleetRequestIds", :shape "ValueStringList", :location-name "spotFleetRequestId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-import-image-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :platform) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :platform)) #:http.request.field{:name "Platform", :shape "String"})) (clojure.core/contains? input :role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-name)) #:http.request.field{:name "RoleName", :shape "String"})) (clojure.core/contains? input :client-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-client-data (input :client-data)) #:http.request.field{:name "ClientData", :shape "ClientData"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :disk-containers) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-image-disk-container-list (input :disk-containers)) #:http.request.field{:name "DiskContainers", :shape "ImageDiskContainerList", :location-name "DiskContainer"})) (clojure.core/contains? input :hypervisor) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hypervisor)) #:http.request.field{:name "Hypervisor", :shape "String"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :architecture)) #:http.request.field{:name "Architecture", :shape "String"})) (clojure.core/contains? input :license-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-type)) #:http.request.field{:name "LicenseType", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-confirm-product-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :product-code)) #:http.request.field{:name "ProductCode", :shape "String"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpn-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpn-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-gateway-id-string-list (input :vpn-gateway-ids)) #:http.request.field{:name "VpnGatewayIds", :shape "VpnGatewayIdStringList", :location-name "VpnGatewayId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-vpn-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-request-spot-fleet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-spot-fleet-request-config-data (input :spot-fleet-request-config)) #:http.request.field{:name "SpotFleetRequestConfig", :shape "SpotFleetRequestConfigData", :location-name "spotFleetRequestConfig"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-scheduled-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :scheduled-instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instance-id-request-set (input :scheduled-instance-ids)) #:http.request.field{:name "ScheduledInstanceIds", :shape "ScheduledInstanceIdRequestSet", :location-name "ScheduledInstanceId"})) (clojure.core/contains? input :slot-start-time-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-slot-start-time-range-request (input :slot-start-time-range)) #:http.request.field{:name "SlotStartTimeRange", :shape "SlotStartTimeRangeRequest"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-flow-logs-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :flow-log-ids)) #:http.request.field{:name "FlowLogIds", :shape "ValueStringList", :location-name "FlowLogId"})]}))

(clojure.core/defn- req-describe-addresses-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-public-ip-string-list (input :public-ips)) #:http.request.field{:name "PublicIps", :shape "PublicIpStringList", :location-name "PublicIp"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :allocation-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allocation-id-list (input :allocation-ids)) #:http.request.field{:name "AllocationIds", :shape "AllocationIdList", :location-name "AllocationId"}))))

(clojure.core/defn- req-describe-network-acls-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :network-acl-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :network-acl-ids)) #:http.request.field{:name "NetworkAclIds", :shape "ValueStringList", :location-name "NetworkAclId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-id-format-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String"}) (clojure.core/into (ser-boolean (input :use-long-ids)) #:http.request.field{:name "UseLongIds", :shape "Boolean"})]}))

(clojure.core/defn- req-reset-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "String", :location-name "sourceDestCheck"}))))

(clojure.core/defn- req-describe-internet-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :internet-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :internet-gateway-ids)) #:http.request.field{:name "InternetGatewayIds", :shape "ValueStringList", :location-name "internetGatewayId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-vpc-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :enable-dns-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :enable-dns-support)) #:http.request.field{:name "EnableDnsSupport", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :enable-dns-hostnames) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :enable-dns-hostnames)) #:http.request.field{:name "EnableDnsHostnames", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-delete-customer-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :customer-gateway-id)) #:http.request.field{:name "CustomerGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-reserved-instances-listing-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-instances-id)) #:http.request.field{:name "ReservedInstancesId", :shape "String", :location-name "reservedInstancesId"}) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"}) (clojure.core/into (ser-price-schedule-specification-list (input :price-schedules)) #:http.request.field{:name "PriceSchedules", :shape "PriceScheduleSpecificationList", :location-name "priceSchedules"}) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})]}))

(clojure.core/defn- req-replace-route-table-association-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"}) (clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"}))))

(clojure.core/defn- req-allocate-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String", :location-name "instanceType"}) (clojure.core/into (ser-integer (input :quantity)) #:http.request.field{:name "Quantity", :shape "Integer", :location-name "quantity"}) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})]} (clojure.core/contains? input :auto-placement) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-auto-placement (input :auto-placement)) #:http.request.field{:name "AutoPlacement", :shape "AutoPlacement", :location-name "autoPlacement"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"}))))

(clojure.core/defn- req-create-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :no-reboot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :no-reboot)) #:http.request.field{:name "NoReboot", :shape "Boolean", :location-name "noReboot"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "blockDeviceMapping"}))))

(clojure.core/defn- req-create-vpn-connection-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String"})]}))

(clojure.core/defn- req-register-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :sriov-net-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sriov-net-support)) #:http.request.field{:name "SriovNetSupport", :shape "String", :location-name "sriovNetSupport"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture-values (input :architecture)) #:http.request.field{:name "Architecture", :shape "ArchitectureValues", :location-name "architecture"})) (clojure.core/contains? input :virtualization-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtualization-type)) #:http.request.field{:name "VirtualizationType", :shape "String", :location-name "virtualizationType"})) (clojure.core/contains? input :image-location) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-location)) #:http.request.field{:name "ImageLocation", :shape "String"})) (clojure.core/contains? input :root-device-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :root-device-name)) #:http.request.field{:name "RootDeviceName", :shape "String", :location-name "rootDeviceName"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"}))))

(clojure.core/defn- req-modify-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"}) (clojure.core/into (ser-auto-placement (input :auto-placement)) #:http.request.field{:name "AutoPlacement", :shape "AutoPlacement", :location-name "autoPlacement"})]}))

(clojure.core/defn- req-delete-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"}) (clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-conversion-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filter"})) (clojure.core/contains? input :conversion-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-conversion-id-string-list (input :conversion-task-ids)) #:http.request.field{:name "ConversionTaskIds", :shape "ConversionIdStringList", :location-name "conversionTaskId"}))))

(clojure.core/defn- req-copy-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-region)) #:http.request.field{:name "SourceRegion", :shape "String"}) (clojure.core/into (ser-string (input :source-image-id)) #:http.request.field{:name "SourceImageId", :shape "String"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String", :location-name "kmsKeyId"}))))

(clojure.core/defn- req-cancel-conversion-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :conversion-task-id)) #:http.request.field{:name "ConversionTaskId", :shape "String", :location-name "conversionTaskId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :reason-message) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reason-message)) #:http.request.field{:name "ReasonMessage", :shape "String", :location-name "reasonMessage"}))))

(clojure.core/defn- req-modify-spot-fleet-request-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"})]} (clojure.core/contains? input :target-capacity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :target-capacity)) #:http.request.field{:name "TargetCapacity", :shape "Integer", :location-name "targetCapacity"})) (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "ExcessCapacityTerminationPolicy", :location-name "excessCapacityTerminationPolicy"}))))

(clojure.core/defn- req-describe-flow-logs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :flow-log-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :flow-log-ids)) #:http.request.field{:name "FlowLogIds", :shape "ValueStringList", :location-name "FlowLogId"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-delete-security-group-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"}))))

(clojure.core/defn- req-describe-spot-price-history-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-types) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type-list (input :instance-types)) #:http.request.field{:name "InstanceTypes", :shape "InstanceTypeList", :location-name "InstanceType"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :end-time)) #:http.request.field{:name "EndTime", :shape "DateTime", :location-name "endTime"})) (clojure.core/contains? input :product-descriptions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-product-description-list (input :product-descriptions)) #:http.request.field{:name "ProductDescriptions", :shape "ProductDescriptionList", :location-name "ProductDescription"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-bundle-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-storage (input :storage)) #:http.request.field{:name "Storage", :shape "Storage"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpc-peering-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String", :location-name "gatewayId"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :nat-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String", :location-name "natGatewayId"}))))

(clojure.core/defn- req-start-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-volume-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "VolumeAttributeName"}))))

(clojure.core/defn- req-unmonitor-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-fleet-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-import-snapshot-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :disk-container) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-disk-container (input :disk-container)) #:http.request.field{:name "DiskContainer", :shape "SnapshotDiskContainer"})) (clojure.core/contains? input :client-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-client-data (input :client-data)) #:http.request.field{:name "ClientData", :shape "ClientData"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-name)) #:http.request.field{:name "RoleName", :shape "String"}))))

(clojure.core/defn- req-describe-instance-status-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :include-all-instances) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-all-instances)) #:http.request.field{:name "IncludeAllInstances", :shape "Boolean", :location-name "includeAllInstances"}))))

(clojure.core/defn- req-disable-vpc-classic-link-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-import-image-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :import-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-task-id-list (input :import-task-ids)) #:http.request.field{:name "ImportTaskIds", :shape "ImportTaskIdList", :location-name "ImportTaskId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-copy-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-region)) #:http.request.field{:name "SourceRegion", :shape "String"}) (clojure.core/into (ser-string (input :source-snapshot-id)) #:http.request.field{:name "SourceSnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :destination-region) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-region)) #:http.request.field{:name "DestinationRegion", :shape "String", :location-name "destinationRegion"})) (clojure.core/contains? input :presigned-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :presigned-url)) #:http.request.field{:name "PresignedUrl", :shape "String", :location-name "presignedUrl"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String", :location-name "kmsKeyId"}))))

(clojure.core/defn- req-delete-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-attach-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-string (input :device)) #:http.request.field{:name "Device", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-export-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :export-task-id)) #:http.request.field{:name "ExportTaskId", :shape "String", :location-name "exportTaskId"})]}))

(clojure.core/defn- req-create-security-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "GroupDescription"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-revoke-security-group-ingress-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String"}))))

(clojure.core/defn- req-delete-vpn-connection-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String"})]}))

(clojure.core/defn- req-create-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-gateway-type (input :type)) #:http.request.field{:name "Type", :shape "GatewayType"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"}))))

(clojure.core/defn- req-enable-vgw-route-propagation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String"}) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String"})]}))

(clojure.core/defn- req-describe-regions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :region-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-region-name-string-list (input :region-names)) #:http.request.field{:name "RegionNames", :shape "RegionNameStringList", :location-name "RegionName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-vpn-connections-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpn-connection-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-connection-id-string-list (input :vpn-connection-ids)) #:http.request.field{:name "VpnConnectionIds", :shape "VpnConnectionIdStringList", :location-name "VpnConnectionId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-replace-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String", :location-name "gatewayId"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :nat-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String", :location-name "natGatewayId"}))))

(clojure.core/defn- req-create-spot-datafeed-subscription-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :bucket)) #:http.request.field{:name "Bucket", :shape "String", :location-name "bucket"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix)) #:http.request.field{:name "Prefix", :shape "String", :location-name "prefix"}))))

(clojure.core/defn- req-describe-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"}) (clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-authorize-security-group-egress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})]} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String", :location-name "sourceSecurityGroupOwnerId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String", :location-name "sourceSecurityGroupName"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList", :location-name "ipPermissions"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- req-import-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"}) (clojure.core/into (ser-blob (input :public-key-material)) #:http.request.field{:name "PublicKeyMaterial", :shape "Blob", :location-name "publicKeyMaterial"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-id-list (input :resources)) #:http.request.field{:name "Resources", :shape "ResourceIdList", :location-name "resourceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "tag"}))))

(clojure.core/defn- req-describe-dhcp-options-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :dhcp-options-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-dhcp-options-id-string-list (input :dhcp-options-ids)) #:http.request.field{:name "DhcpOptionsIds", :shape "DhcpOptionsIdStringList", :location-name "DhcpOptionsId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-assign-private-ip-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-string-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressStringList", :location-name "privateIpAddress"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :allow-reassignment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-reassignment)) #:http.request.field{:name "AllowReassignment", :shape "Boolean", :location-name "allowReassignment"}))))

(clojure.core/defn- req-detach-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :attachment-id)) #:http.request.field{:name "AttachmentId", :shape "String", :location-name "attachmentId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean", :location-name "force"}))))

(clojure.core/defn- req-associate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :allocation-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :allow-reassociation) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-reassociation)) #:http.request.field{:name "AllowReassociation", :shape "Boolean", :location-name "allowReassociation"}))))

(clojure.core/defn- req-create-internet-gateway-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-spot-instance-requests-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-spot-instance-request-id-list (input :spot-instance-request-ids)) #:http.request.field{:name "SpotInstanceRequestIds", :shape "SpotInstanceRequestIdList", :location-name "SpotInstanceRequestId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-get-console-output-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-nat-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :nat-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :nat-gateway-ids)) #:http.request.field{:name "NatGatewayIds", :shape "ValueStringList", :location-name "NatGatewayId"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-create-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :instance-tenancy)) #:http.request.field{:name "InstanceTenancy", :shape "Tenancy", :location-name "instanceTenancy"}))))

(clojure.core/defn- req-request-spot-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})]} (clojure.core/contains? input :availability-zone-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone-group)) #:http.request.field{:name "AvailabilityZoneGroup", :shape "String", :location-name "availabilityZoneGroup"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-type (input :type)) #:http.request.field{:name "Type", :shape "SpotInstanceType", :location-name "type"})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"})) (clojure.core/contains? input :block-duration-minutes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :block-duration-minutes)) #:http.request.field{:name "BlockDurationMinutes", :shape "Integer", :location-name "blockDurationMinutes"})) (clojure.core/contains? input :valid-from) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-from)) #:http.request.field{:name "ValidFrom", :shape "DateTime", :location-name "validFrom"})) (clojure.core/contains? input :launch-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-request-spot-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "RequestSpotLaunchSpecification"})) (clojure.core/contains? input :launch-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-group)) #:http.request.field{:name "LaunchGroup", :shape "String", :location-name "launchGroup"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime", :location-name "validUntil"}))))

(clojure.core/defn- req-create-network-acl-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-bundle-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :bundle-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bundle-id-string-list (input :bundle-ids)) #:http.request.field{:name "BundleIds", :shape "BundleIdStringList", :location-name "BundleId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-create-nat-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"}) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-volume-status-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-id-string-list (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "VolumeIdStringList", :location-name "VolumeId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-allocate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-domain-type (input :domain)) #:http.request.field{:name "Domain", :shape "DomainType"}))))

(clojure.core/defn- req-describe-import-snapshot-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :import-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-task-id-list (input :import-task-ids)) #:http.request.field{:name "ImportTaskIds", :shape "ImportTaskIdList", :location-name "ImportTaskId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-describe-vpc-peering-connections-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-peering-connection-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :vpc-peering-connection-ids)) #:http.request.field{:name "VpcPeeringConnectionIds", :shape "ValueStringList", :location-name "VpcPeeringConnectionId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-attribute (input :attribute)) #:http.request.field{:name "Attribute", :shape "NetworkInterfaceAttribute", :location-name "attribute"}))))

(clojure.core/defn- req-restore-address-to-classic-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "publicIp"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-disable-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-delete-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"}) (clojure.core/into (ser-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "ImageAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-customer-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-gateway-type (input :type)) #:http.request.field{:name "Type", :shape "GatewayType"}) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "IpAddress"}) (clojure.core/into (ser-integer (input :bgp-asn)) #:http.request.field{:name "BgpAsn", :shape "Integer"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-import-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"}) (clojure.core/into (ser-disk-image-detail (input :image)) #:http.request.field{:name "Image", :shape "DiskImageDetail", :location-name "image"}) (clojure.core/into (ser-volume-detail (input :volume)) #:http.request.field{:name "Volume", :shape "VolumeDetail", :location-name "volume"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"}))))

(clojure.core/defn- req-modify-instance-placement-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-host-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "HostTenancy", :location-name "tenancy"})) (clojure.core/contains? input :affinity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-affinity (input :affinity)) #:http.request.field{:name "Affinity", :shape "Affinity", :location-name "affinity"})) (clojure.core/contains? input :host-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-id)) #:http.request.field{:name "HostId", :shape "String", :location-name "hostId"}))))

(clojure.core/defn- req-create-vpc-peering-connection-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})) (clojure.core/contains? input :peer-vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peer-vpc-id)) #:http.request.field{:name "PeerVpcId", :shape "String", :location-name "peerVpcId"})) (clojure.core/contains? input :peer-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peer-owner-id)) #:http.request.field{:name "PeerOwnerId", :shape "String", :location-name "peerOwnerId"}))))

(clojure.core/defn- req-disable-vgw-route-propagation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String"}) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String"})]}))

(clojure.core/defn- req-describe-reserved-instances-listings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-instances-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-instances-id)) #:http.request.field{:name "ReservedInstancesId", :shape "String", :location-name "reservedInstancesId"})) (clojure.core/contains? input :reserved-instances-listing-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-instances-listing-id)) #:http.request.field{:name "ReservedInstancesListingId", :shape "String", :location-name "reservedInstancesListingId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filters"}))))

(clojure.core/defn- req-create-subnet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"}))))

(clojure.core/defn- req-modify-vpc-peering-connection-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :requester-peering-connection-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-peering-connection-options-request (input :requester-peering-connection-options)) #:http.request.field{:name "RequesterPeeringConnectionOptions", :shape "PeeringConnectionOptionsRequest"})) (clojure.core/contains? input :accepter-peering-connection-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-peering-connection-options-request (input :accepter-peering-connection-options)) #:http.request.field{:name "AccepterPeeringConnectionOptions", :shape "PeeringConnectionOptionsRequest"}))))

(clojure.core/defn- req-get-password-data-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-volume-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :auto-enable-io) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :auto-enable-io)) #:http.request.field{:name "AutoEnableIO", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-describe-spot-datafeed-subscription-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"}) (clojure.core/into (ser-string (input :protocol)) #:http.request.field{:name "Protocol", :shape "String", :location-name "protocol"}) (clojure.core/into (ser-rule-action (input :rule-action)) #:http.request.field{:name "RuleAction", :shape "RuleAction", :location-name "ruleAction"}) (clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"}) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String", :location-name "cidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :icmp-type-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-icmp-type-code (input :icmp-type-code)) #:http.request.field{:name "IcmpTypeCode", :shape "IcmpTypeCode", :location-name "Icmp"})) (clojure.core/contains? input :port-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-port-range (input :port-range)) #:http.request.field{:name "PortRange", :shape "PortRange", :location-name "portRange"}))))

(clojure.core/defn- req-delete-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-deregister-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpc-endpoints-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-create-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-new-dhcp-configuration-list (input :dhcp-configurations)) #:http.request.field{:name "DhcpConfigurations", :shape "NewDhcpConfigurationList", :location-name "dhcpConfiguration"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-route-tables-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :route-table-ids)) #:http.request.field{:name "RouteTableIds", :shape "ValueStringList", :location-name "RouteTableId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-create-instance-export-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :target-environment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-environment (input :target-environment)) #:http.request.field{:name "TargetEnvironment", :shape "ExportEnvironment", :location-name "targetEnvironment"})) (clojure.core/contains? input :export-to-s-3-task) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-to-s-3-task-specification (input :export-to-s-3-task)) #:http.request.field{:name "ExportToS3Task", :shape "ExportToS3TaskSpecification", :location-name "exportToS3"}))))

(clojure.core/defn- req-create-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-id-list (input :resources)) #:http.request.field{:name "Resources", :shape "ResourceIdList", :location-name "ResourceId"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "Tag"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-reserved-instances-listing-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-instances-listing-id)) #:http.request.field{:name "ReservedInstancesListingId", :shape "String", :location-name "reservedInstancesListingId"})]}))

(clojure.core/defn- req-attach-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-spot-fleet-requests-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :spot-fleet-request-ids)) #:http.request.field{:name "SpotFleetRequestIds", :shape "ValueStringList", :location-name "spotFleetRequestId"}) (clojure.core/into (ser-boolean (input :terminate-instances)) #:http.request.field{:name "TerminateInstances", :shape "Boolean", :location-name "terminateInstances"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"}) (clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-detach-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-enable-volume-io-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String", :location-name "volumeId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-subnet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-subnet-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]} (clojure.core/contains? input :map-public-ip-on-launch) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :map-public-ip-on-launch)) #:http.request.field{:name "MapPublicIpOnLaunch", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-delete-spot-datafeed-subscription-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-security-group-references-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-group-ids (input :group-id)) #:http.request.field{:name "GroupId", :shape "GroupIds"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-describe-vpcs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-id-string-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcIdStringList", :location-name "VpcId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"}) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpc-endpoint-services-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-reboot-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"}) (clojure.core/into (ser-string (input :protocol)) #:http.request.field{:name "Protocol", :shape "String", :location-name "protocol"}) (clojure.core/into (ser-rule-action (input :rule-action)) #:http.request.field{:name "RuleAction", :shape "RuleAction", :location-name "ruleAction"}) (clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"}) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String", :location-name "cidrBlock"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :icmp-type-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-icmp-type-code (input :icmp-type-code)) #:http.request.field{:name "IcmpTypeCode", :shape "IcmpTypeCode", :location-name "Icmp"})) (clojure.core/contains? input :port-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-port-range (input :port-range)) #:http.request.field{:name "PortRange", :shape "PortRange", :location-name "portRange"}))))

(clojure.core/defn- req-describe-volumes-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-id-string-list (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "VolumeIdStringList", :location-name "VolumeId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-describe-account-attributes-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-account-attribute-name-string-list (input :attribute-names)) #:http.request.field{:name "AttributeNames", :shape "AccountAttributeNameStringList", :location-name "attributeName"}))))

(clojure.core/defn- req-enable-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-describe-tags-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-attach-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer", :location-name "deviceIndex"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-release-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"})]}))

(clojure.core/defn- req-report-instance-status-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instances)) #:http.request.field{:name "Instances", :shape "InstanceIdStringList", :location-name "instanceId"}) (clojure.core/into (ser-report-status-type (input :status)) #:http.request.field{:name "Status", :shape "ReportStatusType", :location-name "status"}) (clojure.core/into (ser-reason-codes-list (input :reason-codes)) #:http.request.field{:name "ReasonCodes", :shape "ReasonCodesList", :location-name "reasonCode"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :end-time)) #:http.request.field{:name "EndTime", :shape "DateTime", :location-name "endTime"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"}))))

(clojure.core/defn- req-create-flow-logs-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :resource-ids)) #:http.request.field{:name "ResourceIds", :shape "ValueStringList", :location-name "ResourceId"}) (clojure.core/into (ser-flow-logs-resource-type (input :resource-type)) #:http.request.field{:name "ResourceType", :shape "FlowLogsResourceType"}) (clojure.core/into (ser-traffic-type (input :traffic-type)) #:http.request.field{:name "TrafficType", :shape "TrafficType"}) (clojure.core/into (ser-string (input :log-group-name)) #:http.request.field{:name "LogGroupName", :shape "String"}) (clojure.core/into (ser-string (input :deliver-logs-permission-arn)) #:http.request.field{:name "DeliverLogsPermissionArn", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-images-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :image-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-image-id-string-list (input :image-ids)) #:http.request.field{:name "ImageIds", :shape "ImageIdStringList", :location-name "ImageId"})) (clojure.core/contains? input :owners) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-owner-string-list (input :owners)) #:http.request.field{:name "Owners", :shape "OwnerStringList", :location-name "Owner"})) (clojure.core/contains? input :executable-users) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-executable-by-string-list (input :executable-users)) #:http.request.field{:name "ExecutableUsers", :shape "ExecutableByStringList", :location-name "ExecutableBy"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :description)) #:http.request.field{:name "Description", :shape "AttributeValue", :location-name "description"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "AttributeBooleanValue", :location-name "sourceDestCheck"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :attachment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-attachment-changes (input :attachment)) #:http.request.field{:name "Attachment", :shape "NetworkInterfaceAttachmentChanges", :location-name "attachment"}))))

(clojure.core/defn- req-cancel-bundle-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :bundle-id)) #:http.request.field{:name "BundleId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-reset-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"}) (clojure.core/into (ser-reset-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "ResetImageAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-import-task-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :import-task-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :import-task-id)) #:http.request.field{:name "ImportTaskId", :shape "String"})) (clojure.core/contains? input :cancel-reason) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cancel-reason)) #:http.request.field{:name "CancelReason", :shape "String"}))))

(clojure.core/defn- req-describe-classic-link-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-describe-vpc-endpoints-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :vpc-endpoint-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-scheduled-instance-availability-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-scheduled-instance-recurrence-request (input :recurrence)) #:http.request.field{:name "Recurrence", :shape "ScheduledInstanceRecurrenceRequest"}) (clojure.core/into (ser-slot-date-time-range-request (input :first-slot-start-time-range)) #:http.request.field{:name "FirstSlotStartTimeRange", :shape "SlotDateTimeRangeRequest"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :min-slot-duration-in-hours) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-slot-duration-in-hours)) #:http.request.field{:name "MinSlotDurationInHours", :shape "Integer"})) (clojure.core/contains? input :max-slot-duration-in-hours) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-slot-duration-in-hours)) #:http.request.field{:name "MaxSlotDurationInHours", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-customer-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :customer-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-customer-gateway-id-string-list (input :customer-gateway-ids)) #:http.request.field{:name "CustomerGatewayIds", :shape "CustomerGatewayIdStringList", :location-name "CustomerGatewayId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-reset-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"}) (clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-attach-classic-link-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"}) (clojure.core/into (ser-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "GroupIdStringList", :location-name "SecurityGroupId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"})) (clojure.core/contains? input :operation-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-operation-type (input :operation-type)) #:http.request.field{:name "OperationType", :shape "OperationType"})) (clojure.core/contains? input :user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-string-list (input :user-ids)) #:http.request.field{:name "UserIds", :shape "UserIdStringList", :location-name "UserId"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-name-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "GroupNameStringList", :location-name "UserGroup"})) (clojure.core/contains? input :create-volume-permission) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-modifications (input :create-volume-permission)) #:http.request.field{:name "CreateVolumePermission", :shape "CreateVolumePermissionModifications"}))))

(clojure.core/defn- req-detach-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :device) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device)) #:http.request.field{:name "Device", :shape "String"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean"}))))

(clojure.core/defn- req-purchase-reserved-instances-offering-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-instances-offering-id)) #:http.request.field{:name "ReservedInstancesOfferingId", :shape "String"}) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :limit-price) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instance-limit-price (input :limit-price)) #:http.request.field{:name "LimitPrice", :shape "ReservedInstanceLimitPrice", :location-name "limitPrice"}))))

(clojure.core/defn- req-unassign-private-ip-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"}) (clojure.core/into (ser-private-ip-address-string-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressStringList", :location-name "privateIpAddress"})]}))

(clojure.core/defn- req-monitor-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-placement-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-run-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"}) (clojure.core/into (ser-integer (input :min-count)) #:http.request.field{:name "MinCount", :shape "Integer"}) (clojure.core/into (ser-integer (input :max-count)) #:http.request.field{:name "MaxCount", :shape "Integer"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement (input :placement)) #:http.request.field{:name "Placement", :shape "Placement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-string-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "SecurityGroupStringList", :location-name "SecurityGroup"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})) (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :disable-api-termination) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :disable-api-termination)) #:http.request.field{:name "DisableApiTermination", :shape "Boolean", :location-name "disableApiTermination"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-run-instances-monitoring-enabled (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "RunInstancesMonitoringEnabled"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-behavior (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "ShutdownBehavior", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "networkInterface"}))))

(clojure.core/defn- req-reset-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-purchase-scheduled-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-purchase-request-set (input :purchase-requests)) #:http.request.field{:name "PurchaseRequests", :shape "PurchaseRequestSet", :location-name "PurchaseRequest"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :idempotency-token true}))))

(clojure.core/defn- req-move-address-to-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "publicIp"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-export-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :export-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-task-id-string-list (input :export-task-ids)) #:http.request.field{:name "ExportTaskIds", :shape "ExportTaskIdStringList", :location-name "exportTaskId"}))))

(clojure.core/defn- req-create-vpn-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :type)) #:http.request.field{:name "Type", :shape "String"}) (clojure.core/into (ser-string (input :customer-gateway-id)) #:http.request.field{:name "CustomerGatewayId", :shape "String"}) (clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-connection-options-specification (input :options)) #:http.request.field{:name "Options", :shape "VpnConnectionOptionsSpecification", :location-name "options"}))))

(clojure.core/defn- req-disassociate-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-hosts-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :host-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList", :location-name "filter"}))))

(clojure.core/defn- req-describe-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-detach-classic-link-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-moving-addresses-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :public-ips)) #:http.request.field{:name "PublicIps", :shape "ValueStringList", :location-name "publicIp"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-accept-vpc-peering-connection-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"}))))

(clojure.core/defn- req-describe-reserved-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :reserved-instances-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-id-string-list (input :reserved-instances-ids)) #:http.request.field{:name "ReservedInstancesIds", :shape "ReservedInstancesIdStringList", :location-name "ReservedInstancesId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-type-values (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "OfferingTypeValues", :location-name "offeringType"}))))

(clojure.core/defn- req-describe-vpc-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-vpc-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "VpcAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-reserved-instances-offerings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :max-duration)) #:http.request.field{:name "MaxDuration", :shape "Long"})) (clojure.core/contains? input :min-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :min-duration)) #:http.request.field{:name "MinDuration", :shape "Long"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :instance-tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :instance-tenancy)) #:http.request.field{:name "InstanceTenancy", :shape "Tenancy", :location-name "instanceTenancy"})) (clojure.core/contains? input :include-marketplace) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-marketplace)) #:http.request.field{:name "IncludeMarketplace", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ri-product-description (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "RIProductDescription"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-type-values (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "OfferingTypeValues", :location-name "offeringType"})) (clojure.core/contains? input :max-instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-instance-count)) #:http.request.field{:name "MaxInstanceCount", :shape "Integer"})) (clojure.core/contains? input :reserved-instances-offering-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-offering-id-string-list (input :reserved-instances-offering-ids)) #:http.request.field{:name "ReservedInstancesOfferingIds", :shape "ReservedInstancesOfferingIdStringList", :location-name "ReservedInstancesOfferingId"}))))

(clojure.core/defn- req-create-vpc-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-string (input :service-name)) #:http.request.field{:name "ServiceName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :policy-document) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "String"})) (clojure.core/contains? input :route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :route-table-ids)) #:http.request.field{:name "RouteTableIds", :shape "ValueStringList", :location-name "RouteTableId"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-delete-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-network-interfaces-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :network-interface-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-id-list (input :network-interface-ids)) #:http.request.field{:name "NetworkInterfaceIds", :shape "NetworkInterfaceIdList", :location-name "NetworkInterfaceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filter"}))))

(clojure.core/defn- req-describe-subnets-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subnet-id-string-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdStringList", :location-name "SubnetId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-nat-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String"})]}))

(clojure.core/defn- req-describe-availability-zones-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :zone-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-zone-name-string-list (input :zone-names)) #:http.request.field{:name "ZoneNames", :shape "ZoneNameStringList", :location-name "ZoneName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-disassociate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :association-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String"}))))

(clojure.core/defn- req-revoke-security-group-egress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})]} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String", :location-name "sourceSecurityGroupOwnerId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String", :location-name "sourceSecurityGroupName"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList", :location-name "ipPermissions"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- req-detach-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-prefix-lists-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :prefix-list-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :prefix-list-ids)) #:http.request.field{:name "PrefixListIds", :shape "ValueStringList", :location-name "PrefixListId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-terminate-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-reserved-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reserved-instances-id-string-list (input :reserved-instances-ids)) #:http.request.field{:name "ReservedInstancesIds", :shape "ReservedInstancesIdStringList", :location-name "ReservedInstancesId"}) (clojure.core/into (ser-reserved-instances-configuration-list (input :target-configurations)) #:http.request.field{:name "TargetConfigurations", :shape "ReservedInstancesConfigurationList", :location-name "ReservedInstancesConfigurationSetItemType"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"}))))

(clojure.core/defn- req-delete-network-acl-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-placement-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement-group-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "PlacementGroupStringList", :location-name "groupName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-modify-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-string-list (input :user-ids)) #:http.request.field{:name "UserIds", :shape "UserIdStringList", :location-name "UserId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :attribute)) #:http.request.field{:name "Attribute", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :description)) #:http.request.field{:name "Description", :shape "AttributeValue"})) (clojure.core/contains? input :operation-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-operation-type (input :operation-type)) #:http.request.field{:name "OperationType", :shape "OperationType"})) (clojure.core/contains? input :product-codes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-product-code-string-list (input :product-codes)) #:http.request.field{:name "ProductCodes", :shape "ProductCodeStringList", :location-name "ProductCode"})) (clojure.core/contains? input :user-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-group-string-list (input :user-groups)) #:http.request.field{:name "UserGroups", :shape "UserGroupStringList", :location-name "UserGroup"})) (clojure.core/contains? input :launch-permission) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-modifications (input :launch-permission)) #:http.request.field{:name "LaunchPermission", :shape "LaunchPermissionModifications"}))))

(clojure.core/defn- req-enable-vpc-classic-link-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-security-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-name-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "GroupNameStringList", :location-name "GroupName"})) (clojure.core/contains? input :group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-id-string-list (input :group-ids)) #:http.request.field{:name "GroupIds", :shape "GroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-import-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-platform-values (input :platform)) #:http.request.field{:name "Platform", :shape "PlatformValues", :location-name "platform"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :launch-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-instance-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "ImportInstanceLaunchSpecification", :location-name "launchSpecification"})) (clojure.core/contains? input :disk-images) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-list (input :disk-images)) #:http.request.field{:name "DiskImages", :shape "DiskImageList", :location-name "diskImage"}))))

(clojure.core/defn- req-describe-vpc-classic-link-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-classic-link-id-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcClassicLinkIdList", :location-name "VpcId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-authorize-security-group-ingress-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String"}))))

(clojure.core/defn- req-create-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :size)) #:http.request.field{:name "Size", :shape "Integer"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"}))))

(clojure.core/defn- req-modify-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "AttributeBooleanValue", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "AttributeValue", :location-name "instanceType"})) (clojure.core/contains? input :ramdisk) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :ramdisk)) #:http.request.field{:name "Ramdisk", :shape "AttributeValue", :location-name "ramdisk"})) (clojure.core/contains? input :sriov-net-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :sriov-net-support)) #:http.request.field{:name "SriovNetSupport", :shape "AttributeValue", :location-name "sriovNetSupport"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"})) (clojure.core/contains? input :disable-api-termination) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :disable-api-termination)) #:http.request.field{:name "DisableApiTermination", :shape "AttributeBooleanValue", :location-name "disableApiTermination"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "GroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-block-device-mapping-specification-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "InstanceBlockDeviceMappingSpecificationList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :kernel) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :kernel)) #:http.request.field{:name "Kernel", :shape "AttributeValue", :location-name "kernel"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob-attribute-value (input :user-data)) #:http.request.field{:name "UserData", :shape "BlobAttributeValue", :location-name "userData"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "AttributeValue", :location-name "instanceInitiatedShutdownBehavior"}))))

(clojure.core/defn- req-release-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :allocation-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"}))))

(clojure.core/defn- req-describe-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-classic-link-id-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcClassicLinkIdList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken", :location-name "nextToken"}))))

(clojure.core/defn- req-describe-reserved-instances-modifications-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-instances-modification-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-modification-id-string-list (input :reserved-instances-modification-ids)) #:http.request.field{:name "ReservedInstancesModificationIds", :shape "ReservedInstancesModificationIdStringList", :location-name "ReservedInstancesModificationId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-create-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-specification-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressSpecificationList", :location-name "privateIpAddresses"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-stale-security-groups-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"}))))

(clojure.core/defn- req-create-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dhcp-options-id)) #:http.request.field{:name "DhcpOptionsId", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-reject-vpc-peering-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-network-acl-association-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"}) (clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-run-scheduled-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :scheduled-instance-id)) #:http.request.field{:name "ScheduledInstanceId", :shape "String"}) (clojure.core/into (ser-scheduled-instances-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "ScheduledInstancesLaunchSpecification"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :idempotency-token true})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"}))))

(clojure.core/defn- req-describe-spot-instance-requests-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :spot-instance-request-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-request-id-list (input :spot-instance-request-ids)) #:http.request.field{:name "SpotInstanceRequestIds", :shape "SpotInstanceRequestIdList", :location-name "SpotInstanceRequestId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-attach-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-stop-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean", :location-name "force"}))))

(clojure.core/defn- req-modify-vpc-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-endpoint-id)) #:http.request.field{:name "VpcEndpointId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :reset-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-policy)) #:http.request.field{:name "ResetPolicy", :shape "Boolean"})) (clojure.core/contains? input :policy-document) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "String"})) (clojure.core/contains? input :add-route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :add-route-table-ids)) #:http.request.field{:name "AddRouteTableIds", :shape "ValueStringList", :location-name "AddRouteTableId"})) (clojure.core/contains? input :remove-route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :remove-route-table-ids)) #:http.request.field{:name "RemoveRouteTableIds", :shape "ValueStringList", :location-name "RemoveRouteTableId"}))))

(clojure.core/defn- req-get-console-screenshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :wake-up) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :wake-up)) #:http.request.field{:name "WakeUp", :shape "Boolean"}))))

(clojure.core/defn- req-describe-id-format-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String"}))))

(clojure.core/defn- req-describe-key-pairs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :key-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-key-name-string-list (input :key-names)) #:http.request.field{:name "KeyNames", :shape "KeyNameStringList", :location-name "KeyName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dhcp-options-id)) #:http.request.field{:name "DhcpOptionsId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-fleet-request-history-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"}) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :event-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-type (input :event-type)) #:http.request.field{:name "EventType", :shape "EventType", :location-name "eventType"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-create-placement-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"}) (clojure.core/into (ser-placement-strategy (input :strategy)) #:http.request.field{:name "Strategy", :shape "PlacementStrategy", :location-name "strategy"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/declare deser-export-task-list)

(clojure.core/declare deser-event-code)

(clojure.core/declare deser-flow-log)

(clojure.core/declare deser-vpc-list)

(clojure.core/declare deser-volume-status-action)

(clojure.core/declare deser-permission-group)

(clojure.core/declare deser-address)

(clojure.core/declare deser-bundle-task)

(clojure.core/declare deser-security-group-list)

(clojure.core/declare deser-instance-count-list)

(clojure.core/declare deser-describe-conversion-task-list)

(clojure.core/declare deser-route)

(clojure.core/declare deser-nat-gateway-list)

(clojure.core/declare deser-moving-address-status-set)

(clojure.core/declare deser-instance-state-change-list)

(clojure.core/declare deser-double)

(clojure.core/declare deser-ebs-instance-block-device)

(clojure.core/declare deser-route-table)

(clojure.core/declare deser-scheduled-instance-set)

(clojure.core/declare deser-propagating-vgw)

(clojure.core/declare deser-flow-log-set)

(clojure.core/declare deser-prefix-list-id-set)

(clojure.core/declare deser-instance-network-interface-list)

(clojure.core/declare deser-vpn-connection-list)

(clojure.core/declare deser-reserved-instances-offering)

(clojure.core/declare deser-storage)

(clojure.core/declare deser-value-string-list)

(clojure.core/declare deser-ip-ranges)

(clojure.core/declare deser-instance-status-event-list)

(clojure.core/declare deser-reserved-instances-modification-result-list)

(clojure.core/declare deser-vpc-peering-connection-vpc-info)

(clojure.core/declare deser-instance-monitoring-list)

(clojure.core/declare deser-vpc-peering-connection)

(clojure.core/declare deser-image-state)

(clojure.core/declare deser-vpn-state)

(clojure.core/declare deser-account-attribute-list)

(clojure.core/declare deser-move-status)

(clojure.core/declare deser-prefix-list-id)

(clojure.core/declare deser-pricing-details-list)

(clojure.core/declare deser-hypervisor-type)

(clojure.core/declare deser-history-record)

(clojure.core/declare deser-route-table-list)

(clojure.core/declare deser-architecture-values)

(clojure.core/declare deser-cancelled-spot-instance-request)

(clojure.core/declare deser-volume-attachment-list)

(clojure.core/declare deser-export-environment)

(clojure.core/declare deser-instance-export-details)

(clojure.core/declare deser-volume-attachment-state)

(clojure.core/declare deser-internet-gateway-attachment)

(clojure.core/declare deser-instance-monitoring)

(clojure.core/declare deser-spot-price-history-list)

(clojure.core/declare deser-vpn-connection-options)

(clojure.core/declare deser-network-acl-entry)

(clojure.core/declare deser-provisioned-bandwidth)

(clojure.core/declare deser-vgw-telemetry-list)

(clojure.core/declare deser-volume-state)

(clojure.core/declare deser-spot-placement)

(clojure.core/declare deser-security-group)

(clojure.core/declare deser-recurring-charges-list)

(clojure.core/declare deser-snapshot-detail-list)

(clojure.core/declare deser-id-format)

(clojure.core/declare deser-volume)

(clojure.core/declare deser-spot-instance-type)

(clojure.core/declare deser-ebs-block-device)

(clojure.core/declare deser-placement)

(clojure.core/declare deser-reserved-instances-configuration)

(clojure.core/declare deser-user-bucket-details)

(clojure.core/declare deser-occurrence-day-set)

(clojure.core/declare deser-snapshot-list)

(clojure.core/declare deser-instance-lifecycle-type)

(clojure.core/declare deser-availability-zone-state)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-dhcp-configuration-list)

(clojure.core/declare deser-spot-datafeed-subscription)

(clojure.core/declare deser-instance-count)

(clojure.core/declare deser-host-instance-list)

(clojure.core/declare deser-import-instance-volume-detail-item)

(clojure.core/declare deser-tenancy)

(clojure.core/declare deser-instance-network-interface-attachment)

(clojure.core/declare deser-snapshot-detail)

(clojure.core/declare deser-spot-instance-state-fault)

(clojure.core/declare deser-dhcp-configuration-value-list)

(clojure.core/declare deser-instance-network-interface-association)

(clojure.core/declare deser-bundle-task-list)

(clojure.core/declare deser-disk-image-volume-description)

(clojure.core/declare deser-host-properties)

(clojure.core/declare deser-scheduled-instance)

(clojure.core/declare deser-active-instance-set)

(clojure.core/declare deser-instance-type)

(clojure.core/declare deser-route-state)

(clojure.core/declare deser-subnet-state)

(clojure.core/declare deser-stale-ip-permission-set)

(clojure.core/declare deser-reserved-instances-modification-result)

(clojure.core/declare deser-import-instance-task-details)

(clojure.core/declare deser-create-volume-permission)

(clojure.core/declare deser-instance-status-details)

(clojure.core/declare deser-iam-instance-profile-specification)

(clojure.core/declare deser-spot-instance-request-list)

(clojure.core/declare deser-region-list)

(clojure.core/declare deser-disk-image-description)

(clojure.core/declare deser-available-capacity)

(clojure.core/declare deser-bundle-task-state)

(clojure.core/declare deser-icmp-type-code)

(clojure.core/declare deser-instance-private-ip-address)

(clojure.core/declare deser-reserved-instances-listing-list)

(clojure.core/declare deser-vpc-classic-link)

(clojure.core/declare deser-snapshot-task-detail)

(clojure.core/declare deser-launch-specification)

(clojure.core/declare deser-id-format-list)

(clojure.core/declare deser-prefix-list-set)

(clojure.core/declare deser-attribute-boolean-value)

(clojure.core/declare deser-spot-instance-request)

(clojure.core/declare deser-rule-action)

(clojure.core/declare deser-vpc-attachment-list)

(clojure.core/declare deser-vpn-static-route)

(clojure.core/declare deser-fleet-type)

(clojure.core/declare deser-vpc-endpoint)

(clojure.core/declare deser-key-pair-list)

(clojure.core/declare deser-purchased-scheduled-instance-set)

(clojure.core/declare deser-group-identifier-list)

(clojure.core/declare deser-cancel-spot-fleet-requests-error-item)

(clojure.core/declare deser-instance-status-details-list)

(clojure.core/declare deser-key-pair-info)

(clojure.core/declare deser-instance-network-interface)

(clojure.core/declare deser-cancel-spot-fleet-requests-error)

(clojure.core/declare deser-vpn-static-route-list)

(clojure.core/declare deser-reservation)

(clojure.core/declare deser-unsuccessful-item-error)

(clojure.core/declare deser-vpc-peering-connection-list)

(clojure.core/declare deser-unsuccessful-item-set)

(clojure.core/declare deser-security-group-references)

(clojure.core/declare deser-stale-ip-permission)

(clojure.core/declare deser-traffic-type)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-route-origin)

(clojure.core/declare deser-create-volume-permission-list)

(clojure.core/declare deser-status)

(clojure.core/declare deser-network-interface-type)

(clojure.core/declare deser-cancelled-spot-instance-request-list)

(clojure.core/declare deser-event-type)

(clojure.core/declare deser-moving-address-status)

(clojure.core/declare deser-reserved-instances)

(clojure.core/declare deser-next-token)

(clojure.core/declare deser-excess-capacity-termination-policy)

(clojure.core/declare deser-prefix-list)

(clojure.core/declare deser-import-instance-volume-detail-set)

(clojure.core/declare deser-status-type)

(clojure.core/declare deser-spot-fleet-monitoring)

(clojure.core/declare deser-reserved-instances-listing)

(clojure.core/declare deser-instance-status-summary)

(clojure.core/declare deser-nat-gateway-address)

(clojure.core/declare deser-instance-status-list)

(clojure.core/declare deser-placement-group-list)

(clojure.core/declare deser-address-list)

(clojure.core/declare deser-reserved-instances-offering-list)

(clojure.core/declare deser-reserved-instances-list)

(clojure.core/declare deser-image-list)

(clojure.core/declare deser-user-id-group-pair-list)

(clojure.core/declare deser-s-3-storage)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-spot-fleet-request-config-set)

(clojure.core/declare deser-launch-permission-list)

(clojure.core/declare deser-price-schedule-list)

(clojure.core/declare deser-instance-private-ip-address-list)

(clojure.core/declare deser-group-identifier)

(clojure.core/declare deser-spot-price)

(clojure.core/declare deser-instance-id-set)

(clojure.core/declare deser-scheduled-instance-availability-set)

(clojure.core/declare deser-nat-gateway)

(clojure.core/declare deser-spot-instance-status)

(clojure.core/declare deser-tag-description)

(clojure.core/declare deser-account-attribute-value-list)

(clojure.core/declare deser-import-snapshot-task-list)

(clojure.core/declare deser-dhcp-options)

(clojure.core/declare deser-run-instances-monitoring-enabled)

(clojure.core/declare deser-user-id-group-pair-set)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-network-acl-association-list)

(clojure.core/declare deser-product-code-list)

(clojure.core/declare deser-volume-status-info-status)

(clojure.core/declare deser-spot-fleet-request-config-data)

(clojure.core/declare deser-listing-state)

(clojure.core/declare deser-volume-status-events-list)

(clojure.core/declare deser-datafeed-subscription-state)

(clojure.core/declare deser-network-interface-list)

(clojure.core/declare deser-cancel-batch-error-code)

(clojure.core/declare deser-allocation-strategy)

(clojure.core/declare deser-status-name)

(clojure.core/declare deser-volume-status-event)

(clojure.core/declare deser-reserved-intances-ids)

(clojure.core/declare deser-attribute-value)

(clojure.core/declare deser-network-acl-association)

(clojure.core/declare deser-private-ip-address-specification-list)

(clojure.core/declare deser-auto-placement)

(clojure.core/declare deser-prefix-list-id-list)

(clojure.core/declare deser-availability-zone-message-list)

(clojure.core/declare deser-history-records)

(clojure.core/declare deser-tag-description-list)

(clojure.core/declare deser-product-code-values)

(clojure.core/declare deser-placement-strategy)

(clojure.core/declare deser-internet-gateway-attachment-list)

(clojure.core/declare deser-volume-status-info)

(clojure.core/declare deser-instance-capacity)

(clojure.core/declare deser-instance-block-device-mapping)

(clojure.core/declare deser-customer-gateway-list)

(clojure.core/declare deser-classic-link-dns-support)

(clojure.core/declare deser-monitoring-state)

(clojure.core/declare deser-device-type)

(clojure.core/declare deser-route-list)

(clojure.core/declare deser-pricing-detail)

(clojure.core/declare deser-import-volume-task-details)

(clojure.core/declare deser-network-interface-status)

(clojure.core/declare deser-vpc-classic-link-list)

(clojure.core/declare deser-price-schedule)

(clojure.core/declare deser-reserved-instance-state)

(clojure.core/declare deser-allocation-state)

(clojure.core/declare deser-export-task-state)

(clojure.core/declare deser-instance-state-change)

(clojure.core/declare deser-monitoring)

(clojure.core/declare deser-event-information)

(clojure.core/declare deser-launch-specs-list)

(clojure.core/declare deser-volume-status-details)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-ip-permission)

(clojure.core/declare deser-ip-permission-list)

(clojure.core/declare deser-ri-product-description)

(clojure.core/declare deser-volume-list)

(clojure.core/declare deser-dhcp-options-list)

(clojure.core/declare deser-unsuccessful-item)

(clojure.core/declare deser-cancel-spot-fleet-requests-success-item)

(clojure.core/declare deser-propagating-vgw-list)

(clojure.core/declare deser-disk-image-format)

(clojure.core/declare deser-network-interface-attachment)

(clojure.core/declare deser-security-group-id-string-list)

(clojure.core/declare deser-spot-fleet-request-config)

(clojure.core/declare deser-domain-type)

(clojure.core/declare deser-vgw-telemetry)

(clojure.core/declare deser-cancel-spot-instance-request-state)

(clojure.core/declare deser-network-interface)

(clojure.core/declare deser-snapshot)

(clojure.core/declare deser-resource-type)

(clojure.core/declare deser-instance-status-event)

(clojure.core/declare deser-vpc-peering-connection-options-description)

(clojure.core/declare deser-volume-status-name)

(clojure.core/declare deser-internet-gateway)

(clojure.core/declare deser-vpc)

(clojure.core/declare deser-batch-state)

(clojure.core/declare deser-host-instance)

(clojure.core/declare deser-currency-code-values)

(clojure.core/declare deser-import-image-task)

(clojure.core/declare deser-volume-status-details-list)

(clojure.core/declare deser-summary-status)

(clojure.core/declare deser-instance-list)

(clojure.core/declare deser-volume-type)

(clojure.core/declare deser-customer-gateway)

(clojure.core/declare deser-response-host-id-list)

(clojure.core/declare deser-host-list)

(clojure.core/declare deser-stale-security-group-set)

(clojure.core/declare deser-volume-status-list)

(clojure.core/declare deser-export-task)

(clojure.core/declare deser-network-interface-private-ip-address)

(clojure.core/declare deser-placement-group-state)

(clojure.core/declare deser-long)

(clojure.core/declare deser-volume-status-actions-list)

(clojure.core/declare deser-vpn-static-route-source)

(clojure.core/declare deser-vpc-endpoint-set)

(clojure.core/declare deser-scheduled-instance-recurrence)

(clojure.core/declare deser-instance-state)

(clojure.core/declare deser-volume-status-item)

(clojure.core/declare deser-spot-instance-state)

(clojure.core/declare deser-instance-state-name)

(clojure.core/declare deser-availability-zone-message)

(clojure.core/declare deser-unsuccessful-item-list)

(clojure.core/declare deser-virtualization-type)

(clojure.core/declare deser-reserved-instances-id)

(clojure.core/declare deser-instance-network-interface-specification-list)

(clojure.core/declare deser-conversion-task)

(clojure.core/declare deser-bundle-task-error)

(clojure.core/declare deser-dhcp-configuration)

(clojure.core/declare deser-block-device-mapping)

(clojure.core/declare deser-state)

(clojure.core/declare deser-export-to-s-3-task)

(clojure.core/declare deser-network-acl-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-recurring-charge-frequency)

(clojure.core/declare deser-platform-values)

(clojure.core/declare deser-cancel-spot-fleet-requests-success-set)

(clojure.core/declare deser-product-code)

(clojure.core/declare deser-port-range)

(clojure.core/declare deser-vpc-state)

(clojure.core/declare deser-attachment-status)

(clojure.core/declare deser-peering-connection-options)

(clojure.core/declare deser-vpc-attachment)

(clojure.core/declare deser-instance-status)

(clojure.core/declare deser-spot-fleet-launch-specification)

(clojure.core/declare deser-ip-range)

(clojure.core/declare deser-stale-security-group)

(clojure.core/declare deser-import-snapshot-task)

(clojure.core/declare deser-container-format)

(clojure.core/declare deser-vpc-peering-connection-state-reason)

(clojure.core/declare deser-instance)

(clojure.core/declare deser-nat-gateway-state)

(clojure.core/declare deser-block-device-mapping-list)

(clojure.core/declare deser-blob)

(clojure.core/declare deser-instance-block-device-mapping-list)

(clojure.core/declare deser-security-group-reference)

(clojure.core/declare deser-classic-link-dns-support-list)

(clojure.core/declare deser-gateway-type)

(clojure.core/declare deser-image)

(clojure.core/declare deser-ip-range-list)

(clojure.core/declare deser-image-type-values)

(clojure.core/declare deser-classic-link-instance)

(clojure.core/declare deser-cancel-spot-fleet-requests-error-set)

(clojure.core/declare deser-reserved-instances-modification-list)

(clojure.core/declare deser-network-acl-entry-list)

(clojure.core/declare deser-network-interface-private-ip-address-list)

(clojure.core/declare deser-conversion-task-state)

(clojure.core/declare deser-nat-gateway-address-list)

(clojure.core/declare deser-reserved-instances-modification)

(clojure.core/declare deser-listing-status)

(clojure.core/declare deser-classic-link-instance-list)

(clojure.core/declare deser-import-image-task-list)

(clojure.core/declare deser-route-table-association-list)

(clojure.core/declare deser-offering-type-values)

(clojure.core/declare deser-float)

(clojure.core/declare deser-network-acl)

(clojure.core/declare deser-volume-attachment)

(clojure.core/declare deser-route-table-association)

(clojure.core/declare deser-vpn-connection)

(clojure.core/declare deser-region)

(clojure.core/declare deser-state-reason)

(clojure.core/declare deser-iam-instance-profile)

(clojure.core/declare deser-scheduled-instance-availability)

(clojure.core/declare deser-active-instance)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-account-attribute-value)

(clojure.core/declare deser-vpc-peering-connection-state-reason-code)

(clojure.core/declare deser-launch-permission)

(clojure.core/declare deser-internet-gateway-list)

(clojure.core/declare deser-account-attribute)

(clojure.core/declare deser-host)

(clojure.core/declare deser-placement-group)

(clojure.core/declare deser-private-ip-address-specification)

(clojure.core/declare deser-reservation-list)

(clojure.core/declare deser-user-id-group-pair)

(clojure.core/declare deser-telemetry-status)

(clojure.core/declare deser-vpn-gateway)

(clojure.core/declare deser-network-interface-association)

(clojure.core/declare deser-date-time)

(clojure.core/declare deser-boolean)

(clojure.core/declare deser-instance-network-interface-specification)

(clojure.core/declare deser-available-instance-capacity-list)

(clojure.core/declare deser-snapshot-state)

(clojure.core/declare deser-vpn-gateway-list)

(clojure.core/defn- deser-export-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-export-task coll))) input))

(clojure.core/defn- deser-event-code [input] (clojure.core/get {"instance-reboot" :instancereboot, "system-reboot" :systemreboot, "system-maintenance" :systemmaintenance, "instance-retirement" :instanceretirement, "instance-stop" :instancestop} (clojure.core/first input)))

(clojure.core/defn- deser-flow-log [input] (clojure.core/let [letvar91117 {"resourceId" (portkey.aws/getback-xml-elem-with-tag "resourceId" input), "deliverLogsPermissionArn" (portkey.aws/getback-xml-elem-with-tag "deliverLogsPermissionArn" input), "deliverLogsErrorMessage" (portkey.aws/getback-xml-elem-with-tag "deliverLogsErrorMessage" input), "logGroupName" (portkey.aws/getback-xml-elem-with-tag "logGroupName" input), "deliverLogsStatus" (portkey.aws/getback-xml-elem-with-tag "deliverLogsStatus" input), "creationTime" (portkey.aws/getback-xml-elem-with-tag "creationTime" input), "flowLogStatus" (portkey.aws/getback-xml-elem-with-tag "flowLogStatus" input), "trafficType" (portkey.aws/getback-xml-elem-with-tag "trafficType" input), "flowLogId" (portkey.aws/getback-xml-elem-with-tag "flowLogId" input)}] (clojure.core/cond-> {} (letvar91117 "flowLogStatus") (clojure.core/assoc :flow-log-status (deser-string (clojure.core/get-in letvar91117 ["flowLogStatus" :content]))) (letvar91117 "trafficType") (clojure.core/assoc :traffic-type (deser-traffic-type (clojure.core/get-in letvar91117 ["trafficType" :content]))) (letvar91117 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar91117 ["resourceId" :content]))) (letvar91117 "deliverLogsErrorMessage") (clojure.core/assoc :deliver-logs-error-message (deser-string (clojure.core/get-in letvar91117 ["deliverLogsErrorMessage" :content]))) (letvar91117 "deliverLogsStatus") (clojure.core/assoc :deliver-logs-status (deser-string (clojure.core/get-in letvar91117 ["deliverLogsStatus" :content]))) (letvar91117 "deliverLogsPermissionArn") (clojure.core/assoc :deliver-logs-permission-arn (deser-string (clojure.core/get-in letvar91117 ["deliverLogsPermissionArn" :content]))) (letvar91117 "flowLogId") (clojure.core/assoc :flow-log-id (deser-string (clojure.core/get-in letvar91117 ["flowLogId" :content]))) (letvar91117 "logGroupName") (clojure.core/assoc :log-group-name (deser-string (clojure.core/get-in letvar91117 ["logGroupName" :content]))) (letvar91117 "creationTime") (clojure.core/assoc :creation-time (deser-date-time (clojure.core/get-in letvar91117 ["creationTime" :content]))))))

(clojure.core/defn- deser-vpc-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc coll))) input))

(clojure.core/defn- deser-volume-status-action [input] (clojure.core/let [letvar91212 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "eventType" (portkey.aws/getback-xml-elem-with-tag "eventType" input), "eventId" (portkey.aws/getback-xml-elem-with-tag "eventId" input)}] (clojure.core/cond-> {} (letvar91212 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar91212 ["code" :content]))) (letvar91212 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar91212 ["description" :content]))) (letvar91212 "eventType") (clojure.core/assoc :event-type (deser-string (clojure.core/get-in letvar91212 ["eventType" :content]))) (letvar91212 "eventId") (clojure.core/assoc :event-id (deser-string (clojure.core/get-in letvar91212 ["eventId" :content]))))))

(clojure.core/defn- deser-permission-group [input] (clojure.core/get {"all" :all} (clojure.core/first input)))

(clojure.core/defn- deser-address [input] (clojure.core/let [letvar91295 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input), "domain" (portkey.aws/getback-xml-elem-with-tag "domain" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "networkInterfaceOwnerId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceOwnerId" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input)}] (clojure.core/cond-> {} (letvar91295 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar91295 ["instanceId" :content]))) (letvar91295 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar91295 ["publicIp" :content]))) (letvar91295 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar91295 ["allocationId" :content]))) (letvar91295 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar91295 ["associationId" :content]))) (letvar91295 "domain") (clojure.core/assoc :domain (deser-domain-type (clojure.core/get-in letvar91295 ["domain" :content]))) (letvar91295 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar91295 ["networkInterfaceId" :content]))) (letvar91295 "networkInterfaceOwnerId") (clojure.core/assoc :network-interface-owner-id (deser-string (clojure.core/get-in letvar91295 ["networkInterfaceOwnerId" :content]))) (letvar91295 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar91295 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-bundle-task [input] (clojure.core/let [letvar91373 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "bundleId" (portkey.aws/getback-xml-elem-with-tag "bundleId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "updateTime" (portkey.aws/getback-xml-elem-with-tag "updateTime" input), "storage" (portkey.aws/getback-xml-elem-with-tag "storage" input), "progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "error" (portkey.aws/getback-xml-elem-with-tag "error" input)}] (clojure.core/cond-> {} (letvar91373 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar91373 ["instanceId" :content]))) (letvar91373 "bundleId") (clojure.core/assoc :bundle-id (deser-string (clojure.core/get-in letvar91373 ["bundleId" :content]))) (letvar91373 "state") (clojure.core/assoc :state (deser-bundle-task-state (clojure.core/get-in letvar91373 ["state" :content]))) (letvar91373 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar91373 ["startTime" :content]))) (letvar91373 "updateTime") (clojure.core/assoc :update-time (deser-date-time (clojure.core/get-in letvar91373 ["updateTime" :content]))) (letvar91373 "storage") (clojure.core/assoc :storage (deser-storage (clojure.core/get-in letvar91373 ["storage" :content]))) (letvar91373 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar91373 ["progress" :content]))) (letvar91373 "error") (clojure.core/assoc :bundle-task-error (deser-bundle-task-error (clojure.core/get-in letvar91373 ["error" :content]))))))

(clojure.core/defn- deser-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group coll))) input))

(clojure.core/defn- deser-instance-count-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-count coll))) input))

(clojure.core/defn- deser-describe-conversion-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-conversion-task coll))) input))

(clojure.core/defn- deser-route [input] (clojure.core/let [letvar91502 {"origin" (portkey.aws/getback-xml-elem-with-tag "origin" input), "instanceOwnerId" (portkey.aws/getback-xml-elem-with-tag "instanceOwnerId" input), "natGatewayId" (portkey.aws/getback-xml-elem-with-tag "natGatewayId" input), "destinationCidrBlock" (portkey.aws/getback-xml-elem-with-tag "destinationCidrBlock" input), "gatewayId" (portkey.aws/getback-xml-elem-with-tag "gatewayId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input), "destinationPrefixListId" (portkey.aws/getback-xml-elem-with-tag "destinationPrefixListId" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input)}] (clojure.core/cond-> {} (letvar91502 "instanceOwnerId") (clojure.core/assoc :instance-owner-id (deser-string (clojure.core/get-in letvar91502 ["instanceOwnerId" :content]))) (letvar91502 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar91502 ["instanceId" :content]))) (letvar91502 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar91502 ["natGatewayId" :content]))) (letvar91502 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar91502 ["networkInterfaceId" :content]))) (letvar91502 "origin") (clojure.core/assoc :origin (deser-route-origin (clojure.core/get-in letvar91502 ["origin" :content]))) (letvar91502 "destinationCidrBlock") (clojure.core/assoc :destination-cidr-block (deser-string (clojure.core/get-in letvar91502 ["destinationCidrBlock" :content]))) (letvar91502 "destinationPrefixListId") (clojure.core/assoc :destination-prefix-list-id (deser-string (clojure.core/get-in letvar91502 ["destinationPrefixListId" :content]))) (letvar91502 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar91502 ["vpcPeeringConnectionId" :content]))) (letvar91502 "state") (clojure.core/assoc :state (deser-route-state (clojure.core/get-in letvar91502 ["state" :content]))) (letvar91502 "gatewayId") (clojure.core/assoc :gateway-id (deser-string (clojure.core/get-in letvar91502 ["gatewayId" :content]))))))

(clojure.core/defn- deser-nat-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-nat-gateway coll))) input))

(clojure.core/defn- deser-moving-address-status-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-moving-address-status coll))) input))

(clojure.core/defn- deser-instance-state-change-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-state-change coll))) input))

(clojure.core/defn- deser-double [input] (java.lang.Double. (clojure.core/first input)))

(clojure.core/defn- deser-ebs-instance-block-device [input] (clojure.core/let [letvar91633 {"volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input)}] (clojure.core/cond-> {} (letvar91633 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar91633 ["volumeId" :content]))) (letvar91633 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar91633 ["status" :content]))) (letvar91633 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar91633 ["attachTime" :content]))) (letvar91633 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar91633 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-route-table [input] (clojure.core/let [letvar91711 {"routeTableId" (portkey.aws/getback-xml-elem-with-tag "routeTableId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "routeSet" (portkey.aws/getback-xml-elem-with-tag "routeSet" input), "associationSet" (portkey.aws/getback-xml-elem-with-tag "associationSet" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "propagatingVgwSet" (portkey.aws/getback-xml-elem-with-tag "propagatingVgwSet" input)}] (clojure.core/cond-> {} (letvar91711 "routeTableId") (clojure.core/assoc :route-table-id (deser-string (clojure.core/get-in letvar91711 ["routeTableId" :content]))) (letvar91711 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar91711 ["vpcId" :content]))) (letvar91711 "routeSet") (clojure.core/assoc :routes (deser-route-list (clojure.core/get-in letvar91711 ["routeSet" :content]))) (letvar91711 "associationSet") (clojure.core/assoc :associations (deser-route-table-association-list (clojure.core/get-in letvar91711 ["associationSet" :content]))) (letvar91711 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar91711 ["tagSet" :content]))) (letvar91711 "propagatingVgwSet") (clojure.core/assoc :propagating-vgws (deser-propagating-vgw-list (clojure.core/get-in letvar91711 ["propagatingVgwSet" :content]))))))

(clojure.core/defn- deser-scheduled-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance coll))) input))

(clojure.core/defn- deser-propagating-vgw [input] (clojure.core/let [letvar91806 {"gatewayId" (portkey.aws/getback-xml-elem-with-tag "gatewayId" input)}] (clojure.core/cond-> {} (letvar91806 "gatewayId") (clojure.core/assoc :gateway-id (deser-string (clojure.core/get-in letvar91806 ["gatewayId" :content]))))))

(clojure.core/defn- deser-flow-log-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-flow-log coll))) input))

(clojure.core/defn- deser-prefix-list-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-instance-network-interface-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-network-interface coll))) input))

(clojure.core/defn- deser-vpn-connection-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-connection coll))) input))

(clojure.core/defn- deser-reserved-instances-offering [input] (clojure.core/let [letvar91952 {"marketplace" (portkey.aws/getback-xml-elem-with-tag "marketplace" input), "reservedInstancesOfferingId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesOfferingId" input), "instanceTenancy" (portkey.aws/getback-xml-elem-with-tag "instanceTenancy" input), "offeringType" (portkey.aws/getback-xml-elem-with-tag "offeringType" input), "fixedPrice" (portkey.aws/getback-xml-elem-with-tag "fixedPrice" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "recurringCharges" (portkey.aws/getback-xml-elem-with-tag "recurringCharges" input), "pricingDetailsSet" (portkey.aws/getback-xml-elem-with-tag "pricingDetailsSet" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "duration" (portkey.aws/getback-xml-elem-with-tag "duration" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "usagePrice" (portkey.aws/getback-xml-elem-with-tag "usagePrice" input)}] (clojure.core/cond-> {} (letvar91952 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar91952 ["currencyCode" :content]))) (letvar91952 "reservedInstancesOfferingId") (clojure.core/assoc :reserved-instances-offering-id (deser-string (clojure.core/get-in letvar91952 ["reservedInstancesOfferingId" :content]))) (letvar91952 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar91952 ["instanceType" :content]))) (letvar91952 "fixedPrice") (clojure.core/assoc :fixed-price (deser-float (clojure.core/get-in letvar91952 ["fixedPrice" :content]))) (letvar91952 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar91952 ["availabilityZone" :content]))) (letvar91952 "pricingDetailsSet") (clojure.core/assoc :pricing-details (deser-pricing-details-list (clojure.core/get-in letvar91952 ["pricingDetailsSet" :content]))) (letvar91952 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar91952 ["instanceTenancy" :content]))) (letvar91952 "marketplace") (clojure.core/assoc :marketplace (deser-boolean (clojure.core/get-in letvar91952 ["marketplace" :content]))) (letvar91952 "duration") (clojure.core/assoc :duration (deser-long (clojure.core/get-in letvar91952 ["duration" :content]))) (letvar91952 "usagePrice") (clojure.core/assoc :usage-price (deser-float (clojure.core/get-in letvar91952 ["usagePrice" :content]))) (letvar91952 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar91952 ["productDescription" :content]))) (letvar91952 "recurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charges-list (clojure.core/get-in letvar91952 ["recurringCharges" :content]))) (letvar91952 "offeringType") (clojure.core/assoc :offering-type (deser-offering-type-values (clojure.core/get-in letvar91952 ["offeringType" :content]))))))

(clojure.core/defn- deser-storage [input] (clojure.core/let [letvar92030 {nil (portkey.aws/getback-xml-elem-with-tag nil input)}] (clojure.core/cond-> {} (letvar92030 nil) (clojure.core/assoc :s-3 (deser-s-3-storage (clojure.core/get-in letvar92030 [nil :content]))))))

(clojure.core/defn- deser-value-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-ip-ranges [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-instance-status-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status-event coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-result-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-modification-result coll))) input))

(clojure.core/defn- deser-vpc-peering-connection-vpc-info [input] (clojure.core/let [letvar92176 {"cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "peeringOptions" (portkey.aws/getback-xml-elem-with-tag "peeringOptions" input)}] (clojure.core/cond-> {} (letvar92176 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar92176 ["cidrBlock" :content]))) (letvar92176 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar92176 ["ownerId" :content]))) (letvar92176 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar92176 ["vpcId" :content]))) (letvar92176 "peeringOptions") (clojure.core/assoc :peering-options (deser-vpc-peering-connection-options-description (clojure.core/get-in letvar92176 ["peeringOptions" :content]))))))

(clojure.core/defn- deser-instance-monitoring-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-monitoring coll))) input))

(clojure.core/defn- deser-vpc-peering-connection [input] (clojure.core/let [letvar92271 {"accepterVpcInfo" (portkey.aws/getback-xml-elem-with-tag "accepterVpcInfo" input), "expirationTime" (portkey.aws/getback-xml-elem-with-tag "expirationTime" input), "requesterVpcInfo" (portkey.aws/getback-xml-elem-with-tag "requesterVpcInfo" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input)}] (clojure.core/cond-> {} (letvar92271 "accepterVpcInfo") (clojure.core/assoc :accepter-vpc-info (deser-vpc-peering-connection-vpc-info (clojure.core/get-in letvar92271 ["accepterVpcInfo" :content]))) (letvar92271 "expirationTime") (clojure.core/assoc :expiration-time (deser-date-time (clojure.core/get-in letvar92271 ["expirationTime" :content]))) (letvar92271 "requesterVpcInfo") (clojure.core/assoc :requester-vpc-info (deser-vpc-peering-connection-vpc-info (clojure.core/get-in letvar92271 ["requesterVpcInfo" :content]))) (letvar92271 "status") (clojure.core/assoc :status (deser-vpc-peering-connection-state-reason (clojure.core/get-in letvar92271 ["status" :content]))) (letvar92271 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar92271 ["tagSet" :content]))) (letvar92271 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar92271 ["vpcPeeringConnectionId" :content]))))))

(clojure.core/defn- deser-image-state [input] (clojure.core/get {"pending" :pending, "available" :available, "invalid" :invalid, "deregistered" :deregistered, "transient" :transient, "failed" :failed, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-vpn-state [input] (clojure.core/get {"pending" :pending, "available" :available, "deleting" :deleting, "deleted" :deleted} (clojure.core/first input)))

(clojure.core/defn- deser-account-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-attribute coll))) input))

(clojure.core/defn- deser-move-status [input] (clojure.core/get {"movingToVpc" :moving-to-vpc, "restoringToClassic" :restoring-to-classic} (clojure.core/first input)))

(clojure.core/defn- deser-prefix-list-id [input] (clojure.core/let [letvar92381 {"prefixListId" (portkey.aws/getback-xml-elem-with-tag "prefixListId" input)}] (clojure.core/cond-> {} (letvar92381 "prefixListId") (clojure.core/assoc :prefix-list-id (deser-string (clojure.core/get-in letvar92381 ["prefixListId" :content]))))))

(clojure.core/defn- deser-pricing-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-pricing-detail coll))) input))

(clojure.core/defn- deser-hypervisor-type [input] (clojure.core/get {"ovm" :ovm, "xen" :xen} (clojure.core/first input)))

(clojure.core/defn- deser-history-record [input] (clojure.core/let [letvar92481 {"timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input), "eventType" (portkey.aws/getback-xml-elem-with-tag "eventType" input), "eventInformation" (portkey.aws/getback-xml-elem-with-tag "eventInformation" input)}] (clojure.core/cond-> {:timestamp (deser-date-time (clojure.core/get-in letvar92481 ["timestamp" :content])), :event-type (deser-event-type (clojure.core/get-in letvar92481 ["eventType" :content])), :event-information (deser-event-information (clojure.core/get-in letvar92481 ["eventInformation" :content]))})))

(clojure.core/defn- deser-route-table-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route-table coll))) input))

(clojure.core/defn- deser-architecture-values [input] (clojure.core/get {"i386" :i-386, "x86_64" :x-86-64} (clojure.core/first input)))

(clojure.core/defn- deser-cancelled-spot-instance-request [input] (clojure.core/let [letvar92581 {"spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar92581 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar92581 ["spotInstanceRequestId" :content]))) (letvar92581 "state") (clojure.core/assoc :state (deser-cancel-spot-instance-request-state (clojure.core/get-in letvar92581 ["state" :content]))))))

(clojure.core/defn- deser-volume-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-attachment coll))) input))

(clojure.core/defn- deser-export-environment [input] (clojure.core/get {"citrix" :citrix, "vmware" :vmware, "microsoft" :microsoft} (clojure.core/first input)))

(clojure.core/defn- deser-instance-export-details [input] (clojure.core/let [letvar92681 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "targetEnvironment" (portkey.aws/getback-xml-elem-with-tag "targetEnvironment" input)}] (clojure.core/cond-> {} (letvar92681 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar92681 ["instanceId" :content]))) (letvar92681 "targetEnvironment") (clojure.core/assoc :target-environment (deser-export-environment (clojure.core/get-in letvar92681 ["targetEnvironment" :content]))))))

(clojure.core/defn- deser-volume-attachment-state [input] (clojure.core/get {"attaching" :attaching, "attached" :attached, "detaching" :detaching, "detached" :detached} (clojure.core/first input)))

(clojure.core/defn- deser-internet-gateway-attachment [input] (clojure.core/let [letvar92764 {"vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar92764 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar92764 ["vpcId" :content]))) (letvar92764 "state") (clojure.core/assoc :state (deser-attachment-status (clojure.core/get-in letvar92764 ["state" :content]))))))

(clojure.core/defn- deser-instance-monitoring [input] (clojure.core/let [letvar92842 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input)}] (clojure.core/cond-> {} (letvar92842 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar92842 ["instanceId" :content]))) (letvar92842 "monitoring") (clojure.core/assoc :monitoring (deser-monitoring (clojure.core/get-in letvar92842 ["monitoring" :content]))))))

(clojure.core/defn- deser-spot-price-history-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-price coll))) input))

(clojure.core/defn- deser-vpn-connection-options [input] (clojure.core/let [letvar92937 {"staticRoutesOnly" (portkey.aws/getback-xml-elem-with-tag "staticRoutesOnly" input)}] (clojure.core/cond-> {} (letvar92937 "staticRoutesOnly") (clojure.core/assoc :static-routes-only (deser-boolean (clojure.core/get-in letvar92937 ["staticRoutesOnly" :content]))))))

(clojure.core/defn- deser-network-acl-entry [input] (clojure.core/let [letvar93015 {"ruleNumber" (portkey.aws/getback-xml-elem-with-tag "ruleNumber" input), "protocol" (portkey.aws/getback-xml-elem-with-tag "protocol" input), "ruleAction" (portkey.aws/getback-xml-elem-with-tag "ruleAction" input), "egress" (portkey.aws/getback-xml-elem-with-tag "egress" input), "cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "icmpTypeCode" (portkey.aws/getback-xml-elem-with-tag "icmpTypeCode" input), "portRange" (portkey.aws/getback-xml-elem-with-tag "portRange" input)}] (clojure.core/cond-> {} (letvar93015 "ruleNumber") (clojure.core/assoc :rule-number (deser-integer (clojure.core/get-in letvar93015 ["ruleNumber" :content]))) (letvar93015 "protocol") (clojure.core/assoc :protocol (deser-string (clojure.core/get-in letvar93015 ["protocol" :content]))) (letvar93015 "ruleAction") (clojure.core/assoc :rule-action (deser-rule-action (clojure.core/get-in letvar93015 ["ruleAction" :content]))) (letvar93015 "egress") (clojure.core/assoc :egress (deser-boolean (clojure.core/get-in letvar93015 ["egress" :content]))) (letvar93015 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar93015 ["cidrBlock" :content]))) (letvar93015 "icmpTypeCode") (clojure.core/assoc :icmp-type-code (deser-icmp-type-code (clojure.core/get-in letvar93015 ["icmpTypeCode" :content]))) (letvar93015 "portRange") (clojure.core/assoc :port-range (deser-port-range (clojure.core/get-in letvar93015 ["portRange" :content]))))))

(clojure.core/defn- deser-provisioned-bandwidth [input] (clojure.core/let [letvar93093 {"provisioned" (portkey.aws/getback-xml-elem-with-tag "provisioned" input), "requested" (portkey.aws/getback-xml-elem-with-tag "requested" input), "requestTime" (portkey.aws/getback-xml-elem-with-tag "requestTime" input), "provisionTime" (portkey.aws/getback-xml-elem-with-tag "provisionTime" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar93093 "provisioned") (clojure.core/assoc :provisioned (deser-string (clojure.core/get-in letvar93093 ["provisioned" :content]))) (letvar93093 "requested") (clojure.core/assoc :requested (deser-string (clojure.core/get-in letvar93093 ["requested" :content]))) (letvar93093 "requestTime") (clojure.core/assoc :request-time (deser-date-time (clojure.core/get-in letvar93093 ["requestTime" :content]))) (letvar93093 "provisionTime") (clojure.core/assoc :provision-time (deser-date-time (clojure.core/get-in letvar93093 ["provisionTime" :content]))) (letvar93093 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar93093 ["status" :content]))))))

(clojure.core/defn- deser-vgw-telemetry-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vgw-telemetry coll))) input))

(clojure.core/defn- deser-volume-state [input] (clojure.core/get {"creating" :creating, "available" :available, "in-use" :inuse, "deleting" :deleting, "deleted" :deleted, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-spot-placement [input] (clojure.core/let [letvar93193 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input)}] (clojure.core/cond-> {} (letvar93193 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar93193 ["availabilityZone" :content]))) (letvar93193 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar93193 ["groupName" :content]))))))

(clojure.core/defn- deser-security-group [input] (clojure.core/let [letvar93271 {"ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "groupDescription" (portkey.aws/getback-xml-elem-with-tag "groupDescription" input), "ipPermissions" (portkey.aws/getback-xml-elem-with-tag "ipPermissions" input), "ipPermissionsEgress" (portkey.aws/getback-xml-elem-with-tag "ipPermissionsEgress" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar93271 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar93271 ["ownerId" :content]))) (letvar93271 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar93271 ["groupName" :content]))) (letvar93271 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar93271 ["groupId" :content]))) (letvar93271 "groupDescription") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar93271 ["groupDescription" :content]))) (letvar93271 "ipPermissions") (clojure.core/assoc :ip-permissions (deser-ip-permission-list (clojure.core/get-in letvar93271 ["ipPermissions" :content]))) (letvar93271 "ipPermissionsEgress") (clojure.core/assoc :ip-permissions-egress (deser-ip-permission-list (clojure.core/get-in letvar93271 ["ipPermissionsEgress" :content]))) (letvar93271 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar93271 ["vpcId" :content]))) (letvar93271 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar93271 ["tagSet" :content]))))))

(clojure.core/defn- deser-recurring-charges-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-snapshot-detail-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot-detail coll))) input))

(clojure.core/defn- deser-id-format [input] (clojure.core/let [letvar93383 {"resource" (portkey.aws/getback-xml-elem-with-tag "resource" input), "useLongIds" (portkey.aws/getback-xml-elem-with-tag "useLongIds" input), "deadline" (portkey.aws/getback-xml-elem-with-tag "deadline" input)}] (clojure.core/cond-> {} (letvar93383 "resource") (clojure.core/assoc :resource (deser-string (clojure.core/get-in letvar93383 ["resource" :content]))) (letvar93383 "useLongIds") (clojure.core/assoc :use-long-ids (deser-boolean (clojure.core/get-in letvar93383 ["useLongIds" :content]))) (letvar93383 "deadline") (clojure.core/assoc :deadline (deser-date-time (clojure.core/get-in letvar93383 ["deadline" :content]))))))

(clojure.core/defn- deser-volume [input] (clojure.core/let [letvar93461 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "attachmentSet" (portkey.aws/getback-xml-elem-with-tag "attachmentSet" input), "iops" (portkey.aws/getback-xml-elem-with-tag "iops" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "volumeType" (portkey.aws/getback-xml-elem-with-tag "volumeType" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "size" (portkey.aws/getback-xml-elem-with-tag "size" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input)}] (clojure.core/cond-> {} (letvar93461 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar93461 ["encrypted" :content]))) (letvar93461 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar93461 ["tagSet" :content]))) (letvar93461 "attachmentSet") (clojure.core/assoc :attachments (deser-volume-attachment-list (clojure.core/get-in letvar93461 ["attachmentSet" :content]))) (letvar93461 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar93461 ["availabilityZone" :content]))) (letvar93461 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar93461 ["kmsKeyId" :content]))) (letvar93461 "size") (clojure.core/assoc :size (deser-integer (clojure.core/get-in letvar93461 ["size" :content]))) (letvar93461 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar93461 ["iops" :content]))) (letvar93461 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar93461 ["volumeType" :content]))) (letvar93461 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar93461 ["volumeId" :content]))) (letvar93461 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar93461 ["createTime" :content]))) (letvar93461 "status") (clojure.core/assoc :state (deser-volume-state (clojure.core/get-in letvar93461 ["status" :content]))) (letvar93461 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar93461 ["snapshotId" :content]))))))

(clojure.core/defn- deser-spot-instance-type [input] (clojure.core/get {"one-time" :onetime, "persistent" :persistent} (clojure.core/first input)))

(clojure.core/defn- deser-ebs-block-device [input] (clojure.core/let [letvar93544 {"snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "volumeSize" (portkey.aws/getback-xml-elem-with-tag "volumeSize" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "volumeType" (portkey.aws/getback-xml-elem-with-tag "volumeType" input), "iops" (portkey.aws/getback-xml-elem-with-tag "iops" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input)}] (clojure.core/cond-> {} (letvar93544 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar93544 ["snapshotId" :content]))) (letvar93544 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar93544 ["volumeSize" :content]))) (letvar93544 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar93544 ["deleteOnTermination" :content]))) (letvar93544 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar93544 ["volumeType" :content]))) (letvar93544 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar93544 ["iops" :content]))) (letvar93544 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar93544 ["encrypted" :content]))))))

(clojure.core/defn- deser-placement [input] (clojure.core/let [letvar93622 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "tenancy" (portkey.aws/getback-xml-elem-with-tag "tenancy" input), "hostId" (portkey.aws/getback-xml-elem-with-tag "hostId" input), "affinity" (portkey.aws/getback-xml-elem-with-tag "affinity" input)}] (clojure.core/cond-> {} (letvar93622 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar93622 ["availabilityZone" :content]))) (letvar93622 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar93622 ["groupName" :content]))) (letvar93622 "tenancy") (clojure.core/assoc :tenancy (deser-tenancy (clojure.core/get-in letvar93622 ["tenancy" :content]))) (letvar93622 "hostId") (clojure.core/assoc :host-id (deser-string (clojure.core/get-in letvar93622 ["hostId" :content]))) (letvar93622 "affinity") (clojure.core/assoc :affinity (deser-string (clojure.core/get-in letvar93622 ["affinity" :content]))))))

(clojure.core/defn- deser-reserved-instances-configuration [input] (clojure.core/let [letvar93700 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input)}] (clojure.core/cond-> {} (letvar93700 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar93700 ["availabilityZone" :content]))) (letvar93700 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar93700 ["platform" :content]))) (letvar93700 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar93700 ["instanceCount" :content]))) (letvar93700 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar93700 ["instanceType" :content]))))))

(clojure.core/defn- deser-user-bucket-details [input] (clojure.core/let [letvar93778 {"s3Bucket" (portkey.aws/getback-xml-elem-with-tag "s3Bucket" input), "s3Key" (portkey.aws/getback-xml-elem-with-tag "s3Key" input)}] (clojure.core/cond-> {} (letvar93778 "s3Bucket") (clojure.core/assoc :s-3-bucket (deser-string (clojure.core/get-in letvar93778 ["s3Bucket" :content]))) (letvar93778 "s3Key") (clojure.core/assoc :s-3-key (deser-string (clojure.core/get-in letvar93778 ["s3Key" :content]))))))

(clojure.core/defn- deser-occurrence-day-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-integer coll))) input))

(clojure.core/defn- deser-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot coll))) input))

(clojure.core/defn- deser-instance-lifecycle-type [input] (clojure.core/get {"spot" :spot, "scheduled" :scheduled} (clojure.core/first input)))

(clojure.core/defn- deser-availability-zone-state [input] (clojure.core/get {"available" :available, "information" :information, "impaired" :impaired, "unavailable" :unavailable} (clojure.core/first input)))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar93900 {"subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "availableIpAddressCount" (portkey.aws/getback-xml-elem-with-tag "availableIpAddressCount" input), "cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "mapPublicIpOnLaunch" (portkey.aws/getback-xml-elem-with-tag "mapPublicIpOnLaunch" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "defaultForAz" (portkey.aws/getback-xml-elem-with-tag "defaultForAz" input)}] (clojure.core/cond-> {} (letvar93900 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar93900 ["subnetId" :content]))) (letvar93900 "defaultForAz") (clojure.core/assoc :default-for-az (deser-boolean (clojure.core/get-in letvar93900 ["defaultForAz" :content]))) (letvar93900 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar93900 ["tagSet" :content]))) (letvar93900 "availableIpAddressCount") (clojure.core/assoc :available-ip-address-count (deser-integer (clojure.core/get-in letvar93900 ["availableIpAddressCount" :content]))) (letvar93900 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar93900 ["availabilityZone" :content]))) (letvar93900 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar93900 ["cidrBlock" :content]))) (letvar93900 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar93900 ["vpcId" :content]))) (letvar93900 "state") (clojure.core/assoc :state (deser-subnet-state (clojure.core/get-in letvar93900 ["state" :content]))) (letvar93900 "mapPublicIpOnLaunch") (clojure.core/assoc :map-public-ip-on-launch (deser-boolean (clojure.core/get-in letvar93900 ["mapPublicIpOnLaunch" :content]))))))

(clojure.core/defn- deser-dhcp-configuration-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-dhcp-configuration coll))) input))

(clojure.core/defn- deser-spot-datafeed-subscription [input] (clojure.core/let [letvar93995 {"ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "bucket" (portkey.aws/getback-xml-elem-with-tag "bucket" input), "prefix" (portkey.aws/getback-xml-elem-with-tag "prefix" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "fault" (portkey.aws/getback-xml-elem-with-tag "fault" input)}] (clojure.core/cond-> {} (letvar93995 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar93995 ["ownerId" :content]))) (letvar93995 "bucket") (clojure.core/assoc :bucket (deser-string (clojure.core/get-in letvar93995 ["bucket" :content]))) (letvar93995 "prefix") (clojure.core/assoc :prefix (deser-string (clojure.core/get-in letvar93995 ["prefix" :content]))) (letvar93995 "state") (clojure.core/assoc :state (deser-datafeed-subscription-state (clojure.core/get-in letvar93995 ["state" :content]))) (letvar93995 "fault") (clojure.core/assoc :fault (deser-spot-instance-state-fault (clojure.core/get-in letvar93995 ["fault" :content]))))))

(clojure.core/defn- deser-instance-count [input] (clojure.core/let [letvar94073 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input), "instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input)}] (clojure.core/cond-> {} (letvar94073 "state") (clojure.core/assoc :state (deser-listing-state (clojure.core/get-in letvar94073 ["state" :content]))) (letvar94073 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar94073 ["instanceCount" :content]))))))

(clojure.core/defn- deser-host-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host-instance coll))) input))

(clojure.core/defn- deser-import-instance-volume-detail-item [input] (clojure.core/let [letvar94168 {"bytesConverted" (portkey.aws/getback-xml-elem-with-tag "bytesConverted" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "image" (portkey.aws/getback-xml-elem-with-tag "image" input), "volume" (portkey.aws/getback-xml-elem-with-tag "volume" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {:bytes-converted (deser-long (clojure.core/get-in letvar94168 ["bytesConverted" :content])), :availability-zone (deser-string (clojure.core/get-in letvar94168 ["availabilityZone" :content])), :image (deser-disk-image-description (clojure.core/get-in letvar94168 ["image" :content])), :volume (deser-disk-image-volume-description (clojure.core/get-in letvar94168 ["volume" :content])), :status (deser-string (clojure.core/get-in letvar94168 ["status" :content]))} (letvar94168 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar94168 ["statusMessage" :content]))) (letvar94168 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar94168 ["description" :content]))))))

(clojure.core/defn- deser-tenancy [input] (clojure.core/get {"default" :default, "dedicated" :dedicated, "host" :host} (clojure.core/first input)))

(clojure.core/defn- deser-instance-network-interface-attachment [input] (clojure.core/let [letvar94251 {"attachmentId" (portkey.aws/getback-xml-elem-with-tag "attachmentId" input), "deviceIndex" (portkey.aws/getback-xml-elem-with-tag "deviceIndex" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input)}] (clojure.core/cond-> {} (letvar94251 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar94251 ["attachmentId" :content]))) (letvar94251 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar94251 ["deviceIndex" :content]))) (letvar94251 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar94251 ["status" :content]))) (letvar94251 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar94251 ["attachTime" :content]))) (letvar94251 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar94251 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-snapshot-detail [input] (clojure.core/let [letvar94329 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "url" (portkey.aws/getback-xml-elem-with-tag "url" input), "deviceName" (portkey.aws/getback-xml-elem-with-tag "deviceName" input), "userBucket" (portkey.aws/getback-xml-elem-with-tag "userBucket" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "diskImageSize" (portkey.aws/getback-xml-elem-with-tag "diskImageSize" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "format" (portkey.aws/getback-xml-elem-with-tag "format" input)}] (clojure.core/cond-> {} (letvar94329 "diskImageSize") (clojure.core/assoc :disk-image-size (deser-double (clojure.core/get-in letvar94329 ["diskImageSize" :content]))) (letvar94329 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar94329 ["statusMessage" :content]))) (letvar94329 "format") (clojure.core/assoc :format (deser-string (clojure.core/get-in letvar94329 ["format" :content]))) (letvar94329 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar94329 ["status" :content]))) (letvar94329 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar94329 ["progress" :content]))) (letvar94329 "url") (clojure.core/assoc :url (deser-string (clojure.core/get-in letvar94329 ["url" :content]))) (letvar94329 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar94329 ["description" :content]))) (letvar94329 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar94329 ["deviceName" :content]))) (letvar94329 "userBucket") (clojure.core/assoc :user-bucket (deser-user-bucket-details (clojure.core/get-in letvar94329 ["userBucket" :content]))) (letvar94329 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar94329 ["snapshotId" :content]))))))

(clojure.core/defn- deser-spot-instance-state-fault [input] (clojure.core/let [letvar94407 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar94407 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar94407 ["code" :content]))) (letvar94407 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar94407 ["message" :content]))))))

(clojure.core/defn- deser-dhcp-configuration-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-attribute-value coll))) input))

(clojure.core/defn- deser-instance-network-interface-association [input] (clojure.core/let [letvar94502 {"publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "publicDnsName" (portkey.aws/getback-xml-elem-with-tag "publicDnsName" input), "ipOwnerId" (portkey.aws/getback-xml-elem-with-tag "ipOwnerId" input)}] (clojure.core/cond-> {} (letvar94502 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar94502 ["publicIp" :content]))) (letvar94502 "publicDnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar94502 ["publicDnsName" :content]))) (letvar94502 "ipOwnerId") (clojure.core/assoc :ip-owner-id (deser-string (clojure.core/get-in letvar94502 ["ipOwnerId" :content]))))))

(clojure.core/defn- deser-bundle-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-bundle-task coll))) input))

(clojure.core/defn- deser-disk-image-volume-description [input] (clojure.core/let [letvar94597 {"size" (portkey.aws/getback-xml-elem-with-tag "size" input), "id" (portkey.aws/getback-xml-elem-with-tag "id" input)}] (clojure.core/cond-> {:id (deser-string (clojure.core/get-in letvar94597 ["id" :content]))} (letvar94597 "size") (clojure.core/assoc :size (deser-long (clojure.core/get-in letvar94597 ["size" :content]))))))

(clojure.core/defn- deser-host-properties [input] (clojure.core/let [letvar94675 {"sockets" (portkey.aws/getback-xml-elem-with-tag "sockets" input), "cores" (portkey.aws/getback-xml-elem-with-tag "cores" input), "totalVCpus" (portkey.aws/getback-xml-elem-with-tag "totalVCpus" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input)}] (clojure.core/cond-> {} (letvar94675 "sockets") (clojure.core/assoc :sockets (deser-integer (clojure.core/get-in letvar94675 ["sockets" :content]))) (letvar94675 "cores") (clojure.core/assoc :cores (deser-integer (clojure.core/get-in letvar94675 ["cores" :content]))) (letvar94675 "totalVCpus") (clojure.core/assoc :total-v-cpus (deser-integer (clojure.core/get-in letvar94675 ["totalVCpus" :content]))) (letvar94675 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar94675 ["instanceType" :content]))))))

(clojure.core/defn- deser-scheduled-instance [input] (clojure.core/let [letvar94753 {"previousSlotEndTime" (portkey.aws/getback-xml-elem-with-tag "previousSlotEndTime" input), "createDate" (portkey.aws/getback-xml-elem-with-tag "createDate" input), "instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "termStartDate" (portkey.aws/getback-xml-elem-with-tag "termStartDate" input), "networkPlatform" (portkey.aws/getback-xml-elem-with-tag "networkPlatform" input), "hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "recurrence" (portkey.aws/getback-xml-elem-with-tag "recurrence" input), "totalScheduledInstanceHours" (portkey.aws/getback-xml-elem-with-tag "totalScheduledInstanceHours" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "slotDurationInHours" (portkey.aws/getback-xml-elem-with-tag "slotDurationInHours" input), "scheduledInstanceId" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceId" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "termEndDate" (portkey.aws/getback-xml-elem-with-tag "termEndDate" input), "nextSlotStartTime" (portkey.aws/getback-xml-elem-with-tag "nextSlotStartTime" input)}] (clojure.core/cond-> {} (letvar94753 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar94753 ["platform" :content]))) (letvar94753 "termEndDate") (clojure.core/assoc :term-end-date (deser-date-time (clojure.core/get-in letvar94753 ["termEndDate" :content]))) (letvar94753 "networkPlatform") (clojure.core/assoc :network-platform (deser-string (clojure.core/get-in letvar94753 ["networkPlatform" :content]))) (letvar94753 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar94753 ["instanceCount" :content]))) (letvar94753 "recurrence") (clojure.core/assoc :recurrence (deser-scheduled-instance-recurrence (clojure.core/get-in letvar94753 ["recurrence" :content]))) (letvar94753 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar94753 ["createDate" :content]))) (letvar94753 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar94753 ["instanceType" :content]))) (letvar94753 "nextSlotStartTime") (clojure.core/assoc :next-slot-start-time (deser-date-time (clojure.core/get-in letvar94753 ["nextSlotStartTime" :content]))) (letvar94753 "totalScheduledInstanceHours") (clojure.core/assoc :total-scheduled-instance-hours (deser-integer (clojure.core/get-in letvar94753 ["totalScheduledInstanceHours" :content]))) (letvar94753 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar94753 ["availabilityZone" :content]))) (letvar94753 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar94753 ["hourlyPrice" :content]))) (letvar94753 "slotDurationInHours") (clojure.core/assoc :slot-duration-in-hours (deser-integer (clojure.core/get-in letvar94753 ["slotDurationInHours" :content]))) (letvar94753 "previousSlotEndTime") (clojure.core/assoc :previous-slot-end-time (deser-date-time (clojure.core/get-in letvar94753 ["previousSlotEndTime" :content]))) (letvar94753 "scheduledInstanceId") (clojure.core/assoc :scheduled-instance-id (deser-string (clojure.core/get-in letvar94753 ["scheduledInstanceId" :content]))) (letvar94753 "termStartDate") (clojure.core/assoc :term-start-date (deser-date-time (clojure.core/get-in letvar94753 ["termStartDate" :content]))))))

(clojure.core/defn- deser-active-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-active-instance coll))) input))

(clojure.core/defn- deser-instance-type [input] (clojure.core/get {"m1.large" :m-1large, "cc1.4xlarge" :cc-14xlarge, "c1.medium" :c-1medium, "r3.8xlarge" :r-38xlarge, "d2.xlarge" :d-2xlarge, "m3.2xlarge" :m-32xlarge, "i2.8xlarge" :i-28xlarge, "g2.2xlarge" :g-22xlarge, "c3.8xlarge" :c-38xlarge, "t2.large" :t-2large, "m1.xlarge" :m-1xlarge, "d2.8xlarge" :d-28xlarge, "m4.4xlarge" :m-44xlarge, "cr1.8xlarge" :cr-18xlarge, "t1.micro" :t-1micro, "c3.2xlarge" :c-32xlarge, "g2.8xlarge" :g-28xlarge, "c4.8xlarge" :c-48xlarge, "m2.xlarge" :m-2xlarge, "m1.small" :m-1small, "i2.4xlarge" :i-24xlarge, "c3.4xlarge" :c-34xlarge, "t2.micro" :t-2micro, "d2.2xlarge" :d-22xlarge, "x1.32xlarge" :x-132xlarge, "m4.2xlarge" :m-42xlarge, "m4.10xlarge" :m-410xlarge, "m1.medium" :m-1medium, "c4.4xlarge" :c-44xlarge, "hi1.4xlarge" :hi-14xlarge, "r3.xlarge" :r-3xlarge, "c4.2xlarge" :c-42xlarge, "t2.small" :t-2small, "m3.xlarge" :m-3xlarge, "r3.2xlarge" :r-32xlarge, "cg1.4xlarge" :cg-14xlarge, "x1.4xlarge" :x-14xlarge, "r3.4xlarge" :r-34xlarge, "c4.xlarge" :c-4xlarge, "m2.2xlarge" :m-22xlarge, "x1.16xlarge" :x-116xlarge, "m4.large" :m-4large, "r3.large" :r-3large, "d2.4xlarge" :d-24xlarge, "c4.large" :c-4large, "m4.xlarge" :m-4xlarge, "i2.2xlarge" :i-22xlarge, "t2.nano" :t-2nano, "m2.4xlarge" :m-24xlarge, "c3.xlarge" :c-3xlarge, "t2.medium" :t-2medium, "c3.large" :c-3large, "m3.medium" :m-3medium, "i2.xlarge" :i-2xlarge, "x1.8xlarge" :x-18xlarge, "cc2.8xlarge" :cc-28xlarge, "hs1.8xlarge" :hs-18xlarge, "m3.large" :m-3large, "c1.xlarge" :c-1xlarge} (clojure.core/first input)))

(clojure.core/defn- deser-route-state [input] (clojure.core/get {"active" :active, "blackhole" :blackhole} (clojure.core/first input)))

(clojure.core/defn- deser-subnet-state [input] (clojure.core/get {"pending" :pending, "available" :available} (clojure.core/first input)))

(clojure.core/defn- deser-stale-ip-permission-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stale-ip-permission coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-result [input] (clojure.core/let [letvar94880 {"reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input), "targetConfiguration" (portkey.aws/getback-xml-elem-with-tag "targetConfiguration" input)}] (clojure.core/cond-> {} (letvar94880 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar94880 ["reservedInstancesId" :content]))) (letvar94880 "targetConfiguration") (clojure.core/assoc :target-configuration (deser-reserved-instances-configuration (clojure.core/get-in letvar94880 ["targetConfiguration" :content]))))))

(clojure.core/defn- deser-import-instance-task-details [input] (clojure.core/let [letvar94958 {"volumes" (portkey.aws/getback-xml-elem-with-tag "volumes" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {:volumes (deser-import-instance-volume-detail-set (clojure.core/get-in letvar94958 ["volumes" :content]))} (letvar94958 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar94958 ["instanceId" :content]))) (letvar94958 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar94958 ["platform" :content]))) (letvar94958 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar94958 ["description" :content]))))))

(clojure.core/defn- deser-create-volume-permission [input] (clojure.core/let [letvar95036 {"userId" (portkey.aws/getback-xml-elem-with-tag "userId" input), "group" (portkey.aws/getback-xml-elem-with-tag "group" input)}] (clojure.core/cond-> {} (letvar95036 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar95036 ["userId" :content]))) (letvar95036 "group") (clojure.core/assoc :group (deser-permission-group (clojure.core/get-in letvar95036 ["group" :content]))))))

(clojure.core/defn- deser-instance-status-details [input] (clojure.core/let [letvar95114 {"name" (portkey.aws/getback-xml-elem-with-tag "name" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "impairedSince" (portkey.aws/getback-xml-elem-with-tag "impairedSince" input)}] (clojure.core/cond-> {} (letvar95114 "name") (clojure.core/assoc :name (deser-status-name (clojure.core/get-in letvar95114 ["name" :content]))) (letvar95114 "status") (clojure.core/assoc :status (deser-status-type (clojure.core/get-in letvar95114 ["status" :content]))) (letvar95114 "impairedSince") (clojure.core/assoc :impaired-since (deser-date-time (clojure.core/get-in letvar95114 ["impairedSince" :content]))))))

(clojure.core/defn- deser-iam-instance-profile-specification [input] (clojure.core/let [letvar95192 {"arn" (portkey.aws/getback-xml-elem-with-tag "arn" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input)}] (clojure.core/cond-> {} (letvar95192 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar95192 ["arn" :content]))) (letvar95192 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar95192 ["name" :content]))))))

(clojure.core/defn- deser-spot-instance-request-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-instance-request coll))) input))

(clojure.core/defn- deser-region-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-region coll))) input))

(clojure.core/defn- deser-disk-image-description [input] (clojure.core/let [letvar95304 {"format" (portkey.aws/getback-xml-elem-with-tag "format" input), "size" (portkey.aws/getback-xml-elem-with-tag "size" input), "importManifestUrl" (portkey.aws/getback-xml-elem-with-tag "importManifestUrl" input), "checksum" (portkey.aws/getback-xml-elem-with-tag "checksum" input)}] (clojure.core/cond-> {:format (deser-disk-image-format (clojure.core/get-in letvar95304 ["format" :content])), :size (deser-long (clojure.core/get-in letvar95304 ["size" :content])), :import-manifest-url (deser-string (clojure.core/get-in letvar95304 ["importManifestUrl" :content]))} (letvar95304 "checksum") (clojure.core/assoc :checksum (deser-string (clojure.core/get-in letvar95304 ["checksum" :content]))))))

(clojure.core/defn- deser-available-capacity [input] (clojure.core/let [letvar95382 {"availableInstanceCapacity" (portkey.aws/getback-xml-elem-with-tag "availableInstanceCapacity" input), "availableVCpus" (portkey.aws/getback-xml-elem-with-tag "availableVCpus" input)}] (clojure.core/cond-> {} (letvar95382 "availableInstanceCapacity") (clojure.core/assoc :available-instance-capacity (deser-available-instance-capacity-list (clojure.core/get-in letvar95382 ["availableInstanceCapacity" :content]))) (letvar95382 "availableVCpus") (clojure.core/assoc :available-v-cpus (deser-integer (clojure.core/get-in letvar95382 ["availableVCpus" :content]))))))

(clojure.core/defn- deser-bundle-task-state [input] (clojure.core/get {"pending" :pending, "waiting-for-shutdown" :waitingforshutdown, "bundling" :bundling, "storing" :storing, "cancelling" :cancelling, "complete" :complete, "failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-icmp-type-code [input] (clojure.core/let [letvar95465 {"type" (portkey.aws/getback-xml-elem-with-tag "type" input), "code" (portkey.aws/getback-xml-elem-with-tag "code" input)}] (clojure.core/cond-> {} (letvar95465 "type") (clojure.core/assoc :type (deser-integer (clojure.core/get-in letvar95465 ["type" :content]))) (letvar95465 "code") (clojure.core/assoc :code (deser-integer (clojure.core/get-in letvar95465 ["code" :content]))))))

(clojure.core/defn- deser-instance-private-ip-address [input] (clojure.core/let [letvar95543 {"privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "primary" (portkey.aws/getback-xml-elem-with-tag "primary" input), "association" (portkey.aws/getback-xml-elem-with-tag "association" input)}] (clojure.core/cond-> {} (letvar95543 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar95543 ["privateIpAddress" :content]))) (letvar95543 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar95543 ["privateDnsName" :content]))) (letvar95543 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar95543 ["primary" :content]))) (letvar95543 "association") (clojure.core/assoc :association (deser-instance-network-interface-association (clojure.core/get-in letvar95543 ["association" :content]))))))

(clojure.core/defn- deser-reserved-instances-listing-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-listing coll))) input))

(clojure.core/defn- deser-vpc-classic-link [input] (clojure.core/let [letvar95638 {"vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "classicLinkEnabled" (portkey.aws/getback-xml-elem-with-tag "classicLinkEnabled" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar95638 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar95638 ["vpcId" :content]))) (letvar95638 "classicLinkEnabled") (clojure.core/assoc :classic-link-enabled (deser-boolean (clojure.core/get-in letvar95638 ["classicLinkEnabled" :content]))) (letvar95638 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar95638 ["tagSet" :content]))))))

(clojure.core/defn- deser-snapshot-task-detail [input] (clojure.core/let [letvar95716 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "url" (portkey.aws/getback-xml-elem-with-tag "url" input), "userBucket" (portkey.aws/getback-xml-elem-with-tag "userBucket" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "diskImageSize" (portkey.aws/getback-xml-elem-with-tag "diskImageSize" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "format" (portkey.aws/getback-xml-elem-with-tag "format" input)}] (clojure.core/cond-> {} (letvar95716 "diskImageSize") (clojure.core/assoc :disk-image-size (deser-double (clojure.core/get-in letvar95716 ["diskImageSize" :content]))) (letvar95716 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar95716 ["statusMessage" :content]))) (letvar95716 "format") (clojure.core/assoc :format (deser-string (clojure.core/get-in letvar95716 ["format" :content]))) (letvar95716 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar95716 ["status" :content]))) (letvar95716 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar95716 ["progress" :content]))) (letvar95716 "url") (clojure.core/assoc :url (deser-string (clojure.core/get-in letvar95716 ["url" :content]))) (letvar95716 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar95716 ["description" :content]))) (letvar95716 "userBucket") (clojure.core/assoc :user-bucket (deser-user-bucket-details (clojure.core/get-in letvar95716 ["userBucket" :content]))) (letvar95716 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar95716 ["snapshotId" :content]))))))

(clojure.core/defn- deser-launch-specification [input] (clojure.core/let [letvar95794 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "addressingType" (portkey.aws/getback-xml-elem-with-tag "addressingType" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "placement" (portkey.aws/getback-xml-elem-with-tag "placement" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "userData" (portkey.aws/getback-xml-elem-with-tag "userData" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input)}] (clojure.core/cond-> {} (letvar95794 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar95794 ["kernelId" :content]))) (letvar95794 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar95794 ["imageId" :content]))) (letvar95794 "placement") (clojure.core/assoc :placement (deser-spot-placement (clojure.core/get-in letvar95794 ["placement" :content]))) (letvar95794 "addressingType") (clojure.core/assoc :addressing-type (deser-string (clojure.core/get-in letvar95794 ["addressingType" :content]))) (letvar95794 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar95794 ["subnetId" :content]))) (letvar95794 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar95794 ["groupSet" :content]))) (letvar95794 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar95794 ["ebsOptimized" :content]))) (letvar95794 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar95794 ["instanceType" :content]))) (letvar95794 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar95794 ["keyName" :content]))) (letvar95794 "monitoring") (clojure.core/assoc :monitoring (deser-run-instances-monitoring-enabled (clojure.core/get-in letvar95794 ["monitoring" :content]))) (letvar95794 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar95794 ["blockDeviceMapping" :content]))) (letvar95794 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar95794 ["ramdiskId" :content]))) (letvar95794 "userData") (clojure.core/assoc :user-data (deser-string (clojure.core/get-in letvar95794 ["userData" :content]))) (letvar95794 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile-specification (clojure.core/get-in letvar95794 ["iamInstanceProfile" :content]))) (letvar95794 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-specification-list (clojure.core/get-in letvar95794 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-id-format-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-id-format coll))) input))

(clojure.core/defn- deser-prefix-list-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-prefix-list coll))) input))

(clojure.core/defn- deser-attribute-boolean-value [input] (clojure.core/let [letvar95906 {"value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar95906 "value") (clojure.core/assoc :value (deser-boolean (clojure.core/get-in letvar95906 ["value" :content]))))))

(clojure.core/defn- deser-spot-instance-request [input] (clojure.core/let [letvar95984 {"validFrom" (portkey.aws/getback-xml-elem-with-tag "validFrom" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input), "launchGroup" (portkey.aws/getback-xml-elem-with-tag "launchGroup" input), "blockDurationMinutes" (portkey.aws/getback-xml-elem-with-tag "blockDurationMinutes" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "launchedAvailabilityZone" (portkey.aws/getback-xml-elem-with-tag "launchedAvailabilityZone" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "actualBlockHourlyPrice" (portkey.aws/getback-xml-elem-with-tag "actualBlockHourlyPrice" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "validUntil" (portkey.aws/getback-xml-elem-with-tag "validUntil" input), "availabilityZoneGroup" (portkey.aws/getback-xml-elem-with-tag "availabilityZoneGroup" input), "fault" (portkey.aws/getback-xml-elem-with-tag "fault" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "launchSpecification" (portkey.aws/getback-xml-elem-with-tag "launchSpecification" input)}] (clojure.core/cond-> {} (letvar95984 "availabilityZoneGroup") (clojure.core/assoc :availability-zone-group (deser-string (clojure.core/get-in letvar95984 ["availabilityZoneGroup" :content]))) (letvar95984 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar95984 ["spotInstanceRequestId" :content]))) (letvar95984 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar95984 ["instanceId" :content]))) (letvar95984 "type") (clojure.core/assoc :type (deser-spot-instance-type (clojure.core/get-in letvar95984 ["type" :content]))) (letvar95984 "actualBlockHourlyPrice") (clojure.core/assoc :actual-block-hourly-price (deser-string (clojure.core/get-in letvar95984 ["actualBlockHourlyPrice" :content]))) (letvar95984 "blockDurationMinutes") (clojure.core/assoc :block-duration-minutes (deser-integer (clojure.core/get-in letvar95984 ["blockDurationMinutes" :content]))) (letvar95984 "validFrom") (clojure.core/assoc :valid-from (deser-date-time (clojure.core/get-in letvar95984 ["validFrom" :content]))) (letvar95984 "launchSpecification") (clojure.core/assoc :launch-specification (deser-launch-specification (clojure.core/get-in letvar95984 ["launchSpecification" :content]))) (letvar95984 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar95984 ["tagSet" :content]))) (letvar95984 "status") (clojure.core/assoc :status (deser-spot-instance-status (clojure.core/get-in letvar95984 ["status" :content]))) (letvar95984 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar95984 ["spotPrice" :content]))) (letvar95984 "launchedAvailabilityZone") (clojure.core/assoc :launched-availability-zone (deser-string (clojure.core/get-in letvar95984 ["launchedAvailabilityZone" :content]))) (letvar95984 "launchGroup") (clojure.core/assoc :launch-group (deser-string (clojure.core/get-in letvar95984 ["launchGroup" :content]))) (letvar95984 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar95984 ["productDescription" :content]))) (letvar95984 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar95984 ["createTime" :content]))) (letvar95984 "fault") (clojure.core/assoc :fault (deser-spot-instance-state-fault (clojure.core/get-in letvar95984 ["fault" :content]))) (letvar95984 "state") (clojure.core/assoc :state (deser-spot-instance-state (clojure.core/get-in letvar95984 ["state" :content]))) (letvar95984 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar95984 ["validUntil" :content]))))))

(clojure.core/defn- deser-rule-action [input] (clojure.core/get {"allow" :allow, "deny" :deny} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-attachment coll))) input))

(clojure.core/defn- deser-vpn-static-route [input] (clojure.core/let [letvar96084 {"destinationCidrBlock" (portkey.aws/getback-xml-elem-with-tag "destinationCidrBlock" input), "source" (portkey.aws/getback-xml-elem-with-tag "source" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar96084 "destinationCidrBlock") (clojure.core/assoc :destination-cidr-block (deser-string (clojure.core/get-in letvar96084 ["destinationCidrBlock" :content]))) (letvar96084 "source") (clojure.core/assoc :source (deser-vpn-static-route-source (clojure.core/get-in letvar96084 ["source" :content]))) (letvar96084 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar96084 ["state" :content]))))))

(clojure.core/defn- deser-fleet-type [input] (clojure.core/get {"request" :request, "maintain" :maintain} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-endpoint [input] (clojure.core/let [letvar96167 {"vpcEndpointId" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "serviceName" (portkey.aws/getback-xml-elem-with-tag "serviceName" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "policyDocument" (portkey.aws/getback-xml-elem-with-tag "policyDocument" input), "routeTableIdSet" (portkey.aws/getback-xml-elem-with-tag "routeTableIdSet" input), "creationTimestamp" (portkey.aws/getback-xml-elem-with-tag "creationTimestamp" input)}] (clojure.core/cond-> {} (letvar96167 "vpcEndpointId") (clojure.core/assoc :vpc-endpoint-id (deser-string (clojure.core/get-in letvar96167 ["vpcEndpointId" :content]))) (letvar96167 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar96167 ["vpcId" :content]))) (letvar96167 "serviceName") (clojure.core/assoc :service-name (deser-string (clojure.core/get-in letvar96167 ["serviceName" :content]))) (letvar96167 "state") (clojure.core/assoc :state (deser-state (clojure.core/get-in letvar96167 ["state" :content]))) (letvar96167 "policyDocument") (clojure.core/assoc :policy-document (deser-string (clojure.core/get-in letvar96167 ["policyDocument" :content]))) (letvar96167 "routeTableIdSet") (clojure.core/assoc :route-table-ids (deser-value-string-list (clojure.core/get-in letvar96167 ["routeTableIdSet" :content]))) (letvar96167 "creationTimestamp") (clojure.core/assoc :creation-timestamp (deser-date-time (clojure.core/get-in letvar96167 ["creationTimestamp" :content]))))))

(clojure.core/defn- deser-key-pair-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-key-pair-info coll))) input))

(clojure.core/defn- deser-purchased-scheduled-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance coll))) input))

(clojure.core/defn- deser-group-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-group-identifier coll))) input))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error-item [input] (clojure.core/let [letvar96296 {"spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input), "error" (portkey.aws/getback-xml-elem-with-tag "error" input)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar96296 ["spotFleetRequestId" :content])), :error (deser-cancel-spot-fleet-requests-error (clojure.core/get-in letvar96296 ["error" :content]))})))

(clojure.core/defn- deser-instance-status-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status-details coll))) input))

(clojure.core/defn- deser-key-pair-info [input] (clojure.core/let [letvar96391 {"keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "keyFingerprint" (portkey.aws/getback-xml-elem-with-tag "keyFingerprint" input)}] (clojure.core/cond-> {} (letvar96391 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar96391 ["keyName" :content]))) (letvar96391 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar96391 ["keyFingerprint" :content]))))))

(clojure.core/defn- deser-instance-network-interface [input] (clojure.core/let [letvar96469 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "association" (portkey.aws/getback-xml-elem-with-tag "association" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "privateIpAddressesSet" (portkey.aws/getback-xml-elem-with-tag "privateIpAddressesSet" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "macAddress" (portkey.aws/getback-xml-elem-with-tag "macAddress" input), "attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar96469 "attachment") (clojure.core/assoc :attachment (deser-instance-network-interface-attachment (clojure.core/get-in letvar96469 ["attachment" :content]))) (letvar96469 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar96469 ["subnetId" :content]))) (letvar96469 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar96469 ["ownerId" :content]))) (letvar96469 "macAddress") (clojure.core/assoc :mac-address (deser-string (clojure.core/get-in letvar96469 ["macAddress" :content]))) (letvar96469 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar96469 ["networkInterfaceId" :content]))) (letvar96469 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar96469 ["sourceDestCheck" :content]))) (letvar96469 "status") (clojure.core/assoc :status (deser-network-interface-status (clojure.core/get-in letvar96469 ["status" :content]))) (letvar96469 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar96469 ["privateDnsName" :content]))) (letvar96469 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar96469 ["description" :content]))) (letvar96469 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar96469 ["vpcId" :content]))) (letvar96469 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar96469 ["groupSet" :content]))) (letvar96469 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-instance-private-ip-address-list (clojure.core/get-in letvar96469 ["privateIpAddressesSet" :content]))) (letvar96469 "association") (clojure.core/assoc :association (deser-instance-network-interface-association (clojure.core/get-in letvar96469 ["association" :content]))) (letvar96469 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar96469 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error [input] (clojure.core/let [letvar96547 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {:code (deser-cancel-batch-error-code (clojure.core/get-in letvar96547 ["code" :content])), :message (deser-string (clojure.core/get-in letvar96547 ["message" :content]))})))

(clojure.core/defn- deser-vpn-static-route-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-static-route coll))) input))

(clojure.core/defn- deser-reservation [input] (clojure.core/let [letvar96642 {"reservationId" (portkey.aws/getback-xml-elem-with-tag "reservationId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "requesterId" (portkey.aws/getback-xml-elem-with-tag "requesterId" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar96642 "reservationId") (clojure.core/assoc :reservation-id (deser-string (clojure.core/get-in letvar96642 ["reservationId" :content]))) (letvar96642 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar96642 ["ownerId" :content]))) (letvar96642 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar96642 ["requesterId" :content]))) (letvar96642 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar96642 ["groupSet" :content]))) (letvar96642 "instancesSet") (clojure.core/assoc :instances (deser-instance-list (clojure.core/get-in letvar96642 ["instancesSet" :content]))))))

(clojure.core/defn- deser-unsuccessful-item-error [input] (clojure.core/let [letvar96720 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {:code (deser-string (clojure.core/get-in letvar96720 ["code" :content])), :message (deser-string (clojure.core/get-in letvar96720 ["message" :content]))})))

(clojure.core/defn- deser-vpc-peering-connection-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-peering-connection coll))) input))

(clojure.core/defn- deser-unsuccessful-item-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-unsuccessful-item coll))) input))

(clojure.core/defn- deser-security-group-references [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group-reference coll))) input))

(clojure.core/defn- deser-stale-ip-permission [input] (clojure.core/let [letvar96849 {"fromPort" (portkey.aws/getback-xml-elem-with-tag "fromPort" input), "ipProtocol" (portkey.aws/getback-xml-elem-with-tag "ipProtocol" input), "ipRanges" (portkey.aws/getback-xml-elem-with-tag "ipRanges" input), "prefixListIds" (portkey.aws/getback-xml-elem-with-tag "prefixListIds" input), "toPort" (portkey.aws/getback-xml-elem-with-tag "toPort" input), "groups" (portkey.aws/getback-xml-elem-with-tag "groups" input)}] (clojure.core/cond-> {} (letvar96849 "fromPort") (clojure.core/assoc :from-port (deser-integer (clojure.core/get-in letvar96849 ["fromPort" :content]))) (letvar96849 "ipProtocol") (clojure.core/assoc :ip-protocol (deser-string (clojure.core/get-in letvar96849 ["ipProtocol" :content]))) (letvar96849 "ipRanges") (clojure.core/assoc :ip-ranges (deser-ip-ranges (clojure.core/get-in letvar96849 ["ipRanges" :content]))) (letvar96849 "prefixListIds") (clojure.core/assoc :prefix-list-ids (deser-prefix-list-id-set (clojure.core/get-in letvar96849 ["prefixListIds" :content]))) (letvar96849 "toPort") (clojure.core/assoc :to-port (deser-integer (clojure.core/get-in letvar96849 ["toPort" :content]))) (letvar96849 "groups") (clojure.core/assoc :user-id-group-pairs (deser-user-id-group-pair-set (clojure.core/get-in letvar96849 ["groups" :content]))))))

(clojure.core/defn- deser-traffic-type [input] (clojure.core/get {"ACCEPT" :accept, "REJECT" :reject, "ALL" :all} (clojure.core/first input)))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar96949 {"zoneName" (portkey.aws/getback-xml-elem-with-tag "zoneName" input), "zoneState" (portkey.aws/getback-xml-elem-with-tag "zoneState" input), "regionName" (portkey.aws/getback-xml-elem-with-tag "regionName" input), "messageSet" (portkey.aws/getback-xml-elem-with-tag "messageSet" input)}] (clojure.core/cond-> {} (letvar96949 "zoneName") (clojure.core/assoc :zone-name (deser-string (clojure.core/get-in letvar96949 ["zoneName" :content]))) (letvar96949 "zoneState") (clojure.core/assoc :state (deser-availability-zone-state (clojure.core/get-in letvar96949 ["zoneState" :content]))) (letvar96949 "regionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar96949 ["regionName" :content]))) (letvar96949 "messageSet") (clojure.core/assoc :messages (deser-availability-zone-message-list (clojure.core/get-in letvar96949 ["messageSet" :content]))))))

(clojure.core/defn- deser-route-origin [input] (clojure.core/get {"CreateRouteTable" :create-route-table, "CreateRoute" :create-route, "EnableVgwRoutePropagation" :enable-vgw-route-propagation} (clojure.core/first input)))

(clojure.core/defn- deser-create-volume-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-create-volume-permission coll))) input))

(clojure.core/defn- deser-status [input] (clojure.core/get {"MoveInProgress" :move-in-progress, "InVpc" :in-vpc, "InClassic" :in-classic} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-type [input] (clojure.core/get {"interface" :interface, "natGateway" :nat-gateway} (clojure.core/first input)))

(clojure.core/defn- deser-cancelled-spot-instance-request-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancelled-spot-instance-request coll))) input))

(clojure.core/defn- deser-event-type [input] (clojure.core/get {"instanceChange" :instance-change, "fleetRequestChange" :fleet-request-change, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-moving-address-status [input] (clojure.core/let [letvar97081 {"publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "moveStatus" (portkey.aws/getback-xml-elem-with-tag "moveStatus" input)}] (clojure.core/cond-> {} (letvar97081 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar97081 ["publicIp" :content]))) (letvar97081 "moveStatus") (clojure.core/assoc :move-status (deser-move-status (clojure.core/get-in letvar97081 ["moveStatus" :content]))))))

(clojure.core/defn- deser-reserved-instances [input] (clojure.core/let [letvar97159 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "instanceTenancy" (portkey.aws/getback-xml-elem-with-tag "instanceTenancy" input), "offeringType" (portkey.aws/getback-xml-elem-with-tag "offeringType" input), "fixedPrice" (portkey.aws/getback-xml-elem-with-tag "fixedPrice" input), "start" (portkey.aws/getback-xml-elem-with-tag "start" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "recurringCharges" (portkey.aws/getback-xml-elem-with-tag "recurringCharges" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "duration" (portkey.aws/getback-xml-elem-with-tag "duration" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input), "usagePrice" (portkey.aws/getback-xml-elem-with-tag "usagePrice" input), "end" (portkey.aws/getback-xml-elem-with-tag "end" input)}] (clojure.core/cond-> {} (letvar97159 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar97159 ["currencyCode" :content]))) (letvar97159 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar97159 ["instanceCount" :content]))) (letvar97159 "start") (clojure.core/assoc :start (deser-date-time (clojure.core/get-in letvar97159 ["start" :content]))) (letvar97159 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar97159 ["instanceType" :content]))) (letvar97159 "fixedPrice") (clojure.core/assoc :fixed-price (deser-float (clojure.core/get-in letvar97159 ["fixedPrice" :content]))) (letvar97159 "end") (clojure.core/assoc :end (deser-date-time (clojure.core/get-in letvar97159 ["end" :content]))) (letvar97159 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar97159 ["tagSet" :content]))) (letvar97159 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar97159 ["availabilityZone" :content]))) (letvar97159 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar97159 ["instanceTenancy" :content]))) (letvar97159 "duration") (clojure.core/assoc :duration (deser-long (clojure.core/get-in letvar97159 ["duration" :content]))) (letvar97159 "usagePrice") (clojure.core/assoc :usage-price (deser-float (clojure.core/get-in letvar97159 ["usagePrice" :content]))) (letvar97159 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar97159 ["productDescription" :content]))) (letvar97159 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar97159 ["reservedInstancesId" :content]))) (letvar97159 "state") (clojure.core/assoc :state (deser-reserved-instance-state (clojure.core/get-in letvar97159 ["state" :content]))) (letvar97159 "recurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charges-list (clojure.core/get-in letvar97159 ["recurringCharges" :content]))) (letvar97159 "offeringType") (clojure.core/assoc :offering-type (deser-offering-type-values (clojure.core/get-in letvar97159 ["offeringType" :content]))))))

(clojure.core/defn- deser-next-token [input] (clojure.core/first input))

(clojure.core/defn- deser-excess-capacity-termination-policy [input] (clojure.core/get {"noTermination" :no-termination, "default" :default} (clojure.core/first input)))

(clojure.core/defn- deser-prefix-list [input] (clojure.core/let [letvar97247 {"prefixListId" (portkey.aws/getback-xml-elem-with-tag "prefixListId" input), "prefixListName" (portkey.aws/getback-xml-elem-with-tag "prefixListName" input), "cidrSet" (portkey.aws/getback-xml-elem-with-tag "cidrSet" input)}] (clojure.core/cond-> {} (letvar97247 "prefixListId") (clojure.core/assoc :prefix-list-id (deser-string (clojure.core/get-in letvar97247 ["prefixListId" :content]))) (letvar97247 "prefixListName") (clojure.core/assoc :prefix-list-name (deser-string (clojure.core/get-in letvar97247 ["prefixListName" :content]))) (letvar97247 "cidrSet") (clojure.core/assoc :cidrs (deser-value-string-list (clojure.core/get-in letvar97247 ["cidrSet" :content]))))))

(clojure.core/defn- deser-import-instance-volume-detail-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-instance-volume-detail-item coll))) input))

(clojure.core/defn- deser-status-type [input] (clojure.core/get {"passed" :passed, "failed" :failed, "insufficient-data" :insufficientdata, "initializing" :initializing} (clojure.core/first input)))

(clojure.core/defn- deser-spot-fleet-monitoring [input] (clojure.core/let [letvar97347 {"enabled" (portkey.aws/getback-xml-elem-with-tag "enabled" input)}] (clojure.core/cond-> {} (letvar97347 "enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar97347 ["enabled" :content]))))))

(clojure.core/defn- deser-reserved-instances-listing [input] (clojure.core/let [letvar97425 {"updateDate" (portkey.aws/getback-xml-elem-with-tag "updateDate" input), "createDate" (portkey.aws/getback-xml-elem-with-tag "createDate" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "reservedInstancesListingId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingId" input), "instanceCounts" (portkey.aws/getback-xml-elem-with-tag "instanceCounts" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "priceSchedules" (portkey.aws/getback-xml-elem-with-tag "priceSchedules" input), "reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input)}] (clojure.core/cond-> {} (letvar97425 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar97425 ["statusMessage" :content]))) (letvar97425 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar97425 ["createDate" :content]))) (letvar97425 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar97425 ["tagSet" :content]))) (letvar97425 "status") (clojure.core/assoc :status (deser-listing-status (clojure.core/get-in letvar97425 ["status" :content]))) (letvar97425 "priceSchedules") (clojure.core/assoc :price-schedules (deser-price-schedule-list (clojure.core/get-in letvar97425 ["priceSchedules" :content]))) (letvar97425 "updateDate") (clojure.core/assoc :update-date (deser-date-time (clojure.core/get-in letvar97425 ["updateDate" :content]))) (letvar97425 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar97425 ["reservedInstancesId" :content]))) (letvar97425 "reservedInstancesListingId") (clojure.core/assoc :reserved-instances-listing-id (deser-string (clojure.core/get-in letvar97425 ["reservedInstancesListingId" :content]))) (letvar97425 "instanceCounts") (clojure.core/assoc :instance-counts (deser-instance-count-list (clojure.core/get-in letvar97425 ["instanceCounts" :content]))) (letvar97425 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar97425 ["clientToken" :content]))))))

(clojure.core/defn- deser-instance-status-summary [input] (clojure.core/let [letvar97503 {"status" (portkey.aws/getback-xml-elem-with-tag "status" input), "details" (portkey.aws/getback-xml-elem-with-tag "details" input)}] (clojure.core/cond-> {} (letvar97503 "status") (clojure.core/assoc :status (deser-summary-status (clojure.core/get-in letvar97503 ["status" :content]))) (letvar97503 "details") (clojure.core/assoc :details (deser-instance-status-details-list (clojure.core/get-in letvar97503 ["details" :content]))))))

(clojure.core/defn- deser-nat-gateway-address [input] (clojure.core/let [letvar97581 {"publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "privateIp" (portkey.aws/getback-xml-elem-with-tag "privateIp" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input)}] (clojure.core/cond-> {} (letvar97581 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar97581 ["publicIp" :content]))) (letvar97581 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar97581 ["allocationId" :content]))) (letvar97581 "privateIp") (clojure.core/assoc :private-ip (deser-string (clojure.core/get-in letvar97581 ["privateIp" :content]))) (letvar97581 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar97581 ["networkInterfaceId" :content]))))))

(clojure.core/defn- deser-instance-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status coll))) input))

(clojure.core/defn- deser-placement-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-placement-group coll))) input))

(clojure.core/defn- deser-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-address coll))) input))

(clojure.core/defn- deser-reserved-instances-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-offering coll))) input))

(clojure.core/defn- deser-reserved-instances-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances coll))) input))

(clojure.core/defn- deser-image-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-image coll))) input))

(clojure.core/defn- deser-user-id-group-pair-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-id-group-pair coll))) input))

(clojure.core/defn- deser-s-3-storage [input] (clojure.core/let [letvar97778 {"bucket" (portkey.aws/getback-xml-elem-with-tag "bucket" input), "prefix" (portkey.aws/getback-xml-elem-with-tag "prefix" input), nil (portkey.aws/getback-xml-elem-with-tag nil input), "uploadPolicy" (portkey.aws/getback-xml-elem-with-tag "uploadPolicy" input), "uploadPolicySignature" (portkey.aws/getback-xml-elem-with-tag "uploadPolicySignature" input)}] (clojure.core/cond-> {} (letvar97778 "bucket") (clojure.core/assoc :bucket (deser-string (clojure.core/get-in letvar97778 ["bucket" :content]))) (letvar97778 "prefix") (clojure.core/assoc :prefix (deser-string (clojure.core/get-in letvar97778 ["prefix" :content]))) (letvar97778 nil) (clojure.core/assoc :aws-access-key-id (deser-string (clojure.core/get-in letvar97778 [nil :content]))) (letvar97778 "uploadPolicy") (clojure.core/assoc :upload-policy (deser-blob (clojure.core/get-in letvar97778 ["uploadPolicy" :content]))) (letvar97778 "uploadPolicySignature") (clojure.core/assoc :upload-policy-signature (deser-string (clojure.core/get-in letvar97778 ["uploadPolicySignature" :content]))))))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar97856 {"frequency" (portkey.aws/getback-xml-elem-with-tag "frequency" input), "amount" (portkey.aws/getback-xml-elem-with-tag "amount" input)}] (clojure.core/cond-> {} (letvar97856 "frequency") (clojure.core/assoc :frequency (deser-recurring-charge-frequency (clojure.core/get-in letvar97856 ["frequency" :content]))) (letvar97856 "amount") (clojure.core/assoc :amount (deser-double (clojure.core/get-in letvar97856 ["amount" :content]))))))

(clojure.core/defn- deser-spot-fleet-request-config-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-fleet-request-config coll))) input))

(clojure.core/defn- deser-launch-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-permission coll))) input))

(clojure.core/defn- deser-price-schedule-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-price-schedule coll))) input))

(clojure.core/defn- deser-instance-private-ip-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-private-ip-address coll))) input))

(clojure.core/defn- deser-group-identifier [input] (clojure.core/let [letvar98002 {"groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input)}] (clojure.core/cond-> {} (letvar98002 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar98002 ["groupName" :content]))) (letvar98002 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar98002 ["groupId" :content]))))))

(clojure.core/defn- deser-spot-price [input] (clojure.core/let [letvar98080 {"instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input)}] (clojure.core/cond-> {} (letvar98080 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar98080 ["instanceType" :content]))) (letvar98080 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar98080 ["productDescription" :content]))) (letvar98080 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar98080 ["spotPrice" :content]))) (letvar98080 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar98080 ["timestamp" :content]))) (letvar98080 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar98080 ["availabilityZone" :content]))))))

(clojure.core/defn- deser-instance-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-scheduled-instance-availability-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance-availability coll))) input))

(clojure.core/defn- deser-nat-gateway [input] (clojure.core/let [letvar98192 {"subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "failureMessage" (portkey.aws/getback-xml-elem-with-tag "failureMessage" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "deleteTime" (portkey.aws/getback-xml-elem-with-tag "deleteTime" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "natGatewayId" (portkey.aws/getback-xml-elem-with-tag "natGatewayId" input), "failureCode" (portkey.aws/getback-xml-elem-with-tag "failureCode" input), "natGatewayAddressSet" (portkey.aws/getback-xml-elem-with-tag "natGatewayAddressSet" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "provisionedBandwidth" (portkey.aws/getback-xml-elem-with-tag "provisionedBandwidth" input)}] (clojure.core/cond-> {} (letvar98192 "deleteTime") (clojure.core/assoc :delete-time (deser-date-time (clojure.core/get-in letvar98192 ["deleteTime" :content]))) (letvar98192 "provisionedBandwidth") (clojure.core/assoc :provisioned-bandwidth (deser-provisioned-bandwidth (clojure.core/get-in letvar98192 ["provisionedBandwidth" :content]))) (letvar98192 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar98192 ["subnetId" :content]))) (letvar98192 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar98192 ["natGatewayId" :content]))) (letvar98192 "failureMessage") (clojure.core/assoc :failure-message (deser-string (clojure.core/get-in letvar98192 ["failureMessage" :content]))) (letvar98192 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar98192 ["vpcId" :content]))) (letvar98192 "natGatewayAddressSet") (clojure.core/assoc :nat-gateway-addresses (deser-nat-gateway-address-list (clojure.core/get-in letvar98192 ["natGatewayAddressSet" :content]))) (letvar98192 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar98192 ["createTime" :content]))) (letvar98192 "state") (clojure.core/assoc :state (deser-nat-gateway-state (clojure.core/get-in letvar98192 ["state" :content]))) (letvar98192 "failureCode") (clojure.core/assoc :failure-code (deser-string (clojure.core/get-in letvar98192 ["failureCode" :content]))))))

(clojure.core/defn- deser-spot-instance-status [input] (clojure.core/let [letvar98270 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "updateTime" (portkey.aws/getback-xml-elem-with-tag "updateTime" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar98270 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar98270 ["code" :content]))) (letvar98270 "updateTime") (clojure.core/assoc :update-time (deser-date-time (clojure.core/get-in letvar98270 ["updateTime" :content]))) (letvar98270 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar98270 ["message" :content]))))))

(clojure.core/defn- deser-tag-description [input] (clojure.core/let [letvar98348 {"resourceId" (portkey.aws/getback-xml-elem-with-tag "resourceId" input), "resourceType" (portkey.aws/getback-xml-elem-with-tag "resourceType" input), "key" (portkey.aws/getback-xml-elem-with-tag "key" input), "value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar98348 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar98348 ["resourceId" :content]))) (letvar98348 "resourceType") (clojure.core/assoc :resource-type (deser-resource-type (clojure.core/get-in letvar98348 ["resourceType" :content]))) (letvar98348 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar98348 ["key" :content]))) (letvar98348 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar98348 ["value" :content]))))))

(clojure.core/defn- deser-account-attribute-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-attribute-value coll))) input))

(clojure.core/defn- deser-import-snapshot-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-snapshot-task coll))) input))

(clojure.core/defn- deser-dhcp-options [input] (clojure.core/let [letvar98460 {"dhcpOptionsId" (portkey.aws/getback-xml-elem-with-tag "dhcpOptionsId" input), "dhcpConfigurationSet" (portkey.aws/getback-xml-elem-with-tag "dhcpConfigurationSet" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar98460 "dhcpOptionsId") (clojure.core/assoc :dhcp-options-id (deser-string (clojure.core/get-in letvar98460 ["dhcpOptionsId" :content]))) (letvar98460 "dhcpConfigurationSet") (clojure.core/assoc :dhcp-configurations (deser-dhcp-configuration-list (clojure.core/get-in letvar98460 ["dhcpConfigurationSet" :content]))) (letvar98460 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar98460 ["tagSet" :content]))))))

(clojure.core/defn- deser-run-instances-monitoring-enabled [input] (clojure.core/let [letvar98538 {"enabled" (portkey.aws/getback-xml-elem-with-tag "enabled" input)}] (clojure.core/cond-> {:enabled (deser-boolean (clojure.core/get-in letvar98538 ["enabled" :content]))})))

(clojure.core/defn- deser-user-id-group-pair-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-id-group-pair coll))) input))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-network-acl-association-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl-association coll))) input))

(clojure.core/defn- deser-product-code-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-product-code coll))) input))

(clojure.core/defn- deser-volume-status-info-status [input] (clojure.core/get {"ok" :ok, "impaired" :impaired, "insufficient-data" :insufficientdata} (clojure.core/first input)))

(clojure.core/defn- deser-spot-fleet-request-config-data [input] (clojure.core/let [letvar98689 {"validFrom" (portkey.aws/getback-xml-elem-with-tag "validFrom" input), "targetCapacity" (portkey.aws/getback-xml-elem-with-tag "targetCapacity" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "iamFleetRole" (portkey.aws/getback-xml-elem-with-tag "iamFleetRole" input), "fulfilledCapacity" (portkey.aws/getback-xml-elem-with-tag "fulfilledCapacity" input), "allocationStrategy" (portkey.aws/getback-xml-elem-with-tag "allocationStrategy" input), "excessCapacityTerminationPolicy" (portkey.aws/getback-xml-elem-with-tag "excessCapacityTerminationPolicy" input), "launchSpecifications" (portkey.aws/getback-xml-elem-with-tag "launchSpecifications" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "terminateInstancesWithExpiration" (portkey.aws/getback-xml-elem-with-tag "terminateInstancesWithExpiration" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "validUntil" (portkey.aws/getback-xml-elem-with-tag "validUntil" input)}] (clojure.core/cond-> {:spot-price (deser-string (clojure.core/get-in letvar98689 ["spotPrice" :content])), :target-capacity (deser-integer (clojure.core/get-in letvar98689 ["targetCapacity" :content])), :iam-fleet-role (deser-string (clojure.core/get-in letvar98689 ["iamFleetRole" :content])), :launch-specifications (deser-launch-specs-list (clojure.core/get-in letvar98689 ["launchSpecifications" :content]))} (letvar98689 "type") (clojure.core/assoc :type (deser-fleet-type (clojure.core/get-in letvar98689 ["type" :content]))) (letvar98689 "validFrom") (clojure.core/assoc :valid-from (deser-date-time (clojure.core/get-in letvar98689 ["validFrom" :content]))) (letvar98689 "excessCapacityTerminationPolicy") (clojure.core/assoc :excess-capacity-termination-policy (deser-excess-capacity-termination-policy (clojure.core/get-in letvar98689 ["excessCapacityTerminationPolicy" :content]))) (letvar98689 "allocationStrategy") (clojure.core/assoc :allocation-strategy (deser-allocation-strategy (clojure.core/get-in letvar98689 ["allocationStrategy" :content]))) (letvar98689 "fulfilledCapacity") (clojure.core/assoc :fulfilled-capacity (deser-double (clojure.core/get-in letvar98689 ["fulfilledCapacity" :content]))) (letvar98689 "terminateInstancesWithExpiration") (clojure.core/assoc :terminate-instances-with-expiration (deser-boolean (clojure.core/get-in letvar98689 ["terminateInstancesWithExpiration" :content]))) (letvar98689 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar98689 ["clientToken" :content]))) (letvar98689 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar98689 ["validUntil" :content]))))))

(clojure.core/defn- deser-listing-state [input] (clojure.core/get {"available" :available, "sold" :sold, "cancelled" :cancelled, "pending" :pending} (clojure.core/first input)))

(clojure.core/defn- deser-volume-status-events-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-event coll))) input))

(clojure.core/defn- deser-datafeed-subscription-state [input] (clojure.core/get {"Active" :active, "Inactive" :inactive} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface coll))) input))

(clojure.core/defn- deser-cancel-batch-error-code [input] (clojure.core/get {"fleetRequestIdDoesNotExist" :fleet-request-id-does-not-exist, "fleetRequestIdMalformed" :fleet-request-id-malformed, "fleetRequestNotInCancellableState" :fleet-request-not-in-cancellable-state, "unexpectedError" :unexpected-error} (clojure.core/first input)))

(clojure.core/defn- deser-allocation-strategy [input] (clojure.core/get {"lowestPrice" :lowest-price, "diversified" :diversified} (clojure.core/first input)))

(clojure.core/defn- deser-status-name [input] (clojure.core/get {"reachability" :reachability} (clojure.core/first input)))

(clojure.core/defn- deser-volume-status-event [input] (clojure.core/let [letvar98826 {"eventType" (portkey.aws/getback-xml-elem-with-tag "eventType" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "notBefore" (portkey.aws/getback-xml-elem-with-tag "notBefore" input), "notAfter" (portkey.aws/getback-xml-elem-with-tag "notAfter" input), "eventId" (portkey.aws/getback-xml-elem-with-tag "eventId" input)}] (clojure.core/cond-> {} (letvar98826 "eventType") (clojure.core/assoc :event-type (deser-string (clojure.core/get-in letvar98826 ["eventType" :content]))) (letvar98826 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar98826 ["description" :content]))) (letvar98826 "notBefore") (clojure.core/assoc :not-before (deser-date-time (clojure.core/get-in letvar98826 ["notBefore" :content]))) (letvar98826 "notAfter") (clojure.core/assoc :not-after (deser-date-time (clojure.core/get-in letvar98826 ["notAfter" :content]))) (letvar98826 "eventId") (clojure.core/assoc :event-id (deser-string (clojure.core/get-in letvar98826 ["eventId" :content]))))))

(clojure.core/defn- deser-reserved-intances-ids [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-id coll))) input))

(clojure.core/defn- deser-attribute-value [input] (clojure.core/let [letvar98921 {"value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar98921 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar98921 ["value" :content]))))))

(clojure.core/defn- deser-network-acl-association [input] (clojure.core/let [letvar98999 {"networkAclAssociationId" (portkey.aws/getback-xml-elem-with-tag "networkAclAssociationId" input), "networkAclId" (portkey.aws/getback-xml-elem-with-tag "networkAclId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input)}] (clojure.core/cond-> {} (letvar98999 "networkAclAssociationId") (clojure.core/assoc :network-acl-association-id (deser-string (clojure.core/get-in letvar98999 ["networkAclAssociationId" :content]))) (letvar98999 "networkAclId") (clojure.core/assoc :network-acl-id (deser-string (clojure.core/get-in letvar98999 ["networkAclId" :content]))) (letvar98999 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar98999 ["subnetId" :content]))))))

(clojure.core/defn- deser-private-ip-address-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-private-ip-address-specification coll))) input))

(clojure.core/defn- deser-auto-placement [input] (clojure.core/get {"on" :on, "off" :off} (clojure.core/first input)))

(clojure.core/defn- deser-prefix-list-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-prefix-list-id coll))) input))

(clojure.core/defn- deser-availability-zone-message-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone-message coll))) input))

(clojure.core/defn- deser-history-records [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-history-record coll))) input))

(clojure.core/defn- deser-tag-description-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag-description coll))) input))

(clojure.core/defn- deser-product-code-values [input] (clojure.core/get {"devpay" :devpay, "marketplace" :marketplace} (clojure.core/first input)))

(clojure.core/defn- deser-placement-strategy [input] (clojure.core/get {"cluster" :cluster} (clojure.core/first input)))

(clojure.core/defn- deser-internet-gateway-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-internet-gateway-attachment coll))) input))

(clojure.core/defn- deser-volume-status-info [input] (clojure.core/let [letvar99194 {"status" (portkey.aws/getback-xml-elem-with-tag "status" input), "details" (portkey.aws/getback-xml-elem-with-tag "details" input)}] (clojure.core/cond-> {} (letvar99194 "status") (clojure.core/assoc :status (deser-volume-status-info-status (clojure.core/get-in letvar99194 ["status" :content]))) (letvar99194 "details") (clojure.core/assoc :details (deser-volume-status-details-list (clojure.core/get-in letvar99194 ["details" :content]))))))

(clojure.core/defn- deser-instance-capacity [input] (clojure.core/let [letvar99272 {"instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "availableCapacity" (portkey.aws/getback-xml-elem-with-tag "availableCapacity" input), "totalCapacity" (portkey.aws/getback-xml-elem-with-tag "totalCapacity" input)}] (clojure.core/cond-> {} (letvar99272 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar99272 ["instanceType" :content]))) (letvar99272 "availableCapacity") (clojure.core/assoc :available-capacity (deser-integer (clojure.core/get-in letvar99272 ["availableCapacity" :content]))) (letvar99272 "totalCapacity") (clojure.core/assoc :total-capacity (deser-integer (clojure.core/get-in letvar99272 ["totalCapacity" :content]))))))

(clojure.core/defn- deser-instance-block-device-mapping [input] (clojure.core/let [letvar99350 {"deviceName" (portkey.aws/getback-xml-elem-with-tag "deviceName" input), "ebs" (portkey.aws/getback-xml-elem-with-tag "ebs" input)}] (clojure.core/cond-> {} (letvar99350 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar99350 ["deviceName" :content]))) (letvar99350 "ebs") (clojure.core/assoc :ebs (deser-ebs-instance-block-device (clojure.core/get-in letvar99350 ["ebs" :content]))))))

(clojure.core/defn- deser-customer-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-customer-gateway coll))) input))

(clojure.core/defn- deser-classic-link-dns-support [input] (clojure.core/let [letvar99445 {"vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "classicLinkDnsSupported" (portkey.aws/getback-xml-elem-with-tag "classicLinkDnsSupported" input)}] (clojure.core/cond-> {} (letvar99445 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar99445 ["vpcId" :content]))) (letvar99445 "classicLinkDnsSupported") (clojure.core/assoc :classic-link-dns-supported (deser-boolean (clojure.core/get-in letvar99445 ["classicLinkDnsSupported" :content]))))))

(clojure.core/defn- deser-monitoring-state [input] (clojure.core/get {"disabled" :disabled, "disabling" :disabling, "enabled" :enabled, "pending" :pending} (clojure.core/first input)))

(clojure.core/defn- deser-device-type [input] (clojure.core/get {"ebs" :ebs, "instance-store" :instancestore} (clojure.core/first input)))

(clojure.core/defn- deser-route-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route coll))) input))

(clojure.core/defn- deser-pricing-detail [input] (clojure.core/let [letvar99550 {"price" (portkey.aws/getback-xml-elem-with-tag "price" input), "count" (portkey.aws/getback-xml-elem-with-tag "count" input)}] (clojure.core/cond-> {} (letvar99550 "price") (clojure.core/assoc :price (deser-double (clojure.core/get-in letvar99550 ["price" :content]))) (letvar99550 "count") (clojure.core/assoc :count (deser-integer (clojure.core/get-in letvar99550 ["count" :content]))))))

(clojure.core/defn- deser-import-volume-task-details [input] (clojure.core/let [letvar99628 {"bytesConverted" (portkey.aws/getback-xml-elem-with-tag "bytesConverted" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "image" (portkey.aws/getback-xml-elem-with-tag "image" input), "volume" (portkey.aws/getback-xml-elem-with-tag "volume" input)}] (clojure.core/cond-> {:bytes-converted (deser-long (clojure.core/get-in letvar99628 ["bytesConverted" :content])), :availability-zone (deser-string (clojure.core/get-in letvar99628 ["availabilityZone" :content])), :image (deser-disk-image-description (clojure.core/get-in letvar99628 ["image" :content])), :volume (deser-disk-image-volume-description (clojure.core/get-in letvar99628 ["volume" :content]))} (letvar99628 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar99628 ["description" :content]))))))

(clojure.core/defn- deser-network-interface-status [input] (clojure.core/get {"available" :available, "attaching" :attaching, "in-use" :inuse, "detaching" :detaching} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-classic-link-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-classic-link coll))) input))

(clojure.core/defn- deser-price-schedule [input] (clojure.core/let [letvar99728 {"term" (portkey.aws/getback-xml-elem-with-tag "term" input), "price" (portkey.aws/getback-xml-elem-with-tag "price" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "active" (portkey.aws/getback-xml-elem-with-tag "active" input)}] (clojure.core/cond-> {} (letvar99728 "term") (clojure.core/assoc :term (deser-long (clojure.core/get-in letvar99728 ["term" :content]))) (letvar99728 "price") (clojure.core/assoc :price (deser-double (clojure.core/get-in letvar99728 ["price" :content]))) (letvar99728 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar99728 ["currencyCode" :content]))) (letvar99728 "active") (clojure.core/assoc :active (deser-boolean (clojure.core/get-in letvar99728 ["active" :content]))))))

(clojure.core/defn- deser-reserved-instance-state [input] (clojure.core/get {"payment-pending" :paymentpending, "active" :active, "payment-failed" :paymentfailed, "retired" :retired} (clojure.core/first input)))

(clojure.core/defn- deser-allocation-state [input] (clojure.core/get {"available" :available, "under-assessment" :underassessment, "permanent-failure" :permanentfailure, "released" :released, "released-permanent-failure" :releasedpermanentfailure} (clojure.core/first input)))

(clojure.core/defn- deser-export-task-state [input] (clojure.core/get {"active" :active, "cancelling" :cancelling, "cancelled" :cancelled, "completed" :completed} (clojure.core/first input)))

(clojure.core/defn- deser-instance-state-change [input] (clojure.core/let [letvar99821 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "currentState" (portkey.aws/getback-xml-elem-with-tag "currentState" input), "previousState" (portkey.aws/getback-xml-elem-with-tag "previousState" input)}] (clojure.core/cond-> {} (letvar99821 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar99821 ["instanceId" :content]))) (letvar99821 "currentState") (clojure.core/assoc :current-state (deser-instance-state (clojure.core/get-in letvar99821 ["currentState" :content]))) (letvar99821 "previousState") (clojure.core/assoc :previous-state (deser-instance-state (clojure.core/get-in letvar99821 ["previousState" :content]))))))

(clojure.core/defn- deser-monitoring [input] (clojure.core/let [letvar99899 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar99899 "state") (clojure.core/assoc :state (deser-monitoring-state (clojure.core/get-in letvar99899 ["state" :content]))))))

(clojure.core/defn- deser-event-information [input] (clojure.core/let [letvar99977 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "eventSubType" (portkey.aws/getback-xml-elem-with-tag "eventSubType" input), "eventDescription" (portkey.aws/getback-xml-elem-with-tag "eventDescription" input)}] (clojure.core/cond-> {} (letvar99977 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar99977 ["instanceId" :content]))) (letvar99977 "eventSubType") (clojure.core/assoc :event-sub-type (deser-string (clojure.core/get-in letvar99977 ["eventSubType" :content]))) (letvar99977 "eventDescription") (clojure.core/assoc :event-description (deser-string (clojure.core/get-in letvar99977 ["eventDescription" :content]))))))

(clojure.core/defn- deser-launch-specs-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-fleet-launch-specification coll))) input))

(clojure.core/defn- deser-volume-status-details [input] (clojure.core/let [letvar100072 {"name" (portkey.aws/getback-xml-elem-with-tag "name" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar100072 "name") (clojure.core/assoc :name (deser-volume-status-name (clojure.core/get-in letvar100072 ["name" :content]))) (letvar100072 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar100072 ["status" :content]))))))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (clojure.core/first input)))

(clojure.core/defn- deser-string [input] (clojure.core/first input))

(clojure.core/defn- deser-ip-permission [input] (clojure.core/let [letvar100157 {"ipProtocol" (portkey.aws/getback-xml-elem-with-tag "ipProtocol" input), "fromPort" (portkey.aws/getback-xml-elem-with-tag "fromPort" input), "toPort" (portkey.aws/getback-xml-elem-with-tag "toPort" input), "groups" (portkey.aws/getback-xml-elem-with-tag "groups" input), "ipRanges" (portkey.aws/getback-xml-elem-with-tag "ipRanges" input), "prefixListIds" (portkey.aws/getback-xml-elem-with-tag "prefixListIds" input)}] (clojure.core/cond-> {} (letvar100157 "ipProtocol") (clojure.core/assoc :ip-protocol (deser-string (clojure.core/get-in letvar100157 ["ipProtocol" :content]))) (letvar100157 "fromPort") (clojure.core/assoc :from-port (deser-integer (clojure.core/get-in letvar100157 ["fromPort" :content]))) (letvar100157 "toPort") (clojure.core/assoc :to-port (deser-integer (clojure.core/get-in letvar100157 ["toPort" :content]))) (letvar100157 "groups") (clojure.core/assoc :user-id-group-pairs (deser-user-id-group-pair-list (clojure.core/get-in letvar100157 ["groups" :content]))) (letvar100157 "ipRanges") (clojure.core/assoc :ip-ranges (deser-ip-range-list (clojure.core/get-in letvar100157 ["ipRanges" :content]))) (letvar100157 "prefixListIds") (clojure.core/assoc :prefix-list-ids (deser-prefix-list-id-list (clojure.core/get-in letvar100157 ["prefixListIds" :content]))))))

(clojure.core/defn- deser-ip-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-permission coll))) input))

(clojure.core/defn- deser-ri-product-description [input] (clojure.core/get {"Linux/UNIX" :linux-unix, "Linux/UNIX (Amazon VPC)" :linux-unix-amazon-vpc, "Windows" :windows, "Windows (Amazon VPC)" :windows-amazon-vpc} (clojure.core/first input)))

(clojure.core/defn- deser-volume-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume coll))) input))

(clojure.core/defn- deser-dhcp-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-dhcp-options coll))) input))

(clojure.core/defn- deser-unsuccessful-item [input] (clojure.core/let [letvar100291 {"error" (portkey.aws/getback-xml-elem-with-tag "error" input), "resourceId" (portkey.aws/getback-xml-elem-with-tag "resourceId" input)}] (clojure.core/cond-> {:error (deser-unsuccessful-item-error (clojure.core/get-in letvar100291 ["error" :content]))} (letvar100291 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar100291 ["resourceId" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-success-item [input] (clojure.core/let [letvar100369 {"spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input), "currentSpotFleetRequestState" (portkey.aws/getback-xml-elem-with-tag "currentSpotFleetRequestState" input), "previousSpotFleetRequestState" (portkey.aws/getback-xml-elem-with-tag "previousSpotFleetRequestState" input)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar100369 ["spotFleetRequestId" :content])), :current-spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar100369 ["currentSpotFleetRequestState" :content])), :previous-spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar100369 ["previousSpotFleetRequestState" :content]))})))

(clojure.core/defn- deser-propagating-vgw-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-propagating-vgw coll))) input))

(clojure.core/defn- deser-disk-image-format [input] (clojure.core/get {"VMDK" :vmdk, "RAW" :raw, "VHD" :vhd} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-attachment [input] (clojure.core/let [letvar100469 {"attachmentId" (portkey.aws/getback-xml-elem-with-tag "attachmentId" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "instanceOwnerId" (portkey.aws/getback-xml-elem-with-tag "instanceOwnerId" input), "deviceIndex" (portkey.aws/getback-xml-elem-with-tag "deviceIndex" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input)}] (clojure.core/cond-> {} (letvar100469 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar100469 ["attachmentId" :content]))) (letvar100469 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar100469 ["instanceId" :content]))) (letvar100469 "instanceOwnerId") (clojure.core/assoc :instance-owner-id (deser-string (clojure.core/get-in letvar100469 ["instanceOwnerId" :content]))) (letvar100469 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar100469 ["deviceIndex" :content]))) (letvar100469 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar100469 ["status" :content]))) (letvar100469 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar100469 ["attachTime" :content]))) (letvar100469 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar100469 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-security-group-id-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-spot-fleet-request-config [input] (clojure.core/let [letvar100564 {"spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input), "spotFleetRequestState" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestState" input), "spotFleetRequestConfig" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestConfig" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar100564 ["spotFleetRequestId" :content])), :spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar100564 ["spotFleetRequestState" :content])), :spot-fleet-request-config (deser-spot-fleet-request-config-data (clojure.core/get-in letvar100564 ["spotFleetRequestConfig" :content])), :create-time (deser-date-time (clojure.core/get-in letvar100564 ["createTime" :content]))})))

(clojure.core/defn- deser-domain-type [input] (clojure.core/get {"vpc" :vpc, "standard" :standard} (clojure.core/first input)))

(clojure.core/defn- deser-vgw-telemetry [input] (clojure.core/let [letvar100647 {"outsideIpAddress" (portkey.aws/getback-xml-elem-with-tag "outsideIpAddress" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "lastStatusChange" (portkey.aws/getback-xml-elem-with-tag "lastStatusChange" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "acceptedRouteCount" (portkey.aws/getback-xml-elem-with-tag "acceptedRouteCount" input)}] (clojure.core/cond-> {} (letvar100647 "outsideIpAddress") (clojure.core/assoc :outside-ip-address (deser-string (clojure.core/get-in letvar100647 ["outsideIpAddress" :content]))) (letvar100647 "status") (clojure.core/assoc :status (deser-telemetry-status (clojure.core/get-in letvar100647 ["status" :content]))) (letvar100647 "lastStatusChange") (clojure.core/assoc :last-status-change (deser-date-time (clojure.core/get-in letvar100647 ["lastStatusChange" :content]))) (letvar100647 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar100647 ["statusMessage" :content]))) (letvar100647 "acceptedRouteCount") (clojure.core/assoc :accepted-route-count (deser-integer (clojure.core/get-in letvar100647 ["acceptedRouteCount" :content]))))))

(clojure.core/defn- deser-cancel-spot-instance-request-state [input] (clojure.core/get {"active" :active, "open" :open, "closed" :closed, "cancelled" :cancelled, "completed" :completed} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface [input] (clojure.core/let [letvar100730 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "association" (portkey.aws/getback-xml-elem-with-tag "association" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "privateIpAddressesSet" (portkey.aws/getback-xml-elem-with-tag "privateIpAddressesSet" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "requesterId" (portkey.aws/getback-xml-elem-with-tag "requesterId" input), "interfaceType" (portkey.aws/getback-xml-elem-with-tag "interfaceType" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "macAddress" (portkey.aws/getback-xml-elem-with-tag "macAddress" input), "attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "requesterManaged" (portkey.aws/getback-xml-elem-with-tag "requesterManaged" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar100730 "attachment") (clojure.core/assoc :attachment (deser-network-interface-attachment (clojure.core/get-in letvar100730 ["attachment" :content]))) (letvar100730 "tagSet") (clojure.core/assoc :tag-set (deser-tag-list (clojure.core/get-in letvar100730 ["tagSet" :content]))) (letvar100730 "interfaceType") (clojure.core/assoc :interface-type (deser-network-interface-type (clojure.core/get-in letvar100730 ["interfaceType" :content]))) (letvar100730 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar100730 ["subnetId" :content]))) (letvar100730 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar100730 ["ownerId" :content]))) (letvar100730 "macAddress") (clojure.core/assoc :mac-address (deser-string (clojure.core/get-in letvar100730 ["macAddress" :content]))) (letvar100730 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar100730 ["networkInterfaceId" :content]))) (letvar100730 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar100730 ["sourceDestCheck" :content]))) (letvar100730 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar100730 ["availabilityZone" :content]))) (letvar100730 "status") (clojure.core/assoc :status (deser-network-interface-status (clojure.core/get-in letvar100730 ["status" :content]))) (letvar100730 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar100730 ["privateDnsName" :content]))) (letvar100730 "requesterManaged") (clojure.core/assoc :requester-managed (deser-boolean (clojure.core/get-in letvar100730 ["requesterManaged" :content]))) (letvar100730 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar100730 ["description" :content]))) (letvar100730 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar100730 ["vpcId" :content]))) (letvar100730 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar100730 ["groupSet" :content]))) (letvar100730 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-network-interface-private-ip-address-list (clojure.core/get-in letvar100730 ["privateIpAddressesSet" :content]))) (letvar100730 "association") (clojure.core/assoc :association (deser-network-interface-association (clojure.core/get-in letvar100730 ["association" :content]))) (letvar100730 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar100730 ["requesterId" :content]))) (letvar100730 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar100730 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-snapshot [input] (clojure.core/let [letvar100808 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "dataEncryptionKeyId" (portkey.aws/getback-xml-elem-with-tag "dataEncryptionKeyId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "volumeSize" (portkey.aws/getback-xml-elem-with-tag "volumeSize" input), "ownerAlias" (portkey.aws/getback-xml-elem-with-tag "ownerAlias" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar100808 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar100808 ["startTime" :content]))) (letvar100808 "statusMessage") (clojure.core/assoc :state-message (deser-string (clojure.core/get-in letvar100808 ["statusMessage" :content]))) (letvar100808 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar100808 ["ownerId" :content]))) (letvar100808 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar100808 ["encrypted" :content]))) (letvar100808 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar100808 ["tagSet" :content]))) (letvar100808 "ownerAlias") (clojure.core/assoc :owner-alias (deser-string (clojure.core/get-in letvar100808 ["ownerAlias" :content]))) (letvar100808 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar100808 ["progress" :content]))) (letvar100808 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar100808 ["description" :content]))) (letvar100808 "dataEncryptionKeyId") (clojure.core/assoc :data-encryption-key-id (deser-string (clojure.core/get-in letvar100808 ["dataEncryptionKeyId" :content]))) (letvar100808 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar100808 ["kmsKeyId" :content]))) (letvar100808 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar100808 ["volumeId" :content]))) (letvar100808 "status") (clojure.core/assoc :state (deser-snapshot-state (clojure.core/get-in letvar100808 ["status" :content]))) (letvar100808 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar100808 ["volumeSize" :content]))) (letvar100808 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar100808 ["snapshotId" :content]))))))

(clojure.core/defn- deser-resource-type [input] (clojure.core/get {"vpn-gateway" :vpngateway, "subnet" :subnet, "vpc" :vpc, "spot-instances-request" :spotinstancesrequest, "route-table" :routetable, "image" :image, "snapshot" :snapshot, "vpn-connection" :vpnconnection, "internet-gateway" :internetgateway, "reserved-instances" :reservedinstances, "instance" :instance, "network-interface" :networkinterface, "security-group" :securitygroup, "volume" :volume, "dhcp-options" :dhcpoptions, "customer-gateway" :customergateway, "network-acl" :networkacl} (clojure.core/first input)))

(clojure.core/defn- deser-instance-status-event [input] (clojure.core/let [letvar100891 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "notBefore" (portkey.aws/getback-xml-elem-with-tag "notBefore" input), "notAfter" (portkey.aws/getback-xml-elem-with-tag "notAfter" input)}] (clojure.core/cond-> {} (letvar100891 "code") (clojure.core/assoc :code (deser-event-code (clojure.core/get-in letvar100891 ["code" :content]))) (letvar100891 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar100891 ["description" :content]))) (letvar100891 "notBefore") (clojure.core/assoc :not-before (deser-date-time (clojure.core/get-in letvar100891 ["notBefore" :content]))) (letvar100891 "notAfter") (clojure.core/assoc :not-after (deser-date-time (clojure.core/get-in letvar100891 ["notAfter" :content]))))))

(clojure.core/defn- deser-vpc-peering-connection-options-description [input] (clojure.core/let [letvar100969 {"allowEgressFromLocalClassicLinkToRemoteVpc" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalClassicLinkToRemoteVpc" input), "allowEgressFromLocalVpcToRemoteClassicLink" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalVpcToRemoteClassicLink" input)}] (clojure.core/cond-> {} (letvar100969 "allowEgressFromLocalClassicLinkToRemoteVpc") (clojure.core/assoc :allow-egress-from-local-classic-link-to-remote-vpc (deser-boolean (clojure.core/get-in letvar100969 ["allowEgressFromLocalClassicLinkToRemoteVpc" :content]))) (letvar100969 "allowEgressFromLocalVpcToRemoteClassicLink") (clojure.core/assoc :allow-egress-from-local-vpc-to-remote-classic-link (deser-boolean (clojure.core/get-in letvar100969 ["allowEgressFromLocalVpcToRemoteClassicLink" :content]))))))

(clojure.core/defn- deser-volume-status-name [input] (clojure.core/get {"io-enabled" :ioenabled, "io-performance" :ioperformance} (clojure.core/first input)))

(clojure.core/defn- deser-internet-gateway [input] (clojure.core/let [letvar101052 {"internetGatewayId" (portkey.aws/getback-xml-elem-with-tag "internetGatewayId" input), "attachmentSet" (portkey.aws/getback-xml-elem-with-tag "attachmentSet" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar101052 "internetGatewayId") (clojure.core/assoc :internet-gateway-id (deser-string (clojure.core/get-in letvar101052 ["internetGatewayId" :content]))) (letvar101052 "attachmentSet") (clojure.core/assoc :attachments (deser-internet-gateway-attachment-list (clojure.core/get-in letvar101052 ["attachmentSet" :content]))) (letvar101052 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar101052 ["tagSet" :content]))))))

(clojure.core/defn- deser-vpc [input] (clojure.core/let [letvar101130 {"vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "dhcpOptionsId" (portkey.aws/getback-xml-elem-with-tag "dhcpOptionsId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "instanceTenancy" (portkey.aws/getback-xml-elem-with-tag "instanceTenancy" input), "isDefault" (portkey.aws/getback-xml-elem-with-tag "isDefault" input)}] (clojure.core/cond-> {} (letvar101130 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar101130 ["vpcId" :content]))) (letvar101130 "state") (clojure.core/assoc :state (deser-vpc-state (clojure.core/get-in letvar101130 ["state" :content]))) (letvar101130 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar101130 ["cidrBlock" :content]))) (letvar101130 "dhcpOptionsId") (clojure.core/assoc :dhcp-options-id (deser-string (clojure.core/get-in letvar101130 ["dhcpOptionsId" :content]))) (letvar101130 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar101130 ["tagSet" :content]))) (letvar101130 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar101130 ["instanceTenancy" :content]))) (letvar101130 "isDefault") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar101130 ["isDefault" :content]))))))

(clojure.core/defn- deser-batch-state [input] (clojure.core/get {"submitted" :submitted, "active" :active, "cancelled" :cancelled, "failed" :failed, "cancelled_running" :cancelled-running, "cancelled_terminating" :cancelled-terminating, "modifying" :modifying} (clojure.core/first input)))

(clojure.core/defn- deser-host-instance [input] (clojure.core/let [letvar101213 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input)}] (clojure.core/cond-> {} (letvar101213 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar101213 ["instanceId" :content]))) (letvar101213 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar101213 ["instanceType" :content]))))))

(clojure.core/defn- deser-currency-code-values [input] (clojure.core/get {"USD" :usd} (clojure.core/first input)))

(clojure.core/defn- deser-import-image-task [input] (clojure.core/let [letvar101296 {"architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "snapshotDetailSet" (portkey.aws/getback-xml-elem-with-tag "snapshotDetailSet" input), "licenseType" (portkey.aws/getback-xml-elem-with-tag "licenseType" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar101296 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar101296 ["platform" :content]))) (letvar101296 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar101296 ["importTaskId" :content]))) (letvar101296 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar101296 ["imageId" :content]))) (letvar101296 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar101296 ["statusMessage" :content]))) (letvar101296 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar101296 ["status" :content]))) (letvar101296 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar101296 ["progress" :content]))) (letvar101296 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar101296 ["description" :content]))) (letvar101296 "snapshotDetailSet") (clojure.core/assoc :snapshot-details (deser-snapshot-detail-list (clojure.core/get-in letvar101296 ["snapshotDetailSet" :content]))) (letvar101296 "hypervisor") (clojure.core/assoc :hypervisor (deser-string (clojure.core/get-in letvar101296 ["hypervisor" :content]))) (letvar101296 "architecture") (clojure.core/assoc :architecture (deser-string (clojure.core/get-in letvar101296 ["architecture" :content]))) (letvar101296 "licenseType") (clojure.core/assoc :license-type (deser-string (clojure.core/get-in letvar101296 ["licenseType" :content]))))))

(clojure.core/defn- deser-volume-status-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-details coll))) input))

(clojure.core/defn- deser-summary-status [input] (clojure.core/get {"ok" :ok, "impaired" :impaired, "insufficient-data" :insufficientdata, "not-applicable" :notapplicable, "initializing" :initializing} (clojure.core/first input)))

(clojure.core/defn- deser-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance coll))) input))

(clojure.core/defn- deser-volume-type [input] (clojure.core/get {"standard" :standard, "io1" :io-1, "gp2" :gp-2, "sc1" :sc-1, "st1" :st-1} (clojure.core/first input)))

(clojure.core/defn- deser-customer-gateway [input] (clojure.core/let [letvar101418 {"customerGatewayId" (portkey.aws/getback-xml-elem-with-tag "customerGatewayId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "ipAddress" (portkey.aws/getback-xml-elem-with-tag "ipAddress" input), "bgpAsn" (portkey.aws/getback-xml-elem-with-tag "bgpAsn" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar101418 "customerGatewayId") (clojure.core/assoc :customer-gateway-id (deser-string (clojure.core/get-in letvar101418 ["customerGatewayId" :content]))) (letvar101418 "state") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar101418 ["state" :content]))) (letvar101418 "type") (clojure.core/assoc :type (deser-string (clojure.core/get-in letvar101418 ["type" :content]))) (letvar101418 "ipAddress") (clojure.core/assoc :ip-address (deser-string (clojure.core/get-in letvar101418 ["ipAddress" :content]))) (letvar101418 "bgpAsn") (clojure.core/assoc :bgp-asn (deser-string (clojure.core/get-in letvar101418 ["bgpAsn" :content]))) (letvar101418 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar101418 ["tagSet" :content]))))))

(clojure.core/defn- deser-response-host-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-host-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host coll))) input))

(clojure.core/defn- deser-stale-security-group-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stale-security-group coll))) input))

(clojure.core/defn- deser-volume-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-item coll))) input))

(clojure.core/defn- deser-export-task [input] (clojure.core/let [letvar101564 {"exportTaskId" (portkey.aws/getback-xml-elem-with-tag "exportTaskId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "instanceExport" (portkey.aws/getback-xml-elem-with-tag "instanceExport" input), "exportToS3" (portkey.aws/getback-xml-elem-with-tag "exportToS3" input)}] (clojure.core/cond-> {} (letvar101564 "exportTaskId") (clojure.core/assoc :export-task-id (deser-string (clojure.core/get-in letvar101564 ["exportTaskId" :content]))) (letvar101564 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar101564 ["description" :content]))) (letvar101564 "state") (clojure.core/assoc :state (deser-export-task-state (clojure.core/get-in letvar101564 ["state" :content]))) (letvar101564 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar101564 ["statusMessage" :content]))) (letvar101564 "instanceExport") (clojure.core/assoc :instance-export-details (deser-instance-export-details (clojure.core/get-in letvar101564 ["instanceExport" :content]))) (letvar101564 "exportToS3") (clojure.core/assoc :export-to-s-3-task (deser-export-to-s-3-task (clojure.core/get-in letvar101564 ["exportToS3" :content]))))))

(clojure.core/defn- deser-network-interface-private-ip-address [input] (clojure.core/let [letvar101642 {"privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "primary" (portkey.aws/getback-xml-elem-with-tag "primary" input), "association" (portkey.aws/getback-xml-elem-with-tag "association" input)}] (clojure.core/cond-> {} (letvar101642 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar101642 ["privateIpAddress" :content]))) (letvar101642 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar101642 ["privateDnsName" :content]))) (letvar101642 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar101642 ["primary" :content]))) (letvar101642 "association") (clojure.core/assoc :association (deser-network-interface-association (clojure.core/get-in letvar101642 ["association" :content]))))))

(clojure.core/defn- deser-placement-group-state [input] (clojure.core/get {"pending" :pending, "available" :available, "deleting" :deleting, "deleted" :deleted} (clojure.core/first input)))

(clojure.core/defn- deser-long [input] (java.lang.Long. (clojure.core/first input)))

(clojure.core/defn- deser-volume-status-actions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-action coll))) input))

(clojure.core/defn- deser-vpn-static-route-source [input] (clojure.core/get {"Static" :static} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-endpoint-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-endpoint coll))) input))

(clojure.core/defn- deser-scheduled-instance-recurrence [input] (clojure.core/let [letvar101766 {"frequency" (portkey.aws/getback-xml-elem-with-tag "frequency" input), "interval" (portkey.aws/getback-xml-elem-with-tag "interval" input), "occurrenceDaySet" (portkey.aws/getback-xml-elem-with-tag "occurrenceDaySet" input), "occurrenceRelativeToEnd" (portkey.aws/getback-xml-elem-with-tag "occurrenceRelativeToEnd" input), "occurrenceUnit" (portkey.aws/getback-xml-elem-with-tag "occurrenceUnit" input)}] (clojure.core/cond-> {} (letvar101766 "frequency") (clojure.core/assoc :frequency (deser-string (clojure.core/get-in letvar101766 ["frequency" :content]))) (letvar101766 "interval") (clojure.core/assoc :interval (deser-integer (clojure.core/get-in letvar101766 ["interval" :content]))) (letvar101766 "occurrenceDaySet") (clojure.core/assoc :occurrence-day-set (deser-occurrence-day-set (clojure.core/get-in letvar101766 ["occurrenceDaySet" :content]))) (letvar101766 "occurrenceRelativeToEnd") (clojure.core/assoc :occurrence-relative-to-end (deser-boolean (clojure.core/get-in letvar101766 ["occurrenceRelativeToEnd" :content]))) (letvar101766 "occurrenceUnit") (clojure.core/assoc :occurrence-unit (deser-string (clojure.core/get-in letvar101766 ["occurrenceUnit" :content]))))))

(clojure.core/defn- deser-instance-state [input] (clojure.core/let [letvar101844 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input)}] (clojure.core/cond-> {} (letvar101844 "code") (clojure.core/assoc :code (deser-integer (clojure.core/get-in letvar101844 ["code" :content]))) (letvar101844 "name") (clojure.core/assoc :name (deser-instance-state-name (clojure.core/get-in letvar101844 ["name" :content]))))))

(clojure.core/defn- deser-volume-status-item [input] (clojure.core/let [letvar101922 {"volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "volumeStatus" (portkey.aws/getback-xml-elem-with-tag "volumeStatus" input), "eventsSet" (portkey.aws/getback-xml-elem-with-tag "eventsSet" input), "actionsSet" (portkey.aws/getback-xml-elem-with-tag "actionsSet" input)}] (clojure.core/cond-> {} (letvar101922 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar101922 ["volumeId" :content]))) (letvar101922 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar101922 ["availabilityZone" :content]))) (letvar101922 "volumeStatus") (clojure.core/assoc :volume-status (deser-volume-status-info (clojure.core/get-in letvar101922 ["volumeStatus" :content]))) (letvar101922 "eventsSet") (clojure.core/assoc :events (deser-volume-status-events-list (clojure.core/get-in letvar101922 ["eventsSet" :content]))) (letvar101922 "actionsSet") (clojure.core/assoc :actions (deser-volume-status-actions-list (clojure.core/get-in letvar101922 ["actionsSet" :content]))))))

(clojure.core/defn- deser-spot-instance-state [input] (clojure.core/get {"open" :open, "active" :active, "closed" :closed, "cancelled" :cancelled, "failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-instance-state-name [input] (clojure.core/get {"pending" :pending, "running" :running, "shutting-down" :shuttingdown, "terminated" :terminated, "stopping" :stopping, "stopped" :stopped} (clojure.core/first input)))

(clojure.core/defn- deser-availability-zone-message [input] (clojure.core/let [letvar102010 {"message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar102010 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar102010 ["message" :content]))))))

(clojure.core/defn- deser-unsuccessful-item-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-unsuccessful-item coll))) input))

(clojure.core/defn- deser-virtualization-type [input] (clojure.core/get {"hvm" :hvm, "paravirtual" :paravirtual} (clojure.core/first input)))

(clojure.core/defn- deser-reserved-instances-id [input] (clojure.core/let [letvar102110 {"reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input)}] (clojure.core/cond-> {} (letvar102110 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar102110 ["reservedInstancesId" :content]))))))

(clojure.core/defn- deser-instance-network-interface-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-network-interface-specification coll))) input))

(clojure.core/defn- deser-conversion-task [input] (clojure.core/let [letvar102205 {"conversionTaskId" (portkey.aws/getback-xml-elem-with-tag "conversionTaskId" input), "expirationTime" (portkey.aws/getback-xml-elem-with-tag "expirationTime" input), "importInstance" (portkey.aws/getback-xml-elem-with-tag "importInstance" input), "importVolume" (portkey.aws/getback-xml-elem-with-tag "importVolume" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {:conversion-task-id (deser-string (clojure.core/get-in letvar102205 ["conversionTaskId" :content])), :state (deser-conversion-task-state (clojure.core/get-in letvar102205 ["state" :content]))} (letvar102205 "expirationTime") (clojure.core/assoc :expiration-time (deser-string (clojure.core/get-in letvar102205 ["expirationTime" :content]))) (letvar102205 "importInstance") (clojure.core/assoc :import-instance (deser-import-instance-task-details (clojure.core/get-in letvar102205 ["importInstance" :content]))) (letvar102205 "importVolume") (clojure.core/assoc :import-volume (deser-import-volume-task-details (clojure.core/get-in letvar102205 ["importVolume" :content]))) (letvar102205 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar102205 ["statusMessage" :content]))) (letvar102205 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar102205 ["tagSet" :content]))))))

(clojure.core/defn- deser-bundle-task-error [input] (clojure.core/let [letvar102283 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar102283 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar102283 ["code" :content]))) (letvar102283 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar102283 ["message" :content]))))))

(clojure.core/defn- deser-dhcp-configuration [input] (clojure.core/let [letvar102361 {"key" (portkey.aws/getback-xml-elem-with-tag "key" input), "valueSet" (portkey.aws/getback-xml-elem-with-tag "valueSet" input)}] (clojure.core/cond-> {} (letvar102361 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar102361 ["key" :content]))) (letvar102361 "valueSet") (clojure.core/assoc :values (deser-dhcp-configuration-value-list (clojure.core/get-in letvar102361 ["valueSet" :content]))))))

(clojure.core/defn- deser-block-device-mapping [input] (clojure.core/let [letvar102439 {"virtualName" (portkey.aws/getback-xml-elem-with-tag "virtualName" input), "deviceName" (portkey.aws/getback-xml-elem-with-tag "deviceName" input), "ebs" (portkey.aws/getback-xml-elem-with-tag "ebs" input), "noDevice" (portkey.aws/getback-xml-elem-with-tag "noDevice" input)}] (clojure.core/cond-> {} (letvar102439 "virtualName") (clojure.core/assoc :virtual-name (deser-string (clojure.core/get-in letvar102439 ["virtualName" :content]))) (letvar102439 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar102439 ["deviceName" :content]))) (letvar102439 "ebs") (clojure.core/assoc :ebs (deser-ebs-block-device (clojure.core/get-in letvar102439 ["ebs" :content]))) (letvar102439 "noDevice") (clojure.core/assoc :no-device (deser-string (clojure.core/get-in letvar102439 ["noDevice" :content]))))))

(clojure.core/defn- deser-state [input] (clojure.core/get {"Pending" :pending, "Available" :available, "Deleting" :deleting, "Deleted" :deleted} (clojure.core/first input)))

(clojure.core/defn- deser-export-to-s-3-task [input] (clojure.core/let [letvar102522 {"diskImageFormat" (portkey.aws/getback-xml-elem-with-tag "diskImageFormat" input), "containerFormat" (portkey.aws/getback-xml-elem-with-tag "containerFormat" input), "s3Bucket" (portkey.aws/getback-xml-elem-with-tag "s3Bucket" input), "s3Key" (portkey.aws/getback-xml-elem-with-tag "s3Key" input)}] (clojure.core/cond-> {} (letvar102522 "diskImageFormat") (clojure.core/assoc :disk-image-format (deser-disk-image-format (clojure.core/get-in letvar102522 ["diskImageFormat" :content]))) (letvar102522 "containerFormat") (clojure.core/assoc :container-format (deser-container-format (clojure.core/get-in letvar102522 ["containerFormat" :content]))) (letvar102522 "s3Bucket") (clojure.core/assoc :s-3-bucket (deser-string (clojure.core/get-in letvar102522 ["s3Bucket" :content]))) (letvar102522 "s3Key") (clojure.core/assoc :s-3-key (deser-string (clojure.core/get-in letvar102522 ["s3Key" :content]))))))

(clojure.core/defn- deser-network-acl-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar102617 {"key" (portkey.aws/getback-xml-elem-with-tag "key" input), "value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar102617 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar102617 ["key" :content]))) (letvar102617 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar102617 ["value" :content]))))))

(clojure.core/defn- deser-recurring-charge-frequency [input] (clojure.core/get {"Hourly" :hourly} (clojure.core/first input)))

(clojure.core/defn- deser-platform-values [input] (clojure.core/get {"Windows" :windows} (clojure.core/first input)))

(clojure.core/defn- deser-cancel-spot-fleet-requests-success-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancel-spot-fleet-requests-success-item coll))) input))

(clojure.core/defn- deser-product-code [input] (clojure.core/let [letvar102722 {"productCode" (portkey.aws/getback-xml-elem-with-tag "productCode" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input)}] (clojure.core/cond-> {} (letvar102722 "productCode") (clojure.core/assoc :product-code-id (deser-string (clojure.core/get-in letvar102722 ["productCode" :content]))) (letvar102722 "type") (clojure.core/assoc :product-code-type (deser-product-code-values (clojure.core/get-in letvar102722 ["type" :content]))))))

(clojure.core/defn- deser-port-range [input] (clojure.core/let [letvar102800 {"from" (portkey.aws/getback-xml-elem-with-tag "from" input), "to" (portkey.aws/getback-xml-elem-with-tag "to" input)}] (clojure.core/cond-> {} (letvar102800 "from") (clojure.core/assoc :from (deser-integer (clojure.core/get-in letvar102800 ["from" :content]))) (letvar102800 "to") (clojure.core/assoc :to (deser-integer (clojure.core/get-in letvar102800 ["to" :content]))))))

(clojure.core/defn- deser-vpc-state [input] (clojure.core/get {"pending" :pending, "available" :available} (clojure.core/first input)))

(clojure.core/defn- deser-attachment-status [input] (clojure.core/get {"attaching" :attaching, "attached" :attached, "detaching" :detaching, "detached" :detached} (clojure.core/first input)))

(clojure.core/defn- deser-peering-connection-options [input] (clojure.core/let [letvar102888 {"allowEgressFromLocalClassicLinkToRemoteVpc" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalClassicLinkToRemoteVpc" input), "allowEgressFromLocalVpcToRemoteClassicLink" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalVpcToRemoteClassicLink" input)}] (clojure.core/cond-> {} (letvar102888 "allowEgressFromLocalClassicLinkToRemoteVpc") (clojure.core/assoc :allow-egress-from-local-classic-link-to-remote-vpc (deser-boolean (clojure.core/get-in letvar102888 ["allowEgressFromLocalClassicLinkToRemoteVpc" :content]))) (letvar102888 "allowEgressFromLocalVpcToRemoteClassicLink") (clojure.core/assoc :allow-egress-from-local-vpc-to-remote-classic-link (deser-boolean (clojure.core/get-in letvar102888 ["allowEgressFromLocalVpcToRemoteClassicLink" :content]))))))

(clojure.core/defn- deser-vpc-attachment [input] (clojure.core/let [letvar102966 {"vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar102966 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar102966 ["vpcId" :content]))) (letvar102966 "state") (clojure.core/assoc :state (deser-attachment-status (clojure.core/get-in letvar102966 ["state" :content]))))))

(clojure.core/defn- deser-instance-status [input] (clojure.core/let [letvar103044 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "eventsSet" (portkey.aws/getback-xml-elem-with-tag "eventsSet" input), "instanceState" (portkey.aws/getback-xml-elem-with-tag "instanceState" input), "systemStatus" (portkey.aws/getback-xml-elem-with-tag "systemStatus" input), "instanceStatus" (portkey.aws/getback-xml-elem-with-tag "instanceStatus" input)}] (clojure.core/cond-> {} (letvar103044 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar103044 ["instanceId" :content]))) (letvar103044 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar103044 ["availabilityZone" :content]))) (letvar103044 "eventsSet") (clojure.core/assoc :events (deser-instance-status-event-list (clojure.core/get-in letvar103044 ["eventsSet" :content]))) (letvar103044 "instanceState") (clojure.core/assoc :instance-state (deser-instance-state (clojure.core/get-in letvar103044 ["instanceState" :content]))) (letvar103044 "systemStatus") (clojure.core/assoc :system-status (deser-instance-status-summary (clojure.core/get-in letvar103044 ["systemStatus" :content]))) (letvar103044 "instanceStatus") (clojure.core/assoc :instance-status (deser-instance-status-summary (clojure.core/get-in letvar103044 ["instanceStatus" :content]))))))

(clojure.core/defn- deser-spot-fleet-launch-specification [input] (clojure.core/let [letvar103122 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "addressingType" (portkey.aws/getback-xml-elem-with-tag "addressingType" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "placement" (portkey.aws/getback-xml-elem-with-tag "placement" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "userData" (portkey.aws/getback-xml-elem-with-tag "userData" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "weightedCapacity" (portkey.aws/getback-xml-elem-with-tag "weightedCapacity" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input)}] (clojure.core/cond-> {} (letvar103122 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar103122 ["kernelId" :content]))) (letvar103122 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar103122 ["imageId" :content]))) (letvar103122 "placement") (clojure.core/assoc :placement (deser-spot-placement (clojure.core/get-in letvar103122 ["placement" :content]))) (letvar103122 "addressingType") (clojure.core/assoc :addressing-type (deser-string (clojure.core/get-in letvar103122 ["addressingType" :content]))) (letvar103122 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar103122 ["subnetId" :content]))) (letvar103122 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar103122 ["groupSet" :content]))) (letvar103122 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar103122 ["ebsOptimized" :content]))) (letvar103122 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar103122 ["instanceType" :content]))) (letvar103122 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar103122 ["keyName" :content]))) (letvar103122 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar103122 ["spotPrice" :content]))) (letvar103122 "monitoring") (clojure.core/assoc :monitoring (deser-spot-fleet-monitoring (clojure.core/get-in letvar103122 ["monitoring" :content]))) (letvar103122 "weightedCapacity") (clojure.core/assoc :weighted-capacity (deser-double (clojure.core/get-in letvar103122 ["weightedCapacity" :content]))) (letvar103122 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar103122 ["blockDeviceMapping" :content]))) (letvar103122 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar103122 ["ramdiskId" :content]))) (letvar103122 "userData") (clojure.core/assoc :user-data (deser-string (clojure.core/get-in letvar103122 ["userData" :content]))) (letvar103122 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile-specification (clojure.core/get-in letvar103122 ["iamInstanceProfile" :content]))) (letvar103122 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-specification-list (clojure.core/get-in letvar103122 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-ip-range [input] (clojure.core/let [letvar103200 {"cidrIp" (portkey.aws/getback-xml-elem-with-tag "cidrIp" input)}] (clojure.core/cond-> {} (letvar103200 "cidrIp") (clojure.core/assoc :cidr-ip (deser-string (clojure.core/get-in letvar103200 ["cidrIp" :content]))))))

(clojure.core/defn- deser-stale-security-group [input] (clojure.core/let [letvar103278 {"groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "staleIpPermissions" (portkey.aws/getback-xml-elem-with-tag "staleIpPermissions" input), "staleIpPermissionsEgress" (portkey.aws/getback-xml-elem-with-tag "staleIpPermissionsEgress" input)}] (clojure.core/cond-> {:group-id (deser-string (clojure.core/get-in letvar103278 ["groupId" :content]))} (letvar103278 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar103278 ["groupName" :content]))) (letvar103278 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar103278 ["description" :content]))) (letvar103278 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar103278 ["vpcId" :content]))) (letvar103278 "staleIpPermissions") (clojure.core/assoc :stale-ip-permissions (deser-stale-ip-permission-set (clojure.core/get-in letvar103278 ["staleIpPermissions" :content]))) (letvar103278 "staleIpPermissionsEgress") (clojure.core/assoc :stale-ip-permissions-egress (deser-stale-ip-permission-set (clojure.core/get-in letvar103278 ["staleIpPermissionsEgress" :content]))))))

(clojure.core/defn- deser-import-snapshot-task [input] (clojure.core/let [letvar103356 {"importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "snapshotTaskDetail" (portkey.aws/getback-xml-elem-with-tag "snapshotTaskDetail" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar103356 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar103356 ["importTaskId" :content]))) (letvar103356 "snapshotTaskDetail") (clojure.core/assoc :snapshot-task-detail (deser-snapshot-task-detail (clojure.core/get-in letvar103356 ["snapshotTaskDetail" :content]))) (letvar103356 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar103356 ["description" :content]))))))

(clojure.core/defn- deser-container-format [input] (clojure.core/get {"ova" :ova} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-peering-connection-state-reason [input] (clojure.core/let [letvar103439 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar103439 "code") (clojure.core/assoc :code (deser-vpc-peering-connection-state-reason-code (clojure.core/get-in letvar103439 ["code" :content]))) (letvar103439 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar103439 ["message" :content]))))))

(clojure.core/defn- deser-instance [input] (clojure.core/let [letvar103517 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "stateReason" (portkey.aws/getback-xml-elem-with-tag "stateReason" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input), "instanceLifecycle" (portkey.aws/getback-xml-elem-with-tag "instanceLifecycle" input), "placement" (portkey.aws/getback-xml-elem-with-tag "placement" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "virtualizationType" (portkey.aws/getback-xml-elem-with-tag "virtualizationType" input), "launchTime" (portkey.aws/getback-xml-elem-with-tag "launchTime" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "rootDeviceType" (portkey.aws/getback-xml-elem-with-tag "rootDeviceType" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "amiLaunchIndex" (portkey.aws/getback-xml-elem-with-tag "amiLaunchIndex" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "reason" (portkey.aws/getback-xml-elem-with-tag "reason" input), "instanceState" (portkey.aws/getback-xml-elem-with-tag "instanceState" input), "networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input), "rootDeviceName" (portkey.aws/getback-xml-elem-with-tag "rootDeviceName" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "dnsName" (portkey.aws/getback-xml-elem-with-tag "dnsName" input), "ipAddress" (portkey.aws/getback-xml-elem-with-tag "ipAddress" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input)}] (clojure.core/cond-> {} (letvar103517 "dnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar103517 ["dnsName" :content]))) (letvar103517 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar103517 ["kernelId" :content]))) (letvar103517 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar103517 ["spotInstanceRequestId" :content]))) (letvar103517 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar103517 ["instanceId" :content]))) (letvar103517 "instanceLifecycle") (clojure.core/assoc :instance-lifecycle (deser-instance-lifecycle-type (clojure.core/get-in letvar103517 ["instanceLifecycle" :content]))) (letvar103517 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar103517 ["platform" :content]))) (letvar103517 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar103517 ["imageId" :content]))) (letvar103517 "placement") (clojure.core/assoc :placement (deser-placement (clojure.core/get-in letvar103517 ["placement" :content]))) (letvar103517 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar103517 ["subnetId" :content]))) (letvar103517 "rootDeviceType") (clojure.core/assoc :root-device-type (deser-device-type (clojure.core/get-in letvar103517 ["rootDeviceType" :content]))) (letvar103517 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar103517 ["groupSet" :content]))) (letvar103517 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar103517 ["ebsOptimized" :content]))) (letvar103517 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar103517 ["instanceType" :content]))) (letvar103517 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-string (clojure.core/get-in letvar103517 ["sriovNetSupport" :content]))) (letvar103517 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar103517 ["tagSet" :content]))) (letvar103517 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar103517 ["sourceDestCheck" :content]))) (letvar103517 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar103517 ["keyName" :content]))) (letvar103517 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar103517 ["privateDnsName" :content]))) (letvar103517 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar103517 ["vpcId" :content]))) (letvar103517 "monitoring") (clojure.core/assoc :monitoring (deser-monitoring (clojure.core/get-in letvar103517 ["monitoring" :content]))) (letvar103517 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-instance-block-device-mapping-list (clojure.core/get-in letvar103517 ["blockDeviceMapping" :content]))) (letvar103517 "hypervisor") (clojure.core/assoc :hypervisor (deser-hypervisor-type (clojure.core/get-in letvar103517 ["hypervisor" :content]))) (letvar103517 "architecture") (clojure.core/assoc :architecture (deser-architecture-values (clojure.core/get-in letvar103517 ["architecture" :content]))) (letvar103517 "virtualizationType") (clojure.core/assoc :virtualization-type (deser-virtualization-type (clojure.core/get-in letvar103517 ["virtualizationType" :content]))) (letvar103517 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar103517 ["productCodes" :content]))) (letvar103517 "instanceState") (clojure.core/assoc :state (deser-instance-state (clojure.core/get-in letvar103517 ["instanceState" :content]))) (letvar103517 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-string (clojure.core/get-in letvar103517 ["rootDeviceName" :content]))) (letvar103517 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar103517 ["ramdiskId" :content]))) (letvar103517 "launchTime") (clojure.core/assoc :launch-time (deser-date-time (clojure.core/get-in letvar103517 ["launchTime" :content]))) (letvar103517 "ipAddress") (clojure.core/assoc :public-ip-address (deser-string (clojure.core/get-in letvar103517 ["ipAddress" :content]))) (letvar103517 "stateReason") (clojure.core/assoc :state-reason (deser-state-reason (clojure.core/get-in letvar103517 ["stateReason" :content]))) (letvar103517 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile (clojure.core/get-in letvar103517 ["iamInstanceProfile" :content]))) (letvar103517 "amiLaunchIndex") (clojure.core/assoc :ami-launch-index (deser-integer (clojure.core/get-in letvar103517 ["amiLaunchIndex" :content]))) (letvar103517 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar103517 ["clientToken" :content]))) (letvar103517 "reason") (clojure.core/assoc :state-transition-reason (deser-string (clojure.core/get-in letvar103517 ["reason" :content]))) (letvar103517 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar103517 ["privateIpAddress" :content]))) (letvar103517 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-list (clojure.core/get-in letvar103517 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-nat-gateway-state [input] (clojure.core/get {"pending" :pending, "failed" :failed, "available" :available, "deleting" :deleting, "deleted" :deleted} (clojure.core/first input)))

(clojure.core/defn- deser-block-device-mapping-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-block-device-mapping coll))) input))

(clojure.core/defn- deser-blob [input] (portkey.aws/base64-decode (clojure.core/first input)))

(clojure.core/defn- deser-instance-block-device-mapping-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-block-device-mapping coll))) input))

(clojure.core/defn- deser-security-group-reference [input] (clojure.core/let [letvar103636 {"groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "referencingVpcId" (portkey.aws/getback-xml-elem-with-tag "referencingVpcId" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input)}] (clojure.core/cond-> {:group-id (deser-string (clojure.core/get-in letvar103636 ["groupId" :content])), :referencing-vpc-id (deser-string (clojure.core/get-in letvar103636 ["referencingVpcId" :content]))} (letvar103636 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar103636 ["vpcPeeringConnectionId" :content]))))))

(clojure.core/defn- deser-classic-link-dns-support-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-classic-link-dns-support coll))) input))

(clojure.core/defn- deser-gateway-type [input] (clojure.core/get {"ipsec.1" :ipsec-1} (clojure.core/first input)))

(clojure.core/defn- deser-image [input] (clojure.core/let [letvar103736 {"creationDate" (portkey.aws/getback-xml-elem-with-tag "creationDate" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "stateReason" (portkey.aws/getback-xml-elem-with-tag "stateReason" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "imageLocation" (portkey.aws/getback-xml-elem-with-tag "imageLocation" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input), "imageOwnerId" (portkey.aws/getback-xml-elem-with-tag "imageOwnerId" input), "virtualizationType" (portkey.aws/getback-xml-elem-with-tag "virtualizationType" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "imageState" (portkey.aws/getback-xml-elem-with-tag "imageState" input), "rootDeviceType" (portkey.aws/getback-xml-elem-with-tag "rootDeviceType" input), "imageType" (portkey.aws/getback-xml-elem-with-tag "imageType" input), "imageOwnerAlias" (portkey.aws/getback-xml-elem-with-tag "imageOwnerAlias" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "rootDeviceName" (portkey.aws/getback-xml-elem-with-tag "rootDeviceName" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "isPublic" (portkey.aws/getback-xml-elem-with-tag "isPublic" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input)}] (clojure.core/cond-> {} (letvar103736 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar103736 ["kernelId" :content]))) (letvar103736 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar103736 ["platform" :content]))) (letvar103736 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar103736 ["imageId" :content]))) (letvar103736 "rootDeviceType") (clojure.core/assoc :root-device-type (deser-device-type (clojure.core/get-in letvar103736 ["rootDeviceType" :content]))) (letvar103736 "imageOwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar103736 ["imageOwnerId" :content]))) (letvar103736 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-string (clojure.core/get-in letvar103736 ["sriovNetSupport" :content]))) (letvar103736 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar103736 ["tagSet" :content]))) (letvar103736 "isPublic") (clojure.core/assoc :public (deser-boolean (clojure.core/get-in letvar103736 ["isPublic" :content]))) (letvar103736 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar103736 ["description" :content]))) (letvar103736 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar103736 ["blockDeviceMapping" :content]))) (letvar103736 "hypervisor") (clojure.core/assoc :hypervisor (deser-hypervisor-type (clojure.core/get-in letvar103736 ["hypervisor" :content]))) (letvar103736 "architecture") (clojure.core/assoc :architecture (deser-architecture-values (clojure.core/get-in letvar103736 ["architecture" :content]))) (letvar103736 "imageOwnerAlias") (clojure.core/assoc :image-owner-alias (deser-string (clojure.core/get-in letvar103736 ["imageOwnerAlias" :content]))) (letvar103736 "creationDate") (clojure.core/assoc :creation-date (deser-string (clojure.core/get-in letvar103736 ["creationDate" :content]))) (letvar103736 "virtualizationType") (clojure.core/assoc :virtualization-type (deser-virtualization-type (clojure.core/get-in letvar103736 ["virtualizationType" :content]))) (letvar103736 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar103736 ["productCodes" :content]))) (letvar103736 "imageLocation") (clojure.core/assoc :image-location (deser-string (clojure.core/get-in letvar103736 ["imageLocation" :content]))) (letvar103736 "imageState") (clojure.core/assoc :state (deser-image-state (clojure.core/get-in letvar103736 ["imageState" :content]))) (letvar103736 "imageType") (clojure.core/assoc :image-type (deser-image-type-values (clojure.core/get-in letvar103736 ["imageType" :content]))) (letvar103736 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-string (clojure.core/get-in letvar103736 ["rootDeviceName" :content]))) (letvar103736 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar103736 ["ramdiskId" :content]))) (letvar103736 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar103736 ["name" :content]))) (letvar103736 "stateReason") (clojure.core/assoc :state-reason (deser-state-reason (clojure.core/get-in letvar103736 ["stateReason" :content]))))))

(clojure.core/defn- deser-ip-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-range coll))) input))

(clojure.core/defn- deser-image-type-values [input] (clojure.core/get {"machine" :machine, "kernel" :kernel, "ramdisk" :ramdisk} (clojure.core/first input)))

(clojure.core/defn- deser-classic-link-instance [input] (clojure.core/let [letvar103836 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar103836 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar103836 ["instanceId" :content]))) (letvar103836 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar103836 ["vpcId" :content]))) (letvar103836 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar103836 ["groupSet" :content]))) (letvar103836 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar103836 ["tagSet" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancel-spot-fleet-requests-error-item coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-modification coll))) input))

(clojure.core/defn- deser-network-acl-entry-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl-entry coll))) input))

(clojure.core/defn- deser-network-interface-private-ip-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface-private-ip-address coll))) input))

(clojure.core/defn- deser-conversion-task-state [input] (clojure.core/get {"active" :active, "cancelling" :cancelling, "cancelled" :cancelled, "completed" :completed} (clojure.core/first input)))

(clojure.core/defn- deser-nat-gateway-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-nat-gateway-address coll))) input))

(clojure.core/defn- deser-reserved-instances-modification [input] (clojure.core/let [letvar104004 {"updateDate" (portkey.aws/getback-xml-elem-with-tag "updateDate" input), "createDate" (portkey.aws/getback-xml-elem-with-tag "createDate" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "effectiveDate" (portkey.aws/getback-xml-elem-with-tag "effectiveDate" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "reservedInstancesSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesSet" input), "modificationResultSet" (portkey.aws/getback-xml-elem-with-tag "modificationResultSet" input), "reservedInstancesModificationId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesModificationId" input)}] (clojure.core/cond-> {} (letvar104004 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar104004 ["statusMessage" :content]))) (letvar104004 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar104004 ["createDate" :content]))) (letvar104004 "reservedInstancesModificationId") (clojure.core/assoc :reserved-instances-modification-id (deser-string (clojure.core/get-in letvar104004 ["reservedInstancesModificationId" :content]))) (letvar104004 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar104004 ["status" :content]))) (letvar104004 "modificationResultSet") (clojure.core/assoc :modification-results (deser-reserved-instances-modification-result-list (clojure.core/get-in letvar104004 ["modificationResultSet" :content]))) (letvar104004 "reservedInstancesSet") (clojure.core/assoc :reserved-instances-ids (deser-reserved-intances-ids (clojure.core/get-in letvar104004 ["reservedInstancesSet" :content]))) (letvar104004 "updateDate") (clojure.core/assoc :update-date (deser-date-time (clojure.core/get-in letvar104004 ["updateDate" :content]))) (letvar104004 "effectiveDate") (clojure.core/assoc :effective-date (deser-date-time (clojure.core/get-in letvar104004 ["effectiveDate" :content]))) (letvar104004 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar104004 ["clientToken" :content]))))))

(clojure.core/defn- deser-listing-status [input] (clojure.core/get {"active" :active, "pending" :pending, "cancelled" :cancelled, "closed" :closed} (clojure.core/first input)))

(clojure.core/defn- deser-classic-link-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-classic-link-instance coll))) input))

(clojure.core/defn- deser-import-image-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-image-task coll))) input))

(clojure.core/defn- deser-route-table-association-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route-table-association coll))) input))

(clojure.core/defn- deser-offering-type-values [input] (clojure.core/get {"Heavy Utilization" :heavy-utilization, "Medium Utilization" :medium-utilization, "Light Utilization" :light-utilization, "No Upfront" :no-upfront, "Partial Upfront" :partial-upfront, "All Upfront" :all-upfront} (clojure.core/first input)))

(clojure.core/defn- deser-float [input] (java.lang.Float. (clojure.core/first input)))

(clojure.core/defn- deser-network-acl [input] (clojure.core/let [letvar104145 {"networkAclId" (portkey.aws/getback-xml-elem-with-tag "networkAclId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "default" (portkey.aws/getback-xml-elem-with-tag "default" input), "entrySet" (portkey.aws/getback-xml-elem-with-tag "entrySet" input), "associationSet" (portkey.aws/getback-xml-elem-with-tag "associationSet" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar104145 "networkAclId") (clojure.core/assoc :network-acl-id (deser-string (clojure.core/get-in letvar104145 ["networkAclId" :content]))) (letvar104145 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar104145 ["vpcId" :content]))) (letvar104145 "default") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar104145 ["default" :content]))) (letvar104145 "entrySet") (clojure.core/assoc :entries (deser-network-acl-entry-list (clojure.core/get-in letvar104145 ["entrySet" :content]))) (letvar104145 "associationSet") (clojure.core/assoc :associations (deser-network-acl-association-list (clojure.core/get-in letvar104145 ["associationSet" :content]))) (letvar104145 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar104145 ["tagSet" :content]))))))

(clojure.core/defn- deser-volume-attachment [input] (clojure.core/let [letvar104223 {"volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "device" (portkey.aws/getback-xml-elem-with-tag "device" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input)}] (clojure.core/cond-> {} (letvar104223 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar104223 ["volumeId" :content]))) (letvar104223 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar104223 ["instanceId" :content]))) (letvar104223 "device") (clojure.core/assoc :device (deser-string (clojure.core/get-in letvar104223 ["device" :content]))) (letvar104223 "status") (clojure.core/assoc :state (deser-volume-attachment-state (clojure.core/get-in letvar104223 ["status" :content]))) (letvar104223 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar104223 ["attachTime" :content]))) (letvar104223 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar104223 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-route-table-association [input] (clojure.core/let [letvar104301 {"routeTableAssociationId" (portkey.aws/getback-xml-elem-with-tag "routeTableAssociationId" input), "routeTableId" (portkey.aws/getback-xml-elem-with-tag "routeTableId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "main" (portkey.aws/getback-xml-elem-with-tag "main" input)}] (clojure.core/cond-> {} (letvar104301 "routeTableAssociationId") (clojure.core/assoc :route-table-association-id (deser-string (clojure.core/get-in letvar104301 ["routeTableAssociationId" :content]))) (letvar104301 "routeTableId") (clojure.core/assoc :route-table-id (deser-string (clojure.core/get-in letvar104301 ["routeTableId" :content]))) (letvar104301 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar104301 ["subnetId" :content]))) (letvar104301 "main") (clojure.core/assoc :main (deser-boolean (clojure.core/get-in letvar104301 ["main" :content]))))))

(clojure.core/defn- deser-vpn-connection [input] (clojure.core/let [letvar104379 {"vpnGatewayId" (portkey.aws/getback-xml-elem-with-tag "vpnGatewayId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "customerGatewayId" (portkey.aws/getback-xml-elem-with-tag "customerGatewayId" input), "vgwTelemetry" (portkey.aws/getback-xml-elem-with-tag "vgwTelemetry" input), "customerGatewayConfiguration" (portkey.aws/getback-xml-elem-with-tag "customerGatewayConfiguration" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "vpnConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpnConnectionId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "options" (portkey.aws/getback-xml-elem-with-tag "options" input), "routes" (portkey.aws/getback-xml-elem-with-tag "routes" input)}] (clojure.core/cond-> {} (letvar104379 "type") (clojure.core/assoc :type (deser-gateway-type (clojure.core/get-in letvar104379 ["type" :content]))) (letvar104379 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar104379 ["tagSet" :content]))) (letvar104379 "routes") (clojure.core/assoc :routes (deser-vpn-static-route-list (clojure.core/get-in letvar104379 ["routes" :content]))) (letvar104379 "customerGatewayId") (clojure.core/assoc :customer-gateway-id (deser-string (clojure.core/get-in letvar104379 ["customerGatewayId" :content]))) (letvar104379 "vpnGatewayId") (clojure.core/assoc :vpn-gateway-id (deser-string (clojure.core/get-in letvar104379 ["vpnGatewayId" :content]))) (letvar104379 "vgwTelemetry") (clojure.core/assoc :vgw-telemetry (deser-vgw-telemetry-list (clojure.core/get-in letvar104379 ["vgwTelemetry" :content]))) (letvar104379 "vpnConnectionId") (clojure.core/assoc :vpn-connection-id (deser-string (clojure.core/get-in letvar104379 ["vpnConnectionId" :content]))) (letvar104379 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar104379 ["state" :content]))) (letvar104379 "options") (clojure.core/assoc :options (deser-vpn-connection-options (clojure.core/get-in letvar104379 ["options" :content]))) (letvar104379 "customerGatewayConfiguration") (clojure.core/assoc :customer-gateway-configuration (deser-string (clojure.core/get-in letvar104379 ["customerGatewayConfiguration" :content]))))))

(clojure.core/defn- deser-region [input] (clojure.core/let [letvar104457 {"regionName" (portkey.aws/getback-xml-elem-with-tag "regionName" input), "regionEndpoint" (portkey.aws/getback-xml-elem-with-tag "regionEndpoint" input)}] (clojure.core/cond-> {} (letvar104457 "regionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar104457 ["regionName" :content]))) (letvar104457 "regionEndpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar104457 ["regionEndpoint" :content]))))))

(clojure.core/defn- deser-state-reason [input] (clojure.core/let [letvar104535 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar104535 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar104535 ["code" :content]))) (letvar104535 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar104535 ["message" :content]))))))

(clojure.core/defn- deser-iam-instance-profile [input] (clojure.core/let [letvar104613 {"arn" (portkey.aws/getback-xml-elem-with-tag "arn" input), "id" (portkey.aws/getback-xml-elem-with-tag "id" input)}] (clojure.core/cond-> {} (letvar104613 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar104613 ["arn" :content]))) (letvar104613 "id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar104613 ["id" :content]))))))

(clojure.core/defn- deser-scheduled-instance-availability [input] (clojure.core/let [letvar104691 {"firstSlotStartTime" (portkey.aws/getback-xml-elem-with-tag "firstSlotStartTime" input), "maxTermDurationInDays" (portkey.aws/getback-xml-elem-with-tag "maxTermDurationInDays" input), "networkPlatform" (portkey.aws/getback-xml-elem-with-tag "networkPlatform" input), "hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "purchaseToken" (portkey.aws/getback-xml-elem-with-tag "purchaseToken" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "recurrence" (portkey.aws/getback-xml-elem-with-tag "recurrence" input), "availableInstanceCount" (portkey.aws/getback-xml-elem-with-tag "availableInstanceCount" input), "totalScheduledInstanceHours" (portkey.aws/getback-xml-elem-with-tag "totalScheduledInstanceHours" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "slotDurationInHours" (portkey.aws/getback-xml-elem-with-tag "slotDurationInHours" input), "minTermDurationInDays" (portkey.aws/getback-xml-elem-with-tag "minTermDurationInDays" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input)}] (clojure.core/cond-> {} (letvar104691 "maxTermDurationInDays") (clojure.core/assoc :max-term-duration-in-days (deser-integer (clojure.core/get-in letvar104691 ["maxTermDurationInDays" :content]))) (letvar104691 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar104691 ["platform" :content]))) (letvar104691 "networkPlatform") (clojure.core/assoc :network-platform (deser-string (clojure.core/get-in letvar104691 ["networkPlatform" :content]))) (letvar104691 "recurrence") (clojure.core/assoc :recurrence (deser-scheduled-instance-recurrence (clojure.core/get-in letvar104691 ["recurrence" :content]))) (letvar104691 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar104691 ["instanceType" :content]))) (letvar104691 "totalScheduledInstanceHours") (clojure.core/assoc :total-scheduled-instance-hours (deser-integer (clojure.core/get-in letvar104691 ["totalScheduledInstanceHours" :content]))) (letvar104691 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar104691 ["availabilityZone" :content]))) (letvar104691 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar104691 ["hourlyPrice" :content]))) (letvar104691 "purchaseToken") (clojure.core/assoc :purchase-token (deser-string (clojure.core/get-in letvar104691 ["purchaseToken" :content]))) (letvar104691 "slotDurationInHours") (clojure.core/assoc :slot-duration-in-hours (deser-integer (clojure.core/get-in letvar104691 ["slotDurationInHours" :content]))) (letvar104691 "firstSlotStartTime") (clojure.core/assoc :first-slot-start-time (deser-date-time (clojure.core/get-in letvar104691 ["firstSlotStartTime" :content]))) (letvar104691 "availableInstanceCount") (clojure.core/assoc :available-instance-count (deser-integer (clojure.core/get-in letvar104691 ["availableInstanceCount" :content]))) (letvar104691 "minTermDurationInDays") (clojure.core/assoc :min-term-duration-in-days (deser-integer (clojure.core/get-in letvar104691 ["minTermDurationInDays" :content]))))))

(clojure.core/defn- deser-active-instance [input] (clojure.core/let [letvar104769 {"instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input)}] (clojure.core/cond-> {} (letvar104769 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar104769 ["instanceType" :content]))) (letvar104769 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar104769 ["instanceId" :content]))) (letvar104769 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar104769 ["spotInstanceRequestId" :content]))))))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-account-attribute-value [input] (clojure.core/let [letvar104864 {"attributeValue" (portkey.aws/getback-xml-elem-with-tag "attributeValue" input)}] (clojure.core/cond-> {} (letvar104864 "attributeValue") (clojure.core/assoc :attribute-value (deser-string (clojure.core/get-in letvar104864 ["attributeValue" :content]))))))

(clojure.core/defn- deser-vpc-peering-connection-state-reason-code [input] (clojure.core/get {"expired" :expired, "deleting" :deleting, "failed" :failed, "initiating-request" :initiatingrequest, "provisioning" :provisioning, "deleted" :deleted, "pending-acceptance" :pendingacceptance, "active" :active, "rejected" :rejected} (clojure.core/first input)))

(clojure.core/defn- deser-launch-permission [input] (clojure.core/let [letvar104947 {"userId" (portkey.aws/getback-xml-elem-with-tag "userId" input), "group" (portkey.aws/getback-xml-elem-with-tag "group" input)}] (clojure.core/cond-> {} (letvar104947 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar104947 ["userId" :content]))) (letvar104947 "group") (clojure.core/assoc :group (deser-permission-group (clojure.core/get-in letvar104947 ["group" :content]))))))

(clojure.core/defn- deser-internet-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-internet-gateway coll))) input))

(clojure.core/defn- deser-account-attribute [input] (clojure.core/let [letvar105042 {"attributeName" (portkey.aws/getback-xml-elem-with-tag "attributeName" input), "attributeValueSet" (portkey.aws/getback-xml-elem-with-tag "attributeValueSet" input)}] (clojure.core/cond-> {} (letvar105042 "attributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar105042 ["attributeName" :content]))) (letvar105042 "attributeValueSet") (clojure.core/assoc :attribute-values (deser-account-attribute-value-list (clojure.core/get-in letvar105042 ["attributeValueSet" :content]))))))

(clojure.core/defn- deser-host [input] (clojure.core/let [letvar105120 {"availableCapacity" (portkey.aws/getback-xml-elem-with-tag "availableCapacity" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "hostReservationId" (portkey.aws/getback-xml-elem-with-tag "hostReservationId" input), "hostProperties" (portkey.aws/getback-xml-elem-with-tag "hostProperties" input), "hostId" (portkey.aws/getback-xml-elem-with-tag "hostId" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "instances" (portkey.aws/getback-xml-elem-with-tag "instances" input), "autoPlacement" (portkey.aws/getback-xml-elem-with-tag "autoPlacement" input)}] (clojure.core/cond-> {} (letvar105120 "hostProperties") (clojure.core/assoc :host-properties (deser-host-properties (clojure.core/get-in letvar105120 ["hostProperties" :content]))) (letvar105120 "hostId") (clojure.core/assoc :host-id (deser-string (clojure.core/get-in letvar105120 ["hostId" :content]))) (letvar105120 "availableCapacity") (clojure.core/assoc :available-capacity (deser-available-capacity (clojure.core/get-in letvar105120 ["availableCapacity" :content]))) (letvar105120 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar105120 ["availabilityZone" :content]))) (letvar105120 "autoPlacement") (clojure.core/assoc :auto-placement (deser-auto-placement (clojure.core/get-in letvar105120 ["autoPlacement" :content]))) (letvar105120 "hostReservationId") (clojure.core/assoc :host-reservation-id (deser-string (clojure.core/get-in letvar105120 ["hostReservationId" :content]))) (letvar105120 "state") (clojure.core/assoc :state (deser-allocation-state (clojure.core/get-in letvar105120 ["state" :content]))) (letvar105120 "instances") (clojure.core/assoc :instances (deser-host-instance-list (clojure.core/get-in letvar105120 ["instances" :content]))) (letvar105120 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar105120 ["clientToken" :content]))))))

(clojure.core/defn- deser-placement-group [input] (clojure.core/let [letvar105198 {"groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "strategy" (portkey.aws/getback-xml-elem-with-tag "strategy" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar105198 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar105198 ["groupName" :content]))) (letvar105198 "strategy") (clojure.core/assoc :strategy (deser-placement-strategy (clojure.core/get-in letvar105198 ["strategy" :content]))) (letvar105198 "state") (clojure.core/assoc :state (deser-placement-group-state (clojure.core/get-in letvar105198 ["state" :content]))))))

(clojure.core/defn- deser-private-ip-address-specification [input] (clojure.core/let [letvar105276 {"privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "primary" (portkey.aws/getback-xml-elem-with-tag "primary" input)}] (clojure.core/cond-> {:private-ip-address (deser-string (clojure.core/get-in letvar105276 ["privateIpAddress" :content]))} (letvar105276 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar105276 ["primary" :content]))))))

(clojure.core/defn- deser-reservation-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reservation coll))) input))

(clojure.core/defn- deser-user-id-group-pair [input] (clojure.core/let [letvar105371 {"userId" (portkey.aws/getback-xml-elem-with-tag "userId" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input), "peeringStatus" (portkey.aws/getback-xml-elem-with-tag "peeringStatus" input)}] (clojure.core/cond-> {} (letvar105371 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar105371 ["userId" :content]))) (letvar105371 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar105371 ["groupName" :content]))) (letvar105371 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar105371 ["groupId" :content]))) (letvar105371 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar105371 ["vpcId" :content]))) (letvar105371 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar105371 ["vpcPeeringConnectionId" :content]))) (letvar105371 "peeringStatus") (clojure.core/assoc :peering-status (deser-string (clojure.core/get-in letvar105371 ["peeringStatus" :content]))))))

(clojure.core/defn- deser-telemetry-status [input] (clojure.core/get {"UP" :up, "DOWN" :down} (clojure.core/first input)))

(clojure.core/defn- deser-vpn-gateway [input] (clojure.core/let [letvar105454 {"vpnGatewayId" (portkey.aws/getback-xml-elem-with-tag "vpnGatewayId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "attachments" (portkey.aws/getback-xml-elem-with-tag "attachments" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar105454 "vpnGatewayId") (clojure.core/assoc :vpn-gateway-id (deser-string (clojure.core/get-in letvar105454 ["vpnGatewayId" :content]))) (letvar105454 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar105454 ["state" :content]))) (letvar105454 "type") (clojure.core/assoc :type (deser-gateway-type (clojure.core/get-in letvar105454 ["type" :content]))) (letvar105454 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar105454 ["availabilityZone" :content]))) (letvar105454 "attachments") (clojure.core/assoc :vpc-attachments (deser-vpc-attachment-list (clojure.core/get-in letvar105454 ["attachments" :content]))) (letvar105454 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar105454 ["tagSet" :content]))))))

(clojure.core/defn- deser-network-interface-association [input] (clojure.core/let [letvar105532 {"publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "publicDnsName" (portkey.aws/getback-xml-elem-with-tag "publicDnsName" input), "ipOwnerId" (portkey.aws/getback-xml-elem-with-tag "ipOwnerId" input), "allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input)}] (clojure.core/cond-> {} (letvar105532 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar105532 ["publicIp" :content]))) (letvar105532 "publicDnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar105532 ["publicDnsName" :content]))) (letvar105532 "ipOwnerId") (clojure.core/assoc :ip-owner-id (deser-string (clojure.core/get-in letvar105532 ["ipOwnerId" :content]))) (letvar105532 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar105532 ["allocationId" :content]))) (letvar105532 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar105532 ["associationId" :content]))))))

(clojure.core/defn- deser-date-time [input] (clojure.core/first input))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__28401__auto__ (clojure.core/first input)] (clojure.core/cond (clojure.core/= "true" boolstr__28401__auto__) true (clojure.core/= "false" boolstr__28401__auto__) false)))

(clojure.core/defn- deser-instance-network-interface-specification [input] (clojure.core/let [letvar105614 {"associatePublicIpAddress" (portkey.aws/getback-xml-elem-with-tag "associatePublicIpAddress" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "privateIpAddressesSet" (portkey.aws/getback-xml-elem-with-tag "privateIpAddressesSet" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "secondaryPrivateIpAddressCount" (portkey.aws/getback-xml-elem-with-tag "secondaryPrivateIpAddressCount" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "SecurityGroupId" (portkey.aws/getback-xml-elem-with-tag "SecurityGroupId" input), "deviceIndex" (portkey.aws/getback-xml-elem-with-tag "deviceIndex" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar105614 "associatePublicIpAddress") (clojure.core/assoc :associate-public-ip-address (deser-boolean (clojure.core/get-in letvar105614 ["associatePublicIpAddress" :content]))) (letvar105614 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar105614 ["subnetId" :content]))) (letvar105614 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar105614 ["networkInterfaceId" :content]))) (letvar105614 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar105614 ["deviceIndex" :content]))) (letvar105614 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar105614 ["description" :content]))) (letvar105614 "SecurityGroupId") (clojure.core/assoc :groups (deser-security-group-id-string-list (clojure.core/get-in letvar105614 ["SecurityGroupId" :content]))) (letvar105614 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar105614 ["deleteOnTermination" :content]))) (letvar105614 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-private-ip-address-specification-list (clojure.core/get-in letvar105614 ["privateIpAddressesSet" :content]))) (letvar105614 "secondaryPrivateIpAddressCount") (clojure.core/assoc :secondary-private-ip-address-count (deser-integer (clojure.core/get-in letvar105614 ["secondaryPrivateIpAddressCount" :content]))) (letvar105614 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar105614 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-available-instance-capacity-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-capacity coll))) input))

(clojure.core/defn- deser-snapshot-state [input] (clojure.core/get {"pending" :pending, "completed" :completed, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-vpn-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-gateway coll))) input))

(clojure.core/defn- deser-modify-spot-fleet-request-response [input] (clojure.core/let [letvar105731 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar105731 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar105731 ["return" :content]))))))

(clojure.core/defn- deser-get-console-screenshot-result [input] (clojure.core/let [letvar105809 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "imageData" (portkey.aws/getback-xml-elem-with-tag "imageData" input)}] (clojure.core/cond-> {} (letvar105809 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar105809 ["instanceId" :content]))) (letvar105809 "imageData") (clojure.core/assoc :image-data (deser-string (clojure.core/get-in letvar105809 ["imageData" :content]))))))

(clojure.core/defn- deser-create-internet-gateway-result [input] (clojure.core/let [letvar105887 {"internetGateway" (portkey.aws/getback-xml-elem-with-tag "internetGateway" input)}] (clojure.core/cond-> {} (letvar105887 "internetGateway") (clojure.core/assoc :internet-gateway (deser-internet-gateway (clojure.core/get-in letvar105887 ["internetGateway" :content]))))))

(clojure.core/defn- deser-describe-vpc-peering-connections-result [input] (clojure.core/let [letvar105965 {"vpcPeeringConnectionSet" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionSet" input)}] (clojure.core/cond-> {} (letvar105965 "vpcPeeringConnectionSet") (clojure.core/assoc :vpc-peering-connections (deser-vpc-peering-connection-list (clojure.core/get-in letvar105965 ["vpcPeeringConnectionSet" :content]))))))

(clojure.core/defn- deser-run-scheduled-instances-result [input] (clojure.core/let [letvar106043 {"instanceIdSet" (portkey.aws/getback-xml-elem-with-tag "instanceIdSet" input)}] (clojure.core/cond-> {} (letvar106043 "instanceIdSet") (clojure.core/assoc :instance-id-set (deser-instance-id-set (clojure.core/get-in letvar106043 ["instanceIdSet" :content]))))))

(clojure.core/defn- deser-create-image-result [input] (clojure.core/let [letvar106121 {"imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input)}] (clojure.core/cond-> {} (letvar106121 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar106121 ["imageId" :content]))))))

(clojure.core/defn- deser-create-vpn-gateway-result [input] (clojure.core/let [letvar106199 {"vpnGateway" (portkey.aws/getback-xml-elem-with-tag "vpnGateway" input)}] (clojure.core/cond-> {} (letvar106199 "vpnGateway") (clojure.core/assoc :vpn-gateway (deser-vpn-gateway (clojure.core/get-in letvar106199 ["vpnGateway" :content]))))))

(clojure.core/defn- deser-create-subnet-result [input] (clojure.core/let [letvar106277 {"subnet" (portkey.aws/getback-xml-elem-with-tag "subnet" input)}] (clojure.core/cond-> {} (letvar106277 "subnet") (clojure.core/assoc :subnet (deser-subnet (clojure.core/get-in letvar106277 ["subnet" :content]))))))

(clojure.core/defn- deser-describe-stale-security-groups-result [input] (clojure.core/let [letvar106355 {"staleSecurityGroupSet" (portkey.aws/getback-xml-elem-with-tag "staleSecurityGroupSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar106355 "staleSecurityGroupSet") (clojure.core/assoc :stale-security-group-set (deser-stale-security-group-set (clojure.core/get-in letvar106355 ["staleSecurityGroupSet" :content]))) (letvar106355 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar106355 ["nextToken" :content]))))))

(clojure.core/defn- deser-confirm-product-instance-result [input] (clojure.core/let [letvar106433 {"ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar106433 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar106433 ["ownerId" :content]))) (letvar106433 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar106433 ["return" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-offerings-result [input] (clojure.core/let [letvar106511 {"reservedInstancesOfferingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesOfferingsSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar106511 "reservedInstancesOfferingsSet") (clojure.core/assoc :reserved-instances-offerings (deser-reserved-instances-offering-list (clojure.core/get-in letvar106511 ["reservedInstancesOfferingsSet" :content]))) (letvar106511 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar106511 ["nextToken" :content]))))))

(clojure.core/defn- deser-modify-reserved-instances-result [input] (clojure.core/let [letvar106589 {"reservedInstancesModificationId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesModificationId" input)}] (clojure.core/cond-> {} (letvar106589 "reservedInstancesModificationId") (clojure.core/assoc :reserved-instances-modification-id (deser-string (clojure.core/get-in letvar106589 ["reservedInstancesModificationId" :content]))))))

(clojure.core/defn- deser-describe-vpc-classic-link-result [input] (clojure.core/let [letvar106667 {"vpcSet" (portkey.aws/getback-xml-elem-with-tag "vpcSet" input)}] (clojure.core/cond-> {} (letvar106667 "vpcSet") (clojure.core/assoc :vpcs (deser-vpc-classic-link-list (clojure.core/get-in letvar106667 ["vpcSet" :content]))))))

(clojure.core/defn- deser-create-dhcp-options-result [input] (clojure.core/let [letvar106745 {"dhcpOptions" (portkey.aws/getback-xml-elem-with-tag "dhcpOptions" input)}] (clojure.core/cond-> {} (letvar106745 "dhcpOptions") (clojure.core/assoc :dhcp-options (deser-dhcp-options (clojure.core/get-in letvar106745 ["dhcpOptions" :content]))))))

(clojure.core/defn- deser-volume [input] (clojure.core/let [letvar106823 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "attachmentSet" (portkey.aws/getback-xml-elem-with-tag "attachmentSet" input), "iops" (portkey.aws/getback-xml-elem-with-tag "iops" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "volumeType" (portkey.aws/getback-xml-elem-with-tag "volumeType" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "size" (portkey.aws/getback-xml-elem-with-tag "size" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input)}] (clojure.core/cond-> {} (letvar106823 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar106823 ["encrypted" :content]))) (letvar106823 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar106823 ["tagSet" :content]))) (letvar106823 "attachmentSet") (clojure.core/assoc :attachments (deser-volume-attachment-list (clojure.core/get-in letvar106823 ["attachmentSet" :content]))) (letvar106823 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar106823 ["availabilityZone" :content]))) (letvar106823 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar106823 ["kmsKeyId" :content]))) (letvar106823 "size") (clojure.core/assoc :size (deser-integer (clojure.core/get-in letvar106823 ["size" :content]))) (letvar106823 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar106823 ["iops" :content]))) (letvar106823 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar106823 ["volumeType" :content]))) (letvar106823 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar106823 ["volumeId" :content]))) (letvar106823 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar106823 ["createTime" :content]))) (letvar106823 "status") (clojure.core/assoc :state (deser-volume-state (clojure.core/get-in letvar106823 ["status" :content]))) (letvar106823 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar106823 ["snapshotId" :content]))))))

(clojure.core/defn- deser-describe-volumes-result [input] (clojure.core/let [letvar106901 {"volumeSet" (portkey.aws/getback-xml-elem-with-tag "volumeSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar106901 "volumeSet") (clojure.core/assoc :volumes (deser-volume-list (clojure.core/get-in letvar106901 ["volumeSet" :content]))) (letvar106901 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar106901 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-conversion-tasks-result [input] (clojure.core/let [letvar106979 {"conversionTasks" (portkey.aws/getback-xml-elem-with-tag "conversionTasks" input)}] (clojure.core/cond-> {} (letvar106979 "conversionTasks") (clojure.core/assoc :conversion-tasks (deser-describe-conversion-task-list (clojure.core/get-in letvar106979 ["conversionTasks" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-listings-result [input] (clojure.core/let [letvar107057 {"reservedInstancesListingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingsSet" input)}] (clojure.core/cond-> {} (letvar107057 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar107057 ["reservedInstancesListingsSet" :content]))))))

(clojure.core/defn- deser-create-reserved-instances-listing-result [input] (clojure.core/let [letvar107135 {"reservedInstancesListingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingsSet" input)}] (clojure.core/cond-> {} (letvar107135 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar107135 ["reservedInstancesListingsSet" :content]))))))

(clojure.core/defn- deser-describe-import-image-tasks-result [input] (clojure.core/let [letvar107213 {"importImageTaskSet" (portkey.aws/getback-xml-elem-with-tag "importImageTaskSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar107213 "importImageTaskSet") (clojure.core/assoc :import-image-tasks (deser-import-image-task-list (clojure.core/get-in letvar107213 ["importImageTaskSet" :content]))) (letvar107213 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar107213 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-instance-status-result [input] (clojure.core/let [letvar107291 {"instanceStatusSet" (portkey.aws/getback-xml-elem-with-tag "instanceStatusSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar107291 "instanceStatusSet") (clojure.core/assoc :instance-statuses (deser-instance-status-list (clojure.core/get-in letvar107291 ["instanceStatusSet" :content]))) (letvar107291 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar107291 ["nextToken" :content]))))))

(clojure.core/defn- deser-create-network-interface-result [input] (clojure.core/let [letvar107369 {"networkInterface" (portkey.aws/getback-xml-elem-with-tag "networkInterface" input)}] (clojure.core/cond-> {} (letvar107369 "networkInterface") (clojure.core/assoc :network-interface (deser-network-interface (clojure.core/get-in letvar107369 ["networkInterface" :content]))))))

(clojure.core/defn- deser-describe-network-interface-attribute-result [input] (clojure.core/let [letvar107447 {"networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input)}] (clojure.core/cond-> {} (letvar107447 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar107447 ["networkInterfaceId" :content]))) (letvar107447 "description") (clojure.core/assoc :description (deser-attribute-value (clojure.core/get-in letvar107447 ["description" :content]))) (letvar107447 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-attribute-boolean-value (clojure.core/get-in letvar107447 ["sourceDestCheck" :content]))) (letvar107447 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar107447 ["groupSet" :content]))) (letvar107447 "attachment") (clojure.core/assoc :attachment (deser-network-interface-attachment (clojure.core/get-in letvar107447 ["attachment" :content]))))))

(clojure.core/defn- deser-attach-network-interface-result [input] (clojure.core/let [letvar107525 {"attachmentId" (portkey.aws/getback-xml-elem-with-tag "attachmentId" input)}] (clojure.core/cond-> {} (letvar107525 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar107525 ["attachmentId" :content]))))))

(clojure.core/defn- deser-describe-network-interfaces-result [input] (clojure.core/let [letvar107603 {"networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input)}] (clojure.core/cond-> {} (letvar107603 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-network-interface-list (clojure.core/get-in letvar107603 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-describe-volume-attribute-result [input] (clojure.core/let [letvar107681 {"volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "autoEnableIO" (portkey.aws/getback-xml-elem-with-tag "autoEnableIO" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input)}] (clojure.core/cond-> {} (letvar107681 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar107681 ["volumeId" :content]))) (letvar107681 "autoEnableIO") (clojure.core/assoc :auto-enable-io (deser-attribute-boolean-value (clojure.core/get-in letvar107681 ["autoEnableIO" :content]))) (letvar107681 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar107681 ["productCodes" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-modifications-result [input] (clojure.core/let [letvar107759 {"reservedInstancesModificationsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesModificationsSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar107759 "reservedInstancesModificationsSet") (clojure.core/assoc :reserved-instances-modifications (deser-reserved-instances-modification-list (clojure.core/get-in letvar107759 ["reservedInstancesModificationsSet" :content]))) (letvar107759 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar107759 ["nextToken" :content]))))))

(clojure.core/defn- deser-cancel-bundle-task-result [input] (clojure.core/let [letvar107837 {"bundleInstanceTask" (portkey.aws/getback-xml-elem-with-tag "bundleInstanceTask" input)}] (clojure.core/cond-> {} (letvar107837 "bundleInstanceTask") (clojure.core/assoc :bundle-task (deser-bundle-task (clojure.core/get-in letvar107837 ["bundleInstanceTask" :content]))))))

(clojure.core/defn- deser-describe-availability-zones-result [input] (clojure.core/let [letvar107915 {"availabilityZoneInfo" (portkey.aws/getback-xml-elem-with-tag "availabilityZoneInfo" input)}] (clojure.core/cond-> {} (letvar107915 "availabilityZoneInfo") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar107915 ["availabilityZoneInfo" :content]))))))

(clojure.core/defn- deser-cancel-reserved-instances-listing-result [input] (clojure.core/let [letvar107993 {"reservedInstancesListingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingsSet" input)}] (clojure.core/cond-> {} (letvar107993 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar107993 ["reservedInstancesListingsSet" :content]))))))

(clojure.core/defn- deser-restore-address-to-classic-result [input] (clojure.core/let [letvar108071 {"status" (portkey.aws/getback-xml-elem-with-tag "status" input), "publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input)}] (clojure.core/cond-> {} (letvar108071 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar108071 ["status" :content]))) (letvar108071 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar108071 ["publicIp" :content]))))))

(clojure.core/defn- deser-describe-network-acls-result [input] (clojure.core/let [letvar108149 {"networkAclSet" (portkey.aws/getback-xml-elem-with-tag "networkAclSet" input)}] (clojure.core/cond-> {} (letvar108149 "networkAclSet") (clojure.core/assoc :network-acls (deser-network-acl-list (clojure.core/get-in letvar108149 ["networkAclSet" :content]))))))

(clojure.core/defn- deser-cancel-import-task-result [input] (clojure.core/let [letvar108227 {"importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "previousState" (portkey.aws/getback-xml-elem-with-tag "previousState" input)}] (clojure.core/cond-> {} (letvar108227 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar108227 ["importTaskId" :content]))) (letvar108227 "state") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar108227 ["state" :content]))) (letvar108227 "previousState") (clojure.core/assoc :previous-state (deser-string (clojure.core/get-in letvar108227 ["previousState" :content]))))))

(clojure.core/defn- deser-register-image-result [input] (clojure.core/let [letvar108305 {"imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input)}] (clojure.core/cond-> {} (letvar108305 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar108305 ["imageId" :content]))))))

(clojure.core/defn- deser-import-image-result [input] (clojure.core/let [letvar108383 {"architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "snapshotDetailSet" (portkey.aws/getback-xml-elem-with-tag "snapshotDetailSet" input), "licenseType" (portkey.aws/getback-xml-elem-with-tag "licenseType" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar108383 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar108383 ["platform" :content]))) (letvar108383 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar108383 ["importTaskId" :content]))) (letvar108383 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar108383 ["imageId" :content]))) (letvar108383 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar108383 ["statusMessage" :content]))) (letvar108383 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar108383 ["status" :content]))) (letvar108383 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar108383 ["progress" :content]))) (letvar108383 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar108383 ["description" :content]))) (letvar108383 "snapshotDetailSet") (clojure.core/assoc :snapshot-details (deser-snapshot-detail-list (clojure.core/get-in letvar108383 ["snapshotDetailSet" :content]))) (letvar108383 "hypervisor") (clojure.core/assoc :hypervisor (deser-string (clojure.core/get-in letvar108383 ["hypervisor" :content]))) (letvar108383 "architecture") (clojure.core/assoc :architecture (deser-string (clojure.core/get-in letvar108383 ["architecture" :content]))) (letvar108383 "licenseType") (clojure.core/assoc :license-type (deser-string (clojure.core/get-in letvar108383 ["licenseType" :content]))))))

(clojure.core/defn- deser-monitor-instances-result [input] (clojure.core/let [letvar108461 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar108461 "instancesSet") (clojure.core/assoc :instance-monitorings (deser-instance-monitoring-list (clojure.core/get-in letvar108461 ["instancesSet" :content]))))))

(clojure.core/defn- deser-create-vpc-endpoint-result [input] (clojure.core/let [letvar108539 {"vpcEndpoint" (portkey.aws/getback-xml-elem-with-tag "vpcEndpoint" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input)}] (clojure.core/cond-> {} (letvar108539 "vpcEndpoint") (clojure.core/assoc :vpc-endpoint (deser-vpc-endpoint (clojure.core/get-in letvar108539 ["vpcEndpoint" :content]))) (letvar108539 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar108539 ["clientToken" :content]))))))

(clojure.core/defn- deser-import-key-pair-result [input] (clojure.core/let [letvar108617 {"keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "keyFingerprint" (portkey.aws/getback-xml-elem-with-tag "keyFingerprint" input)}] (clojure.core/cond-> {} (letvar108617 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar108617 ["keyName" :content]))) (letvar108617 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar108617 ["keyFingerprint" :content]))))))

(clojure.core/defn- deser-create-network-acl-result [input] (clojure.core/let [letvar108695 {"networkAcl" (portkey.aws/getback-xml-elem-with-tag "networkAcl" input)}] (clojure.core/cond-> {} (letvar108695 "networkAcl") (clojure.core/assoc :network-acl (deser-network-acl (clojure.core/get-in letvar108695 ["networkAcl" :content]))))))

(clojure.core/defn- deser-create-route-result [input] (clojure.core/let [letvar108773 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar108773 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar108773 ["return" :content]))))))

(clojure.core/defn- deser-create-route-table-result [input] (clojure.core/let [letvar108851 {"routeTable" (portkey.aws/getback-xml-elem-with-tag "routeTable" input)}] (clojure.core/cond-> {} (letvar108851 "routeTable") (clojure.core/assoc :route-table (deser-route-table (clojure.core/get-in letvar108851 ["routeTable" :content]))))))

(clojure.core/defn- deser-describe-volume-status-result [input] (clojure.core/let [letvar108929 {"volumeStatusSet" (portkey.aws/getback-xml-elem-with-tag "volumeStatusSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar108929 "volumeStatusSet") (clojure.core/assoc :volume-statuses (deser-volume-status-list (clojure.core/get-in letvar108929 ["volumeStatusSet" :content]))) (letvar108929 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar108929 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-route-tables-result [input] (clojure.core/let [letvar109007 {"routeTableSet" (portkey.aws/getback-xml-elem-with-tag "routeTableSet" input)}] (clojure.core/cond-> {} (letvar109007 "routeTableSet") (clojure.core/assoc :route-tables (deser-route-table-list (clojure.core/get-in letvar109007 ["routeTableSet" :content]))))))

(clojure.core/defn- deser-describe-export-tasks-result [input] (clojure.core/let [letvar109085 {"exportTaskSet" (portkey.aws/getback-xml-elem-with-tag "exportTaskSet" input)}] (clojure.core/cond-> {} (letvar109085 "exportTaskSet") (clojure.core/assoc :export-tasks (deser-export-task-list (clojure.core/get-in letvar109085 ["exportTaskSet" :content]))))))

(clojure.core/defn- deser-reservation [input] (clojure.core/let [letvar109163 {"reservationId" (portkey.aws/getback-xml-elem-with-tag "reservationId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "requesterId" (portkey.aws/getback-xml-elem-with-tag "requesterId" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar109163 "reservationId") (clojure.core/assoc :reservation-id (deser-string (clojure.core/get-in letvar109163 ["reservationId" :content]))) (letvar109163 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar109163 ["ownerId" :content]))) (letvar109163 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar109163 ["requesterId" :content]))) (letvar109163 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar109163 ["groupSet" :content]))) (letvar109163 "instancesSet") (clojure.core/assoc :instances (deser-instance-list (clojure.core/get-in letvar109163 ["instancesSet" :content]))))))

(clojure.core/defn- deser-replace-network-acl-association-result [input] (clojure.core/let [letvar109241 {"newAssociationId" (portkey.aws/getback-xml-elem-with-tag "newAssociationId" input)}] (clojure.core/cond-> {} (letvar109241 "newAssociationId") (clojure.core/assoc :new-association-id (deser-string (clojure.core/get-in letvar109241 ["newAssociationId" :content]))))))

(clojure.core/defn- deser-import-snapshot-result [input] (clojure.core/let [letvar109319 {"importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "snapshotTaskDetail" (portkey.aws/getback-xml-elem-with-tag "snapshotTaskDetail" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar109319 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar109319 ["importTaskId" :content]))) (letvar109319 "snapshotTaskDetail") (clojure.core/assoc :snapshot-task-detail (deser-snapshot-task-detail (clojure.core/get-in letvar109319 ["snapshotTaskDetail" :content]))) (letvar109319 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar109319 ["description" :content]))))))

(clojure.core/defn- deser-disable-vpc-classic-link-result [input] (clojure.core/let [letvar109397 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar109397 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar109397 ["return" :content]))))))

(clojure.core/defn- deser-release-hosts-result [input] (clojure.core/let [letvar109475 {"successful" (portkey.aws/getback-xml-elem-with-tag "successful" input), "unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar109475 "successful") (clojure.core/assoc :successful (deser-response-host-id-list (clojure.core/get-in letvar109475 ["successful" :content]))) (letvar109475 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-list (clojure.core/get-in letvar109475 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-disable-vpc-classic-link-dns-support-result [input] (clojure.core/let [letvar109553 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar109553 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar109553 ["return" :content]))))))

(clojure.core/defn- deser-describe-tags-result [input] (clojure.core/let [letvar109631 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar109631 "tagSet") (clojure.core/assoc :tags (deser-tag-description-list (clojure.core/get-in letvar109631 ["tagSet" :content]))) (letvar109631 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar109631 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-moving-addresses-result [input] (clojure.core/let [letvar109709 {"movingAddressStatusSet" (portkey.aws/getback-xml-elem-with-tag "movingAddressStatusSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar109709 "movingAddressStatusSet") (clojure.core/assoc :moving-address-statuses (deser-moving-address-status-set (clojure.core/get-in letvar109709 ["movingAddressStatusSet" :content]))) (letvar109709 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar109709 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-images-result [input] (clojure.core/let [letvar109787 {"imagesSet" (portkey.aws/getback-xml-elem-with-tag "imagesSet" input)}] (clojure.core/cond-> {} (letvar109787 "imagesSet") (clojure.core/assoc :images (deser-image-list (clojure.core/get-in letvar109787 ["imagesSet" :content]))))))

(clojure.core/defn- deser-create-flow-logs-result [input] (clojure.core/let [letvar109865 {"flowLogIdSet" (portkey.aws/getback-xml-elem-with-tag "flowLogIdSet" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar109865 "flowLogIdSet") (clojure.core/assoc :flow-log-ids (deser-value-string-list (clojure.core/get-in letvar109865 ["flowLogIdSet" :content]))) (letvar109865 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar109865 ["clientToken" :content]))) (letvar109865 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar109865 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-describe-spot-instance-requests-result [input] (clojure.core/let [letvar109943 {"spotInstanceRequestSet" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestSet" input)}] (clojure.core/cond-> {} (letvar109943 "spotInstanceRequestSet") (clojure.core/assoc :spot-instance-requests (deser-spot-instance-request-list (clojure.core/get-in letvar109943 ["spotInstanceRequestSet" :content]))))))

(clojure.core/defn- deser-create-customer-gateway-result [input] (clojure.core/let [letvar110021 {"customerGateway" (portkey.aws/getback-xml-elem-with-tag "customerGateway" input)}] (clojure.core/cond-> {} (letvar110021 "customerGateway") (clojure.core/assoc :customer-gateway (deser-customer-gateway (clojure.core/get-in letvar110021 ["customerGateway" :content]))))))

(clojure.core/defn- deser-describe-hosts-result [input] (clojure.core/let [letvar110099 {"hostSet" (portkey.aws/getback-xml-elem-with-tag "hostSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar110099 "hostSet") (clojure.core/assoc :hosts (deser-host-list (clojure.core/get-in letvar110099 ["hostSet" :content]))) (letvar110099 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar110099 ["nextToken" :content]))))))

(clojure.core/defn- deser-enable-vpc-classic-link-dns-support-result [input] (clojure.core/let [letvar110177 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar110177 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar110177 ["return" :content]))))))

(clojure.core/defn- deser-stop-instances-result [input] (clojure.core/let [letvar110255 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar110255 "instancesSet") (clojure.core/assoc :stopping-instances (deser-instance-state-change-list (clojure.core/get-in letvar110255 ["instancesSet" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoints-result [input] (clojure.core/let [letvar110333 {"vpcEndpointSet" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar110333 "vpcEndpointSet") (clojure.core/assoc :vpc-endpoints (deser-vpc-endpoint-set (clojure.core/get-in letvar110333 ["vpcEndpointSet" :content]))) (letvar110333 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar110333 ["nextToken" :content]))))))

(clojure.core/defn- deser-purchase-scheduled-instances-result [input] (clojure.core/let [letvar110411 {"scheduledInstanceSet" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceSet" input)}] (clojure.core/cond-> {} (letvar110411 "scheduledInstanceSet") (clojure.core/assoc :scheduled-instance-set (deser-purchased-scheduled-instance-set (clojure.core/get-in letvar110411 ["scheduledInstanceSet" :content]))))))

(clojure.core/defn- deser-describe-addresses-result [input] (clojure.core/let [letvar110489 {"addressesSet" (portkey.aws/getback-xml-elem-with-tag "addressesSet" input)}] (clojure.core/cond-> {} (letvar110489 "addressesSet") (clojure.core/assoc :addresses (deser-address-list (clojure.core/get-in letvar110489 ["addressesSet" :content]))))))

(clojure.core/defn- deser-describe-prefix-lists-result [input] (clojure.core/let [letvar110567 {"prefixListSet" (portkey.aws/getback-xml-elem-with-tag "prefixListSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar110567 "prefixListSet") (clojure.core/assoc :prefix-lists (deser-prefix-list-set (clojure.core/get-in letvar110567 ["prefixListSet" :content]))) (letvar110567 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar110567 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-spot-datafeed-subscription-result [input] (clojure.core/let [letvar110645 {"spotDatafeedSubscription" (portkey.aws/getback-xml-elem-with-tag "spotDatafeedSubscription" input)}] (clojure.core/cond-> {} (letvar110645 "spotDatafeedSubscription") (clojure.core/assoc :spot-datafeed-subscription (deser-spot-datafeed-subscription (clojure.core/get-in letvar110645 ["spotDatafeedSubscription" :content]))))))

(clojure.core/defn- deser-import-instance-result [input] (clojure.core/let [letvar110723 {"conversionTask" (portkey.aws/getback-xml-elem-with-tag "conversionTask" input)}] (clojure.core/cond-> {} (letvar110723 "conversionTask") (clojure.core/assoc :conversion-task (deser-conversion-task (clojure.core/get-in letvar110723 ["conversionTask" :content]))))))

(clojure.core/defn- deser-describe-key-pairs-result [input] (clojure.core/let [letvar110801 {"keySet" (portkey.aws/getback-xml-elem-with-tag "keySet" input)}] (clojure.core/cond-> {} (letvar110801 "keySet") (clojure.core/assoc :key-pairs (deser-key-pair-list (clojure.core/get-in letvar110801 ["keySet" :content]))))))

(clojure.core/defn- deser-describe-internet-gateways-result [input] (clojure.core/let [letvar110879 {"internetGatewaySet" (portkey.aws/getback-xml-elem-with-tag "internetGatewaySet" input)}] (clojure.core/cond-> {} (letvar110879 "internetGatewaySet") (clojure.core/assoc :internet-gateways (deser-internet-gateway-list (clojure.core/get-in letvar110879 ["internetGatewaySet" :content]))))))

(clojure.core/defn- deser-describe-vpc-classic-link-dns-support-result [input] (clojure.core/let [letvar110957 {"vpcs" (portkey.aws/getback-xml-elem-with-tag "vpcs" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar110957 "vpcs") (clojure.core/assoc :vpcs (deser-classic-link-dns-support-list (clojure.core/get-in letvar110957 ["vpcs" :content]))) (letvar110957 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar110957 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-id-format-result [input] (clojure.core/let [letvar111035 {"statusSet" (portkey.aws/getback-xml-elem-with-tag "statusSet" input)}] (clojure.core/cond-> {} (letvar111035 "statusSet") (clojure.core/assoc :statuses (deser-id-format-list (clojure.core/get-in letvar111035 ["statusSet" :content]))))))

(clojure.core/defn- deser-describe-snapshot-attribute-result [input] (clojure.core/let [letvar111113 {"snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "createVolumePermission" (portkey.aws/getback-xml-elem-with-tag "createVolumePermission" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input)}] (clojure.core/cond-> {} (letvar111113 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar111113 ["snapshotId" :content]))) (letvar111113 "createVolumePermission") (clojure.core/assoc :create-volume-permissions (deser-create-volume-permission-list (clojure.core/get-in letvar111113 ["createVolumePermission" :content]))) (letvar111113 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar111113 ["productCodes" :content]))))))

(clojure.core/defn- deser-get-console-output-result [input] (clojure.core/let [letvar111191 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input), "output" (portkey.aws/getback-xml-elem-with-tag "output" input)}] (clojure.core/cond-> {} (letvar111191 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar111191 ["instanceId" :content]))) (letvar111191 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar111191 ["timestamp" :content]))) (letvar111191 "output") (clojure.core/assoc :output (deser-string (clojure.core/get-in letvar111191 ["output" :content]))))))

(clojure.core/defn- deser-describe-placement-groups-result [input] (clojure.core/let [letvar111269 {"placementGroupSet" (portkey.aws/getback-xml-elem-with-tag "placementGroupSet" input)}] (clojure.core/cond-> {} (letvar111269 "placementGroupSet") (clojure.core/assoc :placement-groups (deser-placement-group-list (clojure.core/get-in letvar111269 ["placementGroupSet" :content]))))))

(clojure.core/defn- deser-create-vpc-peering-connection-result [input] (clojure.core/let [letvar111347 {"vpcPeeringConnection" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnection" input)}] (clojure.core/cond-> {} (letvar111347 "vpcPeeringConnection") (clojure.core/assoc :vpc-peering-connection (deser-vpc-peering-connection (clojure.core/get-in letvar111347 ["vpcPeeringConnection" :content]))))))

(clojure.core/defn- deser-modify-hosts-result [input] (clojure.core/let [letvar111425 {"successful" (portkey.aws/getback-xml-elem-with-tag "successful" input), "unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar111425 "successful") (clojure.core/assoc :successful (deser-response-host-id-list (clojure.core/get-in letvar111425 ["successful" :content]))) (letvar111425 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-list (clojure.core/get-in letvar111425 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-create-vpn-connection-result [input] (clojure.core/let [letvar111503 {"vpnConnection" (portkey.aws/getback-xml-elem-with-tag "vpnConnection" input)}] (clojure.core/cond-> {} (letvar111503 "vpnConnection") (clojure.core/assoc :vpn-connection (deser-vpn-connection (clojure.core/get-in letvar111503 ["vpnConnection" :content]))))))

(clojure.core/defn- deser-describe-customer-gateways-result [input] (clojure.core/let [letvar111581 {"customerGatewaySet" (portkey.aws/getback-xml-elem-with-tag "customerGatewaySet" input)}] (clojure.core/cond-> {} (letvar111581 "customerGatewaySet") (clojure.core/assoc :customer-gateways (deser-customer-gateway-list (clojure.core/get-in letvar111581 ["customerGatewaySet" :content]))))))

(clojure.core/defn- deser-describe-account-attributes-result [input] (clojure.core/let [letvar111659 {"accountAttributeSet" (portkey.aws/getback-xml-elem-with-tag "accountAttributeSet" input)}] (clojure.core/cond-> {} (letvar111659 "accountAttributeSet") (clojure.core/assoc :account-attributes (deser-account-attribute-list (clojure.core/get-in letvar111659 ["accountAttributeSet" :content]))))))

(clojure.core/defn- deser-describe-scheduled-instances-result [input] (clojure.core/let [letvar111737 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "scheduledInstanceSet" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceSet" input)}] (clojure.core/cond-> {} (letvar111737 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar111737 ["nextToken" :content]))) (letvar111737 "scheduledInstanceSet") (clojure.core/assoc :scheduled-instance-set (deser-scheduled-instance-set (clojure.core/get-in letvar111737 ["scheduledInstanceSet" :content]))))))

(clojure.core/defn- deser-purchase-reserved-instances-offering-result [input] (clojure.core/let [letvar111815 {"reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input)}] (clojure.core/cond-> {} (letvar111815 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar111815 ["reservedInstancesId" :content]))))))

(clojure.core/defn- deser-request-spot-instances-result [input] (clojure.core/let [letvar111893 {"spotInstanceRequestSet" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestSet" input)}] (clojure.core/cond-> {} (letvar111893 "spotInstanceRequestSet") (clojure.core/assoc :spot-instance-requests (deser-spot-instance-request-list (clojure.core/get-in letvar111893 ["spotInstanceRequestSet" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoint-services-result [input] (clojure.core/let [letvar111971 {"serviceNameSet" (portkey.aws/getback-xml-elem-with-tag "serviceNameSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar111971 "serviceNameSet") (clojure.core/assoc :service-names (deser-value-string-list (clojure.core/get-in letvar111971 ["serviceNameSet" :content]))) (letvar111971 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar111971 ["nextToken" :content]))))))

(clojure.core/defn- deser-modify-instance-placement-result [input] (clojure.core/let [letvar112049 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar112049 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar112049 ["return" :content]))))))

(clojure.core/defn- deser-describe-vpc-attribute-result [input] (clojure.core/let [letvar112127 {"vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "enableDnsSupport" (portkey.aws/getback-xml-elem-with-tag "enableDnsSupport" input), "enableDnsHostnames" (portkey.aws/getback-xml-elem-with-tag "enableDnsHostnames" input)}] (clojure.core/cond-> {} (letvar112127 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar112127 ["vpcId" :content]))) (letvar112127 "enableDnsSupport") (clojure.core/assoc :enable-dns-support (deser-attribute-boolean-value (clojure.core/get-in letvar112127 ["enableDnsSupport" :content]))) (letvar112127 "enableDnsHostnames") (clojure.core/assoc :enable-dns-hostnames (deser-attribute-boolean-value (clojure.core/get-in letvar112127 ["enableDnsHostnames" :content]))))))

(clojure.core/defn- deser-describe-flow-logs-result [input] (clojure.core/let [letvar112205 {"flowLogSet" (portkey.aws/getback-xml-elem-with-tag "flowLogSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar112205 "flowLogSet") (clojure.core/assoc :flow-logs (deser-flow-log-set (clojure.core/get-in letvar112205 ["flowLogSet" :content]))) (letvar112205 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar112205 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-scheduled-instance-availability-result [input] (clojure.core/let [letvar112283 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "scheduledInstanceAvailabilitySet" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceAvailabilitySet" input)}] (clojure.core/cond-> {} (letvar112283 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar112283 ["nextToken" :content]))) (letvar112283 "scheduledInstanceAvailabilitySet") (clojure.core/assoc :scheduled-instance-availability-set (deser-scheduled-instance-availability-set (clojure.core/get-in letvar112283 ["scheduledInstanceAvailabilitySet" :content]))))))

(clojure.core/defn- deser-create-vpc-result [input] (clojure.core/let [letvar112361 {"vpc" (portkey.aws/getback-xml-elem-with-tag "vpc" input)}] (clojure.core/cond-> {} (letvar112361 "vpc") (clojure.core/assoc :vpc (deser-vpc (clojure.core/get-in letvar112361 ["vpc" :content]))))))

(clojure.core/defn- deser-allocate-address-result [input] (clojure.core/let [letvar112439 {"publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "domain" (portkey.aws/getback-xml-elem-with-tag "domain" input), "allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input)}] (clojure.core/cond-> {} (letvar112439 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar112439 ["publicIp" :content]))) (letvar112439 "domain") (clojure.core/assoc :domain (deser-domain-type (clojure.core/get-in letvar112439 ["domain" :content]))) (letvar112439 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar112439 ["allocationId" :content]))))))

(clojure.core/defn- deser-move-address-to-vpc-result [input] (clojure.core/let [letvar112517 {"allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar112517 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar112517 ["allocationId" :content]))) (letvar112517 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar112517 ["status" :content]))))))

(clojure.core/defn- deser-describe-bundle-tasks-result [input] (clojure.core/let [letvar112595 {"bundleInstanceTasksSet" (portkey.aws/getback-xml-elem-with-tag "bundleInstanceTasksSet" input)}] (clojure.core/cond-> {} (letvar112595 "bundleInstanceTasksSet") (clojure.core/assoc :bundle-tasks (deser-bundle-task-list (clojure.core/get-in letvar112595 ["bundleInstanceTasksSet" :content]))))))

(clojure.core/defn- deser-describe-snapshots-result [input] (clojure.core/let [letvar112673 {"snapshotSet" (portkey.aws/getback-xml-elem-with-tag "snapshotSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar112673 "snapshotSet") (clojure.core/assoc :snapshots (deser-snapshot-list (clojure.core/get-in letvar112673 ["snapshotSet" :content]))) (letvar112673 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar112673 ["nextToken" :content]))))))

(clojure.core/defn- deser-snapshot [input] (clojure.core/let [letvar112751 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "dataEncryptionKeyId" (portkey.aws/getback-xml-elem-with-tag "dataEncryptionKeyId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "volumeSize" (portkey.aws/getback-xml-elem-with-tag "volumeSize" input), "ownerAlias" (portkey.aws/getback-xml-elem-with-tag "ownerAlias" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar112751 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar112751 ["startTime" :content]))) (letvar112751 "statusMessage") (clojure.core/assoc :state-message (deser-string (clojure.core/get-in letvar112751 ["statusMessage" :content]))) (letvar112751 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar112751 ["ownerId" :content]))) (letvar112751 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar112751 ["encrypted" :content]))) (letvar112751 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar112751 ["tagSet" :content]))) (letvar112751 "ownerAlias") (clojure.core/assoc :owner-alias (deser-string (clojure.core/get-in letvar112751 ["ownerAlias" :content]))) (letvar112751 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar112751 ["progress" :content]))) (letvar112751 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar112751 ["description" :content]))) (letvar112751 "dataEncryptionKeyId") (clojure.core/assoc :data-encryption-key-id (deser-string (clojure.core/get-in letvar112751 ["dataEncryptionKeyId" :content]))) (letvar112751 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar112751 ["kmsKeyId" :content]))) (letvar112751 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar112751 ["volumeId" :content]))) (letvar112751 "status") (clojure.core/assoc :state (deser-snapshot-state (clojure.core/get-in letvar112751 ["status" :content]))) (letvar112751 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar112751 ["volumeSize" :content]))) (letvar112751 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar112751 ["snapshotId" :content]))))))

(clojure.core/defn- deser-describe-classic-link-instances-result [input] (clojure.core/let [letvar112829 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar112829 "instancesSet") (clojure.core/assoc :instances (deser-classic-link-instance-list (clojure.core/get-in letvar112829 ["instancesSet" :content]))) (letvar112829 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar112829 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-instances-result [input] (clojure.core/let [letvar112907 {"reservationSet" (portkey.aws/getback-xml-elem-with-tag "reservationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar112907 "reservationSet") (clojure.core/assoc :reservations (deser-reservation-list (clojure.core/get-in letvar112907 ["reservationSet" :content]))) (letvar112907 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar112907 ["nextToken" :content]))))))

(clojure.core/defn- deser-delete-flow-logs-result [input] (clojure.core/let [letvar112985 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar112985 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar112985 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-request-spot-fleet-response [input] (clojure.core/let [letvar113063 {"spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar113063 ["spotFleetRequestId" :content]))})))

(clojure.core/defn- deser-describe-spot-fleet-requests-response [input] (clojure.core/let [letvar113141 {"spotFleetRequestConfigSet" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestConfigSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {:spot-fleet-request-configs (deser-spot-fleet-request-config-set (clojure.core/get-in letvar113141 ["spotFleetRequestConfigSet" :content]))} (letvar113141 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar113141 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-vpn-connections-result [input] (clojure.core/let [letvar113219 {"vpnConnectionSet" (portkey.aws/getback-xml-elem-with-tag "vpnConnectionSet" input)}] (clojure.core/cond-> {} (letvar113219 "vpnConnectionSet") (clojure.core/assoc :vpn-connections (deser-vpn-connection-list (clojure.core/get-in letvar113219 ["vpnConnectionSet" :content]))))))

(clojure.core/defn- deser-copy-image-result [input] (clojure.core/let [letvar113297 {"imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input)}] (clojure.core/cond-> {} (letvar113297 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar113297 ["imageId" :content]))))))

(clojure.core/defn- deser-accept-vpc-peering-connection-result [input] (clojure.core/let [letvar113375 {"vpcPeeringConnection" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnection" input)}] (clojure.core/cond-> {} (letvar113375 "vpcPeeringConnection") (clojure.core/assoc :vpc-peering-connection (deser-vpc-peering-connection (clojure.core/get-in letvar113375 ["vpcPeeringConnection" :content]))))))

(clojure.core/defn- deser-terminate-instances-result [input] (clojure.core/let [letvar113453 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar113453 "instancesSet") (clojure.core/assoc :terminating-instances (deser-instance-state-change-list (clojure.core/get-in letvar113453 ["instancesSet" :content]))))))

(clojure.core/defn- deser-describe-vpcs-result [input] (clojure.core/let [letvar113531 {"vpcSet" (portkey.aws/getback-xml-elem-with-tag "vpcSet" input)}] (clojure.core/cond-> {} (letvar113531 "vpcSet") (clojure.core/assoc :vpcs (deser-vpc-list (clojure.core/get-in letvar113531 ["vpcSet" :content]))))))

(clojure.core/defn- deser-delete-vpc-endpoints-result [input] (clojure.core/let [letvar113609 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar113609 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar113609 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-describe-spot-fleet-instances-response [input] (clojure.core/let [letvar113687 {"spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input), "activeInstanceSet" (portkey.aws/getback-xml-elem-with-tag "activeInstanceSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar113687 ["spotFleetRequestId" :content])), :active-instances (deser-active-instance-set (clojure.core/get-in letvar113687 ["activeInstanceSet" :content]))} (letvar113687 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar113687 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-spot-price-history-result [input] (clojure.core/let [letvar113765 {"spotPriceHistorySet" (portkey.aws/getback-xml-elem-with-tag "spotPriceHistorySet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar113765 "spotPriceHistorySet") (clojure.core/assoc :spot-price-history (deser-spot-price-history-list (clojure.core/get-in letvar113765 ["spotPriceHistorySet" :content]))) (letvar113765 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar113765 ["nextToken" :content]))))))

(clojure.core/defn- deser-copy-snapshot-result [input] (clojure.core/let [letvar113843 {"snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input)}] (clojure.core/cond-> {} (letvar113843 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar113843 ["snapshotId" :content]))))))

(clojure.core/defn- deser-attach-classic-link-vpc-result [input] (clojure.core/let [letvar113921 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar113921 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar113921 ["return" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-response [input] (clojure.core/let [letvar113999 {"unsuccessfulFleetRequestSet" (portkey.aws/getback-xml-elem-with-tag "unsuccessfulFleetRequestSet" input), "successfulFleetRequestSet" (portkey.aws/getback-xml-elem-with-tag "successfulFleetRequestSet" input)}] (clojure.core/cond-> {} (letvar113999 "unsuccessfulFleetRequestSet") (clojure.core/assoc :unsuccessful-fleet-requests (deser-cancel-spot-fleet-requests-error-set (clojure.core/get-in letvar113999 ["unsuccessfulFleetRequestSet" :content]))) (letvar113999 "successfulFleetRequestSet") (clojure.core/assoc :successful-fleet-requests (deser-cancel-spot-fleet-requests-success-set (clojure.core/get-in letvar113999 ["successfulFleetRequestSet" :content]))))))

(clojure.core/defn- deser-delete-nat-gateway-result [input] (clojure.core/let [letvar114077 {"natGatewayId" (portkey.aws/getback-xml-elem-with-tag "natGatewayId" input)}] (clojure.core/cond-> {} (letvar114077 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar114077 ["natGatewayId" :content]))))))

(clojure.core/defn- deser-allocate-hosts-result [input] (clojure.core/let [letvar114155 {"hostIdSet" (portkey.aws/getback-xml-elem-with-tag "hostIdSet" input)}] (clojure.core/cond-> {} (letvar114155 "hostIdSet") (clojure.core/assoc :host-ids (deser-response-host-id-list (clojure.core/get-in letvar114155 ["hostIdSet" :content]))))))

(clojure.core/defn- deser-instance-attribute [input] (clojure.core/let [letvar114233 {"kernel" (portkey.aws/getback-xml-elem-with-tag "kernel" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "disableApiTermination" (portkey.aws/getback-xml-elem-with-tag "disableApiTermination" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "userData" (portkey.aws/getback-xml-elem-with-tag "userData" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "ramdisk" (portkey.aws/getback-xml-elem-with-tag "ramdisk" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "rootDeviceName" (portkey.aws/getback-xml-elem-with-tag "rootDeviceName" input), "instanceInitiatedShutdownBehavior" (portkey.aws/getback-xml-elem-with-tag "instanceInitiatedShutdownBehavior" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input)}] (clojure.core/cond-> {} (letvar114233 "kernel") (clojure.core/assoc :kernel-id (deser-attribute-value (clojure.core/get-in letvar114233 ["kernel" :content]))) (letvar114233 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar114233 ["instanceId" :content]))) (letvar114233 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-attribute-boolean-value (clojure.core/get-in letvar114233 ["ebsOptimized" :content]))) (letvar114233 "instanceType") (clojure.core/assoc :instance-type (deser-attribute-value (clojure.core/get-in letvar114233 ["instanceType" :content]))) (letvar114233 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-attribute-value (clojure.core/get-in letvar114233 ["sriovNetSupport" :content]))) (letvar114233 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-attribute-boolean-value (clojure.core/get-in letvar114233 ["sourceDestCheck" :content]))) (letvar114233 "disableApiTermination") (clojure.core/assoc :disable-api-termination (deser-attribute-boolean-value (clojure.core/get-in letvar114233 ["disableApiTermination" :content]))) (letvar114233 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar114233 ["groupSet" :content]))) (letvar114233 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-instance-block-device-mapping-list (clojure.core/get-in letvar114233 ["blockDeviceMapping" :content]))) (letvar114233 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar114233 ["productCodes" :content]))) (letvar114233 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-attribute-value (clojure.core/get-in letvar114233 ["rootDeviceName" :content]))) (letvar114233 "ramdisk") (clojure.core/assoc :ramdisk-id (deser-attribute-value (clojure.core/get-in letvar114233 ["ramdisk" :content]))) (letvar114233 "userData") (clojure.core/assoc :user-data (deser-attribute-value (clojure.core/get-in letvar114233 ["userData" :content]))) (letvar114233 "instanceInitiatedShutdownBehavior") (clojure.core/assoc :instance-initiated-shutdown-behavior (deser-attribute-value (clojure.core/get-in letvar114233 ["instanceInitiatedShutdownBehavior" :content]))))))

(clojure.core/defn- deser-modify-vpc-endpoint-result [input] (clojure.core/let [letvar114311 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar114311 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar114311 ["return" :content]))))))

(clojure.core/defn- deser-key-pair [input] (clojure.core/let [letvar114389 {"keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "keyFingerprint" (portkey.aws/getback-xml-elem-with-tag "keyFingerprint" input), "keyMaterial" (portkey.aws/getback-xml-elem-with-tag "keyMaterial" input)}] (clojure.core/cond-> {} (letvar114389 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar114389 ["keyName" :content]))) (letvar114389 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar114389 ["keyFingerprint" :content]))) (letvar114389 "keyMaterial") (clojure.core/assoc :key-material (deser-string (clojure.core/get-in letvar114389 ["keyMaterial" :content]))))))

(clojure.core/defn- deser-describe-subnets-result [input] (clojure.core/let [letvar114467 {"subnetSet" (portkey.aws/getback-xml-elem-with-tag "subnetSet" input)}] (clojure.core/cond-> {} (letvar114467 "subnetSet") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar114467 ["subnetSet" :content]))))))

(clojure.core/defn- deser-associate-address-result [input] (clojure.core/let [letvar114545 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input)}] (clojure.core/cond-> {} (letvar114545 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar114545 ["associationId" :content]))))))

(clojure.core/defn- deser-create-instance-export-task-result [input] (clojure.core/let [letvar114623 {"exportTask" (portkey.aws/getback-xml-elem-with-tag "exportTask" input)}] (clojure.core/cond-> {} (letvar114623 "exportTask") (clojure.core/assoc :export-task (deser-export-task (clojure.core/get-in letvar114623 ["exportTask" :content]))))))

(clojure.core/defn- deser-modify-vpc-peering-connection-options-result [input] (clojure.core/let [letvar114701 {"requesterPeeringConnectionOptions" (portkey.aws/getback-xml-elem-with-tag "requesterPeeringConnectionOptions" input), "accepterPeeringConnectionOptions" (portkey.aws/getback-xml-elem-with-tag "accepterPeeringConnectionOptions" input)}] (clojure.core/cond-> {} (letvar114701 "requesterPeeringConnectionOptions") (clojure.core/assoc :requester-peering-connection-options (deser-peering-connection-options (clojure.core/get-in letvar114701 ["requesterPeeringConnectionOptions" :content]))) (letvar114701 "accepterPeeringConnectionOptions") (clojure.core/assoc :accepter-peering-connection-options (deser-peering-connection-options (clojure.core/get-in letvar114701 ["accepterPeeringConnectionOptions" :content]))))))

(clojure.core/defn- deser-associate-route-table-result [input] (clojure.core/let [letvar114779 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input)}] (clojure.core/cond-> {} (letvar114779 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar114779 ["associationId" :content]))))))

(clojure.core/defn- deser-create-security-group-result [input] (clojure.core/let [letvar114857 {"groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input)}] (clojure.core/cond-> {} (letvar114857 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar114857 ["groupId" :content]))))))

(clojure.core/defn- deser-get-password-data-result [input] (clojure.core/let [letvar114935 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input), "passwordData" (portkey.aws/getback-xml-elem-with-tag "passwordData" input)}] (clojure.core/cond-> {} (letvar114935 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar114935 ["instanceId" :content]))) (letvar114935 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar114935 ["timestamp" :content]))) (letvar114935 "passwordData") (clojure.core/assoc :password-data (deser-string (clojure.core/get-in letvar114935 ["passwordData" :content]))))))

(clojure.core/defn- deser-import-volume-result [input] (clojure.core/let [letvar115013 {"conversionTask" (portkey.aws/getback-xml-elem-with-tag "conversionTask" input)}] (clojure.core/cond-> {} (letvar115013 "conversionTask") (clojure.core/assoc :conversion-task (deser-conversion-task (clojure.core/get-in letvar115013 ["conversionTask" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-result [input] (clojure.core/let [letvar115091 {"reservedInstancesSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesSet" input)}] (clojure.core/cond-> {} (letvar115091 "reservedInstancesSet") (clojure.core/assoc :reserved-instances (deser-reserved-instances-list (clojure.core/get-in letvar115091 ["reservedInstancesSet" :content]))))))

(clojure.core/defn- deser-describe-nat-gateways-result [input] (clojure.core/let [letvar115169 {"natGatewaySet" (portkey.aws/getback-xml-elem-with-tag "natGatewaySet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar115169 "natGatewaySet") (clojure.core/assoc :nat-gateways (deser-nat-gateway-list (clojure.core/get-in letvar115169 ["natGatewaySet" :content]))) (letvar115169 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar115169 ["nextToken" :content]))))))

(clojure.core/defn- deser-replace-route-table-association-result [input] (clojure.core/let [letvar115247 {"newAssociationId" (portkey.aws/getback-xml-elem-with-tag "newAssociationId" input)}] (clojure.core/cond-> {} (letvar115247 "newAssociationId") (clojure.core/assoc :new-association-id (deser-string (clojure.core/get-in letvar115247 ["newAssociationId" :content]))))))

(clojure.core/defn- deser-cancel-spot-instance-requests-result [input] (clojure.core/let [letvar115325 {"spotInstanceRequestSet" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestSet" input)}] (clojure.core/cond-> {} (letvar115325 "spotInstanceRequestSet") (clojure.core/assoc :cancelled-spot-instance-requests (deser-cancelled-spot-instance-request-list (clojure.core/get-in letvar115325 ["spotInstanceRequestSet" :content]))))))

(clojure.core/defn- deser-describe-import-snapshot-tasks-result [input] (clojure.core/let [letvar115403 {"importSnapshotTaskSet" (portkey.aws/getback-xml-elem-with-tag "importSnapshotTaskSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar115403 "importSnapshotTaskSet") (clojure.core/assoc :import-snapshot-tasks (deser-import-snapshot-task-list (clojure.core/get-in letvar115403 ["importSnapshotTaskSet" :content]))) (letvar115403 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar115403 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-dhcp-options-result [input] (clojure.core/let [letvar115481 {"dhcpOptionsSet" (portkey.aws/getback-xml-elem-with-tag "dhcpOptionsSet" input)}] (clojure.core/cond-> {} (letvar115481 "dhcpOptionsSet") (clojure.core/assoc :dhcp-options (deser-dhcp-options-list (clojure.core/get-in letvar115481 ["dhcpOptionsSet" :content]))))))

(clojure.core/defn- deser-create-nat-gateway-result [input] (clojure.core/let [letvar115559 {"natGateway" (portkey.aws/getback-xml-elem-with-tag "natGateway" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input)}] (clojure.core/cond-> {} (letvar115559 "natGateway") (clojure.core/assoc :nat-gateway (deser-nat-gateway (clojure.core/get-in letvar115559 ["natGateway" :content]))) (letvar115559 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar115559 ["clientToken" :content]))))))

(clojure.core/defn- deser-image-attribute [input] (clojure.core/let [letvar115637 {"imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "launchPermission" (portkey.aws/getback-xml-elem-with-tag "launchPermission" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "kernel" (portkey.aws/getback-xml-elem-with-tag "kernel" input), "ramdisk" (portkey.aws/getback-xml-elem-with-tag "ramdisk" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input)}] (clojure.core/cond-> {} (letvar115637 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar115637 ["imageId" :content]))) (letvar115637 "launchPermission") (clojure.core/assoc :launch-permissions (deser-launch-permission-list (clojure.core/get-in letvar115637 ["launchPermission" :content]))) (letvar115637 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar115637 ["productCodes" :content]))) (letvar115637 "kernel") (clojure.core/assoc :kernel-id (deser-attribute-value (clojure.core/get-in letvar115637 ["kernel" :content]))) (letvar115637 "ramdisk") (clojure.core/assoc :ramdisk-id (deser-attribute-value (clojure.core/get-in letvar115637 ["ramdisk" :content]))) (letvar115637 "description") (clojure.core/assoc :description (deser-attribute-value (clojure.core/get-in letvar115637 ["description" :content]))) (letvar115637 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-attribute-value (clojure.core/get-in letvar115637 ["sriovNetSupport" :content]))) (letvar115637 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar115637 ["blockDeviceMapping" :content]))))))

(clojure.core/defn- deser-reject-vpc-peering-connection-result [input] (clojure.core/let [letvar115715 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar115715 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar115715 ["return" :content]))))))

(clojure.core/defn- deser-create-spot-datafeed-subscription-result [input] (clojure.core/let [letvar115793 {"spotDatafeedSubscription" (portkey.aws/getback-xml-elem-with-tag "spotDatafeedSubscription" input)}] (clojure.core/cond-> {} (letvar115793 "spotDatafeedSubscription") (clojure.core/assoc :spot-datafeed-subscription (deser-spot-datafeed-subscription (clojure.core/get-in letvar115793 ["spotDatafeedSubscription" :content]))))))

(clojure.core/defn- deser-bundle-instance-result [input] (clojure.core/let [letvar115871 {"bundleInstanceTask" (portkey.aws/getback-xml-elem-with-tag "bundleInstanceTask" input)}] (clojure.core/cond-> {} (letvar115871 "bundleInstanceTask") (clojure.core/assoc :bundle-task (deser-bundle-task (clojure.core/get-in letvar115871 ["bundleInstanceTask" :content]))))))

(clojure.core/defn- deser-start-instances-result [input] (clojure.core/let [letvar115949 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar115949 "instancesSet") (clojure.core/assoc :starting-instances (deser-instance-state-change-list (clojure.core/get-in letvar115949 ["instancesSet" :content]))))))

(clojure.core/defn- deser-describe-vpn-gateways-result [input] (clojure.core/let [letvar116027 {"vpnGatewaySet" (portkey.aws/getback-xml-elem-with-tag "vpnGatewaySet" input)}] (clojure.core/cond-> {} (letvar116027 "vpnGatewaySet") (clojure.core/assoc :vpn-gateways (deser-vpn-gateway-list (clojure.core/get-in letvar116027 ["vpnGatewaySet" :content]))))))

(clojure.core/defn- deser-volume-attachment [input] (clojure.core/let [letvar116105 {"volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "device" (portkey.aws/getback-xml-elem-with-tag "device" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input)}] (clojure.core/cond-> {} (letvar116105 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar116105 ["volumeId" :content]))) (letvar116105 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar116105 ["instanceId" :content]))) (letvar116105 "device") (clojure.core/assoc :device (deser-string (clojure.core/get-in letvar116105 ["device" :content]))) (letvar116105 "status") (clojure.core/assoc :state (deser-volume-attachment-state (clojure.core/get-in letvar116105 ["status" :content]))) (letvar116105 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar116105 ["attachTime" :content]))) (letvar116105 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar116105 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-enable-vpc-classic-link-result [input] (clojure.core/let [letvar116183 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar116183 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar116183 ["return" :content]))))))

(clojure.core/defn- deser-describe-security-groups-result [input] (clojure.core/let [letvar116261 {"securityGroupInfo" (portkey.aws/getback-xml-elem-with-tag "securityGroupInfo" input)}] (clojure.core/cond-> {} (letvar116261 "securityGroupInfo") (clojure.core/assoc :security-groups (deser-security-group-list (clojure.core/get-in letvar116261 ["securityGroupInfo" :content]))))))

(clojure.core/defn- deser-describe-security-group-references-result [input] (clojure.core/let [letvar116339 {"securityGroupReferenceSet" (portkey.aws/getback-xml-elem-with-tag "securityGroupReferenceSet" input)}] (clojure.core/cond-> {} (letvar116339 "securityGroupReferenceSet") (clojure.core/assoc :security-group-reference-set (deser-security-group-references (clojure.core/get-in letvar116339 ["securityGroupReferenceSet" :content]))))))

(clojure.core/defn- deser-describe-regions-result [input] (clojure.core/let [letvar116417 {"regionInfo" (portkey.aws/getback-xml-elem-with-tag "regionInfo" input)}] (clojure.core/cond-> {} (letvar116417 "regionInfo") (clojure.core/assoc :regions (deser-region-list (clojure.core/get-in letvar116417 ["regionInfo" :content]))))))

(clojure.core/defn- deser-detach-classic-link-vpc-result [input] (clojure.core/let [letvar116495 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar116495 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar116495 ["return" :content]))))))

(clojure.core/defn- deser-delete-vpc-peering-connection-result [input] (clojure.core/let [letvar116573 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar116573 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar116573 ["return" :content]))))))

(clojure.core/defn- deser-unmonitor-instances-result [input] (clojure.core/let [letvar116651 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar116651 "instancesSet") (clojure.core/assoc :instance-monitorings (deser-instance-monitoring-list (clojure.core/get-in letvar116651 ["instancesSet" :content]))))))

(clojure.core/defn- deser-attach-vpn-gateway-result [input] (clojure.core/let [letvar116729 {"attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input)}] (clojure.core/cond-> {} (letvar116729 "attachment") (clojure.core/assoc :vpc-attachment (deser-vpc-attachment (clojure.core/get-in letvar116729 ["attachment" :content]))))))

(clojure.core/defn- deser-describe-spot-fleet-request-history-response [input] (clojure.core/let [letvar116807 {"spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "lastEvaluatedTime" (portkey.aws/getback-xml-elem-with-tag "lastEvaluatedTime" input), "historyRecordSet" (portkey.aws/getback-xml-elem-with-tag "historyRecordSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar116807 ["spotFleetRequestId" :content])), :start-time (deser-date-time (clojure.core/get-in letvar116807 ["startTime" :content])), :last-evaluated-time (deser-date-time (clojure.core/get-in letvar116807 ["lastEvaluatedTime" :content])), :history-records (deser-history-records (clojure.core/get-in letvar116807 ["historyRecordSet" :content]))} (letvar116807 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar116807 ["nextToken" :content]))))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/zone-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/snapshot-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/owner-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/owner-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/restorable-by-user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/restorable-by-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-snapshots-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-snapshots-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/snapshot-ids :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/owner-ids :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/restorable-by-user-ids :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/filters :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/next-token :portkey.aws.ec2.-2015-10-01.describe-snapshots-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/export-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/export-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/event-code #{:instancestop "instance-retirement" "instance-reboot" :instancereboot "instance-stop" "system-reboot" :instanceretirement :systemmaintenance :systemreboot "system-maintenance"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/flow-log-status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/deliver-logs-error-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/deliver-logs-status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/deliver-logs-permission-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/flow-log-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/log-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.flow-log/creation-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/flow-log (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.flow-log/flow-log-status :portkey.aws.ec2.-2015-10-01/traffic-type :portkey.aws.ec2.-2015-10-01.flow-log/resource-id :portkey.aws.ec2.-2015-10-01.flow-log/deliver-logs-error-message :portkey.aws.ec2.-2015-10-01.flow-log/deliver-logs-status :portkey.aws.ec2.-2015-10-01.flow-log/deliver-logs-permission-arn :portkey.aws.ec2.-2015-10-01.flow-log/flow-log-id :portkey.aws.ec2.-2015-10-01.flow-log/log-group-name :portkey.aws.ec2.-2015-10-01.flow-log/creation-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpc))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-spot-fleet-request-response/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-spot-fleet-request-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-spot-fleet-request-response/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-monitoring/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/spot-fleet-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-requests-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/spot-fleet-request-ids :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/next-token :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-action/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-action/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-action/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-action/event-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.volume-status-action/code :portkey.aws.ec2.-2015-10-01.volume-status-action/description :portkey.aws.ec2.-2015-10-01.volume-status-action/event-type :portkey.aws.ec2.-2015-10-01.volume-status-action/event-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/permission-group #{:all "all"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/network-interface-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.address/instance-id :portkey.aws.ec2.-2015-10-01.address/public-ip :portkey.aws.ec2.-2015-10-01.address/allocation-id :portkey.aws.ec2.-2015-10-01.address/association-id :portkey.aws.ec2.-2015-10-01.address/domain :portkey.aws.ec2.-2015-10-01.address/network-interface-id :portkey.aws.ec2.-2015-10-01.address/network-interface-owner-id :portkey.aws.ec2.-2015-10-01.address/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task/bundle-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/bundle-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task/update-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/bundle-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.bundle-task/instance-id :portkey.aws.ec2.-2015-10-01.bundle-task/bundle-id :portkey.aws.ec2.-2015-10-01.bundle-task/state :portkey.aws.ec2.-2015-10-01.bundle-task/start-time :portkey.aws.ec2.-2015-10-01.bundle-task/update-time :portkey.aws.ec2.-2015-10-01/storage :portkey.aws.ec2.-2015-10-01.bundle-task/progress :portkey.aws.ec2.-2015-10-01/bundle-task-error]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/role-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/disk-containers (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/image-disk-container-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-image-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.import-image-request/dry-run :portkey.aws.ec2.-2015-10-01.import-image-request/platform :portkey.aws.ec2.-2015-10-01.import-image-request/role-name :portkey.aws.ec2.-2015-10-01/client-data :portkey.aws.ec2.-2015-10-01.import-image-request/description :portkey.aws.ec2.-2015-10-01.import-image-request/disk-containers :portkey.aws.ec2.-2015-10-01.import-image-request/hypervisor :portkey.aws.ec2.-2015-10-01.import-image-request/architecture :portkey.aws.ec2.-2015-10-01.import-image-request/license-type :portkey.aws.ec2.-2015-10-01.import-image-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/security-group-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/security-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-count-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-count))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.confirm-product-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.confirm-product-instance-request/product-code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.confirm-product-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/confirm-product-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.confirm-product-instance-request/product-code :portkey.aws.ec2.-2015-10-01.confirm-product-instance-request/instance-id] :opt-un [:portkey.aws.ec2.-2015-10-01.confirm-product-instance-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-conversion-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/conversion-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/instance-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/origin (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/route-origin))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/destination-prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/route-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.route/instance-owner-id :portkey.aws.ec2.-2015-10-01.route/instance-id :portkey.aws.ec2.-2015-10-01.route/nat-gateway-id :portkey.aws.ec2.-2015-10-01.route/network-interface-id :portkey.aws.ec2.-2015-10-01.route/origin :portkey.aws.ec2.-2015-10-01.route/destination-cidr-block :portkey.aws.ec2.-2015-10-01.route/destination-prefix-list-id :portkey.aws.ec2.-2015-10-01.route/vpc-peering-connection-id :portkey.aws.ec2.-2015-10-01.route/state :portkey.aws.ec2.-2015-10-01.route/gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-request/vpn-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-gateway-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpn-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-request/vpn-gateway-ids :portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpn-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpn-connection-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpn-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-vpn-connection-request/vpn-connection-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-vpn-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-screenshot-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-screenshot-result/image-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/get-console-screenshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.get-console-screenshot-result/instance-id :portkey.aws.ec2.-2015-10-01.get-console-screenshot-result/image-data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/nat-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/nat-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/moving-address-status-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/moving-address-status))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-state-change-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-state-change))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-fleet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-fleet-request/spot-fleet-request-config (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-fleet-request-config-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/request-spot-fleet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.request-spot-fleet-request/spot-fleet-request-config] :opt-un [:portkey.aws.ec2.-2015-10-01.request-spot-fleet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/private-ip-address-config-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/scheduled-instances-private-ip-address-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/scheduled-instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instance-id-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/slot-start-time-range (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/slot-start-time-range-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-scheduled-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/scheduled-instance-ids :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/slot-start-time-range :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/next-token :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/max-results :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-flow-logs-request/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-flow-logs-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-flow-logs-request/flow-log-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device-specification/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device-specification/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ebs-instance-block-device-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.ebs-instance-block-device-specification/volume-id :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device-specification/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-internet-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/internet-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ebs-instance-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/volume-id :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/status :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/attach-time :portkey.aws.ec2.-2015-10-01.ebs-instance-block-device/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table/routes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/route-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table/associations (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/route-table-association-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table/propagating-vgws (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/propagating-vgw-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route-table (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.route-table/route-table-id :portkey.aws.ec2.-2015-10-01.route-table/vpc-id :portkey.aws.ec2.-2015-10-01.route-table/routes :portkey.aws.ec2.-2015-10-01.route-table/associations :portkey.aws.ec2.-2015-10-01.route-table/tags :portkey.aws.ec2.-2015-10-01.route-table/propagating-vgws]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/scheduled-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.propagating-vgw/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/propagating-vgw (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.propagating-vgw/gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-addresses-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-addresses-request/public-ips (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/public-ip-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-addresses-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-addresses-request/allocation-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/allocation-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-addresses-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-addresses-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-addresses-request/public-ips :portkey.aws.ec2.-2015-10-01.describe-addresses-request/filters :portkey.aws.ec2.-2015-10-01.describe-addresses-request/allocation-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/flow-log-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/flow-log))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/prefix-list-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-network-interface-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-acls-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-acls-request/network-acl-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-acls-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-network-acls-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-network-acls-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-network-acls-request/network-acl-ids :portkey.aws.ec2.-2015-10-01.describe-network-acls-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-connection-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpn-connection))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/reserved-instances-offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/pricing-details (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/pricing-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/marketplace (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/recurring-charges-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instances-offering/currency-code :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/reserved-instances-offering-id :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/fixed-price :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/availability-zone :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/pricing-details :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/instance-tenancy :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/marketplace :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/duration :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/usage-price :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/product-description :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/recurring-charges :portkey.aws.ec2.-2015-10-01.reserved-instances-offering/offering-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-result/vpc-peering-connections (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-peering-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-result/vpc-peering-connections]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.storage/s-3 (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/s-3-storage))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/storage (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.storage/s-3]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/value-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-id-format-request/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-id-format-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-id-format-request/resource :portkey.aws.ec2.-2015-10-01.modify-id-format-request/use-long-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.peering-connection-options-request/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.peering-connection-options-request/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/peering-connection-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.peering-connection-options-request/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2015-10-01.peering-connection-options-request/allow-egress-from-local-vpc-to-remote-classic-link] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/run-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/instance-id-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/customer-gateway-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ip-ranges (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-status-event-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-status-event))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/public-ip-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-network-interface-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reset-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.reset-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2015-10-01.reset-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.reset-network-interface-attribute-request/source-dest-check]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.filter/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.filter/values (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/filter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.filter/name :portkey.aws.ec2.-2015-10-01.filter/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-result-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-result))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-internet-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-internet-gateways-request/internet-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-internet-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-internet-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-internet-gateways-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-internet-gateways-request/internet-gateway-ids :portkey.aws.ec2.-2015-10-01.describe-internet-gateways-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-attribute-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-attribute-request/enable-dns-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-attribute-request/enable-dns-hostnames (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-vpc-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-attribute-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-attribute-request/enable-dns-support :portkey.aws.ec2.-2015-10-01.modify-vpc-attribute-request/enable-dns-hostnames]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/peering-options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-options-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-vpc-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/cidr-block :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/owner-id :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/vpc-id :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-vpc-info/peering-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-customer-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-customer-gateway-request/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-customer-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-customer-gateway-request/customer-gateway-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-customer-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-monitoring-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-monitoring))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/accepter-vpc-info (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-vpc-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/expiration-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/requester-vpc-info (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-vpc-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-state-reason))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-peering-connection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc-peering-connection/accepter-vpc-info :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/expiration-time :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/requester-vpc-info :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/status :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/tags :portkey.aws.ec2.-2015-10-01.vpc-peering-connection/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/price-schedules (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/price-schedule-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-reserved-instances-listing-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/reserved-instances-id :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/instance-count :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/price-schedules :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-request/client-token] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/export-task-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-state #{"failed" :pending "error" "invalid" :invalid "transient" :transient :deregistered :error :available "deregistered" "pending" "available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-table-association-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-table-association-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-table-association-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/replace-route-table-association-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.replace-route-table-association-request/association-id :portkey.aws.ec2.-2015-10-01.replace-route-table-association-request/route-table-id] :opt-un [:portkey.aws.ec2.-2015-10-01.replace-route-table-association-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-snapshot-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-snapshot-request/volume-id] :opt-un [:portkey.aws.ec2.-2015-10-01.create-snapshot-request/dry-run :portkey.aws.ec2.-2015-10-01.create-snapshot-request/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-state #{:deleted "deleting" :pending :deleting "deleted" :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/account-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/account-attribute))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-hosts-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-hosts-request/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-hosts-request/quantity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-hosts-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/allocate-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.allocate-hosts-request/instance-type :portkey.aws.ec2.-2015-10-01.allocate-hosts-request/quantity :portkey.aws.ec2.-2015-10-01.allocate-hosts-request/availability-zone] :opt-un [:portkey.aws.ec2.-2015-10-01/auto-placement :portkey.aws.ec2.-2015-10-01.allocate-hosts-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-classic-link-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/move-status #{:moving-to-vpc "movingToVpc" :restoring-to-classic "restoringToClassic"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-image-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-image-request/no-reboot (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-image-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-image-request/instance-id :portkey.aws.ec2.-2015-10-01.create-image-request/name] :opt-un [:portkey.aws.ec2.-2015-10-01.create-image-request/dry-run :portkey.aws.ec2.-2015-10-01.create-image-request/description :portkey.aws.ec2.-2015-10-01.create-image-request/no-reboot :portkey.aws.ec2.-2015-10-01.create-image-request/block-device-mappings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.prefix-list-id/prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/prefix-list-id (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.prefix-list-id/prefix-list-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-instance-request-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/security-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/pricing-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/pricing-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-connection-route-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-connection-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpn-connection-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-vpn-connection-route-request/vpn-connection-id :portkey.aws.ec2.-2015-10-01.create-vpn-connection-route-request/destination-cidr-block] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/hypervisor-type #{"ovm" "xen" :ovm :xen})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.history-record/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/history-record (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.history-record/timestamp :portkey.aws.ec2.-2015-10-01/event-type :portkey.aws.ec2.-2015-10-01/event-information] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpn-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/vpn-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/virtualization-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/image-location (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/register-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.register-image-request/name] :opt-un [:portkey.aws.ec2.-2015-10-01.register-image-request/dry-run :portkey.aws.ec2.-2015-10-01.register-image-request/kernel-id :portkey.aws.ec2.-2015-10-01.register-image-request/sriov-net-support :portkey.aws.ec2.-2015-10-01.register-image-request/description :portkey.aws.ec2.-2015-10-01.register-image-request/block-device-mappings :portkey.aws.ec2.-2015-10-01.register-image-request/architecture :portkey.aws.ec2.-2015-10-01.register-image-request/virtualization-type :portkey.aws.ec2.-2015-10-01.register-image-request/image-location :portkey.aws.ec2.-2015-10-01.register-image-request/root-device-name :portkey.aws.ec2.-2015-10-01.register-image-request/ramdisk-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-hosts-request/host-ids :portkey.aws.ec2.-2015-10-01/auto-placement] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-connection-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route-table-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/route-table))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-subnet-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/subnet]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/rule-number :portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/egress] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-network-acl-entry-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-request/conversion-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/conversion-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-conversion-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-request/filters :portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-request/conversion-task-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/architecture-values #{"x86_64" :i-386 :x-86-64 "i386"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancelled-spot-instance-request/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancelled-spot-instance-request/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-request-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancelled-spot-instance-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.cancelled-spot-instance-request/spot-instance-request-id :portkey.aws.ec2.-2015-10-01.cancelled-spot-instance-request/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/source-region (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/source-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/copy-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.copy-image-request/source-region :portkey.aws.ec2.-2015-10-01.copy-image-request/source-image-id :portkey.aws.ec2.-2015-10-01.copy-image-request/name] :opt-un [:portkey.aws.ec2.-2015-10-01.copy-image-request/dry-run :portkey.aws.ec2.-2015-10-01.copy-image-request/description :portkey.aws.ec2.-2015-10-01.copy-image-request/client-token :portkey.aws.ec2.-2015-10-01.copy-image-request/encrypted :portkey.aws.ec2.-2015-10-01.copy-image-request/kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-conversion-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-conversion-request/conversion-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-conversion-request/reason-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-conversion-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-conversion-request/conversion-task-id] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-conversion-request/dry-run :portkey.aws.ec2.-2015-10-01.cancel-conversion-request/reason-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-stale-security-groups-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-stale-security-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/stale-security-group-set :portkey.aws.ec2.-2015-10-01.describe-stale-security-groups-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/volume-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-spot-fleet-request-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-spot-fleet-request-request/target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-spot-fleet-request-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-spot-fleet-request-request/spot-fleet-request-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-spot-fleet-request-request/target-capacity :portkey.aws.ec2.-2015-10-01/excess-capacity-termination-policy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.blob-attribute-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/blob-attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.blob-attribute-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/export-environment #{:citrix "microsoft" "citrix" :vmware :microsoft "vmware"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-flow-logs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/flow-log-ids :portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/filter :portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/next-token :portkey.aws.ec2.-2015-10-01.describe-flow-logs-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-security-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-security-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-security-group-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-security-group-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-security-group-request/dry-run :portkey.aws.ec2.-2015-10-01.delete-security-group-request/group-name :portkey.aws.ec2.-2015-10-01.delete-security-group-request/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-export-details/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-export-details/target-environment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/export-environment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-export-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-export-details/instance-id :portkey.aws.ec2.-2015-10-01.instance-export-details/target-environment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-attachment-state #{"attached" "detaching" :detached "detached" "attaching" :attaching :attached :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.confirm-product-instance-result/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.confirm-product-instance-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/confirm-product-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.confirm-product-instance-result/owner-id :portkey.aws.ec2.-2015-10-01.confirm-product-instance-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/instance-types (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-type-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/product-descriptions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-description-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-price-history-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/instance-types :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/end-time :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/product-descriptions :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/start-time :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/availability-zone :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/next-token :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/filters :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.internet-gateway-attachment/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.internet-gateway-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/internet-gateway-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.internet-gateway-attachment/vpc-id :portkey.aws.ec2.-2015-10-01.internet-gateway-attachment/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/bundle-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.bundle-instance-request/instance-id :portkey.aws.ec2.-2015-10-01/storage] :opt-un [:portkey.aws.ec2.-2015-10-01.bundle-instance-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-result/reserved-instances-offerings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-offering-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-offerings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-result/reserved-instances-offerings :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-private-ip-address-config/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-private-ip-address-config/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-private-ip-address-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-private-ip-address-config/private-ip-address :portkey.aws.ec2.-2015-10-01.scheduled-instances-private-ip-address-config/primary]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/product-code-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-monitoring/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-monitoring/instance-id :portkey.aws.ec2.-2015-10-01/monitoring]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-price-history-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/spot-price))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-peering-connection-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-peering-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection-options/static-routes-only (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-connection-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpn-connection-options/static-routes-only]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-reserved-instances-result/reserved-instances-modification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-reserved-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-reserved-instances-result/reserved-instances-modification-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl-entry/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl-entry/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl-entry/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl-entry/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-acl-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-acl-entry/rule-number :portkey.aws.ec2.-2015-10-01.network-acl-entry/protocol :portkey.aws.ec2.-2015-10-01/rule-action :portkey.aws.ec2.-2015-10-01.network-acl-entry/egress :portkey.aws.ec2.-2015-10-01.network-acl-entry/cidr-block :portkey.aws.ec2.-2015-10-01/icmp-type-code :portkey.aws.ec2.-2015-10-01/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-route-request/route-table-id :portkey.aws.ec2.-2015-10-01.create-route-request/destination-cidr-block] :opt-un [:portkey.aws.ec2.-2015-10-01.create-route-request/dry-run :portkey.aws.ec2.-2015-10-01.create-route-request/gateway-id :portkey.aws.ec2.-2015-10-01.create-route-request/instance-id :portkey.aws.ec2.-2015-10-01.create-route-request/network-interface-id :portkey.aws.ec2.-2015-10-01.create-route-request/vpc-peering-connection-id :portkey.aws.ec2.-2015-10-01.create-route-request/nat-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/provisioned (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/requested (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/request-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/provision-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/provisioned-bandwidth (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/provisioned :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/requested :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/request-time :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/provision-time :portkey.aws.ec2.-2015-10-01.provisioned-bandwidth/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vgw-telemetry-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vgw-telemetry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-state #{:deleted "deleting" :creating "error" "in-use" :deleting :inuse "creating" "deleted" :error :available "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-placement/availability-zone :portkey.aws.ec2.-2015-10-01.spot-placement/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-classic-link-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-result/vpcs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/ip-permissions-egress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.security-group/owner-id :portkey.aws.ec2.-2015-10-01.security-group/group-name :portkey.aws.ec2.-2015-10-01.security-group/group-id :portkey.aws.ec2.-2015-10-01.security-group/description :portkey.aws.ec2.-2015-10-01.security-group/ip-permissions :portkey.aws.ec2.-2015-10-01.security-group/ip-permissions-egress :portkey.aws.ec2.-2015-10-01.security-group/vpc-id :portkey.aws.ec2.-2015-10-01.security-group/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/recurring-charges-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-detail-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/snapshot-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/occurrence-day-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/integer))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.id-format/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.id-format/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.id-format/deadline (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/id-format (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.id-format/resource :portkey.aws.ec2.-2015-10-01.id-format/use-long-ids :portkey.aws.ec2.-2015-10-01.id-format/deadline]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-dhcp-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/dhcp-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.volume/encrypted :portkey.aws.ec2.-2015-10-01.volume/tags :portkey.aws.ec2.-2015-10-01.volume/attachments :portkey.aws.ec2.-2015-10-01.volume/availability-zone :portkey.aws.ec2.-2015-10-01.volume/kms-key-id :portkey.aws.ec2.-2015-10-01.volume/size :portkey.aws.ec2.-2015-10-01.volume/iops :portkey.aws.ec2.-2015-10-01/volume-type :portkey.aws.ec2.-2015-10-01.volume/volume-id :portkey.aws.ec2.-2015-10-01.volume/create-time :portkey.aws.ec2.-2015-10-01.volume/state :portkey.aws.ec2.-2015-10-01.volume/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-instance-type #{:persistent :onetime "persistent" "one-time"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.start-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.start-instances-request/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.start-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/start-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.start-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.start-instances-request/additional-info :portkey.aws.ec2.-2015-10-01.start-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-block-device/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-block-device/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-block-device/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ebs-block-device/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ebs-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.ebs-block-device/snapshot-id :portkey.aws.ec2.-2015-10-01.ebs-block-device/volume-size :portkey.aws.ec2.-2015-10-01.ebs-block-device/delete-on-termination :portkey.aws.ec2.-2015-10-01/volume-type :portkey.aws.ec2.-2015-10-01.ebs-block-device/iops :portkey.aws.ec2.-2015-10-01.ebs-block-device/encrypted]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.new-dhcp-configuration/key (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.new-dhcp-configuration/values (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/new-dhcp-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.new-dhcp-configuration/key :portkey.aws.ec2.-2015-10-01.new-dhcp-configuration/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-interface-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-network-interface-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.placement/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.placement/affinity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.placement/availability-zone :portkey.aws.ec2.-2015-10-01.placement/group-name :portkey.aws.ec2.-2015-10-01/tenancy :portkey.aws.ec2.-2015-10-01.placement/host-id :portkey.aws.ec2.-2015-10-01.placement/affinity]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-configuration/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-configuration/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-configuration/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instances-configuration/availability-zone :portkey.aws.ec2.-2015-10-01.reserved-instances-configuration/platform :portkey.aws.ec2.-2015-10-01.reserved-instances-configuration/instance-count :portkey.aws.ec2.-2015-10-01/instance-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-volume-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-volume-attribute-request/volume-id] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-volume-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-request/attribute]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-bucket-details/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-bucket-details/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-bucket-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.user-bucket-details/s-3-bucket :portkey.aws.ec2.-2015-10-01.user-bucket-details/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/occurrence-day-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/integer))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/snapshot))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-lifecycle-type #{"spot" "scheduled" :scheduled :spot})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unmonitor-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unmonitor-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/unmonitor-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.unmonitor-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.unmonitor-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/availability-zone-state #{:unavailable "impaired" :information :impaired :available "information" "unavailable" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volumes-result/volumes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volumes-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-volumes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-volumes-result/volumes :portkey.aws.ec2.-2015-10-01.describe-volumes-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-snapshot-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-snapshot-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-snapshot-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-result/conversion-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-conversion-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-conversion-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-conversion-tasks-result/conversion-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/default-for-az (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/available-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/subnet-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.subnet/map-public-ip-on-launch (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.subnet/subnet-id :portkey.aws.ec2.-2015-10-01.subnet/default-for-az :portkey.aws.ec2.-2015-10-01.subnet/tags :portkey.aws.ec2.-2015-10-01.subnet/available-ip-address-count :portkey.aws.ec2.-2015-10-01.subnet/availability-zone :portkey.aws.ec2.-2015-10-01.subnet/cidr-block :portkey.aws.ec2.-2015-10-01.subnet/vpc-id :portkey.aws.ec2.-2015-10-01.subnet/state :portkey.aws.ec2.-2015-10-01.subnet/map-public-ip-on-launch]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-listings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/spot-fleet-request-id] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/next-token :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-request/disk-container (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-disk-container))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-request/role-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-snapshot-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.import-snapshot-request/dry-run :portkey.aws.ec2.-2015-10-01.import-snapshot-request/description :portkey.aws.ec2.-2015-10-01.import-snapshot-request/disk-container :portkey.aws.ec2.-2015-10-01/client-data :portkey.aws.ec2.-2015-10-01.import-snapshot-request/client-token :portkey.aws.ec2.-2015-10-01.import-snapshot-request/role-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/dhcp-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/dhcp-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-reserved-instances-listing-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-reserved-instances-listing-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/datafeed-subscription-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/fault (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-state-fault))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-datafeed-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/owner-id :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/bucket :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/prefix :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/state :portkey.aws.ec2.-2015-10-01.spot-datafeed-subscription/fault]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-result/import-image-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-image-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-import-image-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-result/import-image-tasks :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/include-all-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-instance-status-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-instance-status-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/instance-ids :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/filters :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/next-token :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/max-results :portkey.aws.ec2.-2015-10-01.describe-instance-status-request/include-all-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-count/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/listing-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-count/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-count (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-count/state :portkey.aws.ec2.-2015-10-01.instance-count/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/host-instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/host-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/bytes-converted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/image (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-volume-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-instance-volume-detail-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/bytes-converted :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/availability-zone :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/image :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/volume :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/status] :opt-un [:portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/status-message :portkey.aws.ec2.-2015-10-01.import-instance-volume-detail-item/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/import-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-task-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-import-image-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/import-task-ids :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/next-token :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/max-results :portkey.aws.ec2.-2015-10-01.describe-import-image-tasks-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/source-region (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/source-snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/destination-region (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/presigned-url (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/copy-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.copy-snapshot-request/source-region :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/source-snapshot-id] :opt-un [:portkey.aws.ec2.-2015-10-01.copy-snapshot-request/dry-run :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/description :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/destination-region :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/presigned-url :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/encrypted :portkey.aws.ec2.-2015-10-01.copy-snapshot-request/kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection-options-specification/static-routes-only (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-connection-options-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpn-connection-options-specification/static-routes-only]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/tenancy #{"host" :default :host "dedicated" :dedicated "default"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-offering-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-internet-gateway-request/internet-gateway-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-security-group-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-volume-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-volume-request/device (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.attach-volume-request/volume-id :portkey.aws.ec2.-2015-10-01.attach-volume-request/instance-id :portkey.aws.ec2.-2015-10-01.attach-volume-request/device] :opt-un [:portkey.aws.ec2.-2015-10-01.attach-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/affinity #{"host" :default :host "default"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-network-interface-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/attachment-id :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/device-index :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/status :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/attach-time :portkey.aws.ec2.-2015-10-01.instance-network-interface-attachment/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-result/instance-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-status-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-status-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-instance-status-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-instance-status-result/instance-statuses :portkey.aws.ec2.-2015-10-01.describe-instance-status-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/disk-image-size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/url (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/user-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/user-bucket-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-detail/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.snapshot-detail/disk-image-size :portkey.aws.ec2.-2015-10-01.snapshot-detail/status-message :portkey.aws.ec2.-2015-10-01.snapshot-detail/format :portkey.aws.ec2.-2015-10-01.snapshot-detail/status :portkey.aws.ec2.-2015-10-01.snapshot-detail/progress :portkey.aws.ec2.-2015-10-01.snapshot-detail/url :portkey.aws.ec2.-2015-10-01.snapshot-detail/description :portkey.aws.ec2.-2015-10-01.snapshot-detail/device-name :portkey.aws.ec2.-2015-10-01.snapshot-detail/user-bucket :portkey.aws.ec2.-2015-10-01.snapshot-detail/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-export-task-request/export-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-export-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-export-task-request/export-task-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-state-fault/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-state-fault/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-instance-state-fault/code :portkey.aws.ec2.-2015-10-01.spot-instance-state-fault/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-security-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-security-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-security-group-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-security-group-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-security-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-security-group-request/group-name :portkey.aws.ec2.-2015-10-01.create-security-group-request/description] :opt-un [:portkey.aws.ec2.-2015-10-01.create-security-group-request/dry-run :portkey.aws.ec2.-2015-10-01.create-security-group-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/dhcp-configuration-value-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/attribute-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-association/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-association/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-association/ip-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-network-interface-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-network-interface-association/public-ip :portkey.aws.ec2.-2015-10-01.instance-network-interface-association/public-dns-name :portkey.aws.ec2.-2015-10-01.instance-network-interface-association/ip-owner-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/bundle-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/bundle-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/group-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-placement/availability-zone :portkey.aws.ec2.-2015-10-01.scheduled-instances-placement/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/key-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-network-interface-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/network-interface]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-ebs))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/device-name :portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/no-device :portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/virtual-name :portkey.aws.ec2.-2015-10-01.scheduled-instances-block-device-mapping/ebs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/revoke-security-group-ingress-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/source-security-group-owner-id :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/dry-run :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/to-port :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/source-security-group-name :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/ip-protocol :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/group-name :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/group-id :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/from-port :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/ip-permissions :portkey.aws.ec2.-2015-10-01.revoke-security-group-ingress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-network-interface-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/network-interface-id :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/description :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/source-dest-check :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/groups :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-result/attachment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-network-interface-result/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-network-interface-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.attach-network-interface-result/attachment-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-volume-description/size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-volume-description/id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disk-image-volume-description (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.disk-image-volume-description/id] :opt-un [:portkey.aws.ec2.-2015-10-01.disk-image-volume-description/size]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/account-attribute-name #{:supportedplatforms :defaultvpc "supported-platforms" "default-vpc"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host-properties/sockets (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host-properties/cores (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host-properties/total-v-cpus (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host-properties/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/host-properties (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.host-properties/sockets :portkey.aws.ec2.-2015-10-01.host-properties/cores :portkey.aws.ec2.-2015-10-01.host-properties/total-v-cpus :portkey.aws.ec2.-2015-10-01.host-properties/instance-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpn-connection-route-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpn-connection-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpn-connection-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-vpn-connection-route-request/vpn-connection-id :portkey.aws.ec2.-2015-10-01.delete-vpn-connection-route-request/destination-cidr-block] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-key-pair-request/key-name] :opt-un [:portkey.aws.ec2.-2015-10-01.create-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-gateway-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-gateway-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-vpn-gateway-request/type] :opt-un [:portkey.aws.ec2.-2015-10-01.create-vpn-gateway-request/dry-run :portkey.aws.ec2.-2015-10-01.create-vpn-gateway-request/availability-zone]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interfaces-result/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-network-interfaces-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-network-interfaces-result/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-vgw-route-propagation-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-vgw-route-propagation-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/enable-vgw-route-propagation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.enable-vgw-route-propagation-request/route-table-id :portkey.aws.ec2.-2015-10-01.enable-vgw-route-propagation-request/gateway-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/term-end-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/network-platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instance-recurrence))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/next-slot-start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/total-scheduled-instance-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/previous-slot-end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/scheduled-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance/term-start-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instance/platform :portkey.aws.ec2.-2015-10-01.scheduled-instance/term-end-date :portkey.aws.ec2.-2015-10-01.scheduled-instance/network-platform :portkey.aws.ec2.-2015-10-01.scheduled-instance/instance-count :portkey.aws.ec2.-2015-10-01.scheduled-instance/recurrence :portkey.aws.ec2.-2015-10-01.scheduled-instance/create-date :portkey.aws.ec2.-2015-10-01.scheduled-instance/instance-type :portkey.aws.ec2.-2015-10-01.scheduled-instance/next-slot-start-time :portkey.aws.ec2.-2015-10-01.scheduled-instance/total-scheduled-instance-hours :portkey.aws.ec2.-2015-10-01.scheduled-instance/availability-zone :portkey.aws.ec2.-2015-10-01.scheduled-instance/hourly-price :portkey.aws.ec2.-2015-10-01.scheduled-instance/slot-duration-in-hours :portkey.aws.ec2.-2015-10-01.scheduled-instance/previous-slot-end-time :portkey.aws.ec2.-2015-10-01.scheduled-instance/scheduled-instance-id :portkey.aws.ec2.-2015-10-01.scheduled-instance/term-start-date]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/active-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/active-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-type #{:r-3large :c-4xlarge "m1.large" :c-3xlarge "cc1.4xlarge" :cg-14xlarge :i-28xlarge :t-2small :c-1xlarge "c1.medium" :c-48xlarge "r3.8xlarge" "d2.xlarge" "m3.2xlarge" "i2.8xlarge" "g2.2xlarge" "c3.8xlarge" "t2.large" :m-42xlarge "m1.xlarge" "d2.8xlarge" "m4.4xlarge" :t-2large :c-34xlarge :x-116xlarge "cr1.8xlarge" "t1.micro" :d-28xlarge :r-34xlarge :m-32xlarge "c3.2xlarge" "g2.8xlarge" :x-14xlarge "c4.8xlarge" :g-22xlarge :c-3large "m2.xlarge" "m1.small" "i2.4xlarge" "c3.4xlarge" :t-2micro :c-38xlarge "t2.micro" "d2.2xlarge" "x1.32xlarge" :r-38xlarge "m4.2xlarge" :r-32xlarge "m4.10xlarge" "m1.medium" :cc-14xlarge "c4.4xlarge" "hi1.4xlarge" :d-2xlarge :i-2xlarge "r3.xlarge" :x-18xlarge :c-44xlarge :m-22xlarge :t-2medium :r-3xlarge "c4.2xlarge" :i-22xlarge "t2.small" :m-1small :m-3large "m3.xlarge" "r3.2xlarge" :c-32xlarge "cg1.4xlarge" "x1.4xlarge" :c-42xlarge "r3.4xlarge" :hs-18xlarge :t-2nano :m-44xlarge :m-24xlarge "c4.xlarge" "m2.2xlarge" "x1.16xlarge" "m4.large" :m-410xlarge "r3.large" "d2.4xlarge" "c4.large" :d-24xlarge :m-3medium :g-28xlarge :m-1xlarge "m4.xlarge" "i2.2xlarge" :c-4large :cc-28xlarge :i-24xlarge :m-4xlarge :m-3xlarge "t2.nano" "m2.4xlarge" "c3.xlarge" :m-4large :m-1medium :m-1large "t2.medium" "c3.large" :c-1medium "m3.medium" :cr-18xlarge "i2.xlarge" "x1.8xlarge" "cc2.8xlarge" "hs1.8xlarge" :x-132xlarge "m3.large" "c1.xlarge" :t-1micro :d-22xlarge :m-2xlarge :hi-14xlarge})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route-state #{"blackhole" :active "active" :blackhole})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-regions-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-regions-request/region-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/region-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-regions-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-regions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-regions-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-regions-request/region-names :portkey.aws.ec2.-2015-10-01.describe-regions-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-type-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-type))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/subnet-state #{:pending :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/stale-ip-permission-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/stale-ip-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-attribute-name #{:description "kernel" "productCodes" "blockDeviceMapping" :ramdisk :product-codes "launchPermission" :block-device-mapping "ramdisk" :sriov-net-support :kernel :launch-permission "description" "sriovNetSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-connections-request/vpn-connection-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-connection-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-connections-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpn-connections-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpn-connections-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-vpn-connections-request/vpn-connection-ids :portkey.aws.ec2.-2015-10-01.describe-vpn-connections-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/replace-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.replace-route-request/route-table-id :portkey.aws.ec2.-2015-10-01.replace-route-request/destination-cidr-block] :opt-un [:portkey.aws.ec2.-2015-10-01.replace-route-request/dry-run :portkey.aws.ec2.-2015-10-01.replace-route-request/gateway-id :portkey.aws.ec2.-2015-10-01.replace-route-request/instance-id :portkey.aws.ec2.-2015-10-01.replace-route-request/network-interface-id :portkey.aws.ec2.-2015-10-01.replace-route-request/vpc-peering-connection-id :portkey.aws.ec2.-2015-10-01.replace-route-request/nat-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification-result/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification-result/target-configuration (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-configuration))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instances-modification-result/reserved-instances-id :portkey.aws.ec2.-2015-10-01.reserved-instances-modification-result/target-configuration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-result/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-result/auto-enable-io (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-result/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-volume-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-volume-attribute-result/volume-id :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-result/auto-enable-io :portkey.aws.ec2.-2015-10-01.describe-volume-attribute-result/product-codes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-task-details/volumes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-instance-volume-detail-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-task-details/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-task-details/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-task-details/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-instance-task-details (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.import-instance-task-details/volumes] :opt-un [:portkey.aws.ec2.-2015-10-01.import-instance-task-details/instance-id :portkey.aws.ec2.-2015-10-01.import-instance-task-details/platform :portkey.aws.ec2.-2015-10-01.import-instance-task-details/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-result/reserved-instances-modifications (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-result/reserved-instances-modifications :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-bundle-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/bundle-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-permission/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-permission/group (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-volume-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-volume-permission/user-id :portkey.aws.ec2.-2015-10-01.create-volume-permission/group]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-spot-datafeed-subscription-request/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-spot-datafeed-subscription-request/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-spot-datafeed-subscription-request/bucket] :opt-un [:portkey.aws.ec2.-2015-10-01.create-spot-datafeed-subscription-request/dry-run :portkey.aws.ec2.-2015-10-01.create-spot-datafeed-subscription-request/prefix]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-availability-zones-result/availability-zones (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-availability-zones-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-availability-zones-result/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-details/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/status-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-details/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/status-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-details/impaired-since (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-status-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-status-details/name :portkey.aws.ec2.-2015-10-01.instance-status-details/status :portkey.aws.ec2.-2015-10-01.instance-status-details/impaired-since]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-request/snapshot-id :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/authorize-security-group-egress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/group-id] :opt-un [:portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/source-security-group-owner-id :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/dry-run :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/to-port :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/source-security-group-name :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/ip-protocol :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/from-port :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/ip-permissions :portkey.aws.ec2.-2015-10-01.authorize-security-group-egress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-key-pair-request/public-key-material (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.import-key-pair-request/key-name :portkey.aws.ec2.-2015-10-01.import-key-pair-request/public-key-material] :opt-un [:portkey.aws.ec2.-2015-10-01.import-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.iam-instance-profile-specification/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.iam-instance-profile-specification/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/iam-instance-profile-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.iam-instance-profile-specification/arn :portkey.aws.ec2.-2015-10-01.iam-instance-profile-specification/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-instance-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/spot-instance-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/placement-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-detail/size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-detail (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.volume-detail/size] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/region-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/region))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-tags-request/resources (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/resource-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-tags-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-tags-request/resources] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-tags-request/dry-run :portkey.aws.ec2.-2015-10-01.delete-tags-request/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-reserved-instances-listing-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-reserved-instances-listing-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-reserved-instances-listing-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-dhcp-options-request/dhcp-options-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/dhcp-options-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-dhcp-options-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-dhcp-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-dhcp-options-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-dhcp-options-request/dhcp-options-ids :portkey.aws.ec2.-2015-10-01.describe-dhcp-options-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.restore-address-to-classic-result/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/restore-address-to-classic-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/status :portkey.aws.ec2.-2015-10-01.restore-address-to-classic-result/public-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-description/format (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-format))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-description/size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-description/import-manifest-url (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-description/checksum (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disk-image-description (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.disk-image-description/format :portkey.aws.ec2.-2015-10-01.disk-image-description/size :portkey.aws.ec2.-2015-10-01.disk-image-description/import-manifest-url] :opt-un [:portkey.aws.ec2.-2015-10-01.disk-image-description/checksum]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/host-tenancy #{"host" :host "dedicated" :dedicated})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.available-capacity/available-instance-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/available-instance-capacity-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.available-capacity/available-v-cpus (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/available-capacity (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.available-capacity/available-instance-capacity :portkey.aws.ec2.-2015-10-01.available-capacity/available-v-cpus]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/bundle-task-state #{:waitingforshutdown :bundling "failed" "waiting-for-shutdown" :pending "complete" "storing" "cancelling" :complete "bundling" :cancelling "pending" :storing :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.icmp-type-code/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.icmp-type-code/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/icmp-type-code (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.icmp-type-code/type :portkey.aws.ec2.-2015-10-01.icmp-type-code/code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-private-ip-address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-private-ip-address/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-private-ip-address/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-private-ip-address/association (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-private-ip-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-private-ip-address/private-ip-address :portkey.aws.ec2.-2015-10-01.instance-private-ip-address/private-dns-name :portkey.aws.ec2.-2015-10-01.instance-private-ip-address/primary :portkey.aws.ec2.-2015-10-01.instance-private-ip-address/association]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-acls-result/network-acls (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-acl-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-network-acls-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-network-acls-result/network-acls]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-listing-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reserved-instances-listing))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-classic-link/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-classic-link/classic-link-enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-classic-link/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-classic-link (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc-classic-link/vpc-id :portkey.aws.ec2.-2015-10-01.vpc-classic-link/classic-link-enabled :portkey.aws.ec2.-2015-10-01.vpc-classic-link/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-import-task-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-import-task-result/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-import-task-result/previous-state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-import-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-import-task-result/import-task-id :portkey.aws.ec2.-2015-10-01.cancel-import-task-result/state :portkey.aws.ec2.-2015-10-01.cancel-import-task-result/previous-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/disk-image-size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/url (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/user-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/user-bucket-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-task-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.snapshot-task-detail/disk-image-size :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/status-message :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/format :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/status :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/progress :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/url :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/description :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/user-bucket :portkey.aws.ec2.-2015-10-01.snapshot-task-detail/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.launch-specification/kernel-id :portkey.aws.ec2.-2015-10-01.launch-specification/image-id :portkey.aws.ec2.-2015-10-01.launch-specification/placement :portkey.aws.ec2.-2015-10-01.launch-specification/addressing-type :portkey.aws.ec2.-2015-10-01.launch-specification/subnet-id :portkey.aws.ec2.-2015-10-01.launch-specification/security-groups :portkey.aws.ec2.-2015-10-01.launch-specification/ebs-optimized :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.launch-specification/key-name :portkey.aws.ec2.-2015-10-01.launch-specification/monitoring :portkey.aws.ec2.-2015-10-01.launch-specification/block-device-mappings :portkey.aws.ec2.-2015-10-01.launch-specification/ramdisk-id :portkey.aws.ec2.-2015-10-01.launch-specification/user-data :portkey.aws.ec2.-2015-10-01.launch-specification/iam-instance-profile :portkey.aws.ec2.-2015-10-01.launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/id-format-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/id-format))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.register-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/register-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.register-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/snapshot-details (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-detail-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-result/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.import-image-result/platform :portkey.aws.ec2.-2015-10-01.import-image-result/import-task-id :portkey.aws.ec2.-2015-10-01.import-image-result/image-id :portkey.aws.ec2.-2015-10-01.import-image-result/status-message :portkey.aws.ec2.-2015-10-01.import-image-result/status :portkey.aws.ec2.-2015-10-01.import-image-result/progress :portkey.aws.ec2.-2015-10-01.import-image-result/description :portkey.aws.ec2.-2015-10-01.import-image-result/snapshot-details :portkey.aws.ec2.-2015-10-01.import-image-result/hypervisor :portkey.aws.ec2.-2015-10-01.import-image-result/architecture :portkey.aws.ec2.-2015-10-01.import-image-result/license-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-attribute-name #{:auto-enable-io "productCodes" "autoEnableIO" :product-codes})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/prefix-list-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/prefix-list))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/private-ip-address-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/allow-reassignment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/assign-private-ip-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/private-ip-addresses :portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/secondary-private-ip-address-count :portkey.aws.ec2.-2015-10-01.assign-private-ip-addresses-request/allow-reassignment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-network-interface-request/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-network-interface-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/detach-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.detach-network-interface-request/attachment-id] :opt-un [:portkey.aws.ec2.-2015-10-01.detach-network-interface-request/dry-run :portkey.aws.ec2.-2015-10-01.detach-network-interface-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instance-id-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-request/allow-reassociation (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/associate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.associate-address-request/dry-run :portkey.aws.ec2.-2015-10-01.associate-address-request/instance-id :portkey.aws.ec2.-2015-10-01.associate-address-request/public-ip :portkey.aws.ec2.-2015-10-01.associate-address-request/allocation-id :portkey.aws.ec2.-2015-10-01.associate-address-request/network-interface-id :portkey.aws.ec2.-2015-10-01.associate-address-request/private-ip-address :portkey.aws.ec2.-2015-10-01.associate-address-request/allow-reassociation]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attribute-boolean-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attribute-boolean-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.attribute-boolean-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.price-schedule-specification/term (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.price-schedule-specification/price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.price-schedule-specification/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/price-schedule-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.price-schedule-specification/term :portkey.aws.ec2.-2015-10-01.price-schedule-specification/price :portkey.aws.ec2.-2015-10-01.price-schedule-specification/currency-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-to-s-3-task-specification/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-to-s-3-task-specification/s-3-prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/export-to-s-3-task-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/disk-image-format :portkey.aws.ec2.-2015-10-01/container-format :portkey.aws.ec2.-2015-10-01.export-to-s-3-task-specification/s-3-bucket :portkey.aws.ec2.-2015-10-01.export-to-s-3-task-specification/s-3-prefix]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.monitor-instances-result/instance-monitorings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-monitoring-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/monitor-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.monitor-instances-result/instance-monitorings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-internet-gateway-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpc-endpoint-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/vpc-endpoint :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/availability-zone-group (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/actual-block-hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/launched-availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/launch-group (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/fault (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-state-fault))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-instance-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-instance-request/availability-zone-group :portkey.aws.ec2.-2015-10-01.spot-instance-request/spot-instance-request-id :portkey.aws.ec2.-2015-10-01.spot-instance-request/instance-id :portkey.aws.ec2.-2015-10-01.spot-instance-request/type :portkey.aws.ec2.-2015-10-01.spot-instance-request/actual-block-hourly-price :portkey.aws.ec2.-2015-10-01.spot-instance-request/block-duration-minutes :portkey.aws.ec2.-2015-10-01.spot-instance-request/valid-from :portkey.aws.ec2.-2015-10-01/launch-specification :portkey.aws.ec2.-2015-10-01.spot-instance-request/tags :portkey.aws.ec2.-2015-10-01.spot-instance-request/status :portkey.aws.ec2.-2015-10-01.spot-instance-request/spot-price :portkey.aws.ec2.-2015-10-01.spot-instance-request/launched-availability-zone :portkey.aws.ec2.-2015-10-01.spot-instance-request/launch-group :portkey.aws.ec2.-2015-10-01.spot-instance-request/product-description :portkey.aws.ec2.-2015-10-01.spot-instance-request/create-time :portkey.aws.ec2.-2015-10-01.spot-instance-request/fault :portkey.aws.ec2.-2015-10-01.spot-instance-request/state :portkey.aws.ec2.-2015-10-01.spot-instance-request/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/rule-action #{"allow" :allow "deny" :deny})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpc-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-instance-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-instance-requests-request/spot-instance-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-request-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-requests-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-instance-requests-request/spot-instance-request-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-instance-requests-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-output-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-output-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/get-console-output-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.get-console-output-request/instance-id] :opt-un [:portkey.aws.ec2.-2015-10-01.get-console-output-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-key-pair-result/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-key-pair-result/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-key-pair-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.import-key-pair-result/key-name :portkey.aws.ec2.-2015-10-01.import-key-pair-result/key-fingerprint]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-network-acl-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/network-acl]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-route-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-route-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/nat-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-nat-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/nat-gateway-ids :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/filter :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/max-results :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-static-route/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-static-route/source (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-static-route-source))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-static-route/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-static-route (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpn-static-route/destination-cidr-block :portkey.aws.ec2.-2015-10-01.vpn-static-route/source :portkey.aws.ec2.-2015-10-01.vpn-static-route/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-route-table-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/route-table]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/fleet-type #{:request "maintain" :maintain "request"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-endpoint/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-endpoint/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-endpoint/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-endpoint/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-endpoint/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-endpoint/creation-timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc-endpoint/vpc-endpoint-id :portkey.aws.ec2.-2015-10-01.vpc-endpoint/vpc-id :portkey.aws.ec2.-2015-10-01.vpc-endpoint/service-name :portkey.aws.ec2.-2015-10-01/state :portkey.aws.ec2.-2015-10-01.vpc-endpoint/policy-document :portkey.aws.ec2.-2015-10-01.vpc-endpoint/route-table-ids :portkey.aws.ec2.-2015-10-01.vpc-endpoint/creation-timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-status-result/volume-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-status-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-status-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-volume-status-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-volume-status-result/volume-statuses :portkey.aws.ec2.-2015-10-01.describe-volume-status-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-request/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-vpc-request/cidr-block] :opt-un [:portkey.aws.ec2.-2015-10-01.create-vpc-request/dry-run :portkey.aws.ec2.-2015-10-01.create-vpc-request/instance-tenancy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/availability-zone-group (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/request-spot-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/launch-group (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/request-spot-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.request-spot-instances-request/spot-price] :opt-un [:portkey.aws.ec2.-2015-10-01.request-spot-instances-request/availability-zone-group :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/type :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/instance-count :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/block-duration-minutes :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/valid-from :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/launch-specification :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/launch-group :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/client-token :portkey.aws.ec2.-2015-10-01.request-spot-instances-request/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/key-pair-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/key-pair-info))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/purchased-scheduled-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/scheduled-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-route-tables-result/route-tables (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/route-table-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-route-tables-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-route-tables-result/route-tables]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/group-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/group-identifier))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-network-acl-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-network-acl-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.create-network-acl-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error-item/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-error-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error-item/spot-fleet-request-id :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error-item/error] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-export-tasks-result/export-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/export-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-export-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-export-tasks-result/export-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-status-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-status-details))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.key-pair-info/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.key-pair-info/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/key-pair-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.key-pair-info/key-name :portkey.aws.ec2.-2015-10-01.key-pair-info/key-fingerprint]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-request/bundle-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/bundle-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-bundle-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-request/bundle-ids :portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/price-schedule-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/price-schedule-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/mac-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-private-ip-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/association (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-network-interface/attachment :portkey.aws.ec2.-2015-10-01.instance-network-interface/subnet-id :portkey.aws.ec2.-2015-10-01.instance-network-interface/owner-id :portkey.aws.ec2.-2015-10-01.instance-network-interface/mac-address :portkey.aws.ec2.-2015-10-01.instance-network-interface/network-interface-id :portkey.aws.ec2.-2015-10-01.instance-network-interface/source-dest-check :portkey.aws.ec2.-2015-10-01.instance-network-interface/status :portkey.aws.ec2.-2015-10-01.instance-network-interface/private-dns-name :portkey.aws.ec2.-2015-10-01.instance-network-interface/description :portkey.aws.ec2.-2015-10-01.instance-network-interface/vpc-id :portkey.aws.ec2.-2015-10-01.instance-network-interface/groups :portkey.aws.ec2.-2015-10-01.instance-network-interface/private-ip-addresses :portkey.aws.ec2.-2015-10-01.instance-network-interface/association :portkey.aws.ec2.-2015-10-01.instance-network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-instances-request/instance-ids :portkey.aws.ec2.-2015-10-01.describe-instances-request/filters :portkey.aws.ec2.-2015-10-01.describe-instances-request/next-token :portkey.aws.ec2.-2015-10-01.describe-instances-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-nat-gateway-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-nat-gateway-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-nat-gateway-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-nat-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-nat-gateway-request/subnet-id :portkey.aws.ec2.-2015-10-01.create-nat-gateway-request/allocation-id] :opt-un [:portkey.aws.ec2.-2015-10-01.create-nat-gateway-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-batch-error-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-error (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error/code :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-error/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-static-route-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpn-static-route))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reservation/reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reservation/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reservation/requester-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reservation/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reservation/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reservation (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reservation/reservation-id :portkey.aws.ec2.-2015-10-01.reservation/owner-id :portkey.aws.ec2.-2015-10-01.reservation/requester-id :portkey.aws.ec2.-2015-10-01.reservation/groups :portkey.aws.ec2.-2015-10-01.reservation/instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unsuccessful-item-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unsuccessful-item-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/unsuccessful-item-error (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.unsuccessful-item-error/code :portkey.aws.ec2.-2015-10-01.unsuccessful-item-error/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-association-result/new-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/replace-network-acl-association-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.replace-network-acl-association-result/new-association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/volume-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-volume-status-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-volume-status-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/volume-ids :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/filters :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/next-token :portkey.aws.ec2.-2015-10-01.describe-volume-status-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpc-peering-connection))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/unsuccessful-item-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/unsuccessful-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/security-group-references (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/security-group-reference))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-address-request/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/allocate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.allocate-address-request/dry-run :portkey.aws.ec2.-2015-10-01.allocate-address-request/domain]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.import-snapshot-result/import-task-id :portkey.aws.ec2.-2015-10-01/snapshot-task-detail :portkey.aws.ec2.-2015-10-01.import-snapshot-result/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-ip-permission/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-ip-permission/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-ip-permission/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/prefix-list-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-ip-permission/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-ip-permission/user-id-group-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/user-id-group-pair-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/stale-ip-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.stale-ip-permission/from-port :portkey.aws.ec2.-2015-10-01.stale-ip-permission/ip-protocol :portkey.aws.ec2.-2015-10-01/ip-ranges :portkey.aws.ec2.-2015-10-01.stale-ip-permission/prefix-list-ids :portkey.aws.ec2.-2015-10-01.stale-ip-permission/to-port :portkey.aws.ec2.-2015-10-01.stale-ip-permission/user-id-group-pairs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/traffic-type #{:all "REJECT" :reject "ALL" "ACCEPT" :accept})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/availability-zone))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.availability-zone/zone-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.availability-zone/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/availability-zone-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.availability-zone/region-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.availability-zone/messages (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/availability-zone-message-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.availability-zone/zone-name :portkey.aws.ec2.-2015-10-01.availability-zone/state :portkey.aws.ec2.-2015-10-01.availability-zone/region-name :portkey.aws.ec2.-2015-10-01.availability-zone/messages]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/import-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-task-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-import-snapshot-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/import-task-ids :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/next-token :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/max-results :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route-origin #{"EnableVgwRoutePropagation" "CreateRouteTable" "CreateRoute" :create-route :create-route-table :enable-vgw-route-propagation})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/allocation-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-volume-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/create-volume-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/status #{:move-in-progress :in-classic "InClassic" "MoveInProgress" :in-vpc "InVpc"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-type #{"natGateway" :interface "interface" :nat-gateway})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancelled-spot-instance-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/cancelled-spot-instance-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-disk-container-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/image-disk-container))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/event-type #{:fleet-request-change "fleetRequestChange" "instanceChange" :instance-change "error" :error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.moving-address-status/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/moving-address-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.moving-address-status/public-ip :portkey.aws.ec2.-2015-10-01/move-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-request/vpc-peering-connection-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-peering-connections-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-request/vpc-peering-connection-ids :portkey.aws.ec2.-2015-10-01.describe-vpc-peering-connections-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/start (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/fixed-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/end (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/usage-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/recurring-charges (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/recurring-charges-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instances/currency-code :portkey.aws.ec2.-2015-10-01.reserved-instances/instance-count :portkey.aws.ec2.-2015-10-01.reserved-instances/start :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.reserved-instances/fixed-price :portkey.aws.ec2.-2015-10-01.reserved-instances/end :portkey.aws.ec2.-2015-10-01.reserved-instances/tags :portkey.aws.ec2.-2015-10-01.reserved-instances/availability-zone :portkey.aws.ec2.-2015-10-01.reserved-instances/instance-tenancy :portkey.aws.ec2.-2015-10-01.reserved-instances/duration :portkey.aws.ec2.-2015-10-01.reserved-instances/usage-price :portkey.aws.ec2.-2015-10-01.reserved-instances/product-description :portkey.aws.ec2.-2015-10-01.reserved-instances/reserved-instances-id :portkey.aws.ec2.-2015-10-01.reserved-instances/state :portkey.aws.ec2.-2015-10-01.reserved-instances/recurring-charges :portkey.aws.ec2.-2015-10-01.reserved-instances/offering-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-attribute))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-network-interface-attribute-request/attribute]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/restorable-by-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/next-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__27886__auto__] (clojure.core/<= 1 (clojure.core/count s__27886__auto__))) (clojure.core/fn [s__27887__auto__] (clojure.core/< (clojure.core/count s__27887__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.restore-address-to-classic-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.restore-address-to-classic-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/restore-address-to-classic-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.restore-address-to-classic-request/public-ip] :opt-un [:portkey.aws.ec2.-2015-10-01.restore-address-to-classic-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-dns-support-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-dns-support-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.slot-start-time-range-request/earliest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.slot-start-time-range-request/latest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/slot-start-time-range-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.slot-start-time-range-request/earliest-time :portkey.aws.ec2.-2015-10-01.slot-start-time-range-request/latest-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-route-table-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-route-table-request/route-table-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/excess-capacity-termination-policy #{:default "noTermination" "default" :no-termination})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.prefix-list/prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.prefix-list/prefix-list-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.prefix-list/cidrs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/prefix-list (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.prefix-list/prefix-list-id :portkey.aws.ec2.-2015-10-01.prefix-list/prefix-list-name :portkey.aws.ec2.-2015-10-01.prefix-list/cidrs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-instance-volume-detail-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/import-instance-volume-detail-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/status-type #{:initializing :passed :insufficientdata "failed" "initializing" "insufficient-data" :failed "passed"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-fleet-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-fleet-monitoring/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ebs-instance-block-device-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/device-name :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/ebs :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/virtual-name :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping-specification/no-device]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/listing-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/price-schedules (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/price-schedule-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/update-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/instance-counts (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-count-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-listing (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instances-listing/status-message :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/create-date :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/tags :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/status :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/price-schedules :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/update-date :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/reserved-instances-id :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/reserved-instances-listing-id :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/instance-counts :portkey.aws.ec2.-2015-10-01.reserved-instances-listing/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-image-attribute-request/image-id :portkey.aws.ec2.-2015-10-01.describe-image-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-image-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-summary/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/summary-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-summary/details (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-status-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-status-summary (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-status-summary/status :portkey.aws.ec2.-2015-10-01.instance-status-summary/details]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway-address/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway-address/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway-address/private-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway-address/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/nat-gateway-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.nat-gateway-address/public-ip :portkey.aws.ec2.-2015-10-01.nat-gateway-address/allocation-id :portkey.aws.ec2.-2015-10-01.nat-gateway-address/private-ip :portkey.aws.ec2.-2015-10-01.nat-gateway-address/network-interface-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-status-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-status))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/placement-group-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/placement-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.release-hosts-result/successful (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.release-hosts-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/unsuccessful-item-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/release-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.release-hosts-result/successful :portkey.aws.ec2.-2015-10-01.release-hosts-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-dns-support-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.disable-vpc-classic-link-dns-support-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/bgp-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-customer-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/type :portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/public-ip :portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/bgp-asn] :opt-un [:portkey.aws.ec2.-2015-10-01.create-customer-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reserved-instances-offering))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-request/image (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-request/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.import-volume-request/availability-zone :portkey.aws.ec2.-2015-10-01.import-volume-request/image :portkey.aws.ec2.-2015-10-01.import-volume-request/volume] :opt-un [:portkey.aws.ec2.-2015-10-01.import-volume-request/dry-run :portkey.aws.ec2.-2015-10-01.import-volume-request/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/group-ids (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-tags-result/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-description-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-tags-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-tags-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-tags-result/tags :portkey.aws.ec2.-2015-10-01.describe-tags-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-placement-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-placement-request/tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/host-tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-placement-request/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-instance-placement-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-instance-placement-request/instance-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-instance-placement-request/tenancy :portkey.aws.ec2.-2015-10-01/affinity :portkey.aws.ec2.-2015-10-01.modify-instance-placement-request/host-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-result/moving-address-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/moving-address-status-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-moving-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-moving-addresses-result/moving-address-statuses :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reserved-instances))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/image))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-images-result/images (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/image-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-images-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-images-result/images]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/peer-vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/peer-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/dry-run :portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/vpc-id :portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/peer-vpc-id :portkey.aws.ec2.-2015-10-01.create-vpc-peering-connection-request/peer-owner-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-result/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-flow-logs-result/flow-log-ids :portkey.aws.ec2.-2015-10-01.create-flow-logs-result/client-token :portkey.aws.ec2.-2015-10-01.create-flow-logs-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-id-group-pair-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/user-id-group-pair))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.s-3-storage/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.s-3-storage/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.s-3-storage/aws-access-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.s-3-storage/upload-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.s-3-storage/upload-policy-signature (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/s-3-storage (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.s-3-storage/bucket :portkey.aws.ec2.-2015-10-01.s-3-storage/prefix :portkey.aws.ec2.-2015-10-01.s-3-storage/aws-access-key-id :portkey.aws.ec2.-2015-10-01.s-3-storage/upload-policy :portkey.aws.ec2.-2015-10-01.s-3-storage/upload-policy-signature]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.recurring-charge/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/recurring-charge-frequency))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.recurring-charge/amount (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.recurring-charge/frequency :portkey.aws.ec2.-2015-10-01.recurring-charge/amount]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-fleet-request-config-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/spot-fleet-request-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/launch-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/launch-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/price-schedule-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/price-schedule))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-result/spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-instance-requests-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-result/spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disable-vgw-route-propagation-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disable-vgw-route-propagation-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disable-vgw-route-propagation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.disable-vgw-route-propagation-request/route-table-id :portkey.aws.ec2.-2015-10-01.disable-vgw-route-propagation-request/gateway-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-private-ip-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-private-ip-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.group-identifier/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.group-identifier/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/group-identifier (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.group-identifier/group-name :portkey.aws.ec2.-2015-10-01.group-identifier/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-price/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-price/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-price/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-price/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-price (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.spot-price/product-description :portkey.aws.ec2.-2015-10-01.spot-price/spot-price :portkey.aws.ec2.-2015-10-01.spot-price/timestamp :portkey.aws.ec2.-2015-10-01.spot-price/availability-zone]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-request/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-request/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-listings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-request/reserved-instances-id :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-request/reserved-instances-listing-id :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-listings-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-subnet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-subnet-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-subnet-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-subnet-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-subnet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-subnet-request/vpc-id :portkey.aws.ec2.-2015-10-01.create-subnet-request/cidr-block] :opt-un [:portkey.aws.ec2.-2015-10-01.create-subnet-request/dry-run :portkey.aws.ec2.-2015-10-01.create-subnet-request/availability-zone]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instance-availability-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/scheduled-instance-availability))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/delete-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/failure-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/nat-gateway-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/nat-gateway-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/nat-gateway-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.nat-gateway/failure-code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/nat-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.nat-gateway/delete-time :portkey.aws.ec2.-2015-10-01/provisioned-bandwidth :portkey.aws.ec2.-2015-10-01.nat-gateway/subnet-id :portkey.aws.ec2.-2015-10-01.nat-gateway/nat-gateway-id :portkey.aws.ec2.-2015-10-01.nat-gateway/failure-message :portkey.aws.ec2.-2015-10-01.nat-gateway/vpc-id :portkey.aws.ec2.-2015-10-01.nat-gateway/nat-gateway-addresses :portkey.aws.ec2.-2015-10-01.nat-gateway/create-time :portkey.aws.ec2.-2015-10-01.nat-gateway/state :portkey.aws.ec2.-2015-10-01.nat-gateway/failure-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-customer-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/customer-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-hosts-result/hosts (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/host-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-hosts-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-hosts-result/hosts :portkey.aws.ec2.-2015-10-01.describe-hosts-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-status/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-status/update-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-instance-status/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-instance-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-instance-status/code :portkey.aws.ec2.-2015-10-01.spot-instance-status/update-time :portkey.aws.ec2.-2015-10-01.spot-instance-status/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-dns-support-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-dns-support-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.tag-description/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.tag-description/key (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.tag-description/value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/tag-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.tag-description/resource-id :portkey.aws.ec2.-2015-10-01/resource-type :portkey.aws.ec2.-2015-10-01.tag-description/key :portkey.aws.ec2.-2015-10-01.tag-description/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/account-attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/account-attribute-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/requester-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/peering-connection-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/accepter-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/peering-connection-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-vpc-peering-connection-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/dry-run :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/requester-peering-connection-options :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-request/accepter-peering-connection-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-snapshot-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/import-snapshot-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.dhcp-options/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.dhcp-options/dhcp-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/dhcp-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.dhcp-options/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/dhcp-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.dhcp-options/dhcp-options-id :portkey.aws.ec2.-2015-10-01.dhcp-options/dhcp-configurations :portkey.aws.ec2.-2015-10-01.dhcp-options/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-monitoring-enabled/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/run-instances-monitoring-enabled (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.run-instances-monitoring-enabled/enabled] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-id-group-pair-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/user-id-group-pair))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-password-data-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-password-data-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/get-password-data-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.get-password-data-request/instance-id] :opt-un [:portkey.aws.ec2.-2015-10-01.get-password-data-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disk-image-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/disk-image))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/tag-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/tag))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.client-data/upload-start (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.client-data/upload-end (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.client-data/upload-size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.client-data/comment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/client-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.client-data/upload-start :portkey.aws.ec2.-2015-10-01.client-data/upload-end :portkey.aws.ec2.-2015-10-01.client-data/upload-size :portkey.aws.ec2.-2015-10-01.client-data/comment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-acl-association-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/network-acl-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-volume-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-volume-attribute-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-volume-attribute-request/auto-enable-io (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-volume-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-volume-attribute-request/volume-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-volume-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.modify-volume-attribute-request/auto-enable-io]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-disk-container/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-disk-container/format (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-disk-container/url (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-disk-container/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-disk-container/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-disk-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.image-disk-container/description :portkey.aws.ec2.-2015-10-01.image-disk-container/format :portkey.aws.ec2.-2015-10-01.image-disk-container/url :portkey.aws.ec2.-2015-10-01/user-bucket :portkey.aws.ec2.-2015-10-01.image-disk-container/device-name :portkey.aws.ec2.-2015-10-01.image-disk-container/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/product-code-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/product-code))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-datafeed-subscription-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-info-status #{:insufficientdata "impaired" :ok "insufficient-data" :impaired "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/fleet-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/iam-fleet-role (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/fulfilled-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/terminate-instances-with-expiration (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/launch-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/launch-specs-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-fleet-request-config-data (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/spot-price :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/target-capacity :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/iam-fleet-role :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/launch-specifications] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/type :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/valid-from :portkey.aws.ec2.-2015-10-01/excess-capacity-termination-policy :portkey.aws.ec2.-2015-10-01/allocation-strategy :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/fulfilled-capacity :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/terminate-instances-with-expiration :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/client-token :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config-data/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/rule-number :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/protocol :portkey.aws.ec2.-2015-10-01/rule-action :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/egress :portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/cidr-block] :opt-un [:portkey.aws.ec2.-2015-10-01.create-network-acl-entry-request/dry-run :portkey.aws.ec2.-2015-10-01/icmp-type-code :portkey.aws.ec2.-2015-10-01/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/conversion-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-key-pair-request/key-name] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/listing-state #{:pending "sold" :sold "cancelled" :cancelled :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-events-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/volume-status-event))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/datafeed-subscription-state #{:inactive "Active" "Inactive" :active})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stop-instances-result/stopping-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/stop-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.stop-instances-result/stopping-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-batch-error-code #{:fleet-request-id-does-not-exist "fleetRequestIdDoesNotExist" "unexpectedError" "fleetRequestIdMalformed" :fleet-request-not-in-cancellable-state "fleetRequestNotInCancellableState" :fleet-request-id-malformed :unexpected-error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-result/vpc-endpoints (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-endpoint-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoints-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-result/vpc-endpoints :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.deregister-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.deregister-image-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/deregister-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.deregister-image-request/image-id] :opt-un [:portkey.aws.ec2.-2015-10-01.deregister-image-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/allocation-strategy #{"lowestPrice" :diversified :lowest-price "diversified"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/status-name #{:reachability "reachability"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-event/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-event/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-event/not-before (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-event/not-after (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-event/event-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.volume-status-event/event-type :portkey.aws.ec2.-2015-10-01.volume-status-event/description :portkey.aws.ec2.-2015-10-01.volume-status-event/not-before :portkey.aws.ec2.-2015-10-01.volume-status-event/not-after :portkey.aws.ec2.-2015-10-01.volume-status-event/event-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-endpoints-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-endpoints-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpc-endpoints-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-endpoints-request/vpc-endpoint-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-endpoints-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-intances-ids (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reserved-instances-id))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-result/scheduled-instance-set (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/purchased-scheduled-instance-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/purchase-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-result/scheduled-instance-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attribute-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.attribute-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-dhcp-options-request/dhcp-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/new-dhcp-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-dhcp-options-request/dhcp-configurations] :opt-un [:portkey.aws.ec2.-2015-10-01.create-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl-association/network-acl-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl-association/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl-association/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-acl-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-acl-association/network-acl-association-id :portkey.aws.ec2.-2015-10-01.network-acl-association/network-acl-id :portkey.aws.ec2.-2015-10-01.network-acl-association/subnet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/private-ip-address-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/private-ip-address-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/auto-placement #{"off" "on" :off :on})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-addresses-result/addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-addresses-result/addresses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-result/prefix-lists (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/prefix-list-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-prefix-lists-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-prefix-lists-result/prefix-lists :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-route-tables-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-route-tables-request/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-route-tables-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-route-tables-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-route-tables-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-route-tables-request/route-table-ids :portkey.aws.ec2.-2015-10-01.describe-route-tables-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/prefix-list-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/prefix-list-id))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/availability-zone-message-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/availability-zone-message))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-attribute-name #{:enable-dns-support :enable-dns-hostnames "enableDnsHostnames" "enableDnsSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/history-records (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/history-record))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-datafeed-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/spot-datafeed-subscription]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/target-environment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/export-environment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/export-to-s-3-task (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/export-to-s-3-task-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-instance-export-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/instance-id] :opt-un [:portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/description :portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/target-environment :portkey.aws.ec2.-2015-10-01.create-instance-export-task-request/export-to-s-3-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/tag-description-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/tag-description))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-tags-request/resources (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/resource-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-tags-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-tags-request/resources :portkey.aws.ec2.-2015-10-01.create-tags-request/tags] :opt-un [:portkey.aws.ec2.-2015-10-01.create-tags-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/product-code-values #{"marketplace" :devpay :marketplace "devpay"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-reserved-instances-listing-request/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-reserved-instances-listing-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-reserved-instances-listing-request/reserved-instances-listing-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-vpn-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.attach-vpn-gateway-request/vpn-gateway-id :portkey.aws.ec2.-2015-10-01.attach-vpn-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.attach-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/conversion-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/placement-strategy #{"cluster" :cluster})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-request/spot-fleet-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-request/terminate-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-request/spot-fleet-request-ids :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-request/terminate-instances] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-route-table-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-route-table-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/associate-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.associate-route-table-request/subnet-id :portkey.aws.ec2.-2015-10-01.associate-route-table-request/route-table-id] :opt-un [:portkey.aws.ec2.-2015-10-01.associate-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/internet-gateway-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/internet-gateway-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-key-pairs-result/key-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/key-pair-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-key-pairs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-key-pairs-result/key-pairs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-internet-gateways-result/internet-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/internet-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-internet-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-internet-gateways-result/internet-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-dns-support-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/classic-link-dns-support-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-dns-support-result/vpcs :portkey.aws.ec2.-2015-10-01/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-internet-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/detach-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.detach-internet-gateway-request/internet-gateway-id :portkey.aws.ec2.-2015-10-01.detach-internet-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.detach-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/volume-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-ebs (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/snapshot-id :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/volume-size :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/delete-on-termination :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/volume-type :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/iops :portkey.aws.ec2.-2015-10-01.scheduled-instances-ebs/encrypted]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-id-format-result/statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-id-format-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-id-format-result/statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-info/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-status-info-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-info/details (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-status-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.volume-status-info/status :portkey.aws.ec2.-2015-10-01.volume-status-info/details]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-capacity/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-capacity/available-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-capacity/total-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-capacity (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-capacity/instance-type :portkey.aws.ec2.-2015-10-01.instance-capacity/available-capacity :portkey.aws.ec2.-2015-10-01.instance-capacity/total-capacity]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ebs-instance-block-device))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-block-device-mapping/device-name :portkey.aws.ec2.-2015-10-01.instance-block-device-mapping/ebs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-result/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-result/create-volume-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-result/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-result/snapshot-id :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-result/create-volume-permissions :portkey.aws.ec2.-2015-10-01.describe-snapshot-attribute-result/product-codes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/customer-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/customer-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.classic-link-dns-support/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.classic-link-dns-support/classic-link-dns-supported (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/classic-link-dns-support (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.classic-link-dns-support/vpc-id :portkey.aws.ec2.-2015-10-01.classic-link-dns-support/classic-link-dns-supported]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-volume-io-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-volume-io-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/enable-volume-io-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.enable-volume-io-request/volume-id] :opt-un [:portkey.aws.ec2.-2015-10-01.enable-volume-io-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/monitoring-state #{:disabled :pending "enabled" :disabling "disabling" "disabled" "pending" :enabled})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-output-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-output-result/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-output-result/output (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/get-console-output-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.get-console-output-result/instance-id :portkey.aws.ec2.-2015-10-01.get-console-output-result/timestamp :portkey.aws.ec2.-2015-10-01.get-console-output-result/output]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-subnet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-subnet-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-subnet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-subnet-request/subnet-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-subnet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-placement-groups-result/placement-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/placement-group-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-placement-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-placement-groups-result/placement-groups]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/dhcp-options-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/vpc-peering-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reset-image-attribute-name #{"launchPermission" :launch-permission})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-hosts-result/successful (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-hosts-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/unsuccessful-item-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-hosts-result/successful :portkey.aws.ec2.-2015-10-01.modify-hosts-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/device-type #{:ebs "ebs" "instance-store" :instancestore})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpn-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/vpn-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/route))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.pricing-detail/price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.pricing-detail/count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/pricing-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.pricing-detail/price :portkey.aws.ec2.-2015-10-01.pricing-detail/count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-task-details/bytes-converted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-task-details/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-task-details/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-task-details/image (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-volume-task-details/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-volume-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-volume-task-details (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.import-volume-task-details/bytes-converted :portkey.aws.ec2.-2015-10-01.import-volume-task-details/availability-zone :portkey.aws.ec2.-2015-10-01.import-volume-task-details/image :portkey.aws.ec2.-2015-10-01.import-volume-task-details/volume] :opt-un [:portkey.aws.ec2.-2015-10-01.import-volume-task-details/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-customer-gateways-result/customer-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/customer-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-customer-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-customer-gateways-result/customer-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-security-group-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-monitoring))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-block-device-mapping-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-iam-instance-profile))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-network-interface-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-launch-specification (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/image-id] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/kernel-id :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/security-group-ids :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/placement :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/subnet-id :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/ebs-optimized :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/instance-type :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/key-name :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/monitoring :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/block-device-mappings :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/ramdisk-id :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/user-data :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/iam-instance-profile :portkey.aws.ec2.-2015-10-01.scheduled-instances-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/product-description-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-account-attributes-result/account-attributes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/account-attribute-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-account-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-account-attributes-result/account-attributes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-status #{"detaching" "in-use" :inuse "attaching" :attaching :available "available" :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-scheduled-instances-result/next-token :portkey.aws.ec2.-2015-10-01/scheduled-instance-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-subnet-attribute-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-subnet-attribute-request/map-public-ip-on-launch (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-subnet-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-subnet-attribute-request/subnet-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-subnet-attribute-request/map-public-ip-on-launch]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-result/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/purchase-reserved-instances-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-result/reserved-instances-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-classic-link-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpc-classic-link))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/group-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-disk-container/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-disk-container/format (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot-disk-container/url (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-disk-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.snapshot-disk-container/description :portkey.aws.ec2.-2015-10-01.snapshot-disk-container/format :portkey.aws.ec2.-2015-10-01.snapshot-disk-container/url :portkey.aws.ec2.-2015-10-01/user-bucket]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-spot-datafeed-subscription-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-instances-result/spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/request-spot-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.request-spot-instances-result/spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.price-schedule/term (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.price-schedule/price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.price-schedule/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.price-schedule/active (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/price-schedule (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.price-schedule/term :portkey.aws.ec2.-2015-10-01.price-schedule/price :portkey.aws.ec2.-2015-10-01.price-schedule/currency-code :portkey.aws.ec2.-2015-10-01.price-schedule/active]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-result/service-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoint-services-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-result/service-names :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-group-references-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-group-references-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-ids))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-security-group-references-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-security-group-references-request/group-id] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-security-group-references-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-placement-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-instance-placement-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-instance-placement-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpcs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpcs-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpcs-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpcs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpcs-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-vpcs-request/vpc-ids :portkey.aws.ec2.-2015-10-01.describe-vpcs-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instance-state #{:retired :paymentfailed :paymentpending :active "payment-pending" "payment-failed" "active" "retired"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-route-request/route-table-id :portkey.aws.ec2.-2015-10-01.delete-route-request/destination-cidr-block] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-route-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoint-services-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-request/max-results :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoint-services-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/allocation-state #{"released" "released-permanent-failure" :underassessment :releasedpermanentfailure :released "permanent-failure" "under-assessment" :available :permanentfailure "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reboot-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reboot-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reboot-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.reboot-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.reboot-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/export-task-state #{:completed "completed" "cancelling" "cancelled" :cancelled :active "active" :cancelling})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-state-change/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-state-change/current-state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-state-change/previous-state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-state-change (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-state-change/instance-id :portkey.aws.ec2.-2015-10-01.instance-state-change/current-state :portkey.aws.ec2.-2015-10-01.instance-state-change/previous-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-result/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-result/enable-dns-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-result/enable-dns-hostnames (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-result/vpc-id :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-result/enable-dns-support :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-result/enable-dns-hostnames]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.monitoring/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/monitoring-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.monitoring/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-flow-logs-result/flow-logs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/flow-log-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-flow-logs-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-flow-logs-result/flow-logs :portkey.aws.ec2.-2015-10-01.describe-flow-logs-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-scheduled-instance-availability-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-result/next-token :portkey.aws.ec2.-2015-10-01/scheduled-instance-availability-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/replace-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/rule-number :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/protocol :portkey.aws.ec2.-2015-10-01/rule-action :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/egress :portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/cidr-block] :opt-un [:portkey.aws.ec2.-2015-10-01.replace-network-acl-entry-request/dry-run :portkey.aws.ec2.-2015-10-01/icmp-type-code :portkey.aws.ec2.-2015-10-01/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.event-information/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.event-information/event-sub-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.event-information/event-description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/event-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.event-information/instance-id :portkey.aws.ec2.-2015-10-01.event-information/event-sub-type :portkey.aws.ec2.-2015-10-01.event-information/event-description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/vpc]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-address-result/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-address-result/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-address-result/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/allocate-address-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.allocate-address-result/public-ip :portkey.aws.ec2.-2015-10-01.allocate-address-result/domain :portkey.aws.ec2.-2015-10-01.allocate-address-result/allocation-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/launch-specs-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/spot-fleet-launch-specification :min-count 1))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volumes-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volumes-request/volume-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volumes-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volumes-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-volumes-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-volumes-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-volumes-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-volumes-request/volume-ids :portkey.aws.ec2.-2015-10-01.describe-volumes-request/filters :portkey.aws.ec2.-2015-10-01.describe-volumes-request/next-token :portkey.aws.ec2.-2015-10-01.describe-volumes-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-details/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-status-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-details/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.volume-status-details/name :portkey.aws.ec2.-2015-10-01.volume-status-details/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.move-address-to-vpc-result/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/move-address-to-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.move-address-to-vpc-result/allocation-id :portkey.aws.ec2.-2015-10-01/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ip-permission/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ip-permission/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ip-permission/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ip-permission/user-id-group-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/user-id-group-pair-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ip-permission/ip-ranges (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ip-range-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ip-permission/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/prefix-list-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ip-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.ip-permission/ip-protocol :portkey.aws.ec2.-2015-10-01.ip-permission/from-port :portkey.aws.ec2.-2015-10-01.ip-permission/to-port :portkey.aws.ec2.-2015-10-01.ip-permission/user-id-group-pairs :portkey.aws.ec2.-2015-10-01.ip-permission/ip-ranges :portkey.aws.ec2.-2015-10-01.ip-permission/prefix-list-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ip-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/ip-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-result/bundle-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/bundle-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-bundle-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-bundle-tasks-result/bundle-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.slot-date-time-range-request/earliest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.slot-date-time-range-request/latest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/slot-date-time-range-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.slot-date-time-range-request/earliest-time :portkey.aws.ec2.-2015-10-01.slot-date-time-range-request/latest-time] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-account-attributes-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-account-attributes-request/attribute-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/account-attribute-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-account-attributes-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-account-attributes-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-account-attributes-request/attribute-names]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-dns-support-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-dns-support-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ri-product-description #{"Windows (Amazon VPC)" :windows :linux-unix :windows-amazon-vpc :linux-unix-amazon-vpc "Windows" "Linux/UNIX" "Linux/UNIX (Amazon VPC)"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/volume))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-result/snapshots (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-snapshots-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-snapshots-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-snapshots-result/snapshots :portkey.aws.ec2.-2015-10-01.describe-snapshots-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/dhcp-options-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/dhcp-options))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unsuccessful-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/unsuccessful-item-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unsuccessful-item/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/unsuccessful-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.unsuccessful-item/error] :opt-un [:portkey.aws.ec2.-2015-10-01.unsuccessful-item/resource-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-tags-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-tags-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-tags-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-tags-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-tags-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-tags-request/filters :portkey.aws.ec2.-2015-10-01.describe-tags-request/max-results :portkey.aws.ec2.-2015-10-01.describe-tags-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-network-interface-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-network-interface-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-network-interface-request/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.attach-network-interface-request/network-interface-id :portkey.aws.ec2.-2015-10-01.attach-network-interface-request/instance-id :portkey.aws.ec2.-2015-10-01.attach-network-interface-request/device-index] :opt-un [:portkey.aws.ec2.-2015-10-01.attach-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-success-item/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-success-item/current-spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-success-item/previous-spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-success-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-success-item/spot-fleet-request-id :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-success-item/current-spot-fleet-request-state :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-success-item/previous-spot-fleet-request-state] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.release-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/release-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.release-hosts-request/host-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/propagating-vgw-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/propagating-vgw))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disk-image-format #{"VHD" "VMDK" :vmdk :raw :vhd "RAW"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment/instance-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-interface-attachment/attachment-id :portkey.aws.ec2.-2015-10-01.network-interface-attachment/instance-id :portkey.aws.ec2.-2015-10-01.network-interface-attachment/instance-owner-id :portkey.aws.ec2.-2015-10-01.network-interface-attachment/device-index :portkey.aws.ec2.-2015-10-01.network-interface-attachment/status :portkey.aws.ec2.-2015-10-01.network-interface-attachment/attach-time :portkey.aws.ec2.-2015-10-01.network-interface-attachment/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-network-interface-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/scheduled-instances-network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/security-group-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/spot-fleet-request-config (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-fleet-request-config-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-fleet-request-config (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/spot-fleet-request-id :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/spot-fleet-request-state :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/spot-fleet-request-config :portkey.aws.ec2.-2015-10-01.spot-fleet-request-config/create-time] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/domain-type #{"standard" "vpc" :vpc :standard})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vgw-telemetry/outside-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vgw-telemetry/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/telemetry-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vgw-telemetry/last-status-change (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vgw-telemetry/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vgw-telemetry/accepted-route-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vgw-telemetry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vgw-telemetry/outside-ip-address :portkey.aws.ec2.-2015-10-01.vgw-telemetry/status :portkey.aws.ec2.-2015-10-01.vgw-telemetry/last-status-change :portkey.aws.ec2.-2015-10-01.vgw-telemetry/status-message :portkey.aws.ec2.-2015-10-01.vgw-telemetry/accepted-route-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-request-state #{:open :closed :completed "completed" "closed" "cancelled" :cancelled :active "active" "open"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.report-instance-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.report-instance-status-request/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.report-instance-status-request/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/report-status-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.report-instance-status-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.report-instance-status-request/end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.report-instance-status-request/reason-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reason-codes-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.report-instance-status-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/report-instance-status-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.report-instance-status-request/instances :portkey.aws.ec2.-2015-10-01.report-instance-status-request/status :portkey.aws.ec2.-2015-10-01.report-instance-status-request/reason-codes] :opt-un [:portkey.aws.ec2.-2015-10-01.report-instance-status-request/dry-run :portkey.aws.ec2.-2015-10-01.report-instance-status-request/start-time :portkey.aws.ec2.-2015-10-01.report-instance-status-request/end-time :portkey.aws.ec2.-2015-10-01.report-instance-status-request/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/resource-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/resource-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/flow-logs-resource-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/log-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/deliver-logs-permission-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-flow-logs-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-flow-logs-request/resource-ids :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/resource-type :portkey.aws.ec2.-2015-10-01/traffic-type :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/log-group-name :portkey.aws.ec2.-2015-10-01.create-flow-logs-request/deliver-logs-permission-arn] :opt-un [:portkey.aws.ec2.-2015-10-01.create-flow-logs-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-images-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-images-request/image-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/image-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-images-request/owners (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/owner-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-images-request/executable-users (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/executable-by-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-images-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-images-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-images-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-images-request/image-ids :portkey.aws.ec2.-2015-10-01.describe-images-request/owners :portkey.aws.ec2.-2015-10-01.describe-images-request/executable-users :portkey.aws.ec2.-2015-10-01.describe-images-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/tag-set (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/interface-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/mac-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/requester-managed (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-private-ip-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/association (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/requester-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-interface/attachment :portkey.aws.ec2.-2015-10-01.network-interface/tag-set :portkey.aws.ec2.-2015-10-01.network-interface/interface-type :portkey.aws.ec2.-2015-10-01.network-interface/subnet-id :portkey.aws.ec2.-2015-10-01.network-interface/owner-id :portkey.aws.ec2.-2015-10-01.network-interface/mac-address :portkey.aws.ec2.-2015-10-01.network-interface/network-interface-id :portkey.aws.ec2.-2015-10-01.network-interface/source-dest-check :portkey.aws.ec2.-2015-10-01.network-interface/availability-zone :portkey.aws.ec2.-2015-10-01.network-interface/status :portkey.aws.ec2.-2015-10-01.network-interface/private-dns-name :portkey.aws.ec2.-2015-10-01.network-interface/requester-managed :portkey.aws.ec2.-2015-10-01.network-interface/description :portkey.aws.ec2.-2015-10-01.network-interface/vpc-id :portkey.aws.ec2.-2015-10-01.network-interface/groups :portkey.aws.ec2.-2015-10-01.network-interface/private-ip-addresses :portkey.aws.ec2.-2015-10-01.network-interface/association :portkey.aws.ec2.-2015-10-01.network-interface/requester-id :portkey.aws.ec2.-2015-10-01.network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-attachment-changes))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/description :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/source-dest-check :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/groups :portkey.aws.ec2.-2015-10-01.modify-network-interface-attribute-request/attachment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-bundle-task-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-bundle-task-request/bundle-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-bundle-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.cancel-bundle-task-request/bundle-id] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-bundle-task-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/state-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/owner-alias (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/data-encryption-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.snapshot/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.snapshot/start-time :portkey.aws.ec2.-2015-10-01.snapshot/state-message :portkey.aws.ec2.-2015-10-01.snapshot/owner-id :portkey.aws.ec2.-2015-10-01.snapshot/encrypted :portkey.aws.ec2.-2015-10-01.snapshot/tags :portkey.aws.ec2.-2015-10-01.snapshot/owner-alias :portkey.aws.ec2.-2015-10-01.snapshot/progress :portkey.aws.ec2.-2015-10-01.snapshot/description :portkey.aws.ec2.-2015-10-01.snapshot/data-encryption-key-id :portkey.aws.ec2.-2015-10-01.snapshot/kms-key-id :portkey.aws.ec2.-2015-10-01.snapshot/volume-id :portkey.aws.ec2.-2015-10-01.snapshot/state :portkey.aws.ec2.-2015-10-01.snapshot/volume-size :portkey.aws.ec2.-2015-10-01.snapshot/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/flow-logs-resource-type #{:network-interface "Subnet" :vpc "NetworkInterface" :subnet "VPC"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/resource-type #{:networkacl "vpn-gateway" "subnet" :dhcpoptions "vpc" "spot-instances-request" :instance "route-table" "image" :securitygroup :vpngateway :routetable "snapshot" "vpn-connection" :reservedinstances :volume "internet-gateway" :vpnconnection :snapshot "reserved-instances" "instance" :vpc :spotinstancesrequest "network-interface" "security-group" "volume" "dhcp-options" :image :networkinterface "customer-gateway" :customergateway :subnet "network-acl" :internetgateway})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-event/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/event-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-event/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-event/not-before (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status-event/not-after (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-status-event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-status-event/code :portkey.aws.ec2.-2015-10-01.instance-status-event/description :portkey.aws.ec2.-2015-10-01.instance-status-event/not-before :portkey.aws.ec2.-2015-10-01.instance-status-event/not-after]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-options-description/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-options-description/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-options-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc-peering-connection-options-description/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-options-description/allow-egress-from-local-vpc-to-remote-classic-link]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-name #{:ioperformance :ioenabled "io-performance" "io-enabled"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.internet-gateway/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.internet-gateway/attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/internet-gateway-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.internet-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/internet-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.internet-gateway/internet-gateway-id :portkey.aws.ec2.-2015-10-01.internet-gateway/attachments :portkey.aws.ec2.-2015-10-01.internet-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-result/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/classic-link-instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-classic-link-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-result/instances :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc/is-default (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc/vpc-id :portkey.aws.ec2.-2015-10-01.vpc/state :portkey.aws.ec2.-2015-10-01.vpc/cidr-block :portkey.aws.ec2.-2015-10-01.vpc/dhcp-options-id :portkey.aws.ec2.-2015-10-01.vpc/tags :portkey.aws.ec2.-2015-10-01.vpc/instance-tenancy :portkey.aws.ec2.-2015-10-01.vpc/is-default]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reset-image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reset-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.reset-image-attribute-request/image-id :portkey.aws.ec2.-2015-10-01.reset-image-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2015-10-01.reset-image-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-import-task-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-import-task-request/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-import-task-request/cancel-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-import-task-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-import-task-request/dry-run :portkey.aws.ec2.-2015-10-01.cancel-import-task-request/import-task-id :portkey.aws.ec2.-2015-10-01.cancel-import-task-request/cancel-reason]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-classic-link-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/instance-ids :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/filters :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/next-token :portkey.aws.ec2.-2015-10-01.describe-classic-link-instances-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/batch-state #{:cancelled-terminating :modifying :cancelled-running "cancelled_running" "failed" :submitted "cancelled" :cancelled :active "submitted" "modifying" "active" "cancelled_terminating" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/operation-type #{:remove "remove" "add" :add})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoints-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/vpc-endpoint-ids :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/filters :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/max-results :portkey.aws.ec2.-2015-10-01.describe-vpc-endpoints-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instance-recurrence-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/first-slot-start-time-range (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/slot-date-time-range-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/min-slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/max-slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-scheduled-instance-availability-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/recurrence :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/first-slot-start-time-range] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/min-slot-duration-in-hours :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/max-slot-duration-in-hours :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/next-token :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/max-results :portkey.aws.ec2.-2015-10-01.describe-scheduled-instance-availability-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/host-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.host-instance/instance-id :portkey.aws.ec2.-2015-10-01.host-instance/instance-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instances-result/reservations (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reservation-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-instances-result/reservations :portkey.aws.ec2.-2015-10-01.describe-instances-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-attribute-name #{"productCodes" "createVolumePermission" :product-codes :create-volume-permission})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/currency-code-values #{:usd "USD"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-attribute #{:description "groupSet" :group-set :source-dest-check "attachment" "sourceDestCheck" "description" :attachment})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/snapshot-details (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-detail-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-image-task/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-image-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.import-image-task/platform :portkey.aws.ec2.-2015-10-01.import-image-task/import-task-id :portkey.aws.ec2.-2015-10-01.import-image-task/image-id :portkey.aws.ec2.-2015-10-01.import-image-task/status-message :portkey.aws.ec2.-2015-10-01.import-image-task/status :portkey.aws.ec2.-2015-10-01.import-image-task/progress :portkey.aws.ec2.-2015-10-01.import-image-task/description :portkey.aws.ec2.-2015-10-01.import-image-task/snapshot-details :portkey.aws.ec2.-2015-10-01.import-image-task/hypervisor :portkey.aws.ec2.-2015-10-01.import-image-task/architecture :portkey.aws.ec2.-2015-10-01.import-image-task/license-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-customer-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-customer-gateways-request/customer-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/customer-gateway-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-customer-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-customer-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-customer-gateways-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-customer-gateways-request/customer-gateway-ids :portkey.aws.ec2.-2015-10-01.describe-customer-gateways-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/report-instance-reason-codes #{"password-not-available" "performance-instance-store" :other :performancenetwork :performanceebsvolume "not-accepting-credentials" "unresponsive" :performanceother :passwordnotavailable "other" "performance-ebs-volume" :notacceptingcredentials "instance-stuck-in-state" :performanceinstancestore "performance-network" :instancestuckinstate :unresponsive "performance-other"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reset-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.reset-snapshot-attribute-request/snapshot-id :portkey.aws.ec2.-2015-10-01.reset-snapshot-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2015-10-01.reset-snapshot-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/volume-status-details))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/summary-status #{:initializing :insufficientdata :notapplicable "impaired" "initializing" :ok "insufficient-data" :impaired "not-applicable" "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-vpn-gateway-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-flow-logs-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-flow-logs-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/bundle-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-classic-link-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/instance-id :portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/vpc-id :portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/groups] :opt-un [:portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/user-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/create-volume-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-volume-permission-modifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/attribute :portkey.aws.ec2.-2015-10-01/operation-type :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/user-ids :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/group-names :portkey.aws.ec2.-2015-10-01.modify-snapshot-attribute-request/create-volume-permission]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-fleet-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/request-spot-fleet-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.request-spot-fleet-response/spot-fleet-request-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-response/spot-fleet-request-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-fleet-request-config-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-requests-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-response/spot-fleet-request-configs] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-requests-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-type #{"standard" "sc1" "io1" :sc-1 :st-1 "gp2" "st1" :io-1 :standard :gp-2})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.customer-gateway/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.customer-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.customer-gateway/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.customer-gateway/ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.customer-gateway/bgp-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.customer-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/customer-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.customer-gateway/customer-gateway-id :portkey.aws.ec2.-2015-10-01.customer-gateway/state :portkey.aws.ec2.-2015-10-01.customer-gateway/type :portkey.aws.ec2.-2015-10-01.customer-gateway/ip-address :portkey.aws.ec2.-2015-10-01.customer-gateway/bgp-asn :portkey.aws.ec2.-2015-10-01.customer-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-connections-result/vpn-connections (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-connection-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpn-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpn-connections-result/vpn-connections]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/response-host-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/account-attribute-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/account-attribute-name))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/copy-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.copy-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/accept-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/vpc-peering-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/host-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/host))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-volume-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-volume-request/device (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-volume-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/detach-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.detach-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2015-10-01.detach-volume-request/dry-run :portkey.aws.ec2.-2015-10-01.detach-volume-request/instance-id :portkey.aws.ec2.-2015-10-01.detach-volume-request/device :portkey.aws.ec2.-2015-10-01.detach-volume-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/reserved-instances-offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/limit-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instance-limit-price))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/purchase-reserved-instances-offering-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/reserved-instances-offering-id :portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/instance-count] :opt-un [:portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/dry-run :portkey.aws.ec2.-2015-10-01.purchase-reserved-instances-offering-request/limit-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/stale-security-group-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/stale-security-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-permission-modifications/add (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-permission-modifications/remove (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/launch-permission-modifications (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.launch-permission-modifications/add :portkey.aws.ec2.-2015-10-01.launch-permission-modifications/remove]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unassign-private-ip-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unassign-private-ip-addresses-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/private-ip-address-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/unassign-private-ip-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.unassign-private-ip-addresses-request/network-interface-id :portkey.aws.ec2.-2015-10-01.unassign-private-ip-addresses-request/private-ip-addresses] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.terminate-instances-result/terminating-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/terminate-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.terminate-instances-result/terminating-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/volume-status-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpcs-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpcs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpcs-result/vpcs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.monitor-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.monitor-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/monitor-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.monitor-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.monitor-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-task/export-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/export-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/export-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.export-task/export-task-id :portkey.aws.ec2.-2015-10-01.export-task/description :portkey.aws.ec2.-2015-10-01.export-task/state :portkey.aws.ec2.-2015-10-01.export-task/status-message :portkey.aws.ec2.-2015-10-01/instance-export-details :portkey.aws.ec2.-2015-10-01/export-to-s-3-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-endpoints-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpc-endpoints-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-endpoints-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/association (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-private-ip-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/private-ip-address :portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/private-dns-name :portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/primary :portkey.aws.ec2.-2015-10-01.network-interface-private-ip-address/association]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-placement-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-placement-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-placement-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-placement-group-request/group-name] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-placement-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/max-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/min-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-instances-request/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/run-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.run-instances-request/image-id :portkey.aws.ec2.-2015-10-01.run-instances-request/min-count :portkey.aws.ec2.-2015-10-01.run-instances-request/max-count] :opt-un [:portkey.aws.ec2.-2015-10-01.run-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.run-instances-request/kernel-id :portkey.aws.ec2.-2015-10-01.run-instances-request/security-group-ids :portkey.aws.ec2.-2015-10-01/placement :portkey.aws.ec2.-2015-10-01.run-instances-request/subnet-id :portkey.aws.ec2.-2015-10-01.run-instances-request/security-groups :portkey.aws.ec2.-2015-10-01.run-instances-request/ebs-optimized :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.run-instances-request/key-name :portkey.aws.ec2.-2015-10-01.run-instances-request/additional-info :portkey.aws.ec2.-2015-10-01.run-instances-request/disable-api-termination :portkey.aws.ec2.-2015-10-01.run-instances-request/monitoring :portkey.aws.ec2.-2015-10-01.run-instances-request/block-device-mappings :portkey.aws.ec2.-2015-10-01.run-instances-request/ramdisk-id :portkey.aws.ec2.-2015-10-01.run-instances-request/user-data :portkey.aws.ec2.-2015-10-01.run-instances-request/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2015-10-01.run-instances-request/iam-instance-profile :portkey.aws.ec2.-2015-10-01.run-instances-request/client-token :portkey.aws.ec2.-2015-10-01.run-instances-request/private-ip-address :portkey.aws.ec2.-2015-10-01.run-instances-request/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/placement-group-state #{:deleted "deleting" :pending :deleting "deleted" :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-actions-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/volume-status-action))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-static-route-source #{:static "Static"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-response/active-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/active-instance-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-instances-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-response/spot-fleet-request-id :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-response/active-instances] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-instances-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-result/spot-price-history (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-price-history-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-price-history-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-price-history-result/spot-price-history :portkey.aws.ec2.-2015-10-01.describe-spot-price-history-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reset-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reset-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.reset-instance-attribute-request/instance-id :portkey.aws.ec2.-2015-10-01.reset-instance-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2015-10-01.reset-instance-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-request/purchase-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/purchase-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/purchase-scheduled-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-request/purchase-requests] :opt-un [:portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.purchase-scheduled-instances-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.move-address-to-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.move-address-to-vpc-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/move-address-to-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.move-address-to-vpc-request/public-ip] :opt-un [:portkey.aws.ec2.-2015-10-01.move-address-to-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-endpoint-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpc-endpoint))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.copy-snapshot-result/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/copy-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.copy-snapshot-result/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-export-tasks-request/export-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/export-task-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-export-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-export-tasks-request/export-task-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/subnet-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instance-limit-price/amount (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instance-limit-price/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instance-limit-price (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instance-limit-price/amount :portkey.aws.ec2.-2015-10-01.reserved-instance-limit-price/currency-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/interval (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/occurrence-relative-to-end (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/occurrence-unit (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instance-recurrence (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/frequency :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/interval :portkey.aws.ec2.-2015-10-01/occurrence-day-set :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/occurrence-relative-to-end :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence/occurrence-unit]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-classic-link-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.attach-classic-link-vpc-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-connection-options-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpn-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/type :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/customer-gateway-id :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/dry-run :portkey.aws.ec2.-2015-10-01.create-vpn-connection-request/options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disassociate-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disassociate-route-table-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disassociate-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.disassociate-route-table-request/association-id] :opt-un [:portkey.aws.ec2.-2015-10-01.disassociate-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-hosts-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-hosts-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-hosts-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-hosts-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-hosts-request/host-ids :portkey.aws.ec2.-2015-10-01.describe-hosts-request/next-token :portkey.aws.ec2.-2015-10-01.describe-hosts-request/max-results :portkey.aws.ec2.-2015-10-01.describe-hosts-request/filter]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-state/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-state/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-state-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-state (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-state/code :portkey.aws.ec2.-2015-10-01.instance-state/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/region-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/interval (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/occurrence-days (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/occurrence-day-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/occurrence-relative-to-end (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/occurrence-unit (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instance-recurrence-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/frequency :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/interval :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/occurrence-days :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/occurrence-relative-to-end :portkey.aws.ec2.-2015-10-01.scheduled-instance-recurrence-request/occurrence-unit]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-item/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-item/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-item/volume-status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-status-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-item/events (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-status-events-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-status-item/actions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-status-actions-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-status-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.volume-status-item/volume-id :portkey.aws.ec2.-2015-10-01.volume-status-item/availability-zone :portkey.aws.ec2.-2015-10-01.volume-status-item/volume-status :portkey.aws.ec2.-2015-10-01.volume-status-item/events :portkey.aws.ec2.-2015-10-01.volume-status-item/actions]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-instance-attribute-request/instance-id :portkey.aws.ec2.-2015-10-01.describe-instance-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-instance-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-instance-state #{:open :closed "failed" "closed" "cancelled" :cancelled :active "active" "open" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-response/unsuccessful-fleet-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-error-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-response/successful-fleet-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-success-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-response/unsuccessful-fleet-requests :portkey.aws.ec2.-2015-10-01.cancel-spot-fleet-requests-response/successful-fleet-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/detach-classic-link-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-request/instance-id :portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-state-name #{"stopping" "running" "terminated" :pending :shuttingdown :running :stopping :stopped "stopped" :terminated "shutting-down" "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/public-ips (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-moving-addresses-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/public-ips :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/next-token :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/filters :portkey.aws.ec2.-2015-10-01.describe-moving-addresses-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.availability-zone-message/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/availability-zone-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.availability-zone-message/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-nat-gateway-result/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-nat-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-nat-gateway-result/nat-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-bucket/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-bucket/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-bucket (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.user-bucket/s-3-bucket :portkey.aws.ec2.-2015-10-01.user-bucket/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/unsuccessful-item-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/unsuccessful-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.allocate-hosts-result/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/allocate-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.allocate-hosts-result/host-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/virtualization-type #{:hvm :paravirtual "paravirtual" "hvm"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.accept-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.accept-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/accept-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.accept-vpc-peering-connection-request/dry-run :portkey.aws.ec2.-2015-10-01.accept-vpc-peering-connection-request/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-attribute/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-attribute/kernel-id :portkey.aws.ec2.-2015-10-01.instance-attribute/instance-id :portkey.aws.ec2.-2015-10-01.instance-attribute/ebs-optimized :portkey.aws.ec2.-2015-10-01.instance-attribute/instance-type :portkey.aws.ec2.-2015-10-01.instance-attribute/sriov-net-support :portkey.aws.ec2.-2015-10-01.instance-attribute/source-dest-check :portkey.aws.ec2.-2015-10-01.instance-attribute/disable-api-termination :portkey.aws.ec2.-2015-10-01.instance-attribute/groups :portkey.aws.ec2.-2015-10-01.instance-attribute/block-device-mappings :portkey.aws.ec2.-2015-10-01.instance-attribute/product-codes :portkey.aws.ec2.-2015-10-01.instance-attribute/root-device-name :portkey.aws.ec2.-2015-10-01.instance-attribute/ramdisk-id :portkey.aws.ec2.-2015-10-01.instance-attribute/user-data :portkey.aws.ec2.-2015-10-01.instance-attribute/instance-initiated-shutdown-behavior]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-id/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-id (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instances-id/reserved-instances-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/reserved-instances-ids :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/filters :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-request/offering-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/private-ip-address-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/private-ip-address-config-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-security-group-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/associate-public-ip-address :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/private-ip-address-configs :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/subnet-id :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/network-interface-id :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/device-index :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/description :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/groups :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/delete-on-termination :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/secondary-private-ip-address-count :portkey.aws.ec2.-2015-10-01.scheduled-instances-network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-request/vpc-id :portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/max-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/min-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/include-marketplace (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/max-instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/reserved-instances-offering-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-offering-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-offerings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/max-duration :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/min-duration :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/availability-zone :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/next-token :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/instance-tenancy :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/include-marketplace :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/filters :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/product-description :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/max-results :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/offering-type :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/max-instance-count :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-offerings-request/reserved-instances-offering-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-vpc-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/vpc-id :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/service-name] :opt-un [:portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/dry-run :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/policy-document :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/route-table-ids :portkey.aws.ec2.-2015-10-01.create-vpc-endpoint-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reserved-instances-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-vpc-endpoint-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interfaces-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interfaces-request/network-interface-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-interface-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-network-interfaces-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-network-interfaces-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-network-interfaces-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-network-interfaces-request/network-interface-ids :portkey.aws.ec2.-2015-10-01.describe-network-interfaces-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-network-interface-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-network-interface-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.conversion-task/conversion-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.conversion-task/expiration-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.conversion-task/import-instance (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-instance-task-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.conversion-task/import-volume (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-volume-task-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.conversion-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/conversion-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.conversion-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.conversion-task/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/conversion-task (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.conversion-task/conversion-task-id :portkey.aws.ec2.-2015-10-01.conversion-task/state] :opt-un [:portkey.aws.ec2.-2015-10-01.conversion-task/expiration-time :portkey.aws.ec2.-2015-10-01.conversion-task/import-instance :portkey.aws.ec2.-2015-10-01.conversion-task/import-volume :portkey.aws.ec2.-2015-10-01.conversion-task/status-message :portkey.aws.ec2.-2015-10-01.conversion-task/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-subnets-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-subnets-request/subnet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/subnet-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-subnets-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-subnets-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-subnets-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-subnets-request/subnet-ids :portkey.aws.ec2.-2015-10-01.describe-subnets-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.bundle-task-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/bundle-task-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.bundle-task-error/code :portkey.aws.ec2.-2015-10-01.bundle-task-error/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.dhcp-configuration/key (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.dhcp-configuration/values (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/dhcp-configuration-value-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/dhcp-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.dhcp-configuration/key :portkey.aws.ec2.-2015-10-01.dhcp-configuration/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.key-pair/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.key-pair/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.key-pair/key-material (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/key-pair (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.key-pair/key-name :portkey.aws.ec2.-2015-10-01.key-pair/key-fingerprint :portkey.aws.ec2.-2015-10-01.key-pair/key-material]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-nat-gateway-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-nat-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-nat-gateway-request/nat-gateway-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ebs-block-device))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.block-device-mapping/virtual-name :portkey.aws.ec2.-2015-10-01.block-device-mapping/device-name :portkey.aws.ec2.-2015-10-01.block-device-mapping/ebs :portkey.aws.ec2.-2015-10-01.block-device-mapping/no-device]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/state #{:deleted :pending :deleting "Deleting" "Deleted" :available "Pending" "Available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-to-s-3-task/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.export-to-s-3-task/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/export-to-s-3-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/disk-image-format :portkey.aws.ec2.-2015-10-01/container-format :portkey.aws.ec2.-2015-10-01.export-to-s-3-task/s-3-bucket :portkey.aws.ec2.-2015-10-01.export-to-s-3-task/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-acl-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/network-acl))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/max-results (clojure.spec.alpha/int-in 5 255))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.tag/key (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.tag/value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.tag/key :portkey.aws.ec2.-2015-10-01.tag/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-subnets-result/subnets (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/subnet-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-subnets-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-subnets-result/subnets]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-address-result/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/associate-address-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.associate-address-result/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/recurring-charge-frequency #{"Hourly" :hourly})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/executable-by-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-instance-export-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/export-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-result/requester-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/peering-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-result/accepter-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/peering-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-vpc-peering-connection-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-result/requester-peering-connection-options :portkey.aws.ec2.-2015-10-01.modify-vpc-peering-connection-options-result/accepter-peering-connection-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-availability-zones-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-availability-zones-request/zone-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/zone-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-availability-zones-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-availability-zones-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-availability-zones-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-availability-zones-request/zone-names :portkey.aws.ec2.-2015-10-01.describe-availability-zones-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-route-table-result/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/associate-route-table-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.associate-route-table-result/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/platform-values #{:windows "Windows"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image/image (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disk-image (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.disk-image/image :portkey.aws.ec2.-2015-10-01.disk-image/description :portkey.aws.ec2.-2015-10-01.disk-image/volume]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disassociate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disassociate-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disassociate-address-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disassociate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.disassociate-address-request/dry-run :portkey.aws.ec2.-2015-10-01.disassociate-address-request/public-ip :portkey.aws.ec2.-2015-10-01.disassociate-address-request/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-success-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-success-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.product-code/product-code-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.product-code/product-code-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/product-code (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.product-code/product-code-id :portkey.aws.ec2.-2015-10-01.product-code/product-code-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.port-range/from (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.port-range/to (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/port-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.port-range/from :portkey.aws.ec2.-2015-10-01.port-range/to]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-state #{:pending :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attachment-status #{"attached" "detaching" :detached "detached" "attaching" :attaching :attached :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.peering-connection-options/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.peering-connection-options/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/peering-connection-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.peering-connection-options/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2015-10-01.peering-connection-options/allow-egress-from-local-vpc-to-remote-classic-link]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-attachment/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc-attachment/vpc-id :portkey.aws.ec2.-2015-10-01.vpc-attachment/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/revoke-security-group-egress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/group-id] :opt-un [:portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/source-security-group-owner-id :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/dry-run :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/to-port :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/source-security-group-name :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/ip-protocol :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/from-port :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/ip-permissions :portkey.aws.ec2.-2015-10-01.revoke-security-group-egress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status/events (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-status-event-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status/system-status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-status-summary))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-status/instance-status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-status-summary))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-status/instance-id :portkey.aws.ec2.-2015-10-01.instance-status/availability-zone :portkey.aws.ec2.-2015-10-01.instance-status/events :portkey.aws.ec2.-2015-10-01/instance-state :portkey.aws.ec2.-2015-10-01.instance-status/system-status :portkey.aws.ec2.-2015-10-01.instance-status/instance-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-fleet-monitoring))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/weighted-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/spot-fleet-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/kernel-id :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/image-id :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/placement :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/addressing-type :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/subnet-id :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/security-groups :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/ebs-optimized :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/key-name :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/spot-price :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/monitoring :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/weighted-capacity :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/block-device-mappings :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/ramdisk-id :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/user-data :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/iam-instance-profile :portkey.aws.ec2.-2015-10-01.spot-fleet-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-vpn-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/detach-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.detach-vpn-gateway-request/vpn-gateway-id :portkey.aws.ec2.-2015-10-01.detach-vpn-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.detach-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.ip-range/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ip-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.ip-range/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-security-group/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-security-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-security-group/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-security-group/stale-ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/stale-ip-permission-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stale-security-group/stale-ip-permissions-egress (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/stale-ip-permission-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/stale-security-group (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.stale-security-group/group-id] :opt-un [:portkey.aws.ec2.-2015-10-01.stale-security-group/group-name :portkey.aws.ec2.-2015-10-01.stale-security-group/description :portkey.aws.ec2.-2015-10-01.stale-security-group/vpc-id :portkey.aws.ec2.-2015-10-01.stale-security-group/stale-ip-permissions :portkey.aws.ec2.-2015-10-01.stale-security-group/stale-ip-permissions-egress]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/block-device-mapping-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-task/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-snapshot-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-snapshot-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.import-snapshot-task/import-task-id :portkey.aws.ec2.-2015-10-01/snapshot-task-detail :portkey.aws.ec2.-2015-10-01.import-snapshot-task/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/container-format #{:ova "ova"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/purchase-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/purchase-request :min-count 1))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-security-group-result/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-security-group-result/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-state-reason/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-state-reason-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-state-reason/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-state-reason (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpc-peering-connection-state-reason/code :portkey.aws.ec2.-2015-10-01.vpc-peering-connection-state-reason/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/new-dhcp-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/new-dhcp-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-password-data-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-password-data-result/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-password-data-result/password-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/get-password-data-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.get-password-data-result/instance-id :portkey.aws.ec2.-2015-10-01.get-password-data-result/timestamp :portkey.aws.ec2.-2015-10-01.get-password-data-result/password-data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-prefix-lists-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/prefix-list-ids :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/filters :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/max-results :portkey.aws.ec2.-2015-10-01.describe-prefix-lists-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-volume-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/conversion-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/instance-lifecycle (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-lifecycle-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/root-device-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/device-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/hypervisor-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/launch-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/ami-launch-index (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/state-transition-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance/public-dns-name :portkey.aws.ec2.-2015-10-01.instance/kernel-id :portkey.aws.ec2.-2015-10-01.instance/spot-instance-request-id :portkey.aws.ec2.-2015-10-01.instance/instance-id :portkey.aws.ec2.-2015-10-01.instance/instance-lifecycle :portkey.aws.ec2.-2015-10-01.instance/platform :portkey.aws.ec2.-2015-10-01.instance/image-id :portkey.aws.ec2.-2015-10-01/placement :portkey.aws.ec2.-2015-10-01.instance/subnet-id :portkey.aws.ec2.-2015-10-01.instance/root-device-type :portkey.aws.ec2.-2015-10-01.instance/security-groups :portkey.aws.ec2.-2015-10-01.instance/ebs-optimized :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.instance/sriov-net-support :portkey.aws.ec2.-2015-10-01.instance/tags :portkey.aws.ec2.-2015-10-01.instance/source-dest-check :portkey.aws.ec2.-2015-10-01.instance/key-name :portkey.aws.ec2.-2015-10-01.instance/private-dns-name :portkey.aws.ec2.-2015-10-01.instance/vpc-id :portkey.aws.ec2.-2015-10-01/monitoring :portkey.aws.ec2.-2015-10-01.instance/block-device-mappings :portkey.aws.ec2.-2015-10-01.instance/hypervisor :portkey.aws.ec2.-2015-10-01.instance/architecture :portkey.aws.ec2.-2015-10-01/virtualization-type :portkey.aws.ec2.-2015-10-01.instance/product-codes :portkey.aws.ec2.-2015-10-01.instance/state :portkey.aws.ec2.-2015-10-01.instance/root-device-name :portkey.aws.ec2.-2015-10-01.instance/ramdisk-id :portkey.aws.ec2.-2015-10-01.instance/launch-time :portkey.aws.ec2.-2015-10-01.instance/public-ip-address :portkey.aws.ec2.-2015-10-01/state-reason :portkey.aws.ec2.-2015-10-01/iam-instance-profile :portkey.aws.ec2.-2015-10-01.instance/ami-launch-index :portkey.aws.ec2.-2015-10-01.instance/client-token :portkey.aws.ec2.-2015-10-01.instance/state-transition-reason :portkey.aws.ec2.-2015-10-01.instance/private-ip-address :portkey.aws.ec2.-2015-10-01.instance/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.terminate-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.terminate-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/terminate-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.terminate-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.terminate-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-reserved-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-reserved-instances-request/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-reserved-instances-request/target-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-reserved-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-reserved-instances-request/reserved-instances-ids :portkey.aws.ec2.-2015-10-01.modify-reserved-instances-request/target-configurations] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-reserved-instances-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-acl-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-network-acl-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-network-acl-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-network-acl-request/network-acl-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-network-acl-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-placement-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-placement-groups-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/placement-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-placement-groups-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-placement-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-placement-groups-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-placement-groups-request/group-names :portkey.aws.ec2.-2015-10-01.describe-placement-groups-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/user-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/user-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/user-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/launch-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/launch-permission-modifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/image-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/user-ids :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/attribute :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/value :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/description :portkey.aws.ec2.-2015-10-01/operation-type :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/product-codes :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/user-groups :portkey.aws.ec2.-2015-10-01.modify-image-attribute-request/launch-permission]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/nat-gateway-state #{:deleted "deleting" "failed" :pending :deleting "deleted" :available "pending" "available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-result/reserved-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-result/reserved-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-result/nat-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/nat-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-nat-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-nat-gateways-result/nat-gateways :portkey.aws.ec2.-2015-10-01.describe-nat-gateways-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/block-device-mapping-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/blob clojure.core/bytes?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group-reference/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group-reference/referencing-vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.security-group-reference/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/security-group-reference (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.security-group-reference/group-id :portkey.aws.ec2.-2015-10-01.security-group-reference/referencing-vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.security-group-reference/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/classic-link-dns-support-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/classic-link-dns-support))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/gateway-type #{:ipsec-1 "ipsec.1"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-iam-instance-profile/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instances-iam-instance-profile/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-iam-instance-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instances-iam-instance-profile/arn :portkey.aws.ec2.-2015-10-01.scheduled-instances-iam-instance-profile/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/root-device-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/device-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/public (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/hypervisor-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/image-owner-alias (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/creation-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/image-location (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/image-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/image-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/image-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image/name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.image/kernel-id :portkey.aws.ec2.-2015-10-01.image/platform :portkey.aws.ec2.-2015-10-01.image/image-id :portkey.aws.ec2.-2015-10-01.image/root-device-type :portkey.aws.ec2.-2015-10-01.image/owner-id :portkey.aws.ec2.-2015-10-01.image/sriov-net-support :portkey.aws.ec2.-2015-10-01.image/tags :portkey.aws.ec2.-2015-10-01.image/public :portkey.aws.ec2.-2015-10-01.image/description :portkey.aws.ec2.-2015-10-01.image/block-device-mappings :portkey.aws.ec2.-2015-10-01.image/hypervisor :portkey.aws.ec2.-2015-10-01.image/architecture :portkey.aws.ec2.-2015-10-01.image/image-owner-alias :portkey.aws.ec2.-2015-10-01.image/creation-date :portkey.aws.ec2.-2015-10-01/virtualization-type :portkey.aws.ec2.-2015-10-01.image/product-codes :portkey.aws.ec2.-2015-10-01.image/image-location :portkey.aws.ec2.-2015-10-01.image/state :portkey.aws.ec2.-2015-10-01.image/image-type :portkey.aws.ec2.-2015-10-01.image/root-device-name :portkey.aws.ec2.-2015-10-01.image/ramdisk-id :portkey.aws.ec2.-2015-10-01.image/name :portkey.aws.ec2.-2015-10-01/state-reason]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/report-status-type #{"impaired" :ok :impaired "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/ip-range-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/ip-range))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-route-table-association-result/new-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/replace-route-table-association-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.replace-route-table-association-result/new-association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-type-values #{"kernel" :ramdisk "machine" "ramdisk" :machine :kernel})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-groups-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-groups-request/group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-groups-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-security-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-security-groups-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-security-groups-request/group-names :portkey.aws.ec2.-2015-10-01.describe-security-groups-request/group-ids :portkey.aws.ec2.-2015-10-01.describe-security-groups-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-instance-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/placement :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/subnet-id :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/group-ids :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/additional-info :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/monitoring :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/architecture :portkey.aws.ec2.-2015-10-01/user-data :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/group-names :portkey.aws.ec2.-2015-10-01.import-instance-launch-specification/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.classic-link-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.classic-link-instance/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.classic-link-instance/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.classic-link-instance/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/classic-link-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.classic-link-instance/instance-id :portkey.aws.ec2.-2015-10-01.classic-link-instance/vpc-id :portkey.aws.ec2.-2015-10-01.classic-link-instance/groups :portkey.aws.ec2.-2015-10-01.classic-link-instance/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.cancel-spot-instance-requests-result/cancelled-spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancelled-spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-requests-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.cancel-spot-instance-requests-result/cancelled-spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-result/import-snapshot-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-snapshot-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-import-snapshot-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-result/import-snapshot-tasks :portkey.aws.ec2.-2015-10-01.describe-import-snapshot-tasks-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-instance-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-request/disk-images (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.import-instance-request/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.import-instance-request/platform] :opt-un [:portkey.aws.ec2.-2015-10-01.import-instance-request/dry-run :portkey.aws.ec2.-2015-10-01.import-instance-request/description :portkey.aws.ec2.-2015-10-01.import-instance-request/launch-specification :portkey.aws.ec2.-2015-10-01.import-instance-request/disk-images]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-classic-link-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-request/vpc-ids :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/authorize-security-group-ingress-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/source-security-group-owner-id :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/dry-run :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/to-port :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/source-security-group-name :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/ip-protocol :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/group-name :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/group-id :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/from-port :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/ip-permissions :portkey.aws.ec2.-2015-10-01.authorize-security-group-ingress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instances-block-device-mapping-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/scheduled-instances-block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-error-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-error-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-request/purchase-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.purchase-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/purchase-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.purchase-request/purchase-token :portkey.aws.ec2.-2015-10-01.purchase-request/instance-count] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-request/size (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-request/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-volume-request/availability-zone] :opt-un [:portkey.aws.ec2.-2015-10-01.create-volume-request/dry-run :portkey.aws.ec2.-2015-10-01.create-volume-request/size :portkey.aws.ec2.-2015-10-01.create-volume-request/snapshot-id :portkey.aws.ec2.-2015-10-01/volume-type :portkey.aws.ec2.-2015-10-01.create-volume-request/iops :portkey.aws.ec2.-2015-10-01.create-volume-request/encrypted :portkey.aws.ec2.-2015-10-01.create-volume-request/kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reserved-instances-modification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-acl-entry-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/network-acl-entry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-dhcp-options-result/dhcp-options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/dhcp-options-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-dhcp-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-dhcp-options-result/dhcp-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/ramdisk (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-block-device-mapping-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/kernel (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/blob-attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/instance-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/dry-run :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/ebs-optimized :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/instance-type :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/ramdisk :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/sriov-net-support :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/source-dest-check :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/attribute :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/value :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/disable-api-termination :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/groups :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/block-device-mappings :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/kernel :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/user-data :portkey.aws.ec2.-2015-10-01.modify-instance-attribute-request/instance-initiated-shutdown-behavior]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-nat-gateway-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-nat-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/nat-gateway :portkey.aws.ec2.-2015-10-01.create-nat-gateway-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.release-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.release-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.release-address-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/release-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.release-address-request/dry-run :portkey.aws.ec2.-2015-10-01.release-address-request/public-ip :portkey.aws.ec2.-2015-10-01.release-address-request/allocation-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-dns-support-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-classic-link-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpc-classic-link-dns-support-request/vpc-ids :portkey.aws.ec2.-2015-10-01/max-results :portkey.aws.ec2.-2015-10-01/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-private-ip-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/network-interface-private-ip-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/launch-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.image-attribute/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.image-attribute/image-id :portkey.aws.ec2.-2015-10-01.image-attribute/launch-permissions :portkey.aws.ec2.-2015-10-01.image-attribute/product-codes :portkey.aws.ec2.-2015-10-01.image-attribute/kernel-id :portkey.aws.ec2.-2015-10-01.image-attribute/ramdisk-id :portkey.aws.ec2.-2015-10-01.image-attribute/description :portkey.aws.ec2.-2015-10-01.image-attribute/sriov-net-support :portkey.aws.ec2.-2015-10-01.image-attribute/block-device-mappings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/resource-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reject-vpc-peering-connection-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reject-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reject-vpc-peering-connection-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-request/reserved-instances-modification-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-modifications-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-request/reserved-instances-modification-ids :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-request/next-token :portkey.aws.ec2.-2015-10-01.describe-reserved-instances-modifications-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/conversion-task-state #{:completed "completed" "cancelling" "cancelled" :cancelled :active "active" :cancelling})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-interface-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-interface-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-interface-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-interface-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-interface-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-interface-request/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-network-interface-request/subnet-id] :opt-un [:portkey.aws.ec2.-2015-10-01.create-network-interface-request/description :portkey.aws.ec2.-2015-10-01.create-network-interface-request/private-ip-address :portkey.aws.ec2.-2015-10-01.create-network-interface-request/groups :portkey.aws.ec2.-2015-10-01.create-network-interface-request/private-ip-addresses :portkey.aws.ec2.-2015-10-01.create-network-interface-request/secondary-private-ip-address-count :portkey.aws.ec2.-2015-10-01.create-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/request-host-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-stale-security-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-stale-security-groups-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-stale-security-groups-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-stale-security-groups-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-stale-security-groups-request/dry-run :portkey.aws.ec2.-2015-10-01/max-results :portkey.aws.ec2.-2015-10-01/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/nat-gateway-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/nat-gateway-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/reserved-instances-modification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/modification-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-instances-modification-result-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reserved-intances-ids))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/update-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/effective-date (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reserved-instances-modification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.reserved-instances-modification/status-message :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/create-date :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/reserved-instances-modification-id :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/status :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/modification-results :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/reserved-instances-ids :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/update-date :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/effective-date :portkey.aws.ec2.-2015-10-01.reserved-instances-modification/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/listing-status #{:closed :pending "closed" "cancelled" :cancelled :active "active" "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-spot-datafeed-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/spot-datafeed-subscription]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/image-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/bundle-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/bundle-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-route-table-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-route-table-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.create-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-attribute-name #{:instance-initiated-shutdown-behavior "kernel" "groupSet" "productCodes" :group-set "blockDeviceMapping" :source-dest-check :disable-api-termination :ramdisk :root-device-name :product-codes "disableApiTermination" :instance-type :ebs-optimized "sourceDestCheck" :user-data "userData" "ebsOptimized" :block-device-mapping "ramdisk" :sriov-net-support "instanceType" :kernel "rootDeviceName" "instanceInitiatedShutdownBehavior" "sriovNetSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/classic-link-instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/classic-link-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-image-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/import-image-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route-table-association-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/route-table-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.start-instances-result/starting-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/start-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.start-instances-result/starting-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disk-image-format))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-detail/bytes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.disk-image-detail/import-manifest-url (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/disk-image-detail (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.disk-image-detail/format :portkey.aws.ec2.-2015-10-01.disk-image-detail/bytes :portkey.aws.ec2.-2015-10-01.disk-image-detail/import-manifest-url] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-data/data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.user-data/data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/offering-type-values #{"All Upfront" :heavy-utilization :no-upfront :medium-utilization :all-upfront :light-utilization :partial-upfront "No Upfront" "Heavy Utilization" "Light Utilization" "Partial Upfront" "Medium Utilization"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/float clojure.core/float?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-result/vpn-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-vpn-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-vpn-gateways-result/vpn-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl/is-default (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl/entries (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-acl-entry-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl/associations (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/network-acl-association-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-acl/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-acl (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-acl/network-acl-id :portkey.aws.ec2.-2015-10-01.network-acl/vpc-id :portkey.aws.ec2.-2015-10-01.network-acl/is-default :portkey.aws.ec2.-2015-10-01.network-acl/entries :portkey.aws.ec2.-2015-10-01.network-acl/associations :portkey.aws.ec2.-2015-10-01.network-acl/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-attachment/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-attachment/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-attachment/device (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-attachment-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.volume-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/volume-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.volume-attachment/volume-id :portkey.aws.ec2.-2015-10-01.volume-attachment/instance-id :portkey.aws.ec2.-2015-10-01.volume-attachment/device :portkey.aws.ec2.-2015-10-01.volume-attachment/state :portkey.aws.ec2.-2015-10-01.volume-attachment/attach-time :portkey.aws.ec2.-2015-10-01.volume-attachment/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-dhcp-options-request/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.associate-dhcp-options-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/associate-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.associate-dhcp-options-request/dhcp-options-id :portkey.aws.ec2.-2015-10-01.associate-dhcp-options-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.associate-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment-changes/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-attachment-changes/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-attachment-changes (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-interface-attachment-changes/attachment-id :portkey.aws.ec2.-2015-10-01.network-interface-attachment-changes/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table-association/route-table-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table-association/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table-association/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.route-table-association/main (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/route-table-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.route-table-association/route-table-association-id :portkey.aws.ec2.-2015-10-01.route-table-association/route-table-id :portkey.aws.ec2.-2015-10-01.route-table-association/subnet-id :portkey.aws.ec2.-2015-10-01.route-table-association/main]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reject-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.reject-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reject-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.reject-vpc-peering-connection-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2015-10-01.reject-vpc-peering-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/private-ip-address-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/routes (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-static-route-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/vgw-telemetry (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vgw-telemetry-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/options (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-connection/customer-gateway-configuration (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-connection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpn-connection/type :portkey.aws.ec2.-2015-10-01.vpn-connection/tags :portkey.aws.ec2.-2015-10-01.vpn-connection/routes :portkey.aws.ec2.-2015-10-01.vpn-connection/customer-gateway-id :portkey.aws.ec2.-2015-10-01.vpn-connection/vpn-gateway-id :portkey.aws.ec2.-2015-10-01.vpn-connection/vgw-telemetry :portkey.aws.ec2.-2015-10-01.vpn-connection/vpn-connection-id :portkey.aws.ec2.-2015-10-01.vpn-connection/state :portkey.aws.ec2.-2015-10-01.vpn-connection/options :portkey.aws.ec2.-2015-10-01.vpn-connection/customer-gateway-configuration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.region/region-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.region/endpoint (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/region (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.region/region-name :portkey.aws.ec2.-2015-10-01.region/endpoint]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.state-reason/code (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.state-reason/message (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/state-reason (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.state-reason/code :portkey.aws.ec2.-2015-10-01.state-reason/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-association-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-association-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.replace-network-acl-association-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/replace-network-acl-association-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.replace-network-acl-association-request/association-id :portkey.aws.ec2.-2015-10-01.replace-network-acl-association-request/network-acl-id] :opt-un [:portkey.aws.ec2.-2015-10-01.replace-network-acl-association-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.iam-instance-profile/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.iam-instance-profile/id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/iam-instance-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.iam-instance-profile/arn :portkey.aws.ec2.-2015-10-01.iam-instance-profile/id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.enable-vpc-classic-link-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/owner-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/max-term-duration-in-days (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/network-platform (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instance-recurrence))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/total-scheduled-instance-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/purchase-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/first-slot-start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/available-instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/min-term-duration-in-days (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/scheduled-instance-availability (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/max-term-duration-in-days :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/platform :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/network-platform :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/recurrence :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/instance-type :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/total-scheduled-instance-hours :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/availability-zone :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/hourly-price :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/purchase-token :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/slot-duration-in-hours :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/first-slot-start-time :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/available-instance-count :portkey.aws.ec2.-2015-10-01.scheduled-instance-availability/min-term-duration-in-days]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/scheduled-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/scheduled-instances-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/run-scheduled-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/scheduled-instance-id :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/launch-specification] :opt-un [:portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/client-token :portkey.aws.ec2.-2015-10-01.run-scheduled-instances-request/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-request/spot-instance-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-instance-request-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-instance-requests-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-request/spot-instance-request-ids :portkey.aws.ec2.-2015-10-01.describe-spot-instance-requests-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-permission-modifications/add (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-volume-permission-modifications/remove (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-volume-permission-modifications (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.create-volume-permission-modifications/add :portkey.aws.ec2.-2015-10-01.create-volume-permission-modifications/remove]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.active-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.active-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.active-instance/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/active-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.active-instance/instance-type :portkey.aws.ec2.-2015-10-01.active-instance/instance-id :portkey.aws.ec2.-2015-10-01.active-instance/spot-instance-request-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.attach-internet-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.attach-internet-gateway-request/internet-gateway-id :portkey.aws.ec2.-2015-10-01.attach-internet-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2015-10-01.attach-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stop-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stop-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.stop-instances-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/stop-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.stop-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2015-10-01.stop-instances-request/dry-run :portkey.aws.ec2.-2015-10-01.stop-instances-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reason-codes-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/report-instance-reason-codes))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/subnet))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/filter-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/filter))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-groups-result/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-security-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-security-groups-result/security-groups]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.account-attribute-value/attribute-value (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/account-attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.account-attribute-value/attribute-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpc-peering-connection-state-reason-code #{:deleted :pendingacceptance "expired" "deleting" :rejected "failed" :deleting "initiating-request" "provisioning" :initiatingrequest :active "deleted" :expired :provisioning "pending-acceptance" "active" "rejected" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-permission/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.launch-permission/group (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/launch-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.launch-permission/user-id :portkey.aws.ec2.-2015-10-01.launch-permission/group]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/internet-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/internet-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.account-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.account-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/account-attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/account-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.account-attribute/attribute-name :portkey.aws.ec2.-2015-10-01.account-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host/host-reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/allocation-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/host-instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.host/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/host (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/host-properties :portkey.aws.ec2.-2015-10-01.host/host-id :portkey.aws.ec2.-2015-10-01/available-capacity :portkey.aws.ec2.-2015-10-01.host/availability-zone :portkey.aws.ec2.-2015-10-01/auto-placement :portkey.aws.ec2.-2015-10-01.host/host-reservation-id :portkey.aws.ec2.-2015-10-01.host/state :portkey.aws.ec2.-2015-10-01.host/instances :portkey.aws.ec2.-2015-10-01.host/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-security-group-references-result/security-group-reference-set (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-references))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-security-group-references-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-security-group-references-result/security-group-reference-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-regions-result/regions (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/region-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-regions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-regions-result/regions]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/detach-classic-link-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.detach-classic-link-vpc-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.placement-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.placement-group/strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/placement-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.placement-group/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/placement-group-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/placement-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.placement-group/group-name :portkey.aws.ec2.-2015-10-01.placement-group/strategy :portkey.aws.ec2.-2015-10-01.placement-group/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-gateway-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.private-ip-address-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.private-ip-address-specification/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/private-ip-address-specification (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.private-ip-address-specification/private-ip-address] :opt-un [:portkey.aws.ec2.-2015-10-01.private-ip-address-specification/primary]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/request-spot-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/kernel-id :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/security-group-ids :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/image-id :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/placement :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/addressing-type :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/subnet-id :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/security-groups :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/ebs-optimized :portkey.aws.ec2.-2015-10-01/instance-type :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/key-name :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/monitoring :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/block-device-mappings :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/ramdisk-id :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/user-data :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/iam-instance-profile :portkey.aws.ec2.-2015-10-01.request-spot-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/reservation-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/reservation))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-vpc-peering-connection-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-vpc-peering-connection-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/reset-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/add-route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/remove-route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/modify-vpc-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/vpc-endpoint-id] :opt-un [:portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/dry-run :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/reset-policy :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/policy-document :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/add-route-table-ids :portkey.aws.ec2.-2015-10-01.modify-vpc-endpoint-request/remove-route-table-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-id-group-pair/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-id-group-pair/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-id-group-pair/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-id-group-pair/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-id-group-pair/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.user-id-group-pair/peering-status (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/user-id-group-pair (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.user-id-group-pair/user-id :portkey.aws.ec2.-2015-10-01.user-id-group-pair/group-name :portkey.aws.ec2.-2015-10-01.user-id-group-pair/group-id :portkey.aws.ec2.-2015-10-01.user-id-group-pair/vpc-id :portkey.aws.ec2.-2015-10-01.user-id-group-pair/vpc-peering-connection-id :portkey.aws.ec2.-2015-10-01.user-id-group-pair/peering-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-screenshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-screenshot-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.get-console-screenshot-request/wake-up (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/get-console-screenshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.get-console-screenshot-request/instance-id] :opt-un [:portkey.aws.ec2.-2015-10-01.get-console-screenshot-request/dry-run :portkey.aws.ec2.-2015-10-01.get-console-screenshot-request/wake-up]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/telemetry-status #{:down "UP" "DOWN" :up})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-id-format-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-id-format-request/resource]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/import-task-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-gateway/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-gateway/type (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-gateway/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-gateway/vpc-attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/vpc-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.vpn-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.vpn-gateway/vpn-gateway-id :portkey.aws.ec2.-2015-10-01.vpn-gateway/state :portkey.aws.ec2.-2015-10-01.vpn-gateway/type :portkey.aws.ec2.-2015-10-01.vpn-gateway/availability-zone :portkey.aws.ec2.-2015-10-01.vpn-gateway/vpc-attachments :portkey.aws.ec2.-2015-10-01.vpn-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-association/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-association/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-association/ip-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-association/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.network-interface-association/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/network-interface-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.network-interface-association/public-ip :portkey.aws.ec2.-2015-10-01.network-interface-association/public-dns-name :portkey.aws.ec2.-2015-10-01.network-interface-association/ip-owner-id :portkey.aws.ec2.-2015-10-01.network-interface-association/allocation-id :portkey.aws.ec2.-2015-10-01.network-interface-association/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/date-time clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-key-pairs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-key-pairs-request/key-names (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/key-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-key-pairs-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-key-pairs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-key-pairs-request/dry-run :portkey.aws.ec2.-2015-10-01.describe-key-pairs-request/key-names :portkey.aws.ec2.-2015-10-01.describe-key-pairs-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.delete-dhcp-options-request/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/delete-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.delete-dhcp-options-request/dhcp-options-id] :opt-un [:portkey.aws.ec2.-2015-10-01.delete-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-request-history-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/spot-fleet-request-id :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/start-time] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/dry-run :portkey.aws.ec2.-2015-10-01/event-type :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/next-token :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/shutdown-behavior #{"stop" :terminate "terminate" :stop})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.unmonitor-instances-result/instance-monitorings (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-monitoring-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/unmonitor-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.unmonitor-instances-result/instance-monitorings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-placement-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-placement-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.create-placement-group-request/strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/placement-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/create-placement-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.create-placement-group-request/group-name :portkey.aws.ec2.-2015-10-01.create-placement-group-request/strategy] :opt-un [:portkey.aws.ec2.-2015-10-01.create-placement-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/description (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/instance-network-interface-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/associate-public-ip-address :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/subnet-id :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/network-interface-id :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/device-index :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/description :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/groups :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/delete-on-termination :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/private-ip-addresses :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/secondary-private-ip-address-count :portkey.aws.ec2.-2015-10-01.instance-network-interface-specification/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/attach-vpn-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2015-10-01/vpc-attachment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/available-instance-capacity-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/instance-capacity))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/last-evaluated-time (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-request-history-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/spot-fleet-request-id :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/start-time :portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/last-evaluated-time :portkey.aws.ec2.-2015-10-01/history-records] :opt-un [:portkey.aws.ec2.-2015-10-01.describe-spot-fleet-request-history-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/snapshot-state #{:pending :completed "error" "completed" :error "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2015-10-01/vpn-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2015-10-01/vpn-gateway))

(clojure.core/defn describe-spot-fleet-instances ([describe-spot-fleet-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-fleet-instances-request describe-spot-fleet-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-instances-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotFleetInstances", :http.request.configuration/output-deser-fn deser-describe-spot-fleet-instances-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-instances-response))

(clojure.core/defn get-password-data ([get-password-data-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-password-data-request get-password-data-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/get-password-data-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/get-password-data-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetPasswordData", :http.request.configuration/output-deser-fn deser-get-password-data-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-password-data :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/get-password-data-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/get-password-data-result))

(clojure.core/defn describe-import-snapshot-tasks ([] (describe-import-snapshot-tasks {})) ([describe-import-snapshot-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-import-snapshot-tasks-request describe-import-snapshot-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-import-snapshot-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-import-snapshot-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImportSnapshotTasks", :http.request.configuration/output-deser-fn deser-describe-import-snapshot-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-import-snapshot-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-import-snapshot-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-import-snapshot-tasks-result))

(clojure.core/defn modify-subnet-attribute ([modify-subnet-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-subnet-attribute-request modify-subnet-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-subnet-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifySubnetAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-subnet-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-subnet-attribute-request) :ret clojure.core/true?)

(clojure.core/defn create-network-acl-entry ([create-network-acl-entry-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-network-acl-entry-request create-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn modify-hosts ([modify-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-hosts-request modify-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/modify-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyHosts", :http.request.configuration/output-deser-fn deser-modify-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/modify-hosts-result))

(clojure.core/defn describe-instance-status ([] (describe-instance-status {})) ([describe-instance-status-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-instance-status-request describe-instance-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-instance-status-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-instance-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInstanceStatus", :http.request.configuration/output-deser-fn deser-describe-instance-status-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instance-status :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-instance-status-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-instance-status-result))

(clojure.core/defn accept-vpc-peering-connection ([] (accept-vpc-peering-connection {})) ([accept-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-accept-vpc-peering-connection-request accept-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/accept-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/accept-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AcceptVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-accept-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef accept-vpc-peering-connection :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/accept-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/accept-vpc-peering-connection-result))

(clojure.core/defn describe-volumes ([] (describe-volumes {})) ([describe-volumes-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-volumes-request describe-volumes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-volumes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-volumes-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVolumes", :http.request.configuration/output-deser-fn deser-describe-volumes-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volumes :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-volumes-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-volumes-result))

(clojure.core/defn describe-key-pairs ([] (describe-key-pairs {})) ([describe-key-pairs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-key-pairs-request describe-key-pairs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-key-pairs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-key-pairs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeKeyPairs", :http.request.configuration/output-deser-fn deser-describe-key-pairs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-key-pairs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-key-pairs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-key-pairs-result))

(clojure.core/defn describe-reserved-instances ([] (describe-reserved-instances {})) ([describe-reserved-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-request describe-reserved-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstances", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-result))

(clojure.core/defn enable-vpc-classic-link-dns-support ([] (enable-vpc-classic-link-dns-support {})) ([enable-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-vpc-classic-link-dns-support-request enable-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn deser-enable-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-dns-support-result))

(clojure.core/defn delete-placement-group ([delete-placement-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-placement-group-request delete-placement-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-placement-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeletePlacementGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-placement-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-placement-group-request) :ret clojure.core/true?)

(clojure.core/defn create-dhcp-options ([create-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-dhcp-options-request create-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-dhcp-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDhcpOptions", :http.request.configuration/output-deser-fn deser-create-dhcp-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-dhcp-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-dhcp-options-result))

(clojure.core/defn create-reserved-instances-listing ([create-reserved-instances-listing-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-reserved-instances-listing-request create-reserved-instances-listing-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-reserved-instances-listing-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-reserved-instances-listing-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateReservedInstancesListing", :http.request.configuration/output-deser-fn deser-create-reserved-instances-listing-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-reserved-instances-listing :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-reserved-instances-listing-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-reserved-instances-listing-result))

(clojure.core/defn disassociate-route-table ([disassociate-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disassociate-route-table-request disassociate-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/disassociate-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisassociateRouteTable", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/disassociate-route-table-request) :ret clojure.core/true?)

(clojure.core/defn import-snapshot ([] (import-snapshot {})) ([import-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-snapshot-request import-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/import-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/import-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportSnapshot", :http.request.configuration/output-deser-fn deser-import-snapshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-snapshot :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/import-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-snapshot-result))

(clojure.core/defn delete-vpn-connection-route ([delete-vpn-connection-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpn-connection-route-request delete-vpn-connection-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-vpn-connection-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpnConnectionRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-connection-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-vpn-connection-route-request) :ret clojure.core/true?)

(clojure.core/defn attach-volume ([attach-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-volume-request attach-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/volume-attachment, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/attach-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachVolume", :http.request.configuration/output-deser-fn deser-volume-attachment, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/attach-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-attachment))

(clojure.core/defn delete-security-group ([] (delete-security-group {})) ([delete-security-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-security-group-request delete-security-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-security-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-security-group :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/delete-security-group-request) :ret clojure.core/true?)

(clojure.core/defn delete-key-pair ([delete-key-pair-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-key-pair-request delete-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteKeyPair", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-key-pair-request) :ret clojure.core/true?)

(clojure.core/defn get-console-output ([get-console-output-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-console-output-request get-console-output-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/get-console-output-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/get-console-output-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetConsoleOutput", :http.request.configuration/output-deser-fn deser-get-console-output-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-console-output :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/get-console-output-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/get-console-output-result))

(clojure.core/defn reset-instance-attribute ([reset-instance-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-instance-attribute-request reset-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/reset-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetInstanceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/reset-instance-attribute-request) :ret clojure.core/true?)

(clojure.core/defn modify-vpc-attribute ([modify-vpc-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-attribute-request modify-vpc-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-vpc-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-vpc-attribute-request) :ret clojure.core/true?)

(clojure.core/defn describe-volume-status ([] (describe-volume-status {})) ([describe-volume-status-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-volume-status-request describe-volume-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-volume-status-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-volume-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVolumeStatus", :http.request.configuration/output-deser-fn deser-describe-volume-status-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volume-status :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-volume-status-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-volume-status-result))

(clojure.core/defn describe-conversion-tasks ([] (describe-conversion-tasks {})) ([describe-conversion-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-conversion-tasks-request describe-conversion-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-conversion-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-conversion-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeConversionTasks", :http.request.configuration/output-deser-fn deser-describe-conversion-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-conversion-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-conversion-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-conversion-tasks-result))

(clojure.core/defn delete-network-acl-entry ([delete-network-acl-entry-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-network-acl-entry-request delete-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn create-volume ([create-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-volume-request create-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/volume, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVolume", :http.request.configuration/output-deser-fn deser-volume, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume))

(clojure.core/defn enable-vgw-route-propagation ([enable-vgw-route-propagation-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-vgw-route-propagation-request enable-vgw-route-propagation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/enable-vgw-route-propagation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVgwRoutePropagation", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vgw-route-propagation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/enable-vgw-route-propagation-request) :ret clojure.core/true?)

(clojure.core/defn replace-network-acl-association ([replace-network-acl-association-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-network-acl-association-request replace-network-acl-association-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/replace-network-acl-association-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/replace-network-acl-association-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceNetworkAclAssociation", :http.request.configuration/output-deser-fn deser-replace-network-acl-association-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-network-acl-association :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/replace-network-acl-association-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/replace-network-acl-association-result))

(clojure.core/defn modify-reserved-instances ([modify-reserved-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-reserved-instances-request modify-reserved-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/modify-reserved-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-reserved-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyReservedInstances", :http.request.configuration/output-deser-fn deser-modify-reserved-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-reserved-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-reserved-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/modify-reserved-instances-result))

(clojure.core/defn describe-reserved-instances-modifications ([] (describe-reserved-instances-modifications {})) ([describe-reserved-instances-modifications-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-modifications-request describe-reserved-instances-modifications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-modifications-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstancesModifications", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-modifications-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-modifications :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-modifications-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-modifications-result))

(clojure.core/defn create-route-table ([create-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-route-table-request create-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-route-table-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateRouteTable", :http.request.configuration/output-deser-fn deser-create-route-table-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-route-table-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-route-table-result))

(clojure.core/defn disassociate-address ([] (disassociate-address {})) ([disassociate-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disassociate-address-request disassociate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/disassociate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisassociateAddress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/disassociate-address-request) :ret clojure.core/true?)

(clojure.core/defn describe-network-interface-attribute ([describe-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-network-interface-attribute-request describe-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-network-interface-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn deser-describe-network-interface-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-network-interface-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-network-interface-attribute-result))

(clojure.core/defn describe-prefix-lists ([] (describe-prefix-lists {})) ([describe-prefix-lists-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-prefix-lists-request describe-prefix-lists-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-prefix-lists-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-prefix-lists-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribePrefixLists", :http.request.configuration/output-deser-fn deser-describe-prefix-lists-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-prefix-lists :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-prefix-lists-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-prefix-lists-result))

(clojure.core/defn describe-availability-zones ([] (describe-availability-zones {})) ([describe-availability-zones-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-availability-zones-request describe-availability-zones-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-availability-zones-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-availability-zones-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAvailabilityZones", :http.request.configuration/output-deser-fn deser-describe-availability-zones-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-availability-zones :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-availability-zones-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-availability-zones-result))

(clojure.core/defn create-route ([create-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-route-request create-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-route-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateRoute", :http.request.configuration/output-deser-fn deser-create-route-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-route-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-route-result))

(clojure.core/defn create-nat-gateway ([create-nat-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-nat-gateway-request create-nat-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-nat-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-nat-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNatGateway", :http.request.configuration/output-deser-fn deser-create-nat-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-nat-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-nat-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-nat-gateway-result))

(clojure.core/defn describe-snapshot-attribute ([describe-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-snapshot-attribute-request describe-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSnapshotAttribute", :http.request.configuration/output-deser-fn deser-describe-snapshot-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-snapshot-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-snapshot-attribute-result))

(clojure.core/defn delete-customer-gateway ([delete-customer-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-customer-gateway-request delete-customer-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-customer-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteCustomerGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-customer-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-customer-gateway-request) :ret clojure.core/true?)

(clojure.core/defn detach-network-interface ([detach-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-network-interface-request detach-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/detach-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachNetworkInterface", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/detach-network-interface-request) :ret clojure.core/true?)

(clojure.core/defn attach-internet-gateway ([attach-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-internet-gateway-request attach-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/attach-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/attach-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn associate-address ([] (associate-address {})) ([associate-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-address-request associate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/associate-address-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/associate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateAddress", :http.request.configuration/output-deser-fn deser-associate-address-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/associate-address-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/associate-address-result))

(clojure.core/defn delete-tags ([delete-tags-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-tags-request delete-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteTags", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-tags :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-tags-request) :ret clojure.core/true?)

(clojure.core/defn describe-moving-addresses ([] (describe-moving-addresses {})) ([describe-moving-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-moving-addresses-request describe-moving-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-moving-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-moving-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeMovingAddresses", :http.request.configuration/output-deser-fn deser-describe-moving-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-moving-addresses :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-moving-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-moving-addresses-result))

(clojure.core/defn modify-instance-attribute ([modify-instance-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-instance-attribute-request modify-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyInstanceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-instance-attribute-request) :ret clojure.core/true?)

(clojure.core/defn cancel-export-task ([cancel-export-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-export-task-request cancel-export-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/cancel-export-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelExportTask", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-export-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/cancel-export-task-request) :ret clojure.core/true?)

(clojure.core/defn describe-images ([] (describe-images {})) ([describe-images-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-images-request describe-images-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-images-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-images-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImages", :http.request.configuration/output-deser-fn deser-describe-images-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-images :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-images-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-images-result))

(clojure.core/defn describe-instance-attribute ([describe-instance-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-instance-attribute-request describe-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/instance-attribute, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInstanceAttribute", :http.request.configuration/output-deser-fn deser-instance-attribute, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-instance-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/instance-attribute))

(clojure.core/defn describe-id-format ([] (describe-id-format {})) ([describe-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-id-format-request describe-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-id-format-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeIdFormat", :http.request.configuration/output-deser-fn deser-describe-id-format-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-id-format :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-id-format-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-id-format-result))

(clojure.core/defn reset-network-interface-attribute ([reset-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-network-interface-attribute-request reset-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/reset-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/reset-network-interface-attribute-request) :ret clojure.core/true?)

(clojure.core/defn describe-reserved-instances-listings ([] (describe-reserved-instances-listings {})) ([describe-reserved-instances-listings-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-listings-request describe-reserved-instances-listings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-listings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-listings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstancesListings", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-listings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-listings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-listings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-listings-result))

(clojure.core/defn describe-security-group-references ([describe-security-group-references-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-security-group-references-request describe-security-group-references-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-security-group-references-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-security-group-references-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSecurityGroupReferences", :http.request.configuration/output-deser-fn deser-describe-security-group-references-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-security-group-references :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-security-group-references-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-security-group-references-result))

(clojure.core/defn associate-dhcp-options ([associate-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-dhcp-options-request associate-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/associate-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateDhcpOptions", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/associate-dhcp-options-request) :ret clojure.core/true?)

(clojure.core/defn create-tags ([create-tags-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-tags-request create-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateTags", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-tags :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-tags-request) :ret clojure.core/true?)

(clojure.core/defn revoke-security-group-ingress ([] (revoke-security-group-ingress {})) ([revoke-security-group-ingress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-revoke-security-group-ingress-request revoke-security-group-ingress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/revoke-security-group-ingress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RevokeSecurityGroupIngress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef revoke-security-group-ingress :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/revoke-security-group-ingress-request) :ret clojure.core/true?)

(clojure.core/defn authorize-security-group-ingress ([] (authorize-security-group-ingress {})) ([authorize-security-group-ingress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-authorize-security-group-ingress-request authorize-security-group-ingress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/authorize-security-group-ingress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AuthorizeSecurityGroupIngress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef authorize-security-group-ingress :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/authorize-security-group-ingress-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-endpoint-services ([] (describe-vpc-endpoint-services {})) ([describe-vpc-endpoint-services-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoint-services-request describe-vpc-endpoint-services-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoint-services-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoint-services-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpointServices", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoint-services-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoint-services :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoint-services-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoint-services-result))

(clojure.core/defn create-snapshot ([create-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-snapshot-request create-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/snapshot, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSnapshot", :http.request.configuration/output-deser-fn deser-snapshot, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/snapshot))

(clojure.core/defn import-key-pair ([import-key-pair-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-key-pair-request import-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/import-key-pair-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/import-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportKeyPair", :http.request.configuration/output-deser-fn deser-import-key-pair-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/import-key-pair-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-key-pair-result))

(clojure.core/defn describe-export-tasks ([] (describe-export-tasks {})) ([describe-export-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-export-tasks-request describe-export-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-export-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-export-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeExportTasks", :http.request.configuration/output-deser-fn deser-describe-export-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-export-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-export-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-export-tasks-result))

(clojure.core/defn describe-volume-attribute ([describe-volume-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-volume-attribute-request describe-volume-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-volume-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-volume-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVolumeAttribute", :http.request.configuration/output-deser-fn deser-describe-volume-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volume-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-volume-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-volume-attribute-result))

(clojure.core/defn describe-scheduled-instances ([] (describe-scheduled-instances {})) ([describe-scheduled-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-scheduled-instances-request describe-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeScheduledInstances", :http.request.configuration/output-deser-fn deser-describe-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-scheduled-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-scheduled-instances-result))

(clojure.core/defn describe-spot-datafeed-subscription ([] (describe-spot-datafeed-subscription {})) ([describe-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-datafeed-subscription-request describe-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-spot-datafeed-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotDatafeedSubscription", :http.request.configuration/output-deser-fn deser-describe-spot-datafeed-subscription-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-datafeed-subscription :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-spot-datafeed-subscription-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-spot-datafeed-subscription-result))

(clojure.core/defn delete-vpn-gateway ([delete-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpn-gateway-request delete-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpnGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-vpn-gateway-request) :ret clojure.core/true?)

(clojure.core/defn reject-vpc-peering-connection ([reject-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reject-vpc-peering-connection-request reject-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/reject-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/reject-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RejectVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-reject-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reject-vpc-peering-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/reject-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reject-vpc-peering-connection-result))

(clojure.core/defn reboot-instances ([reboot-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reboot-instances-request reboot-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/reboot-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RebootInstances", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reboot-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/reboot-instances-request) :ret clojure.core/true?)

(clojure.core/defn describe-dhcp-options ([] (describe-dhcp-options {})) ([describe-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-dhcp-options-request describe-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-dhcp-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDhcpOptions", :http.request.configuration/output-deser-fn deser-describe-dhcp-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-dhcp-options :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-dhcp-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-dhcp-options-result))

(clojure.core/defn delete-volume ([delete-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-volume-request delete-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVolume", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-volume-request) :ret clojure.core/true?)

(clojure.core/defn allocate-hosts ([allocate-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-allocate-hosts-request allocate-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/allocate-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/allocate-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AllocateHosts", :http.request.configuration/output-deser-fn deser-allocate-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef allocate-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/allocate-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/allocate-hosts-result))

(clojure.core/defn describe-spot-fleet-request-history ([describe-spot-fleet-request-history-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-fleet-request-history-request describe-spot-fleet-request-history-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-request-history-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-request-history-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotFleetRequestHistory", :http.request.configuration/output-deser-fn deser-describe-spot-fleet-request-history-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-request-history :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-request-history-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-request-history-response))

(clojure.core/defn register-image ([register-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-register-image-request register-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/register-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/register-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RegisterImage", :http.request.configuration/output-deser-fn deser-register-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef register-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/register-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/register-image-result))

(clojure.core/defn assign-private-ip-addresses ([assign-private-ip-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-assign-private-ip-addresses-request assign-private-ip-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/assign-private-ip-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssignPrivateIpAddresses", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef assign-private-ip-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/assign-private-ip-addresses-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpn-gateways ([] (describe-vpn-gateways {})) ([describe-vpn-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpn-gateways-request describe-vpn-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpn-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpn-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpnGateways", :http.request.configuration/output-deser-fn deser-describe-vpn-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpn-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpn-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpn-gateways-result))

(clojure.core/defn delete-internet-gateway ([delete-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-internet-gateway-request delete-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn create-internet-gateway ([] (create-internet-gateway {})) ([create-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-internet-gateway-request create-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-internet-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateInternetGateway", :http.request.configuration/output-deser-fn deser-create-internet-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-internet-gateway :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/create-internet-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-internet-gateway-result))

(clojure.core/defn describe-network-interfaces ([] (describe-network-interfaces {})) ([describe-network-interfaces-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-network-interfaces-request describe-network-interfaces-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-network-interfaces-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-network-interfaces-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNetworkInterfaces", :http.request.configuration/output-deser-fn deser-describe-network-interfaces-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-interfaces :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-network-interfaces-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-network-interfaces-result))

(clojure.core/defn import-image ([] (import-image {})) ([import-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-image-request import-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/import-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/import-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportImage", :http.request.configuration/output-deser-fn deser-import-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-image :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/import-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-image-result))

(clojure.core/defn modify-network-interface-attribute ([modify-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-network-interface-attribute-request modify-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-network-interface-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-vpc ([delete-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-request delete-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpc", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-vpc-request) :ret clojure.core/true?)

(clojure.core/defn describe-network-acls ([] (describe-network-acls {})) ([describe-network-acls-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-network-acls-request describe-network-acls-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-network-acls-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-network-acls-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNetworkAcls", :http.request.configuration/output-deser-fn deser-describe-network-acls-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-acls :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-network-acls-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-network-acls-result))

(clojure.core/defn describe-vpc-classic-link ([] (describe-vpc-classic-link {})) ([describe-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-classic-link-request describe-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcClassicLink", :http.request.configuration/output-deser-fn deser-describe-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-classic-link :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-result))

(clojure.core/defn describe-subnets ([] (describe-subnets {})) ([describe-subnets-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-subnets-request describe-subnets-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-subnets-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-subnets-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSubnets", :http.request.configuration/output-deser-fn deser-describe-subnets-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-subnets :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-subnets-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-subnets-result))

(clojure.core/defn describe-bundle-tasks ([] (describe-bundle-tasks {})) ([describe-bundle-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-bundle-tasks-request describe-bundle-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-bundle-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-bundle-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeBundleTasks", :http.request.configuration/output-deser-fn deser-describe-bundle-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-bundle-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-bundle-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-bundle-tasks-result))

(clojure.core/defn describe-scheduled-instance-availability ([describe-scheduled-instance-availability-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-scheduled-instance-availability-request describe-scheduled-instance-availability-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-scheduled-instance-availability-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-scheduled-instance-availability-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeScheduledInstanceAvailability", :http.request.configuration/output-deser-fn deser-describe-scheduled-instance-availability-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-scheduled-instance-availability :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-scheduled-instance-availability-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-scheduled-instance-availability-result))

(clojure.core/defn delete-nat-gateway ([delete-nat-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-nat-gateway-request delete-nat-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/delete-nat-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-nat-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNatGateway", :http.request.configuration/output-deser-fn deser-delete-nat-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-nat-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-nat-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/delete-nat-gateway-result))

(clojure.core/defn report-instance-status ([report-instance-status-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-report-instance-status-request report-instance-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/report-instance-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReportInstanceStatus", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef report-instance-status :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/report-instance-status-request) :ret clojure.core/true?)

(clojure.core/defn enable-vpc-classic-link ([enable-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-vpc-classic-link-request enable-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVpcClassicLink", :http.request.configuration/output-deser-fn deser-enable-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vpc-classic-link :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/enable-vpc-classic-link-result))

(clojure.core/defn describe-spot-price-history ([] (describe-spot-price-history {})) ([describe-spot-price-history-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-price-history-request describe-spot-price-history-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-spot-price-history-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-spot-price-history-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotPriceHistory", :http.request.configuration/output-deser-fn deser-describe-spot-price-history-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-price-history :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-spot-price-history-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-spot-price-history-result))

(clojure.core/defn create-subnet ([create-subnet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-subnet-request create-subnet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-subnet-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-subnet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSubnet", :http.request.configuration/output-deser-fn deser-create-subnet-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-subnet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-subnet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-subnet-result))

(clojure.core/defn create-vpn-gateway ([create-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpn-gateway-request create-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-vpn-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpnGateway", :http.request.configuration/output-deser-fn deser-create-vpn-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-vpn-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-vpn-gateway-result))

(clojure.core/defn disable-vgw-route-propagation ([disable-vgw-route-propagation-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disable-vgw-route-propagation-request disable-vgw-route-propagation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/disable-vgw-route-propagation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisableVgwRoutePropagation", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vgw-route-propagation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/disable-vgw-route-propagation-request) :ret clojure.core/true?)

(clojure.core/defn reset-image-attribute ([reset-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-image-attribute-request reset-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/reset-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetImageAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/reset-image-attribute-request) :ret clojure.core/true?)

(clojure.core/defn allocate-address ([] (allocate-address {})) ([allocate-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-allocate-address-request allocate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/allocate-address-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/allocate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AllocateAddress", :http.request.configuration/output-deser-fn deser-allocate-address-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef allocate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/allocate-address-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/allocate-address-result))

(clojure.core/defn modify-instance-placement ([modify-instance-placement-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-instance-placement-request modify-instance-placement-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/modify-instance-placement-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-instance-placement-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyInstancePlacement", :http.request.configuration/output-deser-fn deser-modify-instance-placement-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-instance-placement :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-instance-placement-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/modify-instance-placement-result))

(clojure.core/defn create-image ([create-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-image-request create-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateImage", :http.request.configuration/output-deser-fn deser-create-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-image-result))

(clojure.core/defn purchase-reserved-instances-offering ([purchase-reserved-instances-offering-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-purchase-reserved-instances-offering-request purchase-reserved-instances-offering-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/purchase-reserved-instances-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/purchase-reserved-instances-offering-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PurchaseReservedInstancesOffering", :http.request.configuration/output-deser-fn deser-purchase-reserved-instances-offering-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-reserved-instances-offering :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/purchase-reserved-instances-offering-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/purchase-reserved-instances-offering-result))

(clojure.core/defn create-vpc ([create-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-request create-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpc", :http.request.configuration/output-deser-fn deser-create-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-vpc-result))

(clojure.core/defn describe-internet-gateways ([] (describe-internet-gateways {})) ([describe-internet-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-internet-gateways-request describe-internet-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-internet-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-internet-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInternetGateways", :http.request.configuration/output-deser-fn deser-describe-internet-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-internet-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-internet-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-internet-gateways-result))

(clojure.core/defn describe-tags ([] (describe-tags {})) ([describe-tags-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-tags-request describe-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-tags-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeTags", :http.request.configuration/output-deser-fn deser-describe-tags-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-tags :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-tags-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-tags-result))

(clojure.core/defn request-spot-instances ([request-spot-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-request-spot-instances-request request-spot-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/request-spot-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/request-spot-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RequestSpotInstances", :http.request.configuration/output-deser-fn deser-request-spot-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef request-spot-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/request-spot-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/request-spot-instances-result))

(clojure.core/defn describe-security-groups ([] (describe-security-groups {})) ([describe-security-groups-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-security-groups-request describe-security-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-security-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-security-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSecurityGroups", :http.request.configuration/output-deser-fn deser-describe-security-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-security-groups :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-security-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-security-groups-result))

(clojure.core/defn disable-vpc-classic-link-dns-support ([] (disable-vpc-classic-link-dns-support {})) ([disable-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disable-vpc-classic-link-dns-support-request disable-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisableVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn deser-disable-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-dns-support-result))

(clojure.core/defn describe-vpcs ([] (describe-vpcs {})) ([describe-vpcs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpcs-request describe-vpcs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpcs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpcs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcs", :http.request.configuration/output-deser-fn deser-describe-vpcs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpcs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpcs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpcs-result))

(clojure.core/defn delete-subnet ([delete-subnet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-subnet-request delete-subnet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-subnet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSubnet", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-subnet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-subnet-request) :ret clojure.core/true?)

(clojure.core/defn describe-classic-link-instances ([] (describe-classic-link-instances {})) ([describe-classic-link-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-classic-link-instances-request describe-classic-link-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-classic-link-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-classic-link-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeClassicLinkInstances", :http.request.configuration/output-deser-fn deser-describe-classic-link-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-classic-link-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-classic-link-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-classic-link-instances-result))

(clojure.core/defn modify-spot-fleet-request ([modify-spot-fleet-request-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-spot-fleet-request-request modify-spot-fleet-request-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/modify-spot-fleet-request-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-spot-fleet-request-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifySpotFleetRequest", :http.request.configuration/output-deser-fn deser-modify-spot-fleet-request-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-spot-fleet-request :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-spot-fleet-request-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/modify-spot-fleet-request-response))

(clojure.core/defn attach-network-interface ([attach-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-network-interface-request attach-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/attach-network-interface-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/attach-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachNetworkInterface", :http.request.configuration/output-deser-fn deser-attach-network-interface-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/attach-network-interface-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attach-network-interface-result))

(clojure.core/defn delete-snapshot ([delete-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-snapshot-request delete-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSnapshot", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-snapshot-request) :ret clojure.core/true?)

(clojure.core/defn describe-stale-security-groups ([describe-stale-security-groups-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-stale-security-groups-request describe-stale-security-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-stale-security-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-stale-security-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeStaleSecurityGroups", :http.request.configuration/output-deser-fn deser-describe-stale-security-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-stale-security-groups :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-stale-security-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-stale-security-groups-result))

(clojure.core/defn cancel-conversion-task ([cancel-conversion-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-conversion-request cancel-conversion-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/cancel-conversion-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelConversionTask", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-conversion-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/cancel-conversion-request) :ret clojure.core/true?)

(clojure.core/defn describe-customer-gateways ([] (describe-customer-gateways {})) ([describe-customer-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-customer-gateways-request describe-customer-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-customer-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-customer-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCustomerGateways", :http.request.configuration/output-deser-fn deser-describe-customer-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-customer-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-customer-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-customer-gateways-result))

(clojure.core/defn delete-vpc-endpoints ([delete-vpc-endpoints-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-endpoints-request delete-vpc-endpoints-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/delete-vpc-endpoints-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-vpc-endpoints-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpcEndpoints", :http.request.configuration/output-deser-fn deser-delete-vpc-endpoints-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-endpoints :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-vpc-endpoints-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/delete-vpc-endpoints-result))

(clojure.core/defn describe-spot-instance-requests ([] (describe-spot-instance-requests {})) ([describe-spot-instance-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-instance-requests-request describe-spot-instance-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-spot-instance-requests-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-spot-instance-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotInstanceRequests", :http.request.configuration/output-deser-fn deser-describe-spot-instance-requests-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-instance-requests :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-spot-instance-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-spot-instance-requests-result))

(clojure.core/defn delete-route ([delete-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-route-request delete-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-route-request) :ret clojure.core/true?)

(clojure.core/defn describe-addresses ([] (describe-addresses {})) ([describe-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-addresses-request describe-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAddresses", :http.request.configuration/output-deser-fn deser-describe-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-addresses :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-addresses-result))

(clojure.core/defn describe-route-tables ([] (describe-route-tables {})) ([describe-route-tables-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-route-tables-request describe-route-tables-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-route-tables-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-route-tables-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeRouteTables", :http.request.configuration/output-deser-fn deser-describe-route-tables-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-route-tables :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-route-tables-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-route-tables-result))

(clojure.core/defn run-scheduled-instances ([run-scheduled-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-run-scheduled-instances-request run-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/run-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/run-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RunScheduledInstances", :http.request.configuration/output-deser-fn deser-run-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef run-scheduled-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/run-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/run-scheduled-instances-result))

(clojure.core/defn release-address ([] (release-address {})) ([release-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-release-address-request release-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/release-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReleaseAddress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef release-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/release-address-request) :ret clojure.core/true?)

(clojure.core/defn delete-route-table ([delete-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-route-table-request delete-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteRouteTable", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-route-table-request) :ret clojure.core/true?)

(clojure.core/defn describe-reserved-instances-offerings ([] (describe-reserved-instances-offerings {})) ([describe-reserved-instances-offerings-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-offerings-request describe-reserved-instances-offerings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-offerings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-offerings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstancesOfferings", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-offerings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-offerings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-offerings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-reserved-instances-offerings-result))

(clojure.core/defn import-volume ([import-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-volume-request import-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/import-volume-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/import-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportVolume", :http.request.configuration/output-deser-fn deser-import-volume-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/import-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-volume-result))

(clojure.core/defn create-network-acl ([create-network-acl-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-network-acl-request create-network-acl-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-network-acl-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-network-acl-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNetworkAcl", :http.request.configuration/output-deser-fn deser-create-network-acl-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-acl :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-network-acl-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-network-acl-result))

(clojure.core/defn describe-nat-gateways ([] (describe-nat-gateways {})) ([describe-nat-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-nat-gateways-request describe-nat-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-nat-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-nat-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNatGateways", :http.request.configuration/output-deser-fn deser-describe-nat-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-nat-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-nat-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-nat-gateways-result))

(clojure.core/defn modify-image-attribute ([modify-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-image-attribute-request modify-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyImageAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-image-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-network-acl ([delete-network-acl-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-network-acl-request delete-network-acl-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-network-acl-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNetworkAcl", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-acl :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-network-acl-request) :ret clojure.core/true?)

(clojure.core/defn describe-spot-fleet-requests ([] (describe-spot-fleet-requests {})) ([describe-spot-fleet-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-fleet-requests-request describe-spot-fleet-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-requests-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotFleetRequests", :http.request.configuration/output-deser-fn deser-describe-spot-fleet-requests-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-requests :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-spot-fleet-requests-response))

(clojure.core/defn cancel-import-task ([] (cancel-import-task {})) ([cancel-import-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-import-task-request cancel-import-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/cancel-import-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/cancel-import-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelImportTask", :http.request.configuration/output-deser-fn deser-cancel-import-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-import-task :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/cancel-import-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-import-task-result))

(clojure.core/defn create-vpn-connection-route ([create-vpn-connection-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpn-connection-route-request create-vpn-connection-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-vpn-connection-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpnConnectionRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-connection-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-vpn-connection-route-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-attribute ([describe-vpc-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-attribute-request describe-vpc-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcAttribute", :http.request.configuration/output-deser-fn deser-describe-vpc-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-vpc-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpc-attribute-result))

(clojure.core/defn get-console-screenshot ([get-console-screenshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-console-screenshot-request get-console-screenshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/get-console-screenshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/get-console-screenshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetConsoleScreenshot", :http.request.configuration/output-deser-fn deser-get-console-screenshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-console-screenshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/get-console-screenshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/get-console-screenshot-result))

(clojure.core/defn revoke-security-group-egress ([revoke-security-group-egress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-revoke-security-group-egress-request revoke-security-group-egress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/revoke-security-group-egress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RevokeSecurityGroupEgress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef revoke-security-group-egress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/revoke-security-group-egress-request) :ret clojure.core/true?)

(clojure.core/defn create-instance-export-task ([create-instance-export-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-instance-export-task-request create-instance-export-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-instance-export-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-instance-export-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateInstanceExportTask", :http.request.configuration/output-deser-fn deser-create-instance-export-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-instance-export-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-instance-export-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-instance-export-task-result))

(clojure.core/defn disable-vpc-classic-link ([disable-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disable-vpc-classic-link-request disable-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisableVpcClassicLink", :http.request.configuration/output-deser-fn deser-disable-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vpc-classic-link :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/disable-vpc-classic-link-result))

(clojure.core/defn import-instance ([import-instance-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-instance-request import-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/import-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/import-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportInstance", :http.request.configuration/output-deser-fn deser-import-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/import-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/import-instance-result))

(clojure.core/defn describe-instances ([] (describe-instances {})) ([describe-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-instances-request describe-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInstances", :http.request.configuration/output-deser-fn deser-describe-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-instances-result))

(clojure.core/defn delete-dhcp-options ([delete-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-dhcp-options-request delete-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDhcpOptions", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-dhcp-options-request) :ret clojure.core/true?)

(clojure.core/defn describe-account-attributes ([] (describe-account-attributes {})) ([describe-account-attributes-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-account-attributes-request describe-account-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-account-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-account-attributes-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAccountAttributes", :http.request.configuration/output-deser-fn deser-describe-account-attributes-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-account-attributes :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-account-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-account-attributes-result))

(clojure.core/defn create-spot-datafeed-subscription ([create-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-spot-datafeed-subscription-request create-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-spot-datafeed-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSpotDatafeedSubscription", :http.request.configuration/output-deser-fn deser-create-spot-datafeed-subscription-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-spot-datafeed-subscription :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-spot-datafeed-subscription-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-spot-datafeed-subscription-result))

(clojure.core/defn create-customer-gateway ([create-customer-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-customer-gateway-request create-customer-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-customer-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-customer-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateCustomerGateway", :http.request.configuration/output-deser-fn deser-create-customer-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-customer-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-customer-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-customer-gateway-result))

(clojure.core/defn replace-network-acl-entry ([replace-network-acl-entry-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-network-acl-entry-request replace-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/replace-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/replace-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn modify-vpc-peering-connection-options ([modify-vpc-peering-connection-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-peering-connection-options-request modify-vpc-peering-connection-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/modify-vpc-peering-connection-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-vpc-peering-connection-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcPeeringConnectionOptions", :http.request.configuration/output-deser-fn deser-modify-vpc-peering-connection-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-peering-connection-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-vpc-peering-connection-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/modify-vpc-peering-connection-options-result))

(clojure.core/defn replace-route ([replace-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-route-request replace-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/replace-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/replace-route-request) :ret clojure.core/true?)

(clojure.core/defn describe-placement-groups ([] (describe-placement-groups {})) ([describe-placement-groups-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-placement-groups-request describe-placement-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-placement-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-placement-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribePlacementGroups", :http.request.configuration/output-deser-fn deser-describe-placement-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-placement-groups :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-placement-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-placement-groups-result))

(clojure.core/defn describe-import-image-tasks ([] (describe-import-image-tasks {})) ([describe-import-image-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-import-image-tasks-request describe-import-image-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-import-image-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-import-image-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImportImageTasks", :http.request.configuration/output-deser-fn deser-describe-import-image-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-import-image-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-import-image-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-import-image-tasks-result))

(clojure.core/defn copy-image ([copy-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-copy-image-request copy-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/copy-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/copy-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyImage", :http.request.configuration/output-deser-fn deser-copy-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef copy-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/copy-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/copy-image-result))

(clojure.core/defn create-flow-logs ([create-flow-logs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-flow-logs-request create-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateFlowLogs", :http.request.configuration/output-deser-fn deser-create-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-flow-logs :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-flow-logs-result))

(clojure.core/defn associate-route-table ([associate-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-route-table-request associate-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/associate-route-table-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/associate-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateRouteTable", :http.request.configuration/output-deser-fn deser-associate-route-table-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/associate-route-table-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/associate-route-table-result))

(clojure.core/defn describe-snapshots ([] (describe-snapshots {})) ([describe-snapshots-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-snapshots-request describe-snapshots-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-snapshots-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-snapshots-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSnapshots", :http.request.configuration/output-deser-fn deser-describe-snapshots-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-snapshots :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-snapshots-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-snapshots-result))

(clojure.core/defn bundle-instance ([bundle-instance-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-bundle-instance-request bundle-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/bundle-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/bundle-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "BundleInstance", :http.request.configuration/output-deser-fn deser-bundle-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef bundle-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/bundle-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/bundle-instance-result))

(clojure.core/defn replace-route-table-association ([replace-route-table-association-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-route-table-association-request replace-route-table-association-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/replace-route-table-association-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/replace-route-table-association-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceRouteTableAssociation", :http.request.configuration/output-deser-fn deser-replace-route-table-association-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-route-table-association :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/replace-route-table-association-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/replace-route-table-association-result))

(clojure.core/defn release-hosts ([release-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-release-hosts-request release-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/release-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/release-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReleaseHosts", :http.request.configuration/output-deser-fn deser-release-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef release-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/release-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/release-hosts-result))

(clojure.core/defn copy-snapshot ([copy-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-copy-snapshot-request copy-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/copy-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/copy-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopySnapshot", :http.request.configuration/output-deser-fn deser-copy-snapshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef copy-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/copy-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/copy-snapshot-result))

(clojure.core/defn stop-instances ([stop-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-stop-instances-request stop-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/stop-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/stop-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StopInstances", :http.request.configuration/output-deser-fn deser-stop-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef stop-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/stop-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/stop-instances-result))

(clojure.core/defn describe-vpn-connections ([] (describe-vpn-connections {})) ([describe-vpn-connections-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpn-connections-request describe-vpn-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpn-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpn-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpnConnections", :http.request.configuration/output-deser-fn deser-describe-vpn-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpn-connections :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpn-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpn-connections-result))

(clojure.core/defn detach-internet-gateway ([detach-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-internet-gateway-request detach-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/detach-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/detach-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-classic-link-dns-support ([] (describe-vpc-classic-link-dns-support {})) ([describe-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-classic-link-dns-support-request describe-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn deser-describe-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpc-classic-link-dns-support-result))

(clojure.core/defn move-address-to-vpc ([move-address-to-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-move-address-to-vpc-request move-address-to-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/move-address-to-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/move-address-to-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "MoveAddressToVpc", :http.request.configuration/output-deser-fn deser-move-address-to-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef move-address-to-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/move-address-to-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/move-address-to-vpc-result))

(clojure.core/defn deregister-image ([deregister-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-deregister-image-request deregister-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/deregister-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeregisterImage", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef deregister-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/deregister-image-request) :ret clojure.core/true?)

(clojure.core/defn unmonitor-instances ([unmonitor-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-unmonitor-instances-request unmonitor-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/unmonitor-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/unmonitor-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "UnmonitorInstances", :http.request.configuration/output-deser-fn deser-unmonitor-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef unmonitor-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/unmonitor-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/unmonitor-instances-result))

(clojure.core/defn reset-snapshot-attribute ([reset-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-snapshot-attribute-request reset-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/reset-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetSnapshotAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/reset-snapshot-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-flow-logs ([delete-flow-logs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-flow-logs-request delete-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/delete-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteFlowLogs", :http.request.configuration/output-deser-fn deser-delete-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-flow-logs :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/delete-flow-logs-result))

(clojure.core/defn authorize-security-group-egress ([authorize-security-group-egress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-authorize-security-group-egress-request authorize-security-group-egress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/authorize-security-group-egress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AuthorizeSecurityGroupEgress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef authorize-security-group-egress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/authorize-security-group-egress-request) :ret clojure.core/true?)

(clojure.core/defn unassign-private-ip-addresses ([unassign-private-ip-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-unassign-private-ip-addresses-request unassign-private-ip-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/unassign-private-ip-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "UnassignPrivateIpAddresses", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef unassign-private-ip-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/unassign-private-ip-addresses-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-peering-connections ([] (describe-vpc-peering-connections {})) ([describe-vpc-peering-connections-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-peering-connections-request describe-vpc-peering-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-peering-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-peering-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcPeeringConnections", :http.request.configuration/output-deser-fn deser-describe-vpc-peering-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-peering-connections :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpc-peering-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpc-peering-connections-result))

(clojure.core/defn monitor-instances ([monitor-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-monitor-instances-request monitor-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/monitor-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/monitor-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "MonitorInstances", :http.request.configuration/output-deser-fn deser-monitor-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef monitor-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/monitor-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/monitor-instances-result))

(clojure.core/defn describe-flow-logs ([] (describe-flow-logs {})) ([describe-flow-logs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-flow-logs-request describe-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeFlowLogs", :http.request.configuration/output-deser-fn deser-describe-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-flow-logs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-flow-logs-result))

(clojure.core/defn detach-vpn-gateway ([detach-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-vpn-gateway-request detach-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/detach-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachVpnGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/detach-vpn-gateway-request) :ret clojure.core/true?)

(clojure.core/defn cancel-spot-fleet-requests ([cancel-spot-fleet-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-spot-fleet-requests-request cancel-spot-fleet-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelSpotFleetRequests", :http.request.configuration/output-deser-fn deser-cancel-spot-fleet-requests-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-spot-fleet-requests :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-spot-fleet-requests-response))

(clojure.core/defn cancel-reserved-instances-listing ([cancel-reserved-instances-listing-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-reserved-instances-listing-request cancel-reserved-instances-listing-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/cancel-reserved-instances-listing-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/cancel-reserved-instances-listing-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelReservedInstancesListing", :http.request.configuration/output-deser-fn deser-cancel-reserved-instances-listing-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-reserved-instances-listing :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/cancel-reserved-instances-listing-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-reserved-instances-listing-result))

(clojure.core/defn modify-volume-attribute ([modify-volume-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-volume-attribute-request modify-volume-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-volume-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVolumeAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-volume-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-volume-attribute-request) :ret clojure.core/true?)

(clojure.core/defn modify-snapshot-attribute ([modify-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-snapshot-attribute-request modify-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifySnapshotAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-snapshot-attribute-request) :ret clojure.core/true?)

(clojure.core/defn attach-vpn-gateway ([attach-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-vpn-gateway-request attach-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/attach-vpn-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/attach-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachVpnGateway", :http.request.configuration/output-deser-fn deser-attach-vpn-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/attach-vpn-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attach-vpn-gateway-result))

(clojure.core/defn purchase-scheduled-instances ([purchase-scheduled-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-purchase-scheduled-instances-request purchase-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/purchase-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/purchase-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PurchaseScheduledInstances", :http.request.configuration/output-deser-fn deser-purchase-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-scheduled-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/purchase-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/purchase-scheduled-instances-result))

(clojure.core/defn create-security-group ([create-security-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-security-group-request create-security-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-security-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSecurityGroup", :http.request.configuration/output-deser-fn deser-create-security-group-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-security-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-security-group-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-security-group-result))

(clojure.core/defn cancel-bundle-task ([cancel-bundle-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-bundle-task-request cancel-bundle-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/cancel-bundle-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/cancel-bundle-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelBundleTask", :http.request.configuration/output-deser-fn deser-cancel-bundle-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-bundle-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/cancel-bundle-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-bundle-task-result))

(clojure.core/defn restore-address-to-classic ([restore-address-to-classic-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-restore-address-to-classic-request restore-address-to-classic-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/restore-address-to-classic-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/restore-address-to-classic-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreAddressToClassic", :http.request.configuration/output-deser-fn deser-restore-address-to-classic-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef restore-address-to-classic :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/restore-address-to-classic-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/restore-address-to-classic-result))

(clojure.core/defn terminate-instances ([terminate-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-terminate-instances-request terminate-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/terminate-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/terminate-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "TerminateInstances", :http.request.configuration/output-deser-fn deser-terminate-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef terminate-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/terminate-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/terminate-instances-result))

(clojure.core/defn describe-regions ([] (describe-regions {})) ([describe-regions-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-regions-request describe-regions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-regions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-regions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeRegions", :http.request.configuration/output-deser-fn deser-describe-regions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-regions :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-regions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-regions-result))

(clojure.core/defn create-network-interface ([create-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-network-interface-request create-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-network-interface-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNetworkInterface", :http.request.configuration/output-deser-fn deser-create-network-interface-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-network-interface-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-network-interface-result))

(clojure.core/defn create-vpc-peering-connection ([] (create-vpc-peering-connection {})) ([create-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-peering-connection-request create-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-create-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-peering-connection :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/create-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-vpc-peering-connection-result))

(clojure.core/defn create-vpc-endpoint ([create-vpc-endpoint-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-endpoint-request create-vpc-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-vpc-endpoint-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-vpc-endpoint-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpcEndpoint", :http.request.configuration/output-deser-fn deser-create-vpc-endpoint-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-vpc-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-vpc-endpoint-result))

(clojure.core/defn create-placement-group ([create-placement-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-placement-group-request create-placement-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-placement-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreatePlacementGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-placement-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-placement-group-request) :ret clojure.core/true?)

(clojure.core/defn attach-classic-link-vpc ([attach-classic-link-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-classic-link-vpc-request attach-classic-link-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/attach-classic-link-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/attach-classic-link-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachClassicLinkVpc", :http.request.configuration/output-deser-fn deser-attach-classic-link-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-classic-link-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/attach-classic-link-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/attach-classic-link-vpc-result))

(clojure.core/defn request-spot-fleet ([request-spot-fleet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-request-spot-fleet-request request-spot-fleet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/request-spot-fleet-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/request-spot-fleet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RequestSpotFleet", :http.request.configuration/output-deser-fn deser-request-spot-fleet-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef request-spot-fleet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/request-spot-fleet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/request-spot-fleet-response))

(clojure.core/defn detach-classic-link-vpc ([detach-classic-link-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-classic-link-vpc-request detach-classic-link-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/detach-classic-link-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/detach-classic-link-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachClassicLinkVpc", :http.request.configuration/output-deser-fn deser-detach-classic-link-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-classic-link-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/detach-classic-link-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/detach-classic-link-vpc-result))

(clojure.core/defn create-vpn-connection ([create-vpn-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpn-connection-request create-vpn-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/create-vpn-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-vpn-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpnConnection", :http.request.configuration/output-deser-fn deser-create-vpn-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-vpn-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/create-vpn-connection-result))

(clojure.core/defn modify-vpc-endpoint ([modify-vpc-endpoint-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-endpoint-request modify-vpc-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/modify-vpc-endpoint-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-vpc-endpoint-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcEndpoint", :http.request.configuration/output-deser-fn deser-modify-vpc-endpoint-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-vpc-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/modify-vpc-endpoint-result))

(clojure.core/defn enable-volume-io ([enable-volume-io-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-volume-io-request enable-volume-io-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/enable-volume-io-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVolumeIO", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-volume-io :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/enable-volume-io-request) :ret clojure.core/true?)

(clojure.core/defn modify-id-format ([modify-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-id-format-request modify-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/modify-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyIdFormat", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-id-format :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/modify-id-format-request) :ret clojure.core/true?)

(clojure.core/defn run-instances ([run-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-run-instances-request run-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/reservation, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/run-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RunInstances", :http.request.configuration/output-deser-fn deser-reservation, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef run-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/run-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/reservation))

(clojure.core/defn create-key-pair ([create-key-pair-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-key-pair-request create-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/key-pair, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/create-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateKeyPair", :http.request.configuration/output-deser-fn deser-key-pair, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/create-key-pair-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/key-pair))

(clojure.core/defn delete-network-interface ([delete-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-network-interface-request delete-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNetworkInterface", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-network-interface-request) :ret clojure.core/true?)

(clojure.core/defn delete-spot-datafeed-subscription ([] (delete-spot-datafeed-subscription {})) ([delete-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-spot-datafeed-subscription-request delete-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSpotDatafeedSubscription", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-spot-datafeed-subscription :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/delete-spot-datafeed-subscription-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-endpoints ([] (describe-vpc-endpoints {})) ([describe-vpc-endpoints-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoints-request describe-vpc-endpoints-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoints-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoints-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpoints", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoints-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoints :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoints-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-vpc-endpoints-result))

(clojure.core/defn describe-hosts ([] (describe-hosts {})) ([describe-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-hosts-request describe-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/describe-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeHosts", :http.request.configuration/output-deser-fn deser-describe-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-hosts :args (clojure.spec.alpha/? :portkey.aws.ec2.-2015-10-01/describe-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/describe-hosts-result))

(clojure.core/defn delete-vpn-connection ([delete-vpn-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpn-connection-request delete-vpn-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-vpn-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpnConnection", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-vpn-connection-request) :ret clojure.core/true?)

(clojure.core/defn start-instances ([start-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-start-instances-request start-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/start-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/start-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StartInstances", :http.request.configuration/output-deser-fn deser-start-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef start-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/start-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/start-instances-result))

(clojure.core/defn detach-volume ([detach-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-volume-request detach-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/volume-attachment, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/detach-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachVolume", :http.request.configuration/output-deser-fn deser-volume-attachment, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/detach-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/volume-attachment))

(clojure.core/defn confirm-product-instance ([confirm-product-instance-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-confirm-product-instance-request confirm-product-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/confirm-product-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/confirm-product-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ConfirmProductInstance", :http.request.configuration/output-deser-fn deser-confirm-product-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef confirm-product-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/confirm-product-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/confirm-product-instance-result))

(clojure.core/defn delete-vpc-peering-connection ([delete-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-peering-connection-request delete-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/delete-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/delete-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-delete-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-peering-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/delete-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/delete-vpc-peering-connection-result))

(clojure.core/defn describe-image-attribute ([describe-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-image-attribute-request describe-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/image-attribute, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/describe-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImageAttribute", :http.request.configuration/output-deser-fn deser-image-attribute, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/describe-image-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/image-attribute))

(clojure.core/defn cancel-spot-instance-requests ([cancel-spot-instance-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-spot-instance-requests-request cancel-spot-instance-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2015-10-01/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-requests-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-10-01", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelSpotInstanceRequests", :http.request.configuration/output-deser-fn deser-cancel-spot-instance-requests-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-spot-instance-requests :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2015-10-01/cancel-spot-instance-requests-result))
