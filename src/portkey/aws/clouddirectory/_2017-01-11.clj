(ns portkey.aws.clouddirectory.-2017-01-11 (:require [portkey.aws]))

(def
 endpoints
 '{"eu-west-1"
   {:credential-scope {:service "clouddirectory", :region "eu-west-1"},
    :ssl-common-name "clouddirectory.eu-west-1.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "clouddirectory", :region "us-east-2"},
    :ssl-common-name "clouddirectory.us-east-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-2"},
    :ssl-common-name "clouddirectory.ap-southeast-2.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-1"},
    :ssl-common-name "clouddirectory.ap-southeast-1.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope
    {:service "clouddirectory", :region "ca-central-1"},
    :ssl-common-name "clouddirectory.ca-central-1.amazonaws.com",
    :endpoint "https://clouddirectory.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope
    {:service "clouddirectory", :region "eu-central-1"},
    :ssl-common-name "clouddirectory.eu-central-1.amazonaws.com",
    :endpoint "https://clouddirectory.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "clouddirectory", :region "eu-west-2"},
    :ssl-common-name "clouddirectory.eu-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope
    {:service "clouddirectory", :region "us-gov-west-1"},
    :ssl-common-name "clouddirectory.us-gov-west-1.amazonaws.com",
    :endpoint "https://clouddirectory.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "clouddirectory", :region "us-west-2"},
    :ssl-common-name "clouddirectory.us-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "clouddirectory", :region "us-east-1"},
    :ssl-common-name "clouddirectory.us-east-1.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-batch-get-object-attributes)

(clojure.core/declare ser-facet-name)

(clojure.core/declare ser-batch-list-index)

(clojure.core/declare ser-link-attribute-action)

(clojure.core/declare ser-schema-facet)

(clojure.core/declare ser-batch-update-link-attributes)

(clojure.core/declare ser-link-attribute-update-list)

(clojure.core/declare ser-batch-list-object-attributes)

(clojure.core/declare ser-facet-attribute)

(clojure.core/declare ser-object-attribute-update)

(clojure.core/declare ser-typed-attribute-value)

(clojure.core/declare ser-facet-attribute-definition)

(clojure.core/declare ser-facet-attribute-list)

(clojure.core/declare ser-datetime-attribute-value)

(clojure.core/declare ser-object-attribute-range)

(clojure.core/declare ser-batch-read-operation)

(clojure.core/declare ser-number-attribute-value)

(clojure.core/declare ser-object-attribute-action)

(clojure.core/declare ser-typed-link-attribute-range-list)

(clojure.core/declare ser-attribute-name)

(clojure.core/declare ser-required-attribute-behavior)

(clojure.core/declare ser-typed-attribute-value-range)

(clojure.core/declare ser-batch-add-facet-to-object)

(clojure.core/declare ser-typed-link-name)

(clojure.core/declare ser-batch-update-object-attributes)

(clojure.core/declare ser-batch-write-operation-list)

(clojure.core/declare ser-batch-list-object-policies)

(clojure.core/declare ser-batch-remove-facet-from-object)

(clojure.core/declare ser-batch-attach-typed-link)

(clojure.core/declare ser-batch-get-object-information)

(clojure.core/declare ser-typed-link-attribute-definition-list)

(clojure.core/declare ser-tag-key)

(clojure.core/declare ser-update-action-type)

(clojure.core/declare ser-facet-attribute-type)

(clojure.core/declare ser-batch-list-object-children)

(clojure.core/declare ser-boolean-attribute-value)

(clojure.core/declare ser-batch-attach-policy)

(clojure.core/declare ser-schema-json-document)

(clojure.core/declare ser-attribute-key-list)

(clojure.core/declare ser-selector-object-reference)

(clojure.core/declare ser-rule-map)

(clojure.core/declare ser-batch-list-object-parent-paths)

(clojure.core/declare ser-next-token)

(clojure.core/declare ser-batch-list-outgoing-typed-links)

(clojure.core/declare ser-batch-list-incoming-typed-links)

(clojure.core/declare ser-attribute-key-and-value-list)

(clojure.core/declare ser-typed-link-attribute-range)

(clojure.core/declare ser-typed-link-specifier)

(clojure.core/declare ser-object-attribute-range-list)

(clojure.core/declare ser-typed-link-facet)

(clojure.core/declare ser-range-mode)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-tag-key-list)

(clojure.core/declare ser-binary-attribute-value)

(clojure.core/declare ser-batch-read-operation-list)

(clojure.core/declare ser-batch-get-link-attributes)

(clojure.core/declare ser-batch-detach-typed-link)

(clojure.core/declare ser-object-attribute-update-list)

(clojure.core/declare ser-attribute-name-and-value-list)

(clojure.core/declare ser-tag-value)

(clojure.core/declare ser-facet-attribute-update-list)

(clojure.core/declare ser-attribute-name-and-value)

(clojure.core/declare ser-batch-list-policy-attachments)

(clojure.core/declare ser-object-reference)

(clojure.core/declare ser-attribute-key)

(clojure.core/declare ser-bool)

(clojure.core/declare ser-attribute-name-list)

(clojure.core/declare ser-batch-attach-to-index)

(clojure.core/declare ser-batch-reference-name)

(clojure.core/declare ser-batch-write-operation)

(clojure.core/declare ser-directory-arn)

(clojure.core/declare ser-rule-parameter-value)

(clojure.core/declare ser-batch-detach-from-index)

(clojure.core/declare ser-typed-link-facet-attribute-update)

(clojure.core/declare ser-facet-attribute-update)

(clojure.core/declare ser-typed-link-schema-and-facet-name)

(clojure.core/declare ser-rule)

(clojure.core/declare ser-batch-attach-object)

(clojure.core/declare ser-batch-delete-object)

(clojure.core/declare ser-rule-parameter-key)

(clojure.core/declare ser-batch-lookup-policy)

(clojure.core/declare ser-typed-link-facet-attribute-update-list)

(clojure.core/declare ser-arn)

(clojure.core/declare ser-link-attribute-update)

(clojure.core/declare ser-batch-create-index)

(clojure.core/declare ser-link-name)

(clojure.core/declare ser-number-results)

(clojure.core/declare ser-tags-number-results)

(clojure.core/declare ser-batch-detach-policy)

(clojure.core/declare ser-directory-state)

(clojure.core/declare ser-rule-key)

(clojure.core/declare ser-object-type)

(clojure.core/declare ser-consistency-level)

(clojure.core/declare ser-directory-name)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-version)

(clojure.core/declare ser-batch-create-object)

(clojure.core/declare ser-facet-style)

(clojure.core/declare ser-batch-detach-object)

(clojure.core/declare ser-schema-name)

(clojure.core/declare ser-typed-link-attribute-definition)

(clojure.core/declare ser-string-attribute-value)

(clojure.core/declare ser-rule-parameter-map)

(clojure.core/declare ser-schema-facet-list)

(clojure.core/declare ser-attribute-key-and-value)

(clojure.core/declare ser-batch-list-attached-indices)

(clojure.core/declare ser-batch-list-object-parents)

(clojure.core/declare ser-facet-attribute-reference)

(clojure.core/declare ser-rule-type)

(clojure.core/defn- ser-batch-get-object-attributes [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-schema-facet (:schema-facet input)) #:http.request.field{:name "SchemaFacet", :shape "SchemaFacet"}) (clojure.core/into (ser-attribute-name-list (:attribute-names input)) #:http.request.field{:name "AttributeNames", :shape "AttributeNameList"})], :shape "BatchGetObjectAttributes", :type "structure"}))

(clojure.core/defn- ser-facet-name [input] #:http.request.field{:value input, :shape "FacetName"})

(clojure.core/defn- ser-batch-list-index [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:index-reference input)) #:http.request.field{:name "IndexReference", :shape "ObjectReference"})], :shape "BatchListIndex", :type "structure"} (clojure.core/contains? input :ranges-on-indexed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-attribute-range-list (input :ranges-on-indexed-values)) #:http.request.field{:name "RangesOnIndexedValues", :shape "ObjectAttributeRangeList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"}))))

(clojure.core/defn- ser-link-attribute-action [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LinkAttributeAction", :type "structure"} (clojure.core/contains? input :attribute-action-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-action-type (input :attribute-action-type)) #:http.request.field{:name "AttributeActionType", :shape "UpdateActionType"})) (clojure.core/contains? input :attribute-update-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-attribute-value (input :attribute-update-value)) #:http.request.field{:name "AttributeUpdateValue", :shape "TypedAttributeValue"}))))

(clojure.core/defn- ser-schema-facet [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SchemaFacet", :type "structure"} (clojure.core/contains? input :schema-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn"})) (clojure.core/contains? input :facet-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-facet-name (input :facet-name)) #:http.request.field{:name "FacetName", :shape "FacetName"}))))

(clojure.core/defn- ser-batch-update-link-attributes [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-typed-link-specifier (:typed-link-specifier input)) #:http.request.field{:name "TypedLinkSpecifier", :shape "TypedLinkSpecifier"}) (clojure.core/into (ser-link-attribute-update-list (:attribute-updates input)) #:http.request.field{:name "AttributeUpdates", :shape "LinkAttributeUpdateList"})], :shape "BatchUpdateLinkAttributes", :type "structure"}))

(clojure.core/defn- ser-link-attribute-update-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-link-attribute-update coll) #:http.request.field{:shape "LinkAttributeUpdate"}))) input), :shape "LinkAttributeUpdateList", :type "list"})

(clojure.core/defn- ser-batch-list-object-attributes [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchListObjectAttributes", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :facet-filter) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-schema-facet (input :facet-filter)) #:http.request.field{:name "FacetFilter", :shape "SchemaFacet"}))))

(clojure.core/defn- ser-facet-attribute [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-attribute-name (:name input)) #:http.request.field{:name "Name", :shape "AttributeName"})], :shape "FacetAttribute", :type "structure"} (clojure.core/contains? input :attribute-definition) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-facet-attribute-definition (input :attribute-definition)) #:http.request.field{:name "AttributeDefinition", :shape "FacetAttributeDefinition"})) (clojure.core/contains? input :attribute-reference) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-facet-attribute-reference (input :attribute-reference)) #:http.request.field{:name "AttributeReference", :shape "FacetAttributeReference"})) (clojure.core/contains? input :required-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-required-attribute-behavior (input :required-behavior)) #:http.request.field{:name "RequiredBehavior", :shape "RequiredAttributeBehavior"}))))

(clojure.core/defn- ser-object-attribute-update [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ObjectAttributeUpdate", :type "structure"} (clojure.core/contains? input :object-attribute-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-key (input :object-attribute-key)) #:http.request.field{:name "ObjectAttributeKey", :shape "AttributeKey"})) (clojure.core/contains? input :object-attribute-action) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-attribute-action (input :object-attribute-action)) #:http.request.field{:name "ObjectAttributeAction", :shape "ObjectAttributeAction"}))))

(clojure.core/defn- ser-typed-attribute-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "TypedAttributeValue", :type "structure"} (clojure.core/contains? input :string-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-attribute-value (input :string-value)) #:http.request.field{:name "StringValue", :shape "StringAttributeValue"})) (clojure.core/contains? input :binary-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-binary-attribute-value (input :binary-value)) #:http.request.field{:name "BinaryValue", :shape "BinaryAttributeValue"})) (clojure.core/contains? input :boolean-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-attribute-value (input :boolean-value)) #:http.request.field{:name "BooleanValue", :shape "BooleanAttributeValue"})) (clojure.core/contains? input :number-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-attribute-value (input :number-value)) #:http.request.field{:name "NumberValue", :shape "NumberAttributeValue"})) (clojure.core/contains? input :datetime-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-datetime-attribute-value (input :datetime-value)) #:http.request.field{:name "DatetimeValue", :shape "DatetimeAttributeValue"}))))

(clojure.core/defn- ser-facet-attribute-definition [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-facet-attribute-type (:type input)) #:http.request.field{:name "Type", :shape "FacetAttributeType"})], :shape "FacetAttributeDefinition", :type "structure"} (clojure.core/contains? input :default-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-attribute-value (input :default-value)) #:http.request.field{:name "DefaultValue", :shape "TypedAttributeValue"})) (clojure.core/contains? input :is-immutable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bool (input :is-immutable)) #:http.request.field{:name "IsImmutable", :shape "Bool"})) (clojure.core/contains? input :rules) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-rule-map (input :rules)) #:http.request.field{:name "Rules", :shape "RuleMap"}))))

(clojure.core/defn- ser-facet-attribute-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-facet-attribute coll) #:http.request.field{:shape "FacetAttribute"}))) input), :shape "FacetAttributeList", :type "list"})

(clojure.core/defn- ser-datetime-attribute-value [input] #:http.request.field{:value input, :shape "DatetimeAttributeValue"})

(clojure.core/defn- ser-object-attribute-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ObjectAttributeRange", :type "structure"} (clojure.core/contains? input :attribute-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-key (input :attribute-key)) #:http.request.field{:name "AttributeKey", :shape "AttributeKey"})) (clojure.core/contains? input :range) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-attribute-value-range (input :range)) #:http.request.field{:name "Range", :shape "TypedAttributeValueRange"}))))

(clojure.core/defn- ser-batch-read-operation [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BatchReadOperation", :type "structure"} (clojure.core/contains? input :list-object-policies) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-object-policies (input :list-object-policies)) #:http.request.field{:name "ListObjectPolicies", :shape "BatchListObjectPolicies"})) (clojure.core/contains? input :list-object-parent-paths) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-object-parent-paths (input :list-object-parent-paths)) #:http.request.field{:name "ListObjectParentPaths", :shape "BatchListObjectParentPaths"})) (clojure.core/contains? input :list-incoming-typed-links) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-incoming-typed-links (input :list-incoming-typed-links)) #:http.request.field{:name "ListIncomingTypedLinks", :shape "BatchListIncomingTypedLinks"})) (clojure.core/contains? input :get-object-attributes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-get-object-attributes (input :get-object-attributes)) #:http.request.field{:name "GetObjectAttributes", :shape "BatchGetObjectAttributes"})) (clojure.core/contains? input :get-object-information) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-get-object-information (input :get-object-information)) #:http.request.field{:name "GetObjectInformation", :shape "BatchGetObjectInformation"})) (clojure.core/contains? input :list-policy-attachments) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-policy-attachments (input :list-policy-attachments)) #:http.request.field{:name "ListPolicyAttachments", :shape "BatchListPolicyAttachments"})) (clojure.core/contains? input :list-outgoing-typed-links) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-outgoing-typed-links (input :list-outgoing-typed-links)) #:http.request.field{:name "ListOutgoingTypedLinks", :shape "BatchListOutgoingTypedLinks"})) (clojure.core/contains? input :get-link-attributes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-get-link-attributes (input :get-link-attributes)) #:http.request.field{:name "GetLinkAttributes", :shape "BatchGetLinkAttributes"})) (clojure.core/contains? input :list-object-attributes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-object-attributes (input :list-object-attributes)) #:http.request.field{:name "ListObjectAttributes", :shape "BatchListObjectAttributes"})) (clojure.core/contains? input :list-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-index (input :list-index)) #:http.request.field{:name "ListIndex", :shape "BatchListIndex"})) (clojure.core/contains? input :list-object-children) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-object-children (input :list-object-children)) #:http.request.field{:name "ListObjectChildren", :shape "BatchListObjectChildren"})) (clojure.core/contains? input :list-object-parents) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-object-parents (input :list-object-parents)) #:http.request.field{:name "ListObjectParents", :shape "BatchListObjectParents"})) (clojure.core/contains? input :list-attached-indices) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-list-attached-indices (input :list-attached-indices)) #:http.request.field{:name "ListAttachedIndices", :shape "BatchListAttachedIndices"})) (clojure.core/contains? input :lookup-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-lookup-policy (input :lookup-policy)) #:http.request.field{:name "LookupPolicy", :shape "BatchLookupPolicy"}))))

(clojure.core/defn- ser-number-attribute-value [input] #:http.request.field{:value input, :shape "NumberAttributeValue"})

(clojure.core/defn- ser-object-attribute-action [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ObjectAttributeAction", :type "structure"} (clojure.core/contains? input :object-attribute-action-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-action-type (input :object-attribute-action-type)) #:http.request.field{:name "ObjectAttributeActionType", :shape "UpdateActionType"})) (clojure.core/contains? input :object-attribute-update-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-attribute-value (input :object-attribute-update-value)) #:http.request.field{:name "ObjectAttributeUpdateValue", :shape "TypedAttributeValue"}))))

(clojure.core/defn- ser-typed-link-attribute-range-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-typed-link-attribute-range coll) #:http.request.field{:shape "TypedLinkAttributeRange"}))) input), :shape "TypedLinkAttributeRangeList", :type "list"})

(clojure.core/defn- ser-attribute-name [input] #:http.request.field{:value input, :shape "AttributeName"})

(clojure.core/defn- ser-required-attribute-behavior [input] #:http.request.field{:value (clojure.core/get {"REQUIRED_ALWAYS" "REQUIRED_ALWAYS", :required-always "REQUIRED_ALWAYS", "NOT_REQUIRED" "NOT_REQUIRED", :not-required "NOT_REQUIRED"} input), :shape "RequiredAttributeBehavior"})

(clojure.core/defn- ser-typed-attribute-value-range [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-range-mode (:start-mode input)) #:http.request.field{:name "StartMode", :shape "RangeMode"}) (clojure.core/into (ser-range-mode (:end-mode input)) #:http.request.field{:name "EndMode", :shape "RangeMode"})], :shape "TypedAttributeValueRange", :type "structure"} (clojure.core/contains? input :start-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-attribute-value (input :start-value)) #:http.request.field{:name "StartValue", :shape "TypedAttributeValue"})) (clojure.core/contains? input :end-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-attribute-value (input :end-value)) #:http.request.field{:name "EndValue", :shape "TypedAttributeValue"}))))

(clojure.core/defn- ser-batch-add-facet-to-object [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-schema-facet (:schema-facet input)) #:http.request.field{:name "SchemaFacet", :shape "SchemaFacet"}) (clojure.core/into (ser-attribute-key-and-value-list (:object-attribute-list input)) #:http.request.field{:name "ObjectAttributeList", :shape "AttributeKeyAndValueList"}) (clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchAddFacetToObject", :type "structure"}))

(clojure.core/defn- ser-typed-link-name [input] #:http.request.field{:value input, :shape "TypedLinkName"})

(clojure.core/defn- ser-batch-update-object-attributes [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-attribute-update-list (:attribute-updates input)) #:http.request.field{:name "AttributeUpdates", :shape "ObjectAttributeUpdateList"})], :shape "BatchUpdateObjectAttributes", :type "structure"}))

(clojure.core/defn- ser-batch-write-operation-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-batch-write-operation coll) #:http.request.field{:shape "BatchWriteOperation"}))) input), :shape "BatchWriteOperationList", :type "list"})

(clojure.core/defn- ser-batch-list-object-policies [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchListObjectPolicies", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-batch-remove-facet-from-object [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-schema-facet (:schema-facet input)) #:http.request.field{:name "SchemaFacet", :shape "SchemaFacet"}) (clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchRemoveFacetFromObject", :type "structure"}))

(clojure.core/defn- ser-batch-attach-typed-link [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:source-object-reference input)) #:http.request.field{:name "SourceObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (:target-object-reference input)) #:http.request.field{:name "TargetObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-typed-link-schema-and-facet-name (:typed-link-facet input)) #:http.request.field{:name "TypedLinkFacet", :shape "TypedLinkSchemaAndFacetName"}) (clojure.core/into (ser-attribute-name-and-value-list (:attributes input)) #:http.request.field{:name "Attributes", :shape "AttributeNameAndValueList"})], :shape "BatchAttachTypedLink", :type "structure"}))

(clojure.core/defn- ser-batch-get-object-information [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchGetObjectInformation", :type "structure"}))

(clojure.core/defn- ser-typed-link-attribute-definition-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-typed-link-attribute-definition coll) #:http.request.field{:shape "TypedLinkAttributeDefinition"}))) input), :shape "TypedLinkAttributeDefinitionList", :type "list"})

(clojure.core/defn- ser-tag-key [input] #:http.request.field{:value input, :shape "TagKey"})

(clojure.core/defn- ser-update-action-type [input] #:http.request.field{:value (clojure.core/get {"CREATE_OR_UPDATE" "CREATE_OR_UPDATE", :create-or-update "CREATE_OR_UPDATE", "DELETE" "DELETE", :delete "DELETE"} input), :shape "UpdateActionType"})

(clojure.core/defn- ser-facet-attribute-type [input] #:http.request.field{:value (clojure.core/get {:binary "BINARY", :variant "VARIANT", :number "NUMBER", "NUMBER" "NUMBER", :string "STRING", "STRING" "STRING", "VARIANT" "VARIANT", :datetime "DATETIME", "DATETIME" "DATETIME", :boolean "BOOLEAN", "BOOLEAN" "BOOLEAN", "BINARY" "BINARY"} input), :shape "FacetAttributeType"})

(clojure.core/defn- ser-batch-list-object-children [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchListObjectChildren", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-boolean-attribute-value [input] #:http.request.field{:value input, :shape "BooleanAttributeValue"})

(clojure.core/defn- ser-batch-attach-policy [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:policy-reference input)) #:http.request.field{:name "PolicyReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchAttachPolicy", :type "structure"}))

(clojure.core/defn- ser-schema-json-document [input] #:http.request.field{:value input, :shape "SchemaJsonDocument"})

(clojure.core/defn- ser-attribute-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-attribute-key coll) #:http.request.field{:shape "AttributeKey"}))) input), :shape "AttributeKeyList", :type "list"})

(clojure.core/defn- ser-selector-object-reference [input] #:http.request.field{:value input, :shape "SelectorObjectReference"})

(clojure.core/defn- ser-rule-map [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-rule-key k) #:http.request.field{:map-info "key", :shape "RuleKey"}) (clojure.core/into (ser-rule v) #:http.request.field{:map-info "value", :shape "Rule"})])) input), :shape "RuleMap", :type "map"})

(clojure.core/defn- ser-batch-list-object-parent-paths [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchListObjectParentPaths", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-next-token [input] #:http.request.field{:value input, :shape "NextToken"})

(clojure.core/defn- ser-batch-list-outgoing-typed-links [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchListOutgoingTypedLinks", :type "structure"} (clojure.core/contains? input :filter-attribute-ranges) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-attribute-range-list (input :filter-attribute-ranges)) #:http.request.field{:name "FilterAttributeRanges", :shape "TypedLinkAttributeRangeList"})) (clojure.core/contains? input :filter-typed-link) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-schema-and-facet-name (input :filter-typed-link)) #:http.request.field{:name "FilterTypedLink", :shape "TypedLinkSchemaAndFacetName"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-batch-list-incoming-typed-links [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchListIncomingTypedLinks", :type "structure"} (clojure.core/contains? input :filter-attribute-ranges) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-attribute-range-list (input :filter-attribute-ranges)) #:http.request.field{:name "FilterAttributeRanges", :shape "TypedLinkAttributeRangeList"})) (clojure.core/contains? input :filter-typed-link) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-schema-and-facet-name (input :filter-typed-link)) #:http.request.field{:name "FilterTypedLink", :shape "TypedLinkSchemaAndFacetName"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-attribute-key-and-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-attribute-key-and-value coll) #:http.request.field{:shape "AttributeKeyAndValue"}))) input), :shape "AttributeKeyAndValueList", :type "list"})

(clojure.core/defn- ser-typed-link-attribute-range [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-typed-attribute-value-range (:range input)) #:http.request.field{:name "Range", :shape "TypedAttributeValueRange"})], :shape "TypedLinkAttributeRange", :type "structure"} (clojure.core/contains? input :attribute-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-name (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "AttributeName"}))))

(clojure.core/defn- ser-typed-link-specifier [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-typed-link-schema-and-facet-name (:typed-link-facet input)) #:http.request.field{:name "TypedLinkFacet", :shape "TypedLinkSchemaAndFacetName"}) (clojure.core/into (ser-object-reference (:source-object-reference input)) #:http.request.field{:name "SourceObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (:target-object-reference input)) #:http.request.field{:name "TargetObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-attribute-name-and-value-list (:identity-attribute-values input)) #:http.request.field{:name "IdentityAttributeValues", :shape "AttributeNameAndValueList"})], :shape "TypedLinkSpecifier", :type "structure"}))

(clojure.core/defn- ser-object-attribute-range-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-object-attribute-range coll) #:http.request.field{:shape "ObjectAttributeRange"}))) input), :shape "ObjectAttributeRangeList", :type "list"})

(clojure.core/defn- ser-typed-link-facet [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-typed-link-name (:name input)) #:http.request.field{:name "Name", :shape "TypedLinkName"}) (clojure.core/into (ser-typed-link-attribute-definition-list (:attributes input)) #:http.request.field{:name "Attributes", :shape "TypedLinkAttributeDefinitionList"}) (clojure.core/into (ser-attribute-name-list (:identity-attribute-order input)) #:http.request.field{:name "IdentityAttributeOrder", :shape "AttributeNameList"})], :shape "TypedLinkFacet", :type "structure"}))

(clojure.core/defn- ser-range-mode [input] #:http.request.field{:value (clojure.core/get {:exclusive "EXCLUSIVE", "LAST" "LAST", :inclusive "INCLUSIVE", :last-before-missing-values "LAST_BEFORE_MISSING_VALUES", "EXCLUSIVE" "EXCLUSIVE", :first "FIRST", "INCLUSIVE" "INCLUSIVE", :last "LAST", "FIRST" "FIRST", "LAST_BEFORE_MISSING_VALUES" "LAST_BEFORE_MISSING_VALUES"} input), :shape "RangeMode"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-tag-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag-key coll) #:http.request.field{:shape "TagKey"}))) input), :shape "TagKeyList", :type "list"})

(clojure.core/defn- ser-binary-attribute-value [input] #:http.request.field{:value (portkey.aws/base64-encode input), :shape "BinaryAttributeValue"})

(clojure.core/defn- ser-batch-read-operation-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-batch-read-operation coll) #:http.request.field{:shape "BatchReadOperation"}))) input), :shape "BatchReadOperationList", :type "list"})

(clojure.core/defn- ser-batch-get-link-attributes [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-typed-link-specifier (:typed-link-specifier input)) #:http.request.field{:name "TypedLinkSpecifier", :shape "TypedLinkSpecifier"}) (clojure.core/into (ser-attribute-name-list (:attribute-names input)) #:http.request.field{:name "AttributeNames", :shape "AttributeNameList"})], :shape "BatchGetLinkAttributes", :type "structure"}))

(clojure.core/defn- ser-batch-detach-typed-link [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-typed-link-specifier (:typed-link-specifier input)) #:http.request.field{:name "TypedLinkSpecifier", :shape "TypedLinkSpecifier"})], :shape "BatchDetachTypedLink", :type "structure"}))

(clojure.core/defn- ser-object-attribute-update-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-object-attribute-update coll) #:http.request.field{:shape "ObjectAttributeUpdate"}))) input), :shape "ObjectAttributeUpdateList", :type "list"})

(clojure.core/defn- ser-attribute-name-and-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-attribute-name-and-value coll) #:http.request.field{:shape "AttributeNameAndValue"}))) input), :shape "AttributeNameAndValueList", :type "list"})

(clojure.core/defn- ser-tag-value [input] #:http.request.field{:value input, :shape "TagValue"})

(clojure.core/defn- ser-facet-attribute-update-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-facet-attribute-update coll) #:http.request.field{:shape "FacetAttributeUpdate"}))) input), :shape "FacetAttributeUpdateList", :type "list"})

(clojure.core/defn- ser-attribute-name-and-value [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-attribute-name (:attribute-name input)) #:http.request.field{:name "AttributeName", :shape "AttributeName"}) (clojure.core/into (ser-typed-attribute-value (:value input)) #:http.request.field{:name "Value", :shape "TypedAttributeValue"})], :shape "AttributeNameAndValue", :type "structure"}))

(clojure.core/defn- ser-batch-list-policy-attachments [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:policy-reference input)) #:http.request.field{:name "PolicyReference", :shape "ObjectReference"})], :shape "BatchListPolicyAttachments", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-object-reference [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ObjectReference", :type "structure"} (clojure.core/contains? input :selector) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selector-object-reference (input :selector)) #:http.request.field{:name "Selector", :shape "SelectorObjectReference"}))))

(clojure.core/defn- ser-attribute-key [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-arn (:schema-arn input)) #:http.request.field{:name "SchemaArn", :shape "Arn"}) (clojure.core/into (ser-facet-name (:facet-name input)) #:http.request.field{:name "FacetName", :shape "FacetName"}) (clojure.core/into (ser-attribute-name (:name input)) #:http.request.field{:name "Name", :shape "AttributeName"})], :shape "AttributeKey", :type "structure"}))

(clojure.core/defn- ser-bool [input] #:http.request.field{:value input, :shape "Bool"})

(clojure.core/defn- ser-attribute-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-attribute-name coll) #:http.request.field{:shape "AttributeName"}))) input), :shape "AttributeNameList", :type "list"})

(clojure.core/defn- ser-batch-attach-to-index [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:index-reference input)) #:http.request.field{:name "IndexReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (:target-reference input)) #:http.request.field{:name "TargetReference", :shape "ObjectReference"})], :shape "BatchAttachToIndex", :type "structure"}))

(clojure.core/defn- ser-batch-reference-name [input] #:http.request.field{:value input, :shape "BatchReferenceName"})

(clojure.core/defn- ser-batch-write-operation [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BatchWriteOperation", :type "structure"} (clojure.core/contains? input :create-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-create-index (input :create-index)) #:http.request.field{:name "CreateIndex", :shape "BatchCreateIndex"})) (clojure.core/contains? input :create-object) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-create-object (input :create-object)) #:http.request.field{:name "CreateObject", :shape "BatchCreateObject"})) (clojure.core/contains? input :detach-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-detach-policy (input :detach-policy)) #:http.request.field{:name "DetachPolicy", :shape "BatchDetachPolicy"})) (clojure.core/contains? input :detach-object) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-detach-object (input :detach-object)) #:http.request.field{:name "DetachObject", :shape "BatchDetachObject"})) (clojure.core/contains? input :detach-from-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-detach-from-index (input :detach-from-index)) #:http.request.field{:name "DetachFromIndex", :shape "BatchDetachFromIndex"})) (clojure.core/contains? input :attach-object) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-attach-object (input :attach-object)) #:http.request.field{:name "AttachObject", :shape "BatchAttachObject"})) (clojure.core/contains? input :update-link-attributes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-update-link-attributes (input :update-link-attributes)) #:http.request.field{:name "UpdateLinkAttributes", :shape "BatchUpdateLinkAttributes"})) (clojure.core/contains? input :attach-to-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-attach-to-index (input :attach-to-index)) #:http.request.field{:name "AttachToIndex", :shape "BatchAttachToIndex"})) (clojure.core/contains? input :attach-typed-link) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-attach-typed-link (input :attach-typed-link)) #:http.request.field{:name "AttachTypedLink", :shape "BatchAttachTypedLink"})) (clojure.core/contains? input :detach-typed-link) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-detach-typed-link (input :detach-typed-link)) #:http.request.field{:name "DetachTypedLink", :shape "BatchDetachTypedLink"})) (clojure.core/contains? input :add-facet-to-object) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-add-facet-to-object (input :add-facet-to-object)) #:http.request.field{:name "AddFacetToObject", :shape "BatchAddFacetToObject"})) (clojure.core/contains? input :update-object-attributes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-update-object-attributes (input :update-object-attributes)) #:http.request.field{:name "UpdateObjectAttributes", :shape "BatchUpdateObjectAttributes"})) (clojure.core/contains? input :delete-object) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-delete-object (input :delete-object)) #:http.request.field{:name "DeleteObject", :shape "BatchDeleteObject"})) (clojure.core/contains? input :attach-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-attach-policy (input :attach-policy)) #:http.request.field{:name "AttachPolicy", :shape "BatchAttachPolicy"})) (clojure.core/contains? input :remove-facet-from-object) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-remove-facet-from-object (input :remove-facet-from-object)) #:http.request.field{:name "RemoveFacetFromObject", :shape "BatchRemoveFacetFromObject"}))))

(clojure.core/defn- ser-directory-arn [input] #:http.request.field{:value input, :shape "DirectoryArn"})

(clojure.core/defn- ser-rule-parameter-value [input] #:http.request.field{:value input, :shape "RuleParameterValue"})

(clojure.core/defn- ser-batch-detach-from-index [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:index-reference input)) #:http.request.field{:name "IndexReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (:target-reference input)) #:http.request.field{:name "TargetReference", :shape "ObjectReference"})], :shape "BatchDetachFromIndex", :type "structure"}))

(clojure.core/defn- ser-typed-link-facet-attribute-update [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-typed-link-attribute-definition (:attribute input)) #:http.request.field{:name "Attribute", :shape "TypedLinkAttributeDefinition"}) (clojure.core/into (ser-update-action-type (:action input)) #:http.request.field{:name "Action", :shape "UpdateActionType"})], :shape "TypedLinkFacetAttributeUpdate", :type "structure"}))

(clojure.core/defn- ser-facet-attribute-update [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FacetAttributeUpdate", :type "structure"} (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-facet-attribute (input :attribute)) #:http.request.field{:name "Attribute", :shape "FacetAttribute"})) (clojure.core/contains? input :action) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-action-type (input :action)) #:http.request.field{:name "Action", :shape "UpdateActionType"}))))

(clojure.core/defn- ser-typed-link-schema-and-facet-name [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-arn (:schema-arn input)) #:http.request.field{:name "SchemaArn", :shape "Arn"}) (clojure.core/into (ser-typed-link-name (:typed-link-name input)) #:http.request.field{:name "TypedLinkName", :shape "TypedLinkName"})], :shape "TypedLinkSchemaAndFacetName", :type "structure"}))

(clojure.core/defn- ser-rule [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Rule", :type "structure"} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-rule-type (input :type)) #:http.request.field{:name "Type", :shape "RuleType"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-rule-parameter-map (input :parameters)) #:http.request.field{:name "Parameters", :shape "RuleParameterMap"}))))

(clojure.core/defn- ser-batch-attach-object [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:parent-reference input)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (:child-reference input)) #:http.request.field{:name "ChildReference", :shape "ObjectReference"}) (clojure.core/into (ser-link-name (:link-name input)) #:http.request.field{:name "LinkName", :shape "LinkName"})], :shape "BatchAttachObject", :type "structure"}))

(clojure.core/defn- ser-batch-delete-object [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchDeleteObject", :type "structure"}))

(clojure.core/defn- ser-rule-parameter-key [input] #:http.request.field{:value input, :shape "RuleParameterKey"})

(clojure.core/defn- ser-batch-lookup-policy [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchLookupPolicy", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-typed-link-facet-attribute-update-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-typed-link-facet-attribute-update coll) #:http.request.field{:shape "TypedLinkFacetAttributeUpdate"}))) input), :shape "TypedLinkFacetAttributeUpdateList", :type "list"})

(clojure.core/defn- ser-arn [input] #:http.request.field{:value input, :shape "Arn"})

(clojure.core/defn- ser-link-attribute-update [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LinkAttributeUpdate", :type "structure"} (clojure.core/contains? input :attribute-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-key (input :attribute-key)) #:http.request.field{:name "AttributeKey", :shape "AttributeKey"})) (clojure.core/contains? input :attribute-action) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-link-attribute-action (input :attribute-action)) #:http.request.field{:name "AttributeAction", :shape "LinkAttributeAction"}))))

(clojure.core/defn- ser-batch-create-index [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-attribute-key-list (:ordered-indexed-attribute-list input)) #:http.request.field{:name "OrderedIndexedAttributeList", :shape "AttributeKeyList"}) (clojure.core/into (ser-bool (:is-unique input)) #:http.request.field{:name "IsUnique", :shape "Bool"})], :shape "BatchCreateIndex", :type "structure"} (clojure.core/contains? input :parent-reference) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-reference (input :parent-reference)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"})) (clojure.core/contains? input :link-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-link-name (input :link-name)) #:http.request.field{:name "LinkName", :shape "LinkName"})) (clojure.core/contains? input :batch-reference-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-reference-name (input :batch-reference-name)) #:http.request.field{:name "BatchReferenceName", :shape "BatchReferenceName"}))))

(clojure.core/defn- ser-link-name [input] #:http.request.field{:value input, :shape "LinkName"})

(clojure.core/defn- ser-number-results [input] #:http.request.field{:value input, :shape "NumberResults"})

(clojure.core/defn- ser-tags-number-results [input] #:http.request.field{:value input, :shape "TagsNumberResults"})

(clojure.core/defn- ser-batch-detach-policy [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:policy-reference input)) #:http.request.field{:name "PolicyReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchDetachPolicy", :type "structure"}))

(clojure.core/defn- ser-directory-state [input] #:http.request.field{:value (clojure.core/get {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED", "DELETED" "DELETED", :deleted "DELETED"} input), :shape "DirectoryState"})

(clojure.core/defn- ser-rule-key [input] #:http.request.field{:value input, :shape "RuleKey"})

(clojure.core/defn- ser-object-type [input] #:http.request.field{:value (clojure.core/get {"NODE" "NODE", :node "NODE", "LEAF_NODE" "LEAF_NODE", :leaf-node "LEAF_NODE", "POLICY" "POLICY", :policy "POLICY", "INDEX" "INDEX", :index "INDEX"} input), :shape "ObjectType"})

(clojure.core/defn- ser-consistency-level [input] #:http.request.field{:value (clojure.core/get {"SERIALIZABLE" "SERIALIZABLE", :serializable "SERIALIZABLE", "EVENTUAL" "EVENTUAL", :eventual "EVENTUAL"} input), :shape "ConsistencyLevel"})

(clojure.core/defn- ser-directory-name [input] #:http.request.field{:value input, :shape "DirectoryName"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-key (input :key)) #:http.request.field{:name "Key", :shape "TagKey"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-value (input :value)) #:http.request.field{:name "Value", :shape "TagValue"}))))

(clojure.core/defn- ser-version [input] #:http.request.field{:value input, :shape "Version"})

(clojure.core/defn- ser-batch-create-object [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-schema-facet-list (:schema-facet input)) #:http.request.field{:name "SchemaFacet", :shape "SchemaFacetList"}) (clojure.core/into (ser-attribute-key-and-value-list (:object-attribute-list input)) #:http.request.field{:name "ObjectAttributeList", :shape "AttributeKeyAndValueList"})], :shape "BatchCreateObject", :type "structure"} (clojure.core/contains? input :parent-reference) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-reference (input :parent-reference)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"})) (clojure.core/contains? input :link-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-link-name (input :link-name)) #:http.request.field{:name "LinkName", :shape "LinkName"})) (clojure.core/contains? input :batch-reference-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-reference-name (input :batch-reference-name)) #:http.request.field{:name "BatchReferenceName", :shape "BatchReferenceName"}))))

(clojure.core/defn- ser-facet-style [input] #:http.request.field{:value (clojure.core/get {"STATIC" "STATIC", :static "STATIC", "DYNAMIC" "DYNAMIC", :dynamic "DYNAMIC"} input), :shape "FacetStyle"})

(clojure.core/defn- ser-batch-detach-object [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:parent-reference input)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"}) (clojure.core/into (ser-link-name (:link-name input)) #:http.request.field{:name "LinkName", :shape "LinkName"})], :shape "BatchDetachObject", :type "structure"} (clojure.core/contains? input :batch-reference-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-batch-reference-name (input :batch-reference-name)) #:http.request.field{:name "BatchReferenceName", :shape "BatchReferenceName"}))))

(clojure.core/defn- ser-schema-name [input] #:http.request.field{:value input, :shape "SchemaName"})

(clojure.core/defn- ser-typed-link-attribute-definition [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-attribute-name (:name input)) #:http.request.field{:name "Name", :shape "AttributeName"}) (clojure.core/into (ser-facet-attribute-type (:type input)) #:http.request.field{:name "Type", :shape "FacetAttributeType"}) (clojure.core/into (ser-required-attribute-behavior (:required-behavior input)) #:http.request.field{:name "RequiredBehavior", :shape "RequiredAttributeBehavior"})], :shape "TypedLinkAttributeDefinition", :type "structure"} (clojure.core/contains? input :default-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-attribute-value (input :default-value)) #:http.request.field{:name "DefaultValue", :shape "TypedAttributeValue"})) (clojure.core/contains? input :is-immutable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bool (input :is-immutable)) #:http.request.field{:name "IsImmutable", :shape "Bool"})) (clojure.core/contains? input :rules) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-rule-map (input :rules)) #:http.request.field{:name "Rules", :shape "RuleMap"}))))

(clojure.core/defn- ser-string-attribute-value [input] #:http.request.field{:value input, :shape "StringAttributeValue"})

(clojure.core/defn- ser-rule-parameter-map [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-rule-parameter-key k) #:http.request.field{:map-info "key", :shape "RuleParameterKey"}) (clojure.core/into (ser-rule-parameter-value v) #:http.request.field{:map-info "value", :shape "RuleParameterValue"})])) input), :shape "RuleParameterMap", :type "map"})

(clojure.core/defn- ser-schema-facet-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-schema-facet coll) #:http.request.field{:shape "SchemaFacet"}))) input), :shape "SchemaFacetList", :type "list"})

(clojure.core/defn- ser-attribute-key-and-value [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-attribute-key (:key input)) #:http.request.field{:name "Key", :shape "AttributeKey"}) (clojure.core/into (ser-typed-attribute-value (:value input)) #:http.request.field{:name "Value", :shape "TypedAttributeValue"})], :shape "AttributeKeyAndValue", :type "structure"}))

(clojure.core/defn- ser-batch-list-attached-indices [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:target-reference input)) #:http.request.field{:name "TargetReference", :shape "ObjectReference"})], :shape "BatchListAttachedIndices", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-batch-list-object-parents [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-object-reference (:object-reference input)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})], :shape "BatchListObjectParents", :type "structure"} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- ser-facet-attribute-reference [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-facet-name (:target-facet-name input)) #:http.request.field{:name "TargetFacetName", :shape "FacetName"}) (clojure.core/into (ser-attribute-name (:target-attribute-name input)) #:http.request.field{:name "TargetAttributeName", :shape "AttributeName"})], :shape "FacetAttributeReference", :type "structure"}))

(clojure.core/defn- ser-rule-type [input] #:http.request.field{:value (clojure.core/get {"BINARY_LENGTH" "BINARY_LENGTH", :binary-length "BINARY_LENGTH", "NUMBER_COMPARISON" "NUMBER_COMPARISON", :number-comparison "NUMBER_COMPARISON", "STRING_FROM_SET" "STRING_FROM_SET", :string-from-set "STRING_FROM_SET", "STRING_LENGTH" "STRING_LENGTH", :string-length "STRING_LENGTH"} input), :shape "RuleType"})

(clojure.core/defn- req-delete-object-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]}))

(clojure.core/defn- req-attach-to-index-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :index-reference)) #:http.request.field{:name "IndexReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (input :target-reference)) #:http.request.field{:name "TargetReference", :shape "ObjectReference"})]}))

(clojure.core/defn- req-create-directory-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-directory-name (input :name)) #:http.request.field{:name "Name", :shape "DirectoryName"})], :header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-list-incoming-typed-links-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :filter-attribute-ranges) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-attribute-range-list (input :filter-attribute-ranges)) #:http.request.field{:name "FilterAttributeRanges", :shape "TypedLinkAttributeRangeList"})) (clojure.core/contains? input :filter-typed-link) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-schema-and-facet-name (input :filter-typed-link)) #:http.request.field{:name "FilterTypedLink", :shape "TypedLinkSchemaAndFacetName"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel"}))))

(clojure.core/defn- req-list-object-parents-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"})) (clojure.core/contains? input :include-all-links-to-each-parent) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bool (input :include-all-links-to-each-parent)) #:http.request.field{:name "IncludeAllLinksToEachParent", :shape "Bool"}))))

(clojure.core/defn- req-attach-typed-link-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :source-object-reference)) #:http.request.field{:name "SourceObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (input :target-object-reference)) #:http.request.field{:name "TargetObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-typed-link-schema-and-facet-name (input :typed-link-facet)) #:http.request.field{:name "TypedLinkFacet", :shape "TypedLinkSchemaAndFacetName"}) (clojure.core/into (ser-attribute-name-and-value-list (input :attributes)) #:http.request.field{:name "Attributes", :shape "AttributeNameAndValueList"})]}))

(clojure.core/defn- req-detach-from-index-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :index-reference)) #:http.request.field{:name "IndexReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (input :target-reference)) #:http.request.field{:name "TargetReference", :shape "ObjectReference"})]}))

(clojure.core/defn- req-delete-directory-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-get-facet-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-facet-name (input :name)) #:http.request.field{:name "Name", :shape "FacetName"})]}))

(clojure.core/defn- req-list-policy-attachments-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :policy-reference)) #:http.request.field{:name "PolicyReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-list-object-children-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-list-object-attributes-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"})) (clojure.core/contains? input :facet-filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-schema-facet (input :facet-filter)) #:http.request.field{:name "FacetFilter", :shape "SchemaFacet"}))))

(clojure.core/defn- req-list-tags-for-resource-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :resource-arn)) #:http.request.field{:name "ResourceArn", :shape "Arn"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tags-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "TagsNumberResults"}))))

(clojure.core/defn- req-attach-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :policy-reference)) #:http.request.field{:name "PolicyReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]}))

(clojure.core/defn- req-update-schema-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-schema-name (input :name)) #:http.request.field{:name "Name", :shape "SchemaName"})]}))

(clojure.core/defn- req-create-schema-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-schema-name (input :name)) #:http.request.field{:name "Name", :shape "SchemaName"})]}))

(clojure.core/defn- req-create-index-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-attribute-key-list (input :ordered-indexed-attribute-list)) #:http.request.field{:name "OrderedIndexedAttributeList", :shape "AttributeKeyList"}) (clojure.core/into (ser-bool (input :is-unique)) #:http.request.field{:name "IsUnique", :shape "Bool"})]} (clojure.core/contains? input :parent-reference) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-reference (input :parent-reference)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"})) (clojure.core/contains? input :link-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-link-name (input :link-name)) #:http.request.field{:name "LinkName", :shape "LinkName"}))))

(clojure.core/defn- req-batch-read-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-batch-read-operation-list (input :operations)) #:http.request.field{:name "Operations", :shape "BatchReadOperationList"})]} (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-enable-directory-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-list-managed-schema-arns-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :schema-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-update-object-attributes-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-attribute-update-list (input :attribute-updates)) #:http.request.field{:name "AttributeUpdates", :shape "ObjectAttributeUpdateList"})]}))

(clojure.core/defn- req-add-facet-to-object-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-schema-facet (input :schema-facet)) #:http.request.field{:name "SchemaFacet", :shape "SchemaFacet"}) (clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :object-attribute-list) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-key-and-value-list (input :object-attribute-list)) #:http.request.field{:name "ObjectAttributeList", :shape "AttributeKeyAndValueList"}))))

(clojure.core/defn- req-remove-facet-from-object-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-schema-facet (input :schema-facet)) #:http.request.field{:name "SchemaFacet", :shape "SchemaFacet"}) (clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]}))

(clojure.core/defn- req-detach-object-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :parent-reference)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"}) (clojure.core/into (ser-link-name (input :link-name)) #:http.request.field{:name "LinkName", :shape "LinkName"})]}))

(clojure.core/defn- req-list-outgoing-typed-links-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :filter-attribute-ranges) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-attribute-range-list (input :filter-attribute-ranges)) #:http.request.field{:name "FilterAttributeRanges", :shape "TypedLinkAttributeRangeList"})) (clojure.core/contains? input :filter-typed-link) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-typed-link-schema-and-facet-name (input :filter-typed-link)) #:http.request.field{:name "FilterTypedLink", :shape "TypedLinkSchemaAndFacetName"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel"}))))

(clojure.core/defn- req-list-facet-names-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-list-directories-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :state) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-directory-state (input :state)) #:http.request.field{:name "state", :shape "DirectoryState"}))))

(clojure.core/defn- req-tag-resource-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :resource-arn)) #:http.request.field{:name "ResourceArn", :shape "Arn"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-create-facet-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-facet-name (input :name)) #:http.request.field{:name "Name", :shape "FacetName"})]} (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-facet-attribute-list (input :attributes)) #:http.request.field{:name "Attributes", :shape "FacetAttributeList"})) (clojure.core/contains? input :object-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-type (input :object-type)) #:http.request.field{:name "ObjectType", :shape "ObjectType"})) (clojure.core/contains? input :facet-style) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-facet-style (input :facet-style)) #:http.request.field{:name "FacetStyle", :shape "FacetStyle"}))))

(clojure.core/defn- req-get-applied-schema-version-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn"})]}))

(clojure.core/defn- req-list-attached-indices-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :target-reference)) #:http.request.field{:name "TargetReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-update-typed-link-facet-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-name (input :name)) #:http.request.field{:name "Name", :shape "TypedLinkName"}) (clojure.core/into (ser-typed-link-facet-attribute-update-list (input :attribute-updates)) #:http.request.field{:name "AttributeUpdates", :shape "TypedLinkFacetAttributeUpdateList"}) (clojure.core/into (ser-attribute-name-list (input :identity-attribute-order)) #:http.request.field{:name "IdentityAttributeOrder", :shape "AttributeNameList"})]}))

(clojure.core/defn- req-lookup-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-get-schema-as-json-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-list-object-policies-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-list-index-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :index-reference)) #:http.request.field{:name "IndexReference", :shape "ObjectReference"})]} (clojure.core/contains? input :ranges-on-indexed-values) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-attribute-range-list (input :ranges-on-indexed-values)) #:http.request.field{:name "RangesOnIndexedValues", :shape "ObjectAttributeRangeList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-get-typed-link-facet-information-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-name (input :name)) #:http.request.field{:name "Name", :shape "TypedLinkName"})]}))

(clojure.core/defn- req-get-directory-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-directory-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "DirectoryArn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-update-facet-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-facet-name (input :name)) #:http.request.field{:name "Name", :shape "FacetName"})]} (clojure.core/contains? input :attribute-updates) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-facet-attribute-update-list (input :attribute-updates)) #:http.request.field{:name "AttributeUpdates", :shape "FacetAttributeUpdateList"})) (clojure.core/contains? input :object-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-type (input :object-type)) #:http.request.field{:name "ObjectType", :shape "ObjectType"}))))

(clojure.core/defn- req-put-schema-from-json-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-schema-json-document (input :document)) #:http.request.field{:name "Document", :shape "SchemaJsonDocument"})]}))

(clojure.core/defn- req-list-development-schema-arns-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-publish-schema-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :development-schema-arn)) #:http.request.field{:name "DevelopmentSchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-version (input :version)) #:http.request.field{:name "Version", :shape "Version"})]} (clojure.core/contains? input :minor-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-version (input :minor-version)) #:http.request.field{:name "MinorVersion", :shape "Version"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-schema-name (input :name)) #:http.request.field{:name "Name", :shape "SchemaName"}))))

(clojure.core/defn- req-create-typed-link-facet-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-facet (input :facet)) #:http.request.field{:name "Facet", :shape "TypedLinkFacet"})]}))

(clojure.core/defn- req-batch-write-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-batch-write-operation-list (input :operations)) #:http.request.field{:name "Operations", :shape "BatchWriteOperationList"})]}))

(clojure.core/defn- req-delete-schema-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-apply-schema-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :published-schema-arn)) #:http.request.field{:name "PublishedSchemaArn", :shape "Arn"})], :header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-get-object-information-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-delete-typed-link-facet-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-name (input :name)) #:http.request.field{:name "Name", :shape "TypedLinkName"})]}))

(clojure.core/defn- req-list-typed-link-facet-names-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-update-link-attributes-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-specifier (input :typed-link-specifier)) #:http.request.field{:name "TypedLinkSpecifier", :shape "TypedLinkSpecifier"}) (clojure.core/into (ser-link-attribute-update-list (input :attribute-updates)) #:http.request.field{:name "AttributeUpdates", :shape "LinkAttributeUpdateList"})]}))

(clojure.core/defn- req-detach-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :policy-reference)) #:http.request.field{:name "PolicyReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]}))

(clojure.core/defn- req-create-object-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-schema-facet-list (input :schema-facets)) #:http.request.field{:name "SchemaFacets", :shape "SchemaFacetList"})]} (clojure.core/contains? input :object-attribute-list) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-key-and-value-list (input :object-attribute-list)) #:http.request.field{:name "ObjectAttributeList", :shape "AttributeKeyAndValueList"})) (clojure.core/contains? input :parent-reference) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-object-reference (input :parent-reference)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"})) (clojure.core/contains? input :link-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-link-name (input :link-name)) #:http.request.field{:name "LinkName", :shape "LinkName"}))))

(clojure.core/defn- req-list-typed-link-facet-attributes-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-name (input :name)) #:http.request.field{:name "Name", :shape "TypedLinkName"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-detach-typed-link-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-specifier (input :typed-link-specifier)) #:http.request.field{:name "TypedLinkSpecifier", :shape "TypedLinkSpecifier"})]}))

(clojure.core/defn- req-disable-directory-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})]}))

(clojure.core/defn- req-list-facet-attributes-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-facet-name (input :name)) #:http.request.field{:name "Name", :shape "FacetName"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-get-link-attributes-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-typed-link-specifier (input :typed-link-specifier)) #:http.request.field{:name "TypedLinkSpecifier", :shape "TypedLinkSpecifier"}) (clojure.core/into (ser-attribute-name-list (input :attribute-names)) #:http.request.field{:name "AttributeNames", :shape "AttributeNameList"})]} (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel"}))))

(clojure.core/defn- req-get-object-attributes-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"}) (clojure.core/into (ser-schema-facet (input :schema-facet)) #:http.request.field{:name "SchemaFacet", :shape "SchemaFacet"}) (clojure.core/into (ser-attribute-name-list (input :attribute-names)) #:http.request.field{:name "AttributeNames", :shape "AttributeNameList"})]} (clojure.core/contains? input :consistency-level) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-consistency-level (input :consistency-level)) #:http.request.field{:name "ConsistencyLevel", :shape "ConsistencyLevel", :location "header", :location-name "x-amz-consistency-level"}))))

(clojure.core/defn- req-upgrade-applied-schema-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :published-schema-arn)) #:http.request.field{:name "PublishedSchemaArn", :shape "Arn"}) (clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bool (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Bool"}))))

(clojure.core/defn- req-attach-object-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :parent-reference)) #:http.request.field{:name "ParentReference", :shape "ObjectReference"}) (clojure.core/into (ser-object-reference (input :child-reference)) #:http.request.field{:name "ChildReference", :shape "ObjectReference"}) (clojure.core/into (ser-link-name (input :link-name)) #:http.request.field{:name "LinkName", :shape "LinkName"})]}))

(clojure.core/defn- req-delete-facet-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-facet-name (input :name)) #:http.request.field{:name "Name", :shape "FacetName"})]}))

(clojure.core/defn- req-list-published-schema-arns-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :schema-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-upgrade-published-schema-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :development-schema-arn)) #:http.request.field{:name "DevelopmentSchemaArn", :shape "Arn"}) (clojure.core/into (ser-arn (input :published-schema-arn)) #:http.request.field{:name "PublishedSchemaArn", :shape "Arn"}) (clojure.core/into (ser-version (input :minor-version)) #:http.request.field{:name "MinorVersion", :shape "Version"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bool (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Bool"}))))

(clojure.core/defn- req-list-applied-schema-arns-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn"})]} (clojure.core/contains? input :schema-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :schema-arn)) #:http.request.field{:name "SchemaArn", :shape "Arn"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-list-object-parent-paths-request [input] (clojure.core/cond-> #:http.request.configuration{:header [(clojure.core/into (ser-arn (input :directory-arn)) #:http.request.field{:name "DirectoryArn", :shape "Arn", :location "header", :location-name "x-amz-data-partition"})], :body [(clojure.core/into (ser-object-reference (input :object-reference)) #:http.request.field{:name "ObjectReference", :shape "ObjectReference"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-number-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "NumberResults"}))))

(clojure.core/defn- req-untag-resource-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-arn (input :resource-arn)) #:http.request.field{:name "ResourceArn", :shape "Arn"}) (clojure.core/into (ser-tag-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "TagKeyList"})]}))

(clojure.core/declare deser-batch-update-object-attributes-response)

(clojure.core/declare deser-facet-name)

(clojure.core/declare deser-batch-read-successful-response)

(clojure.core/declare deser-object-identifier-and-link-name-tuple)

(clojure.core/declare deser-policy-attachment)

(clojure.core/declare deser-batch-attach-typed-link-response)

(clojure.core/declare deser-schema-facet)

(clojure.core/declare deser-batch-list-index-response)

(clojure.core/declare deser-batch-list-attached-indices-response)

(clojure.core/declare deser-batch-write-operation-response-list)

(clojure.core/declare deser-facet-attribute)

(clojure.core/declare deser-typed-attribute-value)

(clojure.core/declare deser-facet-attribute-definition)

(clojure.core/declare deser-object-identifier-and-link-name-list)

(clojure.core/declare deser-facet-attribute-list)

(clojure.core/declare deser-datetime-attribute-value)

(clojure.core/declare deser-batch-list-object-policies-response)

(clojure.core/declare deser-number-attribute-value)

(clojure.core/declare deser-attribute-name)

(clojure.core/declare deser-required-attribute-behavior)

(clojure.core/declare deser-typed-link-name)

(clojure.core/declare deser-batch-read-exception)

(clojure.core/declare deser-batch-delete-object-response)

(clojure.core/declare deser-typed-link-attribute-definition-list)

(clojure.core/declare deser-tag-key)

(clojure.core/declare deser-facet-attribute-type)

(clojure.core/declare deser-boolean-attribute-value)

(clojure.core/declare deser-policy-attachment-list)

(clojure.core/declare deser-batch-list-object-parent-paths-response)

(clojure.core/declare deser-schema-json-document)

(clojure.core/declare deser-batch-write-exception-type)

(clojure.core/declare deser-selector-object-reference)

(clojure.core/declare deser-typed-link-name-list)

(clojure.core/declare deser-rule-map)

(clojure.core/declare deser-batch-read-operation-response-list)

(clojure.core/declare deser-batch-write-operation-response)

(clojure.core/declare deser-arns)

(clojure.core/declare deser-batch-attach-to-index-response)

(clojure.core/declare deser-next-token)

(clojure.core/declare deser-batch-get-link-attributes-response)

(clojure.core/declare deser-attribute-key-and-value-list)

(clojure.core/declare deser-date)

(clojure.core/declare deser-batch-get-object-attributes-response)

(clojure.core/declare deser-directory)

(clojure.core/declare deser-typed-link-specifier)

(clojure.core/declare deser-policy-to-path)

(clojure.core/declare deser-typed-link-specifier-list)

(clojure.core/declare deser-batch-attach-object-response)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-batch-list-object-children-response)

(clojure.core/declare deser-binary-attribute-value)

(clojure.core/declare deser-batch-list-policy-attachments-response)

(clojure.core/declare deser-path-to-object-identifiers-list)

(clojure.core/declare deser-batch-add-facet-to-object-response)

(clojure.core/declare deser-batch-operation-index)

(clojure.core/declare deser-attribute-name-and-value-list)

(clojure.core/declare deser-tag-value)

(clojure.core/declare deser-attribute-name-and-value)

(clojure.core/declare deser-facet)

(clojure.core/declare deser-exception-message)

(clojure.core/declare deser-object-reference)

(clojure.core/declare deser-attribute-key)

(clojure.core/declare deser-bool)

(clojure.core/declare deser-attribute-name-list)

(clojure.core/declare deser-batch-detach-typed-link-response)

(clojure.core/declare deser-directory-arn)

(clojure.core/declare deser-rule-parameter-value)

(clojure.core/declare deser-object-identifier-to-link-name-map)

(clojure.core/declare deser-batch-create-object-response)

(clojure.core/declare deser-batch-detach-from-index-response)

(clojure.core/declare deser-batch-remove-facet-from-object-response)

(clojure.core/declare deser-batch-attach-policy-response)

(clojure.core/declare deser-batch-list-incoming-typed-links-response)

(clojure.core/declare deser-index-attachment)

(clojure.core/declare deser-link-name-to-object-identifier-map)

(clojure.core/declare deser-typed-link-schema-and-facet-name)

(clojure.core/declare deser-path-string)

(clojure.core/declare deser-rule)

(clojure.core/declare deser-policy-to-path-list)

(clojure.core/declare deser-rule-parameter-key)

(clojure.core/declare deser-path-to-object-identifiers)

(clojure.core/declare deser-batch-create-index-response)

(clojure.core/declare deser-arn)

(clojure.core/declare deser-object-identifier)

(clojure.core/declare deser-directory-list)

(clojure.core/declare deser-batch-read-exception-type)

(clojure.core/declare deser-link-name)

(clojure.core/declare deser-directory-state)

(clojure.core/declare deser-rule-key)

(clojure.core/declare deser-object-type)

(clojure.core/declare deser-object-identifier-list)

(clojure.core/declare deser-batch-list-object-parents-response)

(clojure.core/declare deser-directory-name)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-facet-style)

(clojure.core/declare deser-batch-read-operation-response)

(clojure.core/declare deser-schema-name)

(clojure.core/declare deser-typed-link-attribute-definition)

(clojure.core/declare deser-string-attribute-value)

(clojure.core/declare deser-rule-parameter-map)

(clojure.core/declare deser-batch-list-outgoing-typed-links-response)

(clojure.core/declare deser-batch-detach-object-response)

(clojure.core/declare deser-schema-facet-list)

(clojure.core/declare deser-batch-detach-policy-response)

(clojure.core/declare deser-attribute-key-and-value)

(clojure.core/declare deser-batch-list-object-attributes-response)

(clojure.core/declare deser-policy-type)

(clojure.core/declare deser-batch-get-object-information-response)

(clojure.core/declare deser-facet-attribute-reference)

(clojure.core/declare deser-batch-update-link-attributes-response)

(clojure.core/declare deser-index-attachment-list)

(clojure.core/declare deser-batch-lookup-policy-response)

(clojure.core/declare deser-facet-name-list)

(clojure.core/declare deser-rule-type)

(clojure.core/defn- deser-batch-update-object-attributes-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (input "ObjectIdentifier")))))

(clojure.core/defn- deser-facet-name [input] input)

(clojure.core/defn- deser-batch-read-successful-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "ListObjectPolicies") (clojure.core/assoc :list-object-policies (deser-batch-list-object-policies-response (input "ListObjectPolicies"))) (clojure.core/contains? input "ListObjectParentPaths") (clojure.core/assoc :list-object-parent-paths (deser-batch-list-object-parent-paths-response (input "ListObjectParentPaths"))) (clojure.core/contains? input "ListIncomingTypedLinks") (clojure.core/assoc :list-incoming-typed-links (deser-batch-list-incoming-typed-links-response (input "ListIncomingTypedLinks"))) (clojure.core/contains? input "GetObjectAttributes") (clojure.core/assoc :get-object-attributes (deser-batch-get-object-attributes-response (input "GetObjectAttributes"))) (clojure.core/contains? input "GetObjectInformation") (clojure.core/assoc :get-object-information (deser-batch-get-object-information-response (input "GetObjectInformation"))) (clojure.core/contains? input "ListPolicyAttachments") (clojure.core/assoc :list-policy-attachments (deser-batch-list-policy-attachments-response (input "ListPolicyAttachments"))) (clojure.core/contains? input "ListOutgoingTypedLinks") (clojure.core/assoc :list-outgoing-typed-links (deser-batch-list-outgoing-typed-links-response (input "ListOutgoingTypedLinks"))) (clojure.core/contains? input "GetLinkAttributes") (clojure.core/assoc :get-link-attributes (deser-batch-get-link-attributes-response (input "GetLinkAttributes"))) (clojure.core/contains? input "ListObjectAttributes") (clojure.core/assoc :list-object-attributes (deser-batch-list-object-attributes-response (input "ListObjectAttributes"))) (clojure.core/contains? input "ListIndex") (clojure.core/assoc :list-index (deser-batch-list-index-response (input "ListIndex"))) (clojure.core/contains? input "ListObjectChildren") (clojure.core/assoc :list-object-children (deser-batch-list-object-children-response (input "ListObjectChildren"))) (clojure.core/contains? input "ListObjectParents") (clojure.core/assoc :list-object-parents (deser-batch-list-object-parents-response (input "ListObjectParents"))) (clojure.core/contains? input "ListAttachedIndices") (clojure.core/assoc :list-attached-indices (deser-batch-list-attached-indices-response (input "ListAttachedIndices"))) (clojure.core/contains? input "LookupPolicy") (clojure.core/assoc :lookup-policy (deser-batch-lookup-policy-response (input "LookupPolicy")))))

(clojure.core/defn- deser-object-identifier-and-link-name-tuple [input] (clojure.core/cond-> {} (clojure.core/contains? input "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (input "ObjectIdentifier"))) (clojure.core/contains? input "LinkName") (clojure.core/assoc :link-name (deser-link-name (input "LinkName")))))

(clojure.core/defn- deser-policy-attachment [input] (clojure.core/cond-> {} (clojure.core/contains? input "PolicyId") (clojure.core/assoc :policy-id (deser-object-identifier (input "PolicyId"))) (clojure.core/contains? input "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (input "ObjectIdentifier"))) (clojure.core/contains? input "PolicyType") (clojure.core/assoc :policy-type (deser-policy-type (input "PolicyType")))))

(clojure.core/defn- deser-batch-attach-typed-link-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "TypedLinkSpecifier") (clojure.core/assoc :typed-link-specifier (deser-typed-link-specifier (input "TypedLinkSpecifier")))))

(clojure.core/defn- deser-schema-facet [input] (clojure.core/cond-> {} (clojure.core/contains? input "SchemaArn") (clojure.core/assoc :schema-arn (deser-arn (input "SchemaArn"))) (clojure.core/contains? input "FacetName") (clojure.core/assoc :facet-name (deser-facet-name (input "FacetName")))))

(clojure.core/defn- deser-batch-list-index-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "IndexAttachments") (clojure.core/assoc :index-attachments (deser-index-attachment-list (input "IndexAttachments"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-batch-list-attached-indices-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "IndexAttachments") (clojure.core/assoc :index-attachments (deser-index-attachment-list (input "IndexAttachments"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-batch-write-operation-response-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-batch-write-operation-response coll))) input))

(clojure.core/defn- deser-facet-attribute [input] (clojure.core/cond-> {:name (deser-attribute-name (input "Name"))} (clojure.core/contains? input "AttributeDefinition") (clojure.core/assoc :attribute-definition (deser-facet-attribute-definition (input "AttributeDefinition"))) (clojure.core/contains? input "AttributeReference") (clojure.core/assoc :attribute-reference (deser-facet-attribute-reference (input "AttributeReference"))) (clojure.core/contains? input "RequiredBehavior") (clojure.core/assoc :required-behavior (deser-required-attribute-behavior (input "RequiredBehavior")))))

(clojure.core/defn- deser-typed-attribute-value [input] (clojure.core/cond-> {} (clojure.core/contains? input "StringValue") (clojure.core/assoc :string-value (deser-string-attribute-value (input "StringValue"))) (clojure.core/contains? input "BinaryValue") (clojure.core/assoc :binary-value (deser-binary-attribute-value (input "BinaryValue"))) (clojure.core/contains? input "BooleanValue") (clojure.core/assoc :boolean-value (deser-boolean-attribute-value (input "BooleanValue"))) (clojure.core/contains? input "NumberValue") (clojure.core/assoc :number-value (deser-number-attribute-value (input "NumberValue"))) (clojure.core/contains? input "DatetimeValue") (clojure.core/assoc :datetime-value (deser-datetime-attribute-value (input "DatetimeValue")))))

(clojure.core/defn- deser-facet-attribute-definition [input] (clojure.core/cond-> {:type (deser-facet-attribute-type (input "Type"))} (clojure.core/contains? input "DefaultValue") (clojure.core/assoc :default-value (deser-typed-attribute-value (input "DefaultValue"))) (clojure.core/contains? input "IsImmutable") (clojure.core/assoc :is-immutable (deser-bool (input "IsImmutable"))) (clojure.core/contains? input "Rules") (clojure.core/assoc :rules (deser-rule-map (input "Rules")))))

(clojure.core/defn- deser-object-identifier-and-link-name-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-object-identifier-and-link-name-tuple coll))) input))

(clojure.core/defn- deser-facet-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-facet-attribute coll))) input))

(clojure.core/defn- deser-datetime-attribute-value [input] input)

(clojure.core/defn- deser-batch-list-object-policies-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "AttachedPolicyIds") (clojure.core/assoc :attached-policy-ids (deser-object-identifier-list (input "AttachedPolicyIds"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-number-attribute-value [input] input)

(clojure.core/defn- deser-attribute-name [input] input)

(clojure.core/defn- deser-required-attribute-behavior [input] (clojure.core/get {"REQUIRED_ALWAYS" :required-always, "NOT_REQUIRED" :not-required} input))

(clojure.core/defn- deser-typed-link-name [input] input)

(clojure.core/defn- deser-batch-read-exception [input] (clojure.core/cond-> {} (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-batch-read-exception-type (input "Type"))) (clojure.core/contains? input "Message") (clojure.core/assoc :message (deser-exception-message (input "Message")))))

(clojure.core/defn- deser-batch-delete-object-response [input] (clojure.core/cond-> {}))

(clojure.core/defn- deser-typed-link-attribute-definition-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-typed-link-attribute-definition coll))) input))

(clojure.core/defn- deser-tag-key [input] input)

(clojure.core/defn- deser-facet-attribute-type [input] (clojure.core/get {"STRING" :string, "BINARY" :binary, "BOOLEAN" :boolean, "NUMBER" :number, "DATETIME" :datetime, "VARIANT" :variant} input))

(clojure.core/defn- deser-boolean-attribute-value [input] input)

(clojure.core/defn- deser-policy-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-attachment coll))) input))

(clojure.core/defn- deser-batch-list-object-parent-paths-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "PathToObjectIdentifiersList") (clojure.core/assoc :path-to-object-identifiers-list (deser-path-to-object-identifiers-list (input "PathToObjectIdentifiersList"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-schema-json-document [input] input)

(clojure.core/defn- deser-batch-write-exception-type [input] (clojure.core/get {"ObjectNotDetachedException" :object-not-detached-exception, "ValidationException" :validation-exception, "DirectoryNotEnabledException" :directory-not-enabled-exception, "UnsupportedIndexTypeException" :unsupported-index-type-exception, "LinkNameAlreadyInUseException" :link-name-already-in-use-exception, "LimitExceededException" :limit-exceeded-exception, "InvalidArnException" :invalid-arn-exception, "NotPolicyException" :not-policy-exception, "ResourceNotFoundException" :resource-not-found-exception, "FacetValidationException" :facet-validation-exception, "AccessDeniedException" :access-denied-exception, "NotIndexException" :not-index-exception, "NotNodeException" :not-node-exception, "IndexedAttributeMissingException" :indexed-attribute-missing-exception, "InvalidAttachmentException" :invalid-attachment-exception, "ObjectAlreadyDetachedException" :object-already-detached-exception, "StillContainsLinksException" :still-contains-links-exception, "InternalServiceException" :internal-service-exception} input))

(clojure.core/defn- deser-selector-object-reference [input] input)

(clojure.core/defn- deser-typed-link-name-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-typed-link-name coll))) input))

(clojure.core/defn- deser-rule-map [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-rule-key k) (deser-rule v)])) input))

(clojure.core/defn- deser-batch-read-operation-response-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-batch-read-operation-response coll))) input))

(clojure.core/defn- deser-batch-write-operation-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "CreateIndex") (clojure.core/assoc :create-index (deser-batch-create-index-response (input "CreateIndex"))) (clojure.core/contains? input "CreateObject") (clojure.core/assoc :create-object (deser-batch-create-object-response (input "CreateObject"))) (clojure.core/contains? input "DetachPolicy") (clojure.core/assoc :detach-policy (deser-batch-detach-policy-response (input "DetachPolicy"))) (clojure.core/contains? input "DetachObject") (clojure.core/assoc :detach-object (deser-batch-detach-object-response (input "DetachObject"))) (clojure.core/contains? input "DetachFromIndex") (clojure.core/assoc :detach-from-index (deser-batch-detach-from-index-response (input "DetachFromIndex"))) (clojure.core/contains? input "AttachObject") (clojure.core/assoc :attach-object (deser-batch-attach-object-response (input "AttachObject"))) (clojure.core/contains? input "UpdateLinkAttributes") (clojure.core/assoc :update-link-attributes (deser-batch-update-link-attributes-response (input "UpdateLinkAttributes"))) (clojure.core/contains? input "AttachToIndex") (clojure.core/assoc :attach-to-index (deser-batch-attach-to-index-response (input "AttachToIndex"))) (clojure.core/contains? input "AttachTypedLink") (clojure.core/assoc :attach-typed-link (deser-batch-attach-typed-link-response (input "AttachTypedLink"))) (clojure.core/contains? input "DetachTypedLink") (clojure.core/assoc :detach-typed-link (deser-batch-detach-typed-link-response (input "DetachTypedLink"))) (clojure.core/contains? input "AddFacetToObject") (clojure.core/assoc :add-facet-to-object (deser-batch-add-facet-to-object-response (input "AddFacetToObject"))) (clojure.core/contains? input "UpdateObjectAttributes") (clojure.core/assoc :update-object-attributes (deser-batch-update-object-attributes-response (input "UpdateObjectAttributes"))) (clojure.core/contains? input "DeleteObject") (clojure.core/assoc :delete-object (deser-batch-delete-object-response (input "DeleteObject"))) (clojure.core/contains? input "AttachPolicy") (clojure.core/assoc :attach-policy (deser-batch-attach-policy-response (input "AttachPolicy"))) (clojure.core/contains? input "RemoveFacetFromObject") (clojure.core/assoc :remove-facet-from-object (deser-batch-remove-facet-from-object-response (input "RemoveFacetFromObject")))))

(clojure.core/defn- deser-arns [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-arn coll))) input))

(clojure.core/defn- deser-batch-attach-to-index-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "AttachedObjectIdentifier") (clojure.core/assoc :attached-object-identifier (deser-object-identifier (input "AttachedObjectIdentifier")))))

(clojure.core/defn- deser-next-token [input] input)

(clojure.core/defn- deser-batch-get-link-attributes-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "Attributes") (clojure.core/assoc :attributes (deser-attribute-key-and-value-list (input "Attributes")))))

(clojure.core/defn- deser-attribute-key-and-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-attribute-key-and-value coll))) input))

(clojure.core/defn- deser-date [input] input)

(clojure.core/defn- deser-batch-get-object-attributes-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "Attributes") (clojure.core/assoc :attributes (deser-attribute-key-and-value-list (input "Attributes")))))

(clojure.core/defn- deser-directory [input] (clojure.core/cond-> {} (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-directory-name (input "Name"))) (clojure.core/contains? input "DirectoryArn") (clojure.core/assoc :directory-arn (deser-directory-arn (input "DirectoryArn"))) (clojure.core/contains? input "State") (clojure.core/assoc :state (deser-directory-state (input "State"))) (clojure.core/contains? input "CreationDateTime") (clojure.core/assoc :creation-date-time (deser-date (input "CreationDateTime")))))

(clojure.core/defn- deser-typed-link-specifier [input] (clojure.core/cond-> {:typed-link-facet (deser-typed-link-schema-and-facet-name (input "TypedLinkFacet")), :source-object-reference (deser-object-reference (input "SourceObjectReference")), :target-object-reference (deser-object-reference (input "TargetObjectReference")), :identity-attribute-values (deser-attribute-name-and-value-list (input "IdentityAttributeValues"))}))

(clojure.core/defn- deser-policy-to-path [input] (clojure.core/cond-> {} (clojure.core/contains? input "Path") (clojure.core/assoc :path (deser-path-string (input "Path"))) (clojure.core/contains? input "Policies") (clojure.core/assoc :policies (deser-policy-attachment-list (input "Policies")))))

(clojure.core/defn- deser-typed-link-specifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-typed-link-specifier coll))) input))

(clojure.core/defn- deser-batch-attach-object-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "attachedObjectIdentifier") (clojure.core/assoc :attached-object-identifier (deser-object-identifier (input "attachedObjectIdentifier")))))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-batch-list-object-children-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "Children") (clojure.core/assoc :children (deser-link-name-to-object-identifier-map (input "Children"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-binary-attribute-value [input] (portkey.aws/base64-decode input))

(clojure.core/defn- deser-batch-list-policy-attachments-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "ObjectIdentifiers") (clojure.core/assoc :object-identifiers (deser-object-identifier-list (input "ObjectIdentifiers"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-path-to-object-identifiers-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-path-to-object-identifiers coll))) input))

(clojure.core/defn- deser-batch-add-facet-to-object-response [input] (clojure.core/cond-> {}))

(clojure.core/defn- deser-batch-operation-index [input] input)

(clojure.core/defn- deser-attribute-name-and-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-attribute-name-and-value coll))) input))

(clojure.core/defn- deser-tag-value [input] input)

(clojure.core/defn- deser-attribute-name-and-value [input] (clojure.core/cond-> {:attribute-name (deser-attribute-name (input "AttributeName")), :value (deser-typed-attribute-value (input "Value"))}))

(clojure.core/defn- deser-facet [input] (clojure.core/cond-> {} (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-facet-name (input "Name"))) (clojure.core/contains? input "ObjectType") (clojure.core/assoc :object-type (deser-object-type (input "ObjectType"))) (clojure.core/contains? input "FacetStyle") (clojure.core/assoc :facet-style (deser-facet-style (input "FacetStyle")))))

(clojure.core/defn- deser-exception-message [input] input)

(clojure.core/defn- deser-object-reference [input] (clojure.core/cond-> {} (clojure.core/contains? input "Selector") (clojure.core/assoc :selector (deser-selector-object-reference (input "Selector")))))

(clojure.core/defn- deser-attribute-key [input] (clojure.core/cond-> {:schema-arn (deser-arn (input "SchemaArn")), :facet-name (deser-facet-name (input "FacetName")), :name (deser-attribute-name (input "Name"))}))

(clojure.core/defn- deser-bool [input] input)

(clojure.core/defn- deser-attribute-name-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-attribute-name coll))) input))

(clojure.core/defn- deser-batch-detach-typed-link-response [input] (clojure.core/cond-> {}))

(clojure.core/defn- deser-directory-arn [input] input)

(clojure.core/defn- deser-rule-parameter-value [input] input)

(clojure.core/defn- deser-object-identifier-to-link-name-map [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-object-identifier k) (deser-link-name v)])) input))

(clojure.core/defn- deser-batch-create-object-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (input "ObjectIdentifier")))))

(clojure.core/defn- deser-batch-detach-from-index-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "DetachedObjectIdentifier") (clojure.core/assoc :detached-object-identifier (deser-object-identifier (input "DetachedObjectIdentifier")))))

(clojure.core/defn- deser-batch-remove-facet-from-object-response [input] (clojure.core/cond-> {}))

(clojure.core/defn- deser-batch-attach-policy-response [input] (clojure.core/cond-> {}))

(clojure.core/defn- deser-batch-list-incoming-typed-links-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "LinkSpecifiers") (clojure.core/assoc :link-specifiers (deser-typed-link-specifier-list (input "LinkSpecifiers"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-index-attachment [input] (clojure.core/cond-> {} (clojure.core/contains? input "IndexedAttributes") (clojure.core/assoc :indexed-attributes (deser-attribute-key-and-value-list (input "IndexedAttributes"))) (clojure.core/contains? input "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (input "ObjectIdentifier")))))

(clojure.core/defn- deser-link-name-to-object-identifier-map [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-link-name k) (deser-object-identifier v)])) input))

(clojure.core/defn- deser-typed-link-schema-and-facet-name [input] (clojure.core/cond-> {:schema-arn (deser-arn (input "SchemaArn")), :typed-link-name (deser-typed-link-name (input "TypedLinkName"))}))

(clojure.core/defn- deser-path-string [input] input)

(clojure.core/defn- deser-rule [input] (clojure.core/cond-> {} (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-rule-type (input "Type"))) (clojure.core/contains? input "Parameters") (clojure.core/assoc :parameters (deser-rule-parameter-map (input "Parameters")))))

(clojure.core/defn- deser-policy-to-path-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-to-path coll))) input))

(clojure.core/defn- deser-rule-parameter-key [input] input)

(clojure.core/defn- deser-path-to-object-identifiers [input] (clojure.core/cond-> {} (clojure.core/contains? input "Path") (clojure.core/assoc :path (deser-path-string (input "Path"))) (clojure.core/contains? input "ObjectIdentifiers") (clojure.core/assoc :object-identifiers (deser-object-identifier-list (input "ObjectIdentifiers")))))

(clojure.core/defn- deser-batch-create-index-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (input "ObjectIdentifier")))))

(clojure.core/defn- deser-arn [input] input)

(clojure.core/defn- deser-object-identifier [input] input)

(clojure.core/defn- deser-directory-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-directory coll))) input))

(clojure.core/defn- deser-batch-read-exception-type [input] (clojure.core/get {"ValidationException" :validation-exception, "DirectoryNotEnabledException" :directory-not-enabled-exception, "LimitExceededException" :limit-exceeded-exception, "InvalidNextTokenException" :invalid-next-token-exception, "InvalidArnException" :invalid-arn-exception, "NotPolicyException" :not-policy-exception, "CannotListParentOfRootException" :cannot-list-parent-of-root-exception, "ResourceNotFoundException" :resource-not-found-exception, "FacetValidationException" :facet-validation-exception, "AccessDeniedException" :access-denied-exception, "NotIndexException" :not-index-exception, "NotNodeException" :not-node-exception, "InternalServiceException" :internal-service-exception} input))

(clojure.core/defn- deser-link-name [input] input)

(clojure.core/defn- deser-directory-state [input] (clojure.core/get {"ENABLED" :enabled, "DISABLED" :disabled, "DELETED" :deleted} input))

(clojure.core/defn- deser-rule-key [input] input)

(clojure.core/defn- deser-object-type [input] (clojure.core/get {"NODE" :node, "LEAF_NODE" :leaf-node, "POLICY" :policy, "INDEX" :index} input))

(clojure.core/defn- deser-object-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-object-identifier coll))) input))

(clojure.core/defn- deser-batch-list-object-parents-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "ParentLinks") (clojure.core/assoc :parent-links (deser-object-identifier-and-link-name-list (input "ParentLinks"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-directory-name [input] input)

(clojure.core/defn- deser-tag [input] (clojure.core/cond-> {} (clojure.core/contains? input "Key") (clojure.core/assoc :key (deser-tag-key (input "Key"))) (clojure.core/contains? input "Value") (clojure.core/assoc :value (deser-tag-value (input "Value")))))

(clojure.core/defn- deser-facet-style [input] (clojure.core/get {"STATIC" :static, "DYNAMIC" :dynamic} input))

(clojure.core/defn- deser-batch-read-operation-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "SuccessfulResponse") (clojure.core/assoc :successful-response (deser-batch-read-successful-response (input "SuccessfulResponse"))) (clojure.core/contains? input "ExceptionResponse") (clojure.core/assoc :exception-response (deser-batch-read-exception (input "ExceptionResponse")))))

(clojure.core/defn- deser-schema-name [input] input)

(clojure.core/defn- deser-typed-link-attribute-definition [input] (clojure.core/cond-> {:name (deser-attribute-name (input "Name")), :type (deser-facet-attribute-type (input "Type")), :required-behavior (deser-required-attribute-behavior (input "RequiredBehavior"))} (clojure.core/contains? input "DefaultValue") (clojure.core/assoc :default-value (deser-typed-attribute-value (input "DefaultValue"))) (clojure.core/contains? input "IsImmutable") (clojure.core/assoc :is-immutable (deser-bool (input "IsImmutable"))) (clojure.core/contains? input "Rules") (clojure.core/assoc :rules (deser-rule-map (input "Rules")))))

(clojure.core/defn- deser-string-attribute-value [input] input)

(clojure.core/defn- deser-rule-parameter-map [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-rule-parameter-key k) (deser-rule-parameter-value v)])) input))

(clojure.core/defn- deser-batch-list-outgoing-typed-links-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "TypedLinkSpecifiers") (clojure.core/assoc :typed-link-specifiers (deser-typed-link-specifier-list (input "TypedLinkSpecifiers"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-batch-detach-object-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "detachedObjectIdentifier") (clojure.core/assoc :detached-object-identifier (deser-object-identifier (input "detachedObjectIdentifier")))))

(clojure.core/defn- deser-schema-facet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-schema-facet coll))) input))

(clojure.core/defn- deser-batch-detach-policy-response [input] (clojure.core/cond-> {}))

(clojure.core/defn- deser-attribute-key-and-value [input] (clojure.core/cond-> {:key (deser-attribute-key (input "Key")), :value (deser-typed-attribute-value (input "Value"))}))

(clojure.core/defn- deser-batch-list-object-attributes-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "Attributes") (clojure.core/assoc :attributes (deser-attribute-key-and-value-list (input "Attributes"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-policy-type [input] input)

(clojure.core/defn- deser-batch-get-object-information-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "SchemaFacets") (clojure.core/assoc :schema-facets (deser-schema-facet-list (input "SchemaFacets"))) (clojure.core/contains? input "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (input "ObjectIdentifier")))))

(clojure.core/defn- deser-facet-attribute-reference [input] (clojure.core/cond-> {:target-facet-name (deser-facet-name (input "TargetFacetName")), :target-attribute-name (deser-attribute-name (input "TargetAttributeName"))}))

(clojure.core/defn- deser-batch-update-link-attributes-response [input] (clojure.core/cond-> {}))

(clojure.core/defn- deser-index-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-index-attachment coll))) input))

(clojure.core/defn- deser-batch-lookup-policy-response [input] (clojure.core/cond-> {} (clojure.core/contains? input "PolicyToPathList") (clojure.core/assoc :policy-to-path-list (deser-policy-to-path-list (input "PolicyToPathList"))) (clojure.core/contains? input "NextToken") (clojure.core/assoc :next-token (deser-next-token (input "NextToken")))))

(clojure.core/defn- deser-facet-name-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-facet-name coll))) input))

(clojure.core/defn- deser-rule-type [input] (clojure.core/get {"BINARY_LENGTH" :binary-length, "NUMBER_COMPARISON" :number-comparison, "STRING_FROM_SET" :string-from-set, "STRING_LENGTH" :string-length} input))

(clojure.core/defn- response-invalid-rule-exception ([input] (response-invalid-rule-exception nil input)) ([resultWrapper1107911 input] (clojure.core/let [rawinput1107910 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107912 {"Message" (rawinput1107910 "Message")}] (clojure.core/cond-> {} (letvar1107912 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107912 ["Message"])))))))

(clojure.core/defn- response-batch-write-exception ([input] (response-batch-write-exception nil input)) ([resultWrapper1107914 input] (clojure.core/let [rawinput1107913 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107915 {"Index" (rawinput1107913 "Index"), "Type" (rawinput1107913 "Type"), "Message" (rawinput1107913 "Message")}] (clojure.core/cond-> {} (letvar1107915 "Index") (clojure.core/assoc :index (deser-batch-operation-index (clojure.core/get-in letvar1107915 ["Index"]))) (letvar1107915 "Type") (clojure.core/assoc :type (deser-batch-write-exception-type (clojure.core/get-in letvar1107915 ["Type"]))) (letvar1107915 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107915 ["Message"])))))))

(clojure.core/defn- response-list-object-children-response ([input] (response-list-object-children-response nil input)) ([resultWrapper1107917 input] (clojure.core/let [rawinput1107916 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107918 {"Children" (rawinput1107916 "Children"), "NextToken" (rawinput1107916 "NextToken")}] (clojure.core/cond-> {} (letvar1107918 "Children") (clojure.core/assoc :children (deser-link-name-to-object-identifier-map (clojure.core/get-in letvar1107918 ["Children"]))) (letvar1107918 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107918 ["NextToken"])))))))

(clojure.core/defn- response-object-not-detached-exception ([input] (response-object-not-detached-exception nil input)) ([resultWrapper1107920 input] (clojure.core/let [rawinput1107919 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107921 {"Message" (rawinput1107919 "Message")}] (clojure.core/cond-> {} (letvar1107921 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107921 ["Message"])))))))

(clojure.core/defn- response-put-schema-from-json-response ([input] (response-put-schema-from-json-response nil input)) ([resultWrapper1107923 input] (clojure.core/let [rawinput1107922 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107924 {"Arn" (rawinput1107922 "Arn")}] (clojure.core/cond-> {} (letvar1107924 "Arn") (clojure.core/assoc :arn (deser-arn (clojure.core/get-in letvar1107924 ["Arn"])))))))

(clojure.core/defn- response-invalid-facet-update-exception ([input] (response-invalid-facet-update-exception nil input)) ([resultWrapper1107926 input] (clojure.core/let [rawinput1107925 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107927 {"Message" (rawinput1107925 "Message")}] (clojure.core/cond-> {} (letvar1107927 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107927 ["Message"])))))))

(clojure.core/defn- response-validation-exception ([input] (response-validation-exception nil input)) ([resultWrapper1107929 input] (clojure.core/let [rawinput1107928 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107930 {"Message" (rawinput1107928 "Message")}] (clojure.core/cond-> {} (letvar1107930 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107930 ["Message"])))))))

(clojure.core/defn- response-list-index-response ([input] (response-list-index-response nil input)) ([resultWrapper1107932 input] (clojure.core/let [rawinput1107931 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107933 {"IndexAttachments" (rawinput1107931 "IndexAttachments"), "NextToken" (rawinput1107931 "NextToken")}] (clojure.core/cond-> {} (letvar1107933 "IndexAttachments") (clojure.core/assoc :index-attachments (deser-index-attachment-list (clojure.core/get-in letvar1107933 ["IndexAttachments"]))) (letvar1107933 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107933 ["NextToken"])))))))

(clojure.core/defn- response-get-object-information-response ([input] (response-get-object-information-response nil input)) ([resultWrapper1107935 input] (clojure.core/let [rawinput1107934 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107936 {"SchemaFacets" (rawinput1107934 "SchemaFacets"), "ObjectIdentifier" (rawinput1107934 "ObjectIdentifier")}] (clojure.core/cond-> {} (letvar1107936 "SchemaFacets") (clojure.core/assoc :schema-facets (deser-schema-facet-list (clojure.core/get-in letvar1107936 ["SchemaFacets"]))) (letvar1107936 "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (clojure.core/get-in letvar1107936 ["ObjectIdentifier"])))))))

(clojure.core/defn- response-list-object-parents-response ([input] (response-list-object-parents-response nil input)) ([resultWrapper1107938 input] (clojure.core/let [rawinput1107937 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107939 {"Parents" (rawinput1107937 "Parents"), "NextToken" (rawinput1107937 "NextToken"), "ParentLinks" (rawinput1107937 "ParentLinks")}] (clojure.core/cond-> {} (letvar1107939 "Parents") (clojure.core/assoc :parents (deser-object-identifier-to-link-name-map (clojure.core/get-in letvar1107939 ["Parents"]))) (letvar1107939 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107939 ["NextToken"]))) (letvar1107939 "ParentLinks") (clojure.core/assoc :parent-links (deser-object-identifier-and-link-name-list (clojure.core/get-in letvar1107939 ["ParentLinks"])))))))

(clojure.core/defn- response-get-link-attributes-response ([input] (response-get-link-attributes-response nil input)) ([resultWrapper1107941 input] (clojure.core/let [rawinput1107940 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107942 {"Attributes" (rawinput1107940 "Attributes")}] (clojure.core/cond-> {} (letvar1107942 "Attributes") (clojure.core/assoc :attributes (deser-attribute-key-and-value-list (clojure.core/get-in letvar1107942 ["Attributes"])))))))

(clojure.core/defn- response-list-tags-for-resource-response ([input] (response-list-tags-for-resource-response nil input)) ([resultWrapper1107944 input] (clojure.core/let [rawinput1107943 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107945 {"Tags" (rawinput1107943 "Tags"), "NextToken" (rawinput1107943 "NextToken")}] (clojure.core/cond-> {} (letvar1107945 "Tags") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar1107945 ["Tags"]))) (letvar1107945 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107945 ["NextToken"])))))))

(clojure.core/defn- response-directory-not-enabled-exception ([input] (response-directory-not-enabled-exception nil input)) ([resultWrapper1107947 input] (clojure.core/let [rawinput1107946 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107948 {"Message" (rawinput1107946 "Message")}] (clojure.core/cond-> {} (letvar1107948 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107948 ["Message"])))))))

(clojure.core/defn- response-delete-typed-link-facet-response ([input] (response-delete-typed-link-facet-response nil input)) ([resultWrapper1107950 input] (clojure.core/let [rawinput1107949 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107951 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-list-typed-link-facet-names-response ([input] (response-list-typed-link-facet-names-response nil input)) ([resultWrapper1107953 input] (clojure.core/let [rawinput1107952 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107954 {"FacetNames" (rawinput1107952 "FacetNames"), "NextToken" (rawinput1107952 "NextToken")}] (clojure.core/cond-> {} (letvar1107954 "FacetNames") (clojure.core/assoc :facet-names (deser-typed-link-name-list (clojure.core/get-in letvar1107954 ["FacetNames"]))) (letvar1107954 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107954 ["NextToken"])))))))

(clojure.core/defn- response-get-object-attributes-response ([input] (response-get-object-attributes-response nil input)) ([resultWrapper1107956 input] (clojure.core/let [rawinput1107955 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107957 {"Attributes" (rawinput1107955 "Attributes")}] (clojure.core/cond-> {} (letvar1107957 "Attributes") (clojure.core/assoc :attributes (deser-attribute-key-and-value-list (clojure.core/get-in letvar1107957 ["Attributes"])))))))

(clojure.core/defn- response-unsupported-index-type-exception ([input] (response-unsupported-index-type-exception nil input)) ([resultWrapper1107959 input] (clojure.core/let [rawinput1107958 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107960 {"Message" (rawinput1107958 "Message")}] (clojure.core/cond-> {} (letvar1107960 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107960 ["Message"])))))))

(clojure.core/defn- response-get-facet-response ([input] (response-get-facet-response nil input)) ([resultWrapper1107962 input] (clojure.core/let [rawinput1107961 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107963 {"Facet" (rawinput1107961 "Facet")}] (clojure.core/cond-> {} (letvar1107963 "Facet") (clojure.core/assoc :facet (deser-facet (clojure.core/get-in letvar1107963 ["Facet"])))))))

(clojure.core/defn- response-publish-schema-response ([input] (response-publish-schema-response nil input)) ([resultWrapper1107965 input] (clojure.core/let [rawinput1107964 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107966 {"PublishedSchemaArn" (rawinput1107964 "PublishedSchemaArn")}] (clojure.core/cond-> {} (letvar1107966 "PublishedSchemaArn") (clojure.core/assoc :published-schema-arn (deser-arn (clojure.core/get-in letvar1107966 ["PublishedSchemaArn"])))))))

(clojure.core/defn- response-delete-directory-response ([input] (response-delete-directory-response nil input)) ([resultWrapper1107968 input] (clojure.core/let [rawinput1107967 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107969 {"DirectoryArn" (rawinput1107967 "DirectoryArn")}] (clojure.core/cond-> {:directory-arn (deser-arn (clojure.core/get-in letvar1107969 ["DirectoryArn"]))}))))

(clojure.core/defn- response-list-outgoing-typed-links-response ([input] (response-list-outgoing-typed-links-response nil input)) ([resultWrapper1107971 input] (clojure.core/let [rawinput1107970 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107972 {"TypedLinkSpecifiers" (rawinput1107970 "TypedLinkSpecifiers"), "NextToken" (rawinput1107970 "NextToken")}] (clojure.core/cond-> {} (letvar1107972 "TypedLinkSpecifiers") (clojure.core/assoc :typed-link-specifiers (deser-typed-link-specifier-list (clojure.core/get-in letvar1107972 ["TypedLinkSpecifiers"]))) (letvar1107972 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107972 ["NextToken"])))))))

(clojure.core/defn- response-list-object-parent-paths-response ([input] (response-list-object-parent-paths-response nil input)) ([resultWrapper1107974 input] (clojure.core/let [rawinput1107973 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107975 {"PathToObjectIdentifiersList" (rawinput1107973 "PathToObjectIdentifiersList"), "NextToken" (rawinput1107973 "NextToken")}] (clojure.core/cond-> {} (letvar1107975 "PathToObjectIdentifiersList") (clojure.core/assoc :path-to-object-identifiers-list (deser-path-to-object-identifiers-list (clojure.core/get-in letvar1107975 ["PathToObjectIdentifiersList"]))) (letvar1107975 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107975 ["NextToken"])))))))

(clojure.core/defn- response-attach-to-index-response ([input] (response-attach-to-index-response nil input)) ([resultWrapper1107977 input] (clojure.core/let [rawinput1107976 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107978 {"AttachedObjectIdentifier" (rawinput1107976 "AttachedObjectIdentifier")}] (clojure.core/cond-> {} (letvar1107978 "AttachedObjectIdentifier") (clojure.core/assoc :attached-object-identifier (deser-object-identifier (clojure.core/get-in letvar1107978 ["AttachedObjectIdentifier"])))))))

(clojure.core/defn- response-invalid-schema-doc-exception ([input] (response-invalid-schema-doc-exception nil input)) ([resultWrapper1107980 input] (clojure.core/let [rawinput1107979 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107981 {"Message" (rawinput1107979 "Message")}] (clojure.core/cond-> {} (letvar1107981 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107981 ["Message"])))))))

(clojure.core/defn- response-attach-typed-link-response ([input] (response-attach-typed-link-response nil input)) ([resultWrapper1107983 input] (clojure.core/let [rawinput1107982 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107984 {"TypedLinkSpecifier" (rawinput1107982 "TypedLinkSpecifier")}] (clojure.core/cond-> {} (letvar1107984 "TypedLinkSpecifier") (clojure.core/assoc :typed-link-specifier (deser-typed-link-specifier (clojure.core/get-in letvar1107984 ["TypedLinkSpecifier"])))))))

(clojure.core/defn- response-link-name-already-in-use-exception ([input] (response-link-name-already-in-use-exception nil input)) ([resultWrapper1107986 input] (clojure.core/let [rawinput1107985 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107987 {"Message" (rawinput1107985 "Message")}] (clojure.core/cond-> {} (letvar1107987 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107987 ["Message"])))))))

(clojure.core/defn- response-limit-exceeded-exception ([input] (response-limit-exceeded-exception nil input)) ([resultWrapper1107989 input] (clojure.core/let [rawinput1107988 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107990 {"Message" (rawinput1107988 "Message")}] (clojure.core/cond-> {} (letvar1107990 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107990 ["Message"])))))))

(clojure.core/defn- response-facet-in-use-exception ([input] (response-facet-in-use-exception nil input)) ([resultWrapper1107992 input] (clojure.core/let [rawinput1107991 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107993 {"Message" (rawinput1107991 "Message")}] (clojure.core/cond-> {} (letvar1107993 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1107993 ["Message"])))))))

(clojure.core/defn- response-list-object-attributes-response ([input] (response-list-object-attributes-response nil input)) ([resultWrapper1107995 input] (clojure.core/let [rawinput1107994 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107996 {"Attributes" (rawinput1107994 "Attributes"), "NextToken" (rawinput1107994 "NextToken")}] (clojure.core/cond-> {} (letvar1107996 "Attributes") (clojure.core/assoc :attributes (deser-attribute-key-and-value-list (clojure.core/get-in letvar1107996 ["Attributes"]))) (letvar1107996 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1107996 ["NextToken"])))))))

(clojure.core/defn- response-create-object-response ([input] (response-create-object-response nil input)) ([resultWrapper1107998 input] (clojure.core/let [rawinput1107997 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1107999 {"ObjectIdentifier" (rawinput1107997 "ObjectIdentifier")}] (clojure.core/cond-> {} (letvar1107999 "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (clojure.core/get-in letvar1107999 ["ObjectIdentifier"])))))))

(clojure.core/defn- response-update-object-attributes-response ([input] (response-update-object-attributes-response nil input)) ([resultWrapper1108001 input] (clojure.core/let [rawinput1108000 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108002 {"ObjectIdentifier" (rawinput1108000 "ObjectIdentifier")}] (clojure.core/cond-> {} (letvar1108002 "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (clojure.core/get-in letvar1108002 ["ObjectIdentifier"])))))))

(clojure.core/defn- response-lookup-policy-response ([input] (response-lookup-policy-response nil input)) ([resultWrapper1108004 input] (clojure.core/let [rawinput1108003 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108005 {"PolicyToPathList" (rawinput1108003 "PolicyToPathList"), "NextToken" (rawinput1108003 "NextToken")}] (clojure.core/cond-> {} (letvar1108005 "PolicyToPathList") (clojure.core/assoc :policy-to-path-list (deser-policy-to-path-list (clojure.core/get-in letvar1108005 ["PolicyToPathList"]))) (letvar1108005 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108005 ["NextToken"])))))))

(clojure.core/defn- response-invalid-tagging-request-exception ([input] (response-invalid-tagging-request-exception nil input)) ([resultWrapper1108007 input] (clojure.core/let [rawinput1108006 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108008 {"Message" (rawinput1108006 "Message")}] (clojure.core/cond-> {} (letvar1108008 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108008 ["Message"])))))))

(clojure.core/defn- response-create-facet-response ([input] (response-create-facet-response nil input)) ([resultWrapper1108010 input] (clojure.core/let [rawinput1108009 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108011 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-detach-from-index-response ([input] (response-detach-from-index-response nil input)) ([resultWrapper1108013 input] (clojure.core/let [rawinput1108012 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108014 {"DetachedObjectIdentifier" (rawinput1108012 "DetachedObjectIdentifier")}] (clojure.core/cond-> {} (letvar1108014 "DetachedObjectIdentifier") (clojure.core/assoc :detached-object-identifier (deser-object-identifier (clojure.core/get-in letvar1108014 ["DetachedObjectIdentifier"])))))))

(clojure.core/defn- response-upgrade-published-schema-response ([input] (response-upgrade-published-schema-response nil input)) ([resultWrapper1108016 input] (clojure.core/let [rawinput1108015 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108017 {"UpgradedSchemaArn" (rawinput1108015 "UpgradedSchemaArn")}] (clojure.core/cond-> {} (letvar1108017 "UpgradedSchemaArn") (clojure.core/assoc :upgraded-schema-arn (deser-arn (clojure.core/get-in letvar1108017 ["UpgradedSchemaArn"])))))))

(clojure.core/defn- response-update-link-attributes-response ([input] (response-update-link-attributes-response nil input)) ([resultWrapper1108019 input] (clojure.core/let [rawinput1108018 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108020 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-update-typed-link-facet-response ([input] (response-update-typed-link-facet-response nil input)) ([resultWrapper1108022 input] (clojure.core/let [rawinput1108021 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108023 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-batch-write-response ([input] (response-batch-write-response nil input)) ([resultWrapper1108025 input] (clojure.core/let [rawinput1108024 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108026 {"Responses" (rawinput1108024 "Responses")}] (clojure.core/cond-> {} (letvar1108026 "Responses") (clojure.core/assoc :responses (deser-batch-write-operation-response-list (clojure.core/get-in letvar1108026 ["Responses"])))))))

(clojure.core/defn- response-directory-not-disabled-exception ([input] (response-directory-not-disabled-exception nil input)) ([resultWrapper1108028 input] (clojure.core/let [rawinput1108027 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108029 {"Message" (rawinput1108027 "Message")}] (clojure.core/cond-> {} (letvar1108029 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108029 ["Message"])))))))

(clojure.core/defn- response-get-applied-schema-version-response ([input] (response-get-applied-schema-version-response nil input)) ([resultWrapper1108031 input] (clojure.core/let [rawinput1108030 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108032 {"AppliedSchemaArn" (rawinput1108030 "AppliedSchemaArn")}] (clojure.core/cond-> {} (letvar1108032 "AppliedSchemaArn") (clojure.core/assoc :applied-schema-arn (deser-arn (clojure.core/get-in letvar1108032 ["AppliedSchemaArn"])))))))

(clojure.core/defn- response-list-development-schema-arns-response ([input] (response-list-development-schema-arns-response nil input)) ([resultWrapper1108034 input] (clojure.core/let [rawinput1108033 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108035 {"SchemaArns" (rawinput1108033 "SchemaArns"), "NextToken" (rawinput1108033 "NextToken")}] (clojure.core/cond-> {} (letvar1108035 "SchemaArns") (clojure.core/assoc :schema-arns (deser-arns (clojure.core/get-in letvar1108035 ["SchemaArns"]))) (letvar1108035 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108035 ["NextToken"])))))))

(clojure.core/defn- response-tag-resource-response ([input] (response-tag-resource-response nil input)) ([resultWrapper1108037 input] (clojure.core/let [rawinput1108036 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108038 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-next-token-exception ([input] (response-invalid-next-token-exception nil input)) ([resultWrapper1108040 input] (clojure.core/let [rawinput1108039 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108041 {"Message" (rawinput1108039 "Message")}] (clojure.core/cond-> {} (letvar1108041 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108041 ["Message"])))))))

(clojure.core/defn- response-update-schema-response ([input] (response-update-schema-response nil input)) ([resultWrapper1108043 input] (clojure.core/let [rawinput1108042 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108044 {"SchemaArn" (rawinput1108042 "SchemaArn")}] (clojure.core/cond-> {} (letvar1108044 "SchemaArn") (clojure.core/assoc :schema-arn (deser-arn (clojure.core/get-in letvar1108044 ["SchemaArn"])))))))

(clojure.core/defn- response-directory-deleted-exception ([input] (response-directory-deleted-exception nil input)) ([resultWrapper1108046 input] (clojure.core/let [rawinput1108045 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108047 {"Message" (rawinput1108045 "Message")}] (clojure.core/cond-> {} (letvar1108047 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108047 ["Message"])))))))

(clojure.core/defn- response-create-index-response ([input] (response-create-index-response nil input)) ([resultWrapper1108049 input] (clojure.core/let [rawinput1108048 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108050 {"ObjectIdentifier" (rawinput1108048 "ObjectIdentifier")}] (clojure.core/cond-> {} (letvar1108050 "ObjectIdentifier") (clojure.core/assoc :object-identifier (deser-object-identifier (clojure.core/get-in letvar1108050 ["ObjectIdentifier"])))))))

(clojure.core/defn- response-detach-object-response ([input] (response-detach-object-response nil input)) ([resultWrapper1108052 input] (clojure.core/let [rawinput1108051 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108053 {"DetachedObjectIdentifier" (rawinput1108051 "DetachedObjectIdentifier")}] (clojure.core/cond-> {} (letvar1108053 "DetachedObjectIdentifier") (clojure.core/assoc :detached-object-identifier (deser-object-identifier (clojure.core/get-in letvar1108053 ["DetachedObjectIdentifier"])))))))

(clojure.core/defn- response-invalid-arn-exception ([input] (response-invalid-arn-exception nil input)) ([resultWrapper1108055 input] (clojure.core/let [rawinput1108054 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108056 {"Message" (rawinput1108054 "Message")}] (clojure.core/cond-> {} (letvar1108056 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108056 ["Message"])))))))

(clojure.core/defn- response-facet-not-found-exception ([input] (response-facet-not-found-exception nil input)) ([resultWrapper1108058 input] (clojure.core/let [rawinput1108057 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108059 {"Message" (rawinput1108057 "Message")}] (clojure.core/cond-> {} (letvar1108059 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108059 ["Message"])))))))

(clojure.core/defn- response-not-policy-exception ([input] (response-not-policy-exception nil input)) ([resultWrapper1108061 input] (clojure.core/let [rawinput1108060 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108062 {"Message" (rawinput1108060 "Message")}] (clojure.core/cond-> {} (letvar1108062 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108062 ["Message"])))))))

(clojure.core/defn- response-attach-object-response ([input] (response-attach-object-response nil input)) ([resultWrapper1108064 input] (clojure.core/let [rawinput1108063 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108065 {"AttachedObjectIdentifier" (rawinput1108063 "AttachedObjectIdentifier")}] (clojure.core/cond-> {} (letvar1108065 "AttachedObjectIdentifier") (clojure.core/assoc :attached-object-identifier (deser-object-identifier (clojure.core/get-in letvar1108065 ["AttachedObjectIdentifier"])))))))

(clojure.core/defn- response-cannot-list-parent-of-root-exception ([input] (response-cannot-list-parent-of-root-exception nil input)) ([resultWrapper1108067 input] (clojure.core/let [rawinput1108066 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108068 {"Message" (rawinput1108066 "Message")}] (clojure.core/cond-> {} (letvar1108068 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108068 ["Message"])))))))

(clojure.core/defn- response-list-facet-names-response ([input] (response-list-facet-names-response nil input)) ([resultWrapper1108070 input] (clojure.core/let [rawinput1108069 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108071 {"FacetNames" (rawinput1108069 "FacetNames"), "NextToken" (rawinput1108069 "NextToken")}] (clojure.core/cond-> {} (letvar1108071 "FacetNames") (clojure.core/assoc :facet-names (deser-facet-name-list (clojure.core/get-in letvar1108071 ["FacetNames"]))) (letvar1108071 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108071 ["NextToken"])))))))

(clojure.core/defn- response-list-object-policies-response ([input] (response-list-object-policies-response nil input)) ([resultWrapper1108073 input] (clojure.core/let [rawinput1108072 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108074 {"AttachedPolicyIds" (rawinput1108072 "AttachedPolicyIds"), "NextToken" (rawinput1108072 "NextToken")}] (clojure.core/cond-> {} (letvar1108074 "AttachedPolicyIds") (clojure.core/assoc :attached-policy-ids (deser-object-identifier-list (clojure.core/get-in letvar1108074 ["AttachedPolicyIds"]))) (letvar1108074 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108074 ["NextToken"])))))))

(clojure.core/defn- response-create-schema-response ([input] (response-create-schema-response nil input)) ([resultWrapper1108076 input] (clojure.core/let [rawinput1108075 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108077 {"SchemaArn" (rawinput1108075 "SchemaArn")}] (clojure.core/cond-> {} (letvar1108077 "SchemaArn") (clojure.core/assoc :schema-arn (deser-arn (clojure.core/get-in letvar1108077 ["SchemaArn"])))))))

(clojure.core/defn- response-apply-schema-response ([input] (response-apply-schema-response nil input)) ([resultWrapper1108079 input] (clojure.core/let [rawinput1108078 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108080 {"AppliedSchemaArn" (rawinput1108078 "AppliedSchemaArn"), "DirectoryArn" (rawinput1108078 "DirectoryArn")}] (clojure.core/cond-> {} (letvar1108080 "AppliedSchemaArn") (clojure.core/assoc :applied-schema-arn (deser-arn (clojure.core/get-in letvar1108080 ["AppliedSchemaArn"]))) (letvar1108080 "DirectoryArn") (clojure.core/assoc :directory-arn (deser-arn (clojure.core/get-in letvar1108080 ["DirectoryArn"])))))))

(clojure.core/defn- response-resource-not-found-exception ([input] (response-resource-not-found-exception nil input)) ([resultWrapper1108082 input] (clojure.core/let [rawinput1108081 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108083 {"Message" (rawinput1108081 "Message")}] (clojure.core/cond-> {} (letvar1108083 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108083 ["Message"])))))))

(clojure.core/defn- response-attach-policy-response ([input] (response-attach-policy-response nil input)) ([resultWrapper1108085 input] (clojure.core/let [rawinput1108084 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108086 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-schema-already-exists-exception ([input] (response-schema-already-exists-exception nil input)) ([resultWrapper1108088 input] (clojure.core/let [rawinput1108087 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108089 {"Message" (rawinput1108087 "Message")}] (clojure.core/cond-> {} (letvar1108089 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108089 ["Message"])))))))

(clojure.core/defn- response-facet-validation-exception ([input] (response-facet-validation-exception nil input)) ([resultWrapper1108091 input] (clojure.core/let [rawinput1108090 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108092 {"Message" (rawinput1108090 "Message")}] (clojure.core/cond-> {} (letvar1108092 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108092 ["Message"])))))))

(clojure.core/defn- response-schema-already-published-exception ([input] (response-schema-already-published-exception nil input)) ([resultWrapper1108094 input] (clojure.core/let [rawinput1108093 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108095 {"Message" (rawinput1108093 "Message")}] (clojure.core/cond-> {} (letvar1108095 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108095 ["Message"])))))))

(clojure.core/defn- response-list-incoming-typed-links-response ([input] (response-list-incoming-typed-links-response nil input)) ([resultWrapper1108097 input] (clojure.core/let [rawinput1108096 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108098 {"LinkSpecifiers" (rawinput1108096 "LinkSpecifiers"), "NextToken" (rawinput1108096 "NextToken")}] (clojure.core/cond-> {} (letvar1108098 "LinkSpecifiers") (clojure.core/assoc :link-specifiers (deser-typed-link-specifier-list (clojure.core/get-in letvar1108098 ["LinkSpecifiers"]))) (letvar1108098 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108098 ["NextToken"])))))))

(clojure.core/defn- response-create-typed-link-facet-response ([input] (response-create-typed-link-facet-response nil input)) ([resultWrapper1108100 input] (clojure.core/let [rawinput1108099 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108101 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-upgrade-applied-schema-response ([input] (response-upgrade-applied-schema-response nil input)) ([resultWrapper1108103 input] (clojure.core/let [rawinput1108102 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108104 {"UpgradedSchemaArn" (rawinput1108102 "UpgradedSchemaArn"), "DirectoryArn" (rawinput1108102 "DirectoryArn")}] (clojure.core/cond-> {} (letvar1108104 "UpgradedSchemaArn") (clojure.core/assoc :upgraded-schema-arn (deser-arn (clojure.core/get-in letvar1108104 ["UpgradedSchemaArn"]))) (letvar1108104 "DirectoryArn") (clojure.core/assoc :directory-arn (deser-arn (clojure.core/get-in letvar1108104 ["DirectoryArn"])))))))

(clojure.core/defn- response-access-denied-exception ([input] (response-access-denied-exception nil input)) ([resultWrapper1108106 input] (clojure.core/let [rawinput1108105 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108107 {"Message" (rawinput1108105 "Message")}] (clojure.core/cond-> {} (letvar1108107 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108107 ["Message"])))))))

(clojure.core/defn- response-list-attached-indices-response ([input] (response-list-attached-indices-response nil input)) ([resultWrapper1108109 input] (clojure.core/let [rawinput1108108 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108110 {"IndexAttachments" (rawinput1108108 "IndexAttachments"), "NextToken" (rawinput1108108 "NextToken")}] (clojure.core/cond-> {} (letvar1108110 "IndexAttachments") (clojure.core/assoc :index-attachments (deser-index-attachment-list (clojure.core/get-in letvar1108110 ["IndexAttachments"]))) (letvar1108110 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108110 ["NextToken"])))))))

(clojure.core/defn- response-remove-facet-from-object-response ([input] (response-remove-facet-from-object-response nil input)) ([resultWrapper1108112 input] (clojure.core/let [rawinput1108111 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108113 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-schema-response ([input] (response-delete-schema-response nil input)) ([resultWrapper1108115 input] (clojure.core/let [rawinput1108114 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108116 {"SchemaArn" (rawinput1108114 "SchemaArn")}] (clojure.core/cond-> {} (letvar1108116 "SchemaArn") (clojure.core/assoc :schema-arn (deser-arn (clojure.core/get-in letvar1108116 ["SchemaArn"])))))))

(clojure.core/defn- response-list-facet-attributes-response ([input] (response-list-facet-attributes-response nil input)) ([resultWrapper1108118 input] (clojure.core/let [rawinput1108117 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108119 {"Attributes" (rawinput1108117 "Attributes"), "NextToken" (rawinput1108117 "NextToken")}] (clojure.core/cond-> {} (letvar1108119 "Attributes") (clojure.core/assoc :attributes (deser-facet-attribute-list (clojure.core/get-in letvar1108119 ["Attributes"]))) (letvar1108119 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108119 ["NextToken"])))))))

(clojure.core/defn- response-not-index-exception ([input] (response-not-index-exception nil input)) ([resultWrapper1108121 input] (clojure.core/let [rawinput1108120 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108122 {"Message" (rawinput1108120 "Message")}] (clojure.core/cond-> {} (letvar1108122 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108122 ["Message"])))))))

(clojure.core/defn- response-list-policy-attachments-response ([input] (response-list-policy-attachments-response nil input)) ([resultWrapper1108124 input] (clojure.core/let [rawinput1108123 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108125 {"ObjectIdentifiers" (rawinput1108123 "ObjectIdentifiers"), "NextToken" (rawinput1108123 "NextToken")}] (clojure.core/cond-> {} (letvar1108125 "ObjectIdentifiers") (clojure.core/assoc :object-identifiers (deser-object-identifier-list (clojure.core/get-in letvar1108125 ["ObjectIdentifiers"]))) (letvar1108125 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108125 ["NextToken"])))))))

(clojure.core/defn- response-not-node-exception ([input] (response-not-node-exception nil input)) ([resultWrapper1108127 input] (clojure.core/let [rawinput1108126 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108128 {"Message" (rawinput1108126 "Message")}] (clojure.core/cond-> {} (letvar1108128 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108128 ["Message"])))))))

(clojure.core/defn- response-get-typed-link-facet-information-response ([input] (response-get-typed-link-facet-information-response nil input)) ([resultWrapper1108130 input] (clojure.core/let [rawinput1108129 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108131 {"IdentityAttributeOrder" (rawinput1108129 "IdentityAttributeOrder")}] (clojure.core/cond-> {} (letvar1108131 "IdentityAttributeOrder") (clojure.core/assoc :identity-attribute-order (deser-attribute-name-list (clojure.core/get-in letvar1108131 ["IdentityAttributeOrder"])))))))

(clojure.core/defn- response-list-directories-response ([input] (response-list-directories-response nil input)) ([resultWrapper1108133 input] (clojure.core/let [rawinput1108132 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108134 {"Directories" (rawinput1108132 "Directories"), "NextToken" (rawinput1108132 "NextToken")}] (clojure.core/cond-> {:directories (deser-directory-list (clojure.core/get-in letvar1108134 ["Directories"]))} (letvar1108134 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108134 ["NextToken"])))))))

(clojure.core/defn- response-indexed-attribute-missing-exception ([input] (response-indexed-attribute-missing-exception nil input)) ([resultWrapper1108136 input] (clojure.core/let [rawinput1108135 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108137 {"Message" (rawinput1108135 "Message")}] (clojure.core/cond-> {} (letvar1108137 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108137 ["Message"])))))))

(clojure.core/defn- response-incompatible-schema-exception ([input] (response-incompatible-schema-exception nil input)) ([resultWrapper1108139 input] (clojure.core/let [rawinput1108138 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108140 {"Message" (rawinput1108138 "Message")}] (clojure.core/cond-> {} (letvar1108140 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108140 ["Message"])))))))

(clojure.core/defn- response-list-managed-schema-arns-response ([input] (response-list-managed-schema-arns-response nil input)) ([resultWrapper1108142 input] (clojure.core/let [rawinput1108141 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108143 {"SchemaArns" (rawinput1108141 "SchemaArns"), "NextToken" (rawinput1108141 "NextToken")}] (clojure.core/cond-> {} (letvar1108143 "SchemaArns") (clojure.core/assoc :schema-arns (deser-arns (clojure.core/get-in letvar1108143 ["SchemaArns"]))) (letvar1108143 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108143 ["NextToken"])))))))

(clojure.core/defn- response-retryable-conflict-exception ([input] (response-retryable-conflict-exception nil input)) ([resultWrapper1108145 input] (clojure.core/let [rawinput1108144 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108146 {"Message" (rawinput1108144 "Message")}] (clojure.core/cond-> {} (letvar1108146 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108146 ["Message"])))))))

(clojure.core/defn- response-directory-already-exists-exception ([input] (response-directory-already-exists-exception nil input)) ([resultWrapper1108148 input] (clojure.core/let [rawinput1108147 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108149 {"Message" (rawinput1108147 "Message")}] (clojure.core/cond-> {} (letvar1108149 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108149 ["Message"])))))))

(clojure.core/defn- response-disable-directory-response ([input] (response-disable-directory-response nil input)) ([resultWrapper1108151 input] (clojure.core/let [rawinput1108150 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108152 {"DirectoryArn" (rawinput1108150 "DirectoryArn")}] (clojure.core/cond-> {:directory-arn (deser-arn (clojure.core/get-in letvar1108152 ["DirectoryArn"]))}))))

(clojure.core/defn- response-invalid-attachment-exception ([input] (response-invalid-attachment-exception nil input)) ([resultWrapper1108154 input] (clojure.core/let [rawinput1108153 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108155 {"Message" (rawinput1108153 "Message")}] (clojure.core/cond-> {} (letvar1108155 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108155 ["Message"])))))))

(clojure.core/defn- response-object-already-detached-exception ([input] (response-object-already-detached-exception nil input)) ([resultWrapper1108157 input] (clojure.core/let [rawinput1108156 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108158 {"Message" (rawinput1108156 "Message")}] (clojure.core/cond-> {} (letvar1108158 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108158 ["Message"])))))))

(clojure.core/defn- response-batch-read-response ([input] (response-batch-read-response nil input)) ([resultWrapper1108160 input] (clojure.core/let [rawinput1108159 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108161 {"Responses" (rawinput1108159 "Responses")}] (clojure.core/cond-> {} (letvar1108161 "Responses") (clojure.core/assoc :responses (deser-batch-read-operation-response-list (clojure.core/get-in letvar1108161 ["Responses"])))))))

(clojure.core/defn- response-list-applied-schema-arns-response ([input] (response-list-applied-schema-arns-response nil input)) ([resultWrapper1108163 input] (clojure.core/let [rawinput1108162 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108164 {"SchemaArns" (rawinput1108162 "SchemaArns"), "NextToken" (rawinput1108162 "NextToken")}] (clojure.core/cond-> {} (letvar1108164 "SchemaArns") (clojure.core/assoc :schema-arns (deser-arns (clojure.core/get-in letvar1108164 ["SchemaArns"]))) (letvar1108164 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108164 ["NextToken"])))))))

(clojure.core/defn- response-still-contains-links-exception ([input] (response-still-contains-links-exception nil input)) ([resultWrapper1108166 input] (clojure.core/let [rawinput1108165 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108167 {"Message" (rawinput1108165 "Message")}] (clojure.core/cond-> {} (letvar1108167 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108167 ["Message"])))))))

(clojure.core/defn- response-add-facet-to-object-response ([input] (response-add-facet-to-object-response nil input)) ([resultWrapper1108169 input] (clojure.core/let [rawinput1108168 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108170 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-facet-response ([input] (response-delete-facet-response nil input)) ([resultWrapper1108172 input] (clojure.core/let [rawinput1108171 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108173 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-object-response ([input] (response-delete-object-response nil input)) ([resultWrapper1108175 input] (clojure.core/let [rawinput1108174 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108176 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-facet-already-exists-exception ([input] (response-facet-already-exists-exception nil input)) ([resultWrapper1108178 input] (clojure.core/let [rawinput1108177 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108179 {"Message" (rawinput1108177 "Message")}] (clojure.core/cond-> {} (letvar1108179 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108179 ["Message"])))))))

(clojure.core/defn- response-get-schema-as-json-response ([input] (response-get-schema-as-json-response nil input)) ([resultWrapper1108181 input] (clojure.core/let [rawinput1108180 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108182 {"Name" (rawinput1108180 "Name"), "Document" (rawinput1108180 "Document")}] (clojure.core/cond-> {} (letvar1108182 "Name") (clojure.core/assoc :name (deser-schema-name (clojure.core/get-in letvar1108182 ["Name"]))) (letvar1108182 "Document") (clojure.core/assoc :document (deser-schema-json-document (clojure.core/get-in letvar1108182 ["Document"])))))))

(clojure.core/defn- response-internal-service-exception ([input] (response-internal-service-exception nil input)) ([resultWrapper1108184 input] (clojure.core/let [rawinput1108183 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108185 {"Message" (rawinput1108183 "Message")}] (clojure.core/cond-> {} (letvar1108185 "Message") (clojure.core/assoc :message (deser-exception-message (clojure.core/get-in letvar1108185 ["Message"])))))))

(clojure.core/defn- response-list-typed-link-facet-attributes-response ([input] (response-list-typed-link-facet-attributes-response nil input)) ([resultWrapper1108187 input] (clojure.core/let [rawinput1108186 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108188 {"Attributes" (rawinput1108186 "Attributes"), "NextToken" (rawinput1108186 "NextToken")}] (clojure.core/cond-> {} (letvar1108188 "Attributes") (clojure.core/assoc :attributes (deser-typed-link-attribute-definition-list (clojure.core/get-in letvar1108188 ["Attributes"]))) (letvar1108188 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108188 ["NextToken"])))))))

(clojure.core/defn- response-untag-resource-response ([input] (response-untag-resource-response nil input)) ([resultWrapper1108190 input] (clojure.core/let [rawinput1108189 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108191 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-update-facet-response ([input] (response-update-facet-response nil input)) ([resultWrapper1108193 input] (clojure.core/let [rawinput1108192 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108194 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-detach-policy-response ([input] (response-detach-policy-response nil input)) ([resultWrapper1108196 input] (clojure.core/let [rawinput1108195 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108197 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-list-published-schema-arns-response ([input] (response-list-published-schema-arns-response nil input)) ([resultWrapper1108199 input] (clojure.core/let [rawinput1108198 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108200 {"SchemaArns" (rawinput1108198 "SchemaArns"), "NextToken" (rawinput1108198 "NextToken")}] (clojure.core/cond-> {} (letvar1108200 "SchemaArns") (clojure.core/assoc :schema-arns (deser-arns (clojure.core/get-in letvar1108200 ["SchemaArns"]))) (letvar1108200 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1108200 ["NextToken"])))))))

(clojure.core/defn- response-enable-directory-response ([input] (response-enable-directory-response nil input)) ([resultWrapper1108202 input] (clojure.core/let [rawinput1108201 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108203 {"DirectoryArn" (rawinput1108201 "DirectoryArn")}] (clojure.core/cond-> {:directory-arn (deser-arn (clojure.core/get-in letvar1108203 ["DirectoryArn"]))}))))

(clojure.core/defn- response-create-directory-response ([input] (response-create-directory-response nil input)) ([resultWrapper1108205 input] (clojure.core/let [rawinput1108204 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108206 {"DirectoryArn" (rawinput1108204 "DirectoryArn"), "Name" (rawinput1108204 "Name"), "ObjectIdentifier" (rawinput1108204 "ObjectIdentifier"), "AppliedSchemaArn" (rawinput1108204 "AppliedSchemaArn")}] (clojure.core/cond-> {:directory-arn (deser-directory-arn (clojure.core/get-in letvar1108206 ["DirectoryArn"])), :name (deser-directory-name (clojure.core/get-in letvar1108206 ["Name"])), :object-identifier (deser-object-identifier (clojure.core/get-in letvar1108206 ["ObjectIdentifier"])), :applied-schema-arn (deser-arn (clojure.core/get-in letvar1108206 ["AppliedSchemaArn"]))}))))

(clojure.core/defn- response-get-directory-response ([input] (response-get-directory-response nil input)) ([resultWrapper1108208 input] (clojure.core/let [rawinput1108207 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1108209 {"Directory" (rawinput1108207 "Directory")}] (clojure.core/cond-> {:directory (deser-directory (clojure.core/get-in letvar1108209 ["Directory"]))}))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-update-object-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-object-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.delete-object-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.invalid-rule-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/invalid-rule-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.invalid-rule-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-to-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-to-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-to-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-to-index-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.attach-to-index-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.attach-to-index-request/index-reference :portkey.aws.clouddirectory.-2017-01-11.attach-to-index-request/target-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-get-object-attributes/attribute-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-attributes (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference :portkey.aws.clouddirectory.-2017-01-11/schema-facet :portkey.aws.clouddirectory.-2017-01-11.batch-get-object-attributes/attribute-names] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012852__auto__] (clojure.core/<= 1 (clojure.core/count s__1012852__auto__))) (clojure.core/fn [s__1012853__auto__] (clojure.core/< (clojure.core/count s__1012853__auto__) 64)) (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-directory-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-directory-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-directory-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.create-directory-request/name :portkey.aws.clouddirectory.-2017-01-11.create-directory-request/schema-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-exception/index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-operation-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-write-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-write-exception/index :portkey.aws.clouddirectory.-2017-01-11.batch-write-exception/type :portkey.aws.clouddirectory.-2017-01-11.batch-write-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-incoming-typed-links-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/filter-attribute-ranges :portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/filter-typed-link :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-policies-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parent-paths-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-incoming-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/get-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-information-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-policy-attachments-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-outgoing-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/get-link-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-get-link-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-children-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-parents (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parents-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-attached-indices-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-lookup-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-successful-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-policies :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-parent-paths :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-incoming-typed-links :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/get-object-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/get-object-information :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-policy-attachments :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-outgoing-typed-links :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/get-link-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-index :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-children :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-object-parents :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/list-attached-indices :portkey.aws.clouddirectory.-2017-01-11.batch-read-successful-response/lookup-policy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-identifier-and-link-name-tuple (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/object-identifier :portkey.aws.clouddirectory.-2017-01-11/link-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-index/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-index/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-index (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-index/index-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-index/ranges-on-indexed-values :portkey.aws.clouddirectory.-2017-01-11.batch-list-index/max-results :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-children-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-children-response/children :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.policy-attachment/policy-id (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/policy-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.policy-attachment/policy-id :portkey.aws.clouddirectory.-2017-01-11/object-identifier :portkey.aws.clouddirectory.-2017-01-11/policy-type]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-request/include-all-links-to-each-parent (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-parents-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-parents-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-request/include-all-links-to-each-parent]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.object-not-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-not-detached-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.object-not-detached-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-typed-link-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/put-schema-from-json-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.link-attribute-action/attribute-action-type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.link-attribute-action/attribute-update-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/link-attribute-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.link-attribute-action/attribute-action-type :portkey.aws.clouddirectory.-2017-01-11.link-attribute-action/attribute-update-value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.schema-facet/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/schema-facet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.schema-facet/schema-arn :portkey.aws.clouddirectory.-2017-01-11/facet-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-index-response/index-attachments :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-update-link-attributes/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/link-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-update-link-attributes (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier :portkey.aws.clouddirectory.-2017-01-11.batch-update-link-attributes/attribute-updates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-attached-indices-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-attached-indices-response/index-attachments :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation-response))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-typed-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/source-object-reference :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/target-object-reference :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/typed-link-facet :portkey.aws.clouddirectory.-2017-01-11.attach-typed-link-request/attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/link-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/link-attribute-update))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-attributes/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-attributes/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-attributes (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-attributes/max-results :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-attributes/facet-filter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute/attribute-definition (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute/attribute-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-attribute (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.facet-attribute/name] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet-attribute/attribute-definition :portkey.aws.clouddirectory.-2017-01-11.facet-attribute/attribute-reference :portkey.aws.clouddirectory.-2017-01-11.facet-attribute/required-behavior]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.object-attribute-update/object-attribute-key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-attribute-update (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.object-attribute-update/object-attribute-key :portkey.aws.clouddirectory.-2017-01-11/object-attribute-action]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.invalid-facet-update-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/invalid-facet-update-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.invalid-facet-update-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/string-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/string-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/binary-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/binary-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/boolean-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/boolean-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/number-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/datetime-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/datetime-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/string-value :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/binary-value :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/boolean-value :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/number-value :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value/datetime-value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-from-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-from-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-from-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/detach-from-index-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.detach-from-index-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.detach-from-index-request/index-reference :portkey.aws.clouddirectory.-2017-01-11.detach-from-index-request/target-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-definition (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/type] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/default-value :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/is-immutable :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-definition/rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/validation-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.validation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-identifier-and-link-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/object-identifier-and-link-name-tuple))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-index-response/index-attachments :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-object-information-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.get-object-information-response/schema-facets :portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-response/parents (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-to-link-name-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-response/parent-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-and-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-parents-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-parents-response/parents :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-object-parents-response/parent-links]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/facet-attribute))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-directory-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.delete-directory-request/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/datetime-attribute-value clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-link-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-link-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.get-link-attributes-response/attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-tags-for-resource-response/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-tags-for-resource-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-tags-for-resource-response/tags :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-facet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.get-facet-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.get-facet-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-policies-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-object-policies-response/attached-policy-ids :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.object-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-attribute-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/attribute-key :portkey.aws.clouddirectory.-2017-01-11.object-attribute-range/range]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-policy-attachments-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-request/policy-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-policies))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parent-paths))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-incoming-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/get-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-information))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-policy-attachments))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-outgoing-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/get-link-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-get-link-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-children))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-parents (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parents))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-list-attached-indices))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-lookup-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-policies :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-parent-paths :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-incoming-typed-links :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/get-object-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/get-object-information :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-policy-attachments :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-outgoing-typed-links :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/get-link-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-index :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-children :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-object-parents :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/list-attached-indices :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation/lookup-policy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/number-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.object-attribute-action/object-attribute-action-type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.object-attribute-action/object-attribute-update-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-attribute-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.object-attribute-action/object-attribute-action-type :portkey.aws.clouddirectory.-2017-01-11.object-attribute-action/object-attribute-update-value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.directory-not-enabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.directory-not-enabled-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-children-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-children-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-children-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-children-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-object-children-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-typed-link-facet-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-names-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-names-response/facet-names :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-range))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012852__auto__] (clojure.core/<= 1 (clojure.core/count s__1012852__auto__))) (clojure.core/fn [s__1012853__auto__] (clojure.core/< (clojure.core/count s__1012853__auto__) 230)) (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._:-]*$" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/required-attribute-behavior #{"REQUIRED_ALWAYS" :required-always :not-required "NOT_REQUIRED"})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-object-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.get-object-attributes-response/attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/start-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/start-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/end-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/end-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value-range (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/start-mode :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/end-mode] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/start-value :portkey.aws.clouddirectory.-2017-01-11.typed-attribute-value-range/end-value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.unsupported-index-type-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/unsupported-index-type-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.unsupported-index-type-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-add-facet-to-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-add-facet-to-object (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/schema-facet :portkey.aws.clouddirectory.-2017-01-11.batch-add-facet-to-object/object-attribute-list :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-facet-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/facet]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-request/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-attributes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level :portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-request/facet-filter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-tags-for-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-tags-for-resource-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/tags-number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-tags-for-resource-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-tags-for-resource-request/resource-arn] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-tags-for-resource-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.publish-schema-response/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/publish-schema-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.publish-schema-response/published-schema-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.attach-policy-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.attach-policy-request/policy-reference :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-update-object-attributes/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-update-object-attributes (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference :portkey.aws.clouddirectory.-2017-01-11.batch-update-object-attributes/attribute-updates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-directory-response (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.delete-directory-response/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-schema-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.update-schema-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.update-schema-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-schema-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.create-schema-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-policies/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-policies (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-policies/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-remove-facet-from-object (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/schema-facet :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-read-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-read-exception/type :portkey.aws.clouddirectory.-2017-01-11.batch-read-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-outgoing-typed-links-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-response/typed-link-specifiers :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-typed-link (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/source-object-reference :portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/target-object-reference :portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/typed-link-facet :portkey.aws.clouddirectory.-2017-01-11.batch-attach-typed-link/attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-index-request/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-index-request/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-index-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-index-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.create-index-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.create-index-request/ordered-indexed-attribute-list :portkey.aws.clouddirectory.-2017-01-11.create-index-request/is-unique] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.create-index-request/parent-reference :portkey.aws.clouddirectory.-2017-01-11/link-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-read-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.batch-read-request/operations] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.enable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/enable-directory-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.enable-directory-request/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-managed-schema-arns-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-managed-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-managed-schema-arns-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-managed-schema-arns-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-managed-schema-arns-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-parent-paths-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/path-to-object-identifiers-list :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-object-attributes-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-object-attributes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.update-object-attributes-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference :portkey.aws.clouddirectory.-2017-01-11.update-object-attributes-request/attribute-updates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-information (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-delete-object-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-to-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.attach-to-index-response/attached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-definition-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-definition))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.invalid-schema-doc-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/invalid-schema-doc-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.invalid-schema-doc-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-action-type #{"DELETE" "CREATE_OR_UPDATE" :delete :create-or-update})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-type #{:binary :variant :number "NUMBER" :string "STRING" "VARIANT" :datetime "DATETIME" :boolean "BOOLEAN" "BINARY"})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-children/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-children (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-children/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-typed-link-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/boolean-attribute-value clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.link-name-already-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/link-name-already-in-use-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.link-name-already-in-use-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/policy-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/policy-attachment))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-in-use-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet-in-use-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parent-paths-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/path-to-object-identifiers-list :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-policy (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-attach-policy/policy-reference :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-attributes-response/attributes :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/schema-json-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-object-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-exception-type #{:object-already-detached-exception :not-policy-exception "ObjectNotDetachedException" "ValidationException" :internal-service-exception :not-index-exception "DirectoryNotEnabledException" "UnsupportedIndexTypeException" :resource-not-found-exception :limit-exceeded-exception "LinkNameAlreadyInUseException" "LimitExceededException" :object-not-detached-exception "InvalidArnException" "NotPolicyException" "ResourceNotFoundException" "FacetValidationException" "AccessDeniedException" :validation-exception "NotIndexException" :indexed-attribute-missing-exception :facet-validation-exception "NotNodeException" "IndexedAttributeMissingException" :directory-not-enabled-exception :access-denied-exception "InvalidAttachmentException" "ObjectAlreadyDetachedException" :not-node-exception :still-contains-links-exception :link-name-already-in-use-exception :unsupported-index-type-exception "StillContainsLinksException" "InternalServiceException" :invalid-arn-exception :invalid-attachment-exception})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-object-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/lookup-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/policy-to-path-list :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/attribute-key))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.invalid-tagging-request-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/invalid-tagging-request-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.invalid-tagging-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/selector-object-reference (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-facet-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/detach-from-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.detach-from-index-response/detached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/typed-link-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/rule-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2017-01-11/rule-key :portkey.aws.clouddirectory.-2017-01-11/rule))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation-response))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-response/upgraded-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/upgrade-published-schema-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-response/upgraded-schema-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-create-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-create-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-from-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/update-link-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-update-link-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-to-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-add-facet-to-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-update-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-delete-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-remove-facet-from-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/create-index :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/create-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-policy :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-from-index :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/update-link-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-to-index :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-typed-link :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/detach-typed-link :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/add-facet-to-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/update-object-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/delete-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/attach-policy :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation-response/remove-facet-from-object]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/arns (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/arn))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-link-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-typed-link-facet-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-to-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-attach-to-index-response/attached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.add-facet-to-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.add-facet-to-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/add-facet-to-object-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.add-facet-to-object-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/schema-facet :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.add-facet-to-object-request/object-attribute-list]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-write-response/responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.directory-not-disabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-not-disabled-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.directory-not-disabled-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.remove-facet-from-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/remove-facet-from-object-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.remove-facet-from-object-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/schema-facet :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-applied-schema-version-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-applied-schema-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.get-applied-schema-version-response/applied-schema-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-parent-paths/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parent-paths (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-parent-paths/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/detach-object-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.detach-object-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.detach-object-request/parent-reference :portkey.aws.clouddirectory.-2017-01-11/link-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-development-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-development-schema-arns-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-development-schema-arns-response/schema-arns :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tag-resource-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-get-link-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-get-link-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-get-link-attributes-response/attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-outgoing-typed-links (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links/filter-attribute-ranges :portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links/filter-typed-link :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-incoming-typed-links (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links/filter-attribute-ranges :portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links/filter-typed-link :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-range (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-range/range] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/attribute-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.invalid-next-token-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.invalid-next-token-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-get-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-get-object-attributes-response/attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-schema-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.update-schema-response/schema-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-outgoing-typed-links-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/filter-attribute-ranges :portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/filter-typed-link :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-outgoing-typed-links-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.directory-deleted-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-deleted-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.directory-deleted-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.directory/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.directory/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.directory/creation-date-time (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/date))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.directory/name :portkey.aws.clouddirectory.-2017-01-11/directory-arn :portkey.aws.clouddirectory.-2017-01-11.directory/state :portkey.aws.clouddirectory.-2017-01-11.directory/creation-date-time]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/identity-attribute-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/typed-link-facet :portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/source-object-reference :portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/target-object-reference :portkey.aws.clouddirectory.-2017-01-11.typed-link-specifier/identity-attribute-values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-facet-names-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-facet-names-request/schema-arn] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-facet-names-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-directories-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-directories-request/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-directories-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-directories-request/max-results :portkey.aws.clouddirectory.-2017-01-11.list-directories-request/state]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.policy-to-path/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.policy-to-path/policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/policy-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/policy-to-path (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.policy-to-path/path :portkey.aws.clouddirectory.-2017-01-11.policy-to-path/policies]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/object-attribute-range))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/detach-object-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.detach-object-response/detached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-facet (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.typed-link-facet/name :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet/attributes :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet/identity-attribute-order] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.invalid-arn-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.invalid-arn-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet-not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.not-policy-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/not-policy-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.not-policy-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.tag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.tag-resource-request/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tag-resource-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.tag-resource-request/resource-arn :portkey.aws.clouddirectory.-2017-01-11.tag-resource-request/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-facet-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-facet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.create-facet-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.create-facet-request/name] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.create-facet-request/attributes :portkey.aws.clouddirectory.-2017-01-11/object-type :portkey.aws.clouddirectory.-2017-01-11/facet-style]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-object-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.attach-object-response/attached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-object-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-attach-object-response/attached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/range-mode #{:exclusive "LAST" :inclusive :last-before-missing-values "EXCLUSIVE" :first "INCLUSIVE" :last "FIRST" "LAST_BEFORE_MISSING_VALUES"})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tag-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/tag))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.cannot-list-parent-of-root-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/cannot-list-parent-of-root-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.cannot-list-parent-of-root-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-facet-names-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-facet-names-response/facet-names :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-children-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-object-children-response/children :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/tag-key))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-policies-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-policies-response/attached-policy-ids :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/binary-attribute-value clojure.core/bytes?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-applied-schema-version-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-applied-schema-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.get-applied-schema-version-request/schema-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-attached-indices-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-request/target-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-policy-attachments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-policy-attachments-response/object-identifiers :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-get-link-attributes/attribute-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-get-link-attributes (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier :portkey.aws.clouddirectory.-2017-01-11.batch-get-link-attributes/attribute-names] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/path-to-object-identifiers-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/path-to-object-identifiers))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-add-facet-to-object-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-typed-link-facet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/name :portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/attribute-updates :portkey.aws.clouddirectory.-2017-01-11.update-typed-link-facet-request/identity-attribute-order] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-schema-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.create-schema-response/schema-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-operation-index clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.apply-schema-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.apply-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/apply-schema-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.apply-schema-response/applied-schema-arn :portkey.aws.clouddirectory.-2017-01-11.apply-schema-response/directory-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.resource-not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-typed-link (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/object-attribute-update))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.lookup-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.lookup-policy-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/lookup-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.lookup-policy-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.lookup-policy-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-schema-as-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-schema-as-json-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.get-schema-as-json-request/schema-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-policies-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-policies-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-policies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-policies-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-object-policies-request/max-results :portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-name-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/attribute-name-and-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-index-request/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-index-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-index-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-index-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.list-index-request/index-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-index-request/ranges-on-indexed-values :portkey.aws.clouddirectory.-2017-01-11.list-index-request/max-results :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.schema-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/schema-already-exists-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.schema-already-exists-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-update))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet-validation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.schema-already-published-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/schema-already-published-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.schema-already-published-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attribute-name-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-name-and-value (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/attribute-name :portkey.aws.clouddirectory.-2017-01-11.attribute-name-and-value/value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-policy-attachments/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-policy-attachments/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-policy-attachments (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-policy-attachments/policy-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-policy-attachments/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet/name :portkey.aws.clouddirectory.-2017-01-11/object-type :portkey.aws.clouddirectory.-2017-01-11/facet-style]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-typed-link-facet-information-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-typed-link-facet-information-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-typed-link-facet-information-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.get-typed-link-facet-information-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.get-typed-link-facet-information-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-incoming-typed-links-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-incoming-typed-links-response/link-specifiers :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-directory-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.object-reference/selector (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/selector-object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-reference (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.object-reference/selector]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-facet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.update-facet-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.update-facet-request/name] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.update-facet-request/attribute-updates :portkey.aws.clouddirectory.-2017-01-11/object-type]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attribute-key/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attribute-key/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-key (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.attribute-key/schema-arn :portkey.aws.clouddirectory.-2017-01-11/facet-name :portkey.aws.clouddirectory.-2017-01-11.attribute-key/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/bool clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/attribute-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-to-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-to-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-to-index (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-attach-to-index/index-reference :portkey.aws.clouddirectory.-2017-01-11.batch-attach-to-index/target-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-typed-link-facet-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-reference-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-create-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-create-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-from-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/update-link-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-update-link-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-to-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-detach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-add-facet-to-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-update-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-delete-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-attach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-remove-facet-from-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/create-index :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/create-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-policy :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-from-index :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/update-link-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-to-index :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-typed-link :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/detach-typed-link :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/add-facet-to-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/update-object-attributes :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/delete-object :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/attach-policy :portkey.aws.clouddirectory.-2017-01-11.batch-write-operation/remove-facet-from-object]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-response/upgraded-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/upgrade-applied-schema-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-response/upgraded-schema-arn :portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-response/directory-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.put-schema-from-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.put-schema-from-json-request/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/put-schema-from-json-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.put-schema-from-json-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.put-schema-from-json-request/document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-typed-link-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.access-denied-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.access-denied-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-attached-indices-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-attached-indices-response/index-attachments :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-development-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-development-schema-arns-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-development-schema-arns-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/remove-facet-from-object-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/rule-parameter-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-identifier-to-link-name-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2017-01-11/object-identifier :portkey.aws.clouddirectory.-2017-01-11/link-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.publish-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.publish-schema-request/minor-version (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/version))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.publish-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/publish-schema-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.publish-schema-request/development-schema-arn :portkey.aws.clouddirectory.-2017-01-11/version] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.publish-schema-request/minor-version :portkey.aws.clouddirectory.-2017-01-11.publish-schema-request/name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-create-object-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-detach-from-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-detach-from-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-from-index (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-detach-from-index/index-reference :portkey.aws.clouddirectory.-2017-01-11.batch-detach-from-index/target-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-from-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-detach-from-index-response/detached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-facet-attribute-update (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.typed-link-facet-attribute-update/attribute :portkey.aws.clouddirectory.-2017-01-11.typed-link-facet-attribute-update/action] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-schema-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.delete-schema-response/schema-arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-typed-link-facet-request/facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-typed-link-facet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.create-typed-link-facet-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.create-typed-link-facet-request/facet] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-remove-facet-from-object-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-incoming-typed-links-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-incoming-typed-links-response/link-specifiers :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-update (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet-attribute-update/attribute :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-update/action]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-facet-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-response/attributes :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.index-attachment/indexed-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/index-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.index-attachment/indexed-attributes :portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.not-index-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/not-index-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.not-index-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/link-name-to-object-identifier-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2017-01-11/link-name :portkey.aws.clouddirectory.-2017-01-11/object-identifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-schema-and-facet-name/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-schema-and-facet-name (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.typed-link-schema-and-facet-name/schema-arn :portkey.aws.clouddirectory.-2017-01-11/typed-link-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-policy-attachments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-policy-attachments-response/object-identifiers :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/path-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-write-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-write-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-write-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-write-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.batch-write-request/operations] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.rule/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/rule-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.rule/parameters (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/rule-parameter-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/rule (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.rule/type :portkey.aws.clouddirectory.-2017-01-11.rule/parameters]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-attach-object/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-attach-object (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-attach-object/parent-reference :portkey.aws.clouddirectory.-2017-01-11.batch-attach-object/child-reference :portkey.aws.clouddirectory.-2017-01-11/link-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/policy-to-path-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/policy-to-path))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-delete-object (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/rule-parameter-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.path-to-object-identifiers/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.path-to-object-identifiers/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/path-to-object-identifiers (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.path-to-object-identifiers/path :portkey.aws.clouddirectory.-2017-01-11.path-to-object-identifiers/object-identifiers]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-create-index-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-lookup-policy/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-lookup-policy (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-lookup-policy/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/typed-link-facet-attribute-update))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-schema-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.delete-schema-request/schema-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.apply-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.apply-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/apply-schema-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.apply-schema-request/published-schema-arn :portkey.aws.clouddirectory.-2017-01-11.apply-schema-request/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.link-attribute-update/attribute-action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/link-attribute-action))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/link-attribute-update (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/attribute-key :portkey.aws.clouddirectory.-2017-01-11.link-attribute-update/attribute-action]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-object-information-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-object-information-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.get-object-information-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.not-node-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/not-node-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.not-node-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-typed-link-facet-information-response/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-typed-link-facet-information-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.get-typed-link-facet-information-response/identity-attribute-order]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-typed-link-facet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.delete-typed-link-facet-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.delete-typed-link-facet-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-create-index/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-create-index/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-create-index/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-create-index (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-create-index/ordered-indexed-attribute-list :portkey.aws.clouddirectory.-2017-01-11.batch-create-index/is-unique] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-create-index/parent-reference :portkey.aws.clouddirectory.-2017-01-11/link-name :portkey.aws.clouddirectory.-2017-01-11/batch-reference-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-identifier (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/directory))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-exception-type #{:cannot-list-parent-of-root-exception :not-policy-exception "ValidationException" :internal-service-exception :not-index-exception "DirectoryNotEnabledException" :resource-not-found-exception :limit-exceeded-exception "LimitExceededException" "InvalidNextTokenException" "InvalidArnException" "NotPolicyException" "CannotListParentOfRootException" "ResourceNotFoundException" "FacetValidationException" "AccessDeniedException" :validation-exception "NotIndexException" :facet-validation-exception "NotNodeException" :invalid-next-token-exception :directory-not-enabled-exception :access-denied-exception :not-node-exception "InternalServiceException" :invalid-arn-exception})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012852__auto__] (clojure.core/<= 1 (clojure.core/count s__1012852__auto__))) (clojure.core/fn [s__1012853__auto__] (clojure.core/< (clojure.core/count s__1012853__auto__) 64)) (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"[^\/\[\]\(\):\{\}#@!?\s\\;]+" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/number-results (clojure.spec.alpha/int-in 1 Long/MAX_VALUE))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-directories-response/directories (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/directory-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-directories-response (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-directories-response/directories] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.indexed-attribute-missing-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/indexed-attribute-missing-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.indexed-attribute-missing-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tags-number-results (clojure.spec.alpha/int-in 50 Long/MAX_VALUE))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-detach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-policy (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-detach-policy/policy-reference :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-state #{:deleted "DISABLED" :disabled "DELETED" "ENABLED" :enabled})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/rule-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012852__auto__] (clojure.core/<= 1 (clojure.core/count s__1012852__auto__))) (clojure.core/fn [s__1012853__auto__] (clojure.core/< (clojure.core/count s__1012853__auto__) 64)) (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-type #{:leaf-node "INDEX" "LEAF_NODE" :index :node :policy "POLICY" "NODE"})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.incompatible-schema-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/incompatible-schema-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.incompatible-schema-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/object-identifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-managed-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-managed-schema-arns-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-managed-schema-arns-response/schema-arns :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.retryable-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.retryable-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-parents-response/parent-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier-and-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parents-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-object-parents-response/parent-links :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-names-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-names-request/schema-arn] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-names-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/consistency-level #{"SERIALIZABLE" :serializable "EVENTUAL" :eventual})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012852__auto__] (clojure.core/<= 1 (clojure.core/count s__1012852__auto__))) (clojure.core/fn [s__1012853__auto__] (clojure.core/< (clojure.core/count s__1012853__auto__) 64)) (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-link-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.update-link-attributes-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/link-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-link-attributes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.update-link-attributes-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier :portkey.aws.clouddirectory.-2017-01-11.update-link-attributes-request/attribute-updates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/detach-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.detach-policy-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.detach-policy-request/policy-reference :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.tag/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/tag-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.tag/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/tag-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.tag/key :portkey.aws.clouddirectory.-2017-01-11.tag/value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-object-request/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-object-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.create-object-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.create-object-request/schema-facets] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.create-object-request/object-attribute-list :portkey.aws.clouddirectory.-2017-01-11.create-object-request/parent-reference :portkey.aws.clouddirectory.-2017-01-11/link-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012852__auto__] (clojure.core/<= 1 (clojure.core/count s__1012852__auto__))) (clojure.core/fn [s__1012853__auto__] (clojure.core/< (clojure.core/count s__1012853__auto__) 10)) (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-create-object/schema-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-create-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-create-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-create-object (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-create-object/schema-facet :portkey.aws.clouddirectory.-2017-01-11.batch-create-object/object-attribute-list] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-create-object/parent-reference :portkey.aws.clouddirectory.-2017-01-11/link-name :portkey.aws.clouddirectory.-2017-01-11/batch-reference-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-attributes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-request/name] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.detach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/detach-typed-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.detach-typed-link-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.directory-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/directory-already-exists-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.directory-already-exists-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.disable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/disable-directory-response (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.disable-directory-response/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.invalid-attachment-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/invalid-attachment-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.invalid-attachment-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.object-already-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/object-already-detached-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.object-already-detached-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.disable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/disable-directory-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.disable-directory-request/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-read-response/responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-style #{:static :dynamic "STATIC" "DYNAMIC"})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-facet-attributes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-request/name] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-facet-attributes-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-detach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-object (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-detach-object/parent-reference :portkey.aws.clouddirectory.-2017-01-11/link-name] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/batch-reference-name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation-response/successful-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-read-successful-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation-response/exception-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-read-exception))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-read-operation-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-read-operation-response/successful-response :portkey.aws.clouddirectory.-2017-01-11.batch-read-operation-response/exception-response]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/schema-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__1012852__auto__] (clojure.core/<= 1 (clojure.core/count s__1012852__auto__))) (clojure.core/fn [s__1012853__auto__] (clojure.core/< (clojure.core/count s__1012853__auto__) 32)) (clojure.core/fn [s__1012854__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__1012854__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-definition (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/name :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/type :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/required-behavior] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/default-value :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/is-immutable :portkey.aws.clouddirectory.-2017-01-11.typed-link-attribute-definition/rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-link-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-link-attributes-request/attribute-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-link-attributes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.get-link-attributes-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier :portkey.aws.clouddirectory.-2017-01-11.get-link-attributes-request/attribute-names] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/string-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/rule-parameter-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2017-01-11/rule-parameter-key :portkey.aws.clouddirectory.-2017-01-11/rule-parameter-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-object-attributes-request/attribute-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-object-attributes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.get-object-attributes-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference :portkey.aws.clouddirectory.-2017-01-11/schema-facet :portkey.aws.clouddirectory.-2017-01-11.get-object-attributes-request/attribute-names] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/consistency-level]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-outgoing-typed-links-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-outgoing-typed-links-response/typed-link-specifiers :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-object-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-detach-object-response/detached-object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/schema-facet-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/schema-facet))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-detach-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-request/dry-run (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/upgrade-applied-schema-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-request/published-schema-arn :portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-request/directory-arn] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.upgrade-applied-schema-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attach-object-request/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attach-object-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.attach-object-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11.attach-object-request/parent-reference :portkey.aws.clouddirectory.-2017-01-11.attach-object-request/child-reference :portkey.aws.clouddirectory.-2017-01-11/link-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attribute-key-and-value/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.attribute-key-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.attribute-key-and-value/key :portkey.aws.clouddirectory.-2017-01-11.attribute-key-and-value/value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-applied-schema-arns-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-response/schema-arns :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-attached-indices/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-attached-indices/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-attached-indices (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-attached-indices/target-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-attached-indices/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-list-object-attributes-response/attributes :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.still-contains-links-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/still-contains-links-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.still-contains-links-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/policy-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/add-facet-to-object-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-facet-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-object-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-already-exists-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.facet-already-exists-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-schema-as-json-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.get-schema-as-json-response/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-schema-as-json-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.get-schema-as-json-response/name :portkey.aws.clouddirectory.-2017-01-11.get-schema-as-json-response/document]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.internal-service-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.internal-service-exception/message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-parents/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-list-object-parents (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.batch-list-object-parents/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.batch-get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-get-object-information-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.batch-get-object-information-response/schema-facets :portkey.aws.clouddirectory.-2017-01-11/object-identifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-typed-link-facet-attributes-response/attributes :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/untag-resource-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.delete-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/delete-facet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.delete-facet-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11.delete-facet-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-published-schema-arns-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-published-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-published-schema-arns-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-published-schema-arns-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-published-schema-arns-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/minor-version (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/version))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/dry-run (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/upgrade-published-schema-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/development-schema-arn :portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/published-schema-arn :portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/minor-version] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.upgrade-published-schema-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-applied-schema-arns-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-request/directory-arn] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-request/schema-arn :portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-applied-schema-arns-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-parent-paths-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-object-parent-paths-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-object-parent-paths-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.list-object-parent-paths-request/directory-arn :portkey.aws.clouddirectory.-2017-01-11/object-reference] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/next-token :portkey.aws.clouddirectory.-2017-01-11.list-object-parent-paths-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/update-facet-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-reference/target-facet-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-reference/target-attribute-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-attribute-reference (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.facet-attribute-reference/target-facet-name :portkey.aws.clouddirectory.-2017-01-11.facet-attribute-reference/target-attribute-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-update-link-attributes-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.untag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.untag-resource-request/tag-keys (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/untag-resource-request (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.untag-resource-request/resource-arn :portkey.aws.clouddirectory.-2017-01-11.untag-resource-request/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/index-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/index-attachment))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/batch-lookup-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11/policy-to-path-list :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/detach-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.list-published-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/list-published-schema-arns-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2017-01-11.list-published-schema-arns-response/schema-arns :portkey.aws.clouddirectory.-2017-01-11/next-token]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.enable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/enable-directory-response (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11.enable-directory-response/directory-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/facet-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2017-01-11/facet-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-directory-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11.create-directory-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/create-directory-response (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/directory-arn :portkey.aws.clouddirectory.-2017-01-11.create-directory-response/name :portkey.aws.clouddirectory.-2017-01-11/object-identifier :portkey.aws.clouddirectory.-2017-01-11.create-directory-response/applied-schema-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/get-directory-response (clojure.spec.alpha/keys :req-un [:portkey.aws.clouddirectory.-2017-01-11/directory] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2017-01-11/rule-type #{:number-comparison "BINARY_LENGTH" "NUMBER_COMPARISON" :binary-length :string-length "STRING_LENGTH" :string-from-set "STRING_FROM_SET"})

(clojure.core/defn tag-resource ([tag-resource-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-tag-resource-request tag-resource-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/tag-resource-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/tags/add", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/tag-resource-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "TagResource", :http.request.configuration/output-deser-fn response-tag-resource-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2017-01-11/invalid-tagging-request-exception}})))))
(clojure.spec.alpha/fdef tag-resource :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/tag-resource-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/tag-resource-response))

(clojure.core/defn list-object-policies ([list-object-policies-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-object-policies-request list-object-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-policies-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/policy", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-policies-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListObjectPolicies", :http.request.configuration/output-deser-fn response-list-object-policies-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-object-policies :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-object-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-object-policies-response))

(clojure.core/defn create-index ([create-index-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-create-index-request create-index-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/create-index-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/index", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/create-index-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateIndex", :http.request.configuration/output-deser-fn response-create-index-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2017-01-11/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2017-01-11/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef create-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/create-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/create-index-response))

(clojure.core/defn list-object-parent-paths ([list-object-parent-paths-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-object-parent-paths-request list-object-parent-paths-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-parent-paths-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/parentpaths", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-parent-paths-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListObjectParentPaths", :http.request.configuration/output-deser-fn response-list-object-parent-paths-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-object-parent-paths :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-object-parent-paths-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-object-parent-paths-response))

(clojure.core/defn put-schema-from-json ([put-schema-from-json-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-put-schema-from-json-request put-schema-from-json-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/put-schema-from-json-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/json", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/put-schema-from-json-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PutSchemaFromJson", :http.request.configuration/output-deser-fn response-put-schema-from-json-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "InvalidSchemaDocException" :portkey.aws.clouddirectory.-2017-01-11/invalid-schema-doc-exception, "InvalidRuleException" :portkey.aws.clouddirectory.-2017-01-11/invalid-rule-exception}})))))
(clojure.spec.alpha/fdef put-schema-from-json :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/put-schema-from-json-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/put-schema-from-json-response))

(clojure.core/defn upgrade-applied-schema ([upgrade-applied-schema-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-upgrade-applied-schema-request upgrade-applied-schema-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/upgrade-applied-schema-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/upgradeapplied", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/upgrade-applied-schema-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpgradeAppliedSchema", :http.request.configuration/output-deser-fn response-upgrade-applied-schema-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory.-2017-01-11/schema-already-exists-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "IncompatibleSchemaException" :portkey.aws.clouddirectory.-2017-01-11/incompatible-schema-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2017-01-11/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef upgrade-applied-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/upgrade-applied-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/upgrade-applied-schema-response))

(clojure.core/defn create-object ([create-object-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-create-object-request create-object-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/create-object-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/create-object-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateObject", :http.request.configuration/output-deser-fn response-create-object-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2017-01-11/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2017-01-11/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef create-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/create-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/create-object-response))

(clojure.core/defn detach-policy ([detach-policy-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-detach-policy-request detach-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/detach-policy-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/policy/detach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/detach-policy-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachPolicy", :http.request.configuration/output-deser-fn response-detach-policy-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2017-01-11/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef detach-policy :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/detach-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/detach-policy-response))

(clojure.core/defn delete-directory ([delete-directory-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-delete-directory-request delete-directory-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/delete-directory-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/directory", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/delete-directory-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDirectory", :http.request.configuration/output-deser-fn response-delete-directory-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "DirectoryNotDisabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-disabled-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2017-01-11/directory-deleted-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef delete-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/delete-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/delete-directory-response))

(clojure.core/defn batch-write ([batch-write-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-batch-write-request batch-write-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/batch-write-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/batchwrite", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/batch-write-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "BatchWrite", :http.request.configuration/output-deser-fn response-batch-write-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "BatchWriteException" :portkey.aws.clouddirectory.-2017-01-11/batch-write-exception}})))))
(clojure.spec.alpha/fdef batch-write :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/batch-write-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-write-response))

(clojure.core/defn list-typed-link-facet-names ([list-typed-link-facet-names-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-typed-link-facet-names-request list-typed-link-facet-names-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-names-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/facet/list", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-names-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListTypedLinkFacetNames", :http.request.configuration/output-deser-fn response-list-typed-link-facet-names-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception}})))))
(clojure.spec.alpha/fdef list-typed-link-facet-names :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-names-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-names-response))

(clojure.core/defn batch-read ([batch-read-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-batch-read-request batch-read-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/batch-read-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/batchread", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/batch-read-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "BatchRead", :http.request.configuration/output-deser-fn response-batch-read-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception}})))))
(clojure.spec.alpha/fdef batch-read :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/batch-read-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/batch-read-response))

(clojure.core/defn list-incoming-typed-links ([list-incoming-typed-links-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-incoming-typed-links-request list-incoming-typed-links-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-incoming-typed-links-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/incoming", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-incoming-typed-links-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListIncomingTypedLinks", :http.request.configuration/output-deser-fn response-list-incoming-typed-links-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-incoming-typed-links :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-incoming-typed-links-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-incoming-typed-links-response))

(clojure.core/defn list-development-schema-arns ([] (list-development-schema-arns {})) ([list-development-schema-arns-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-development-schema-arns-request list-development-schema-arns-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-development-schema-arns-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/development", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-development-schema-arns-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListDevelopmentSchemaArns", :http.request.configuration/output-deser-fn response-list-development-schema-arns-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception}})))))
(clojure.spec.alpha/fdef list-development-schema-arns :args (clojure.spec.alpha/? :portkey.aws.clouddirectory.-2017-01-11/list-development-schema-arns-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-development-schema-arns-response))

(clojure.core/defn delete-schema ([delete-schema-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-delete-schema-request delete-schema-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/delete-schema-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/delete-schema-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSchema", :http.request.configuration/output-deser-fn response-delete-schema-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "StillContainsLinksException" :portkey.aws.clouddirectory.-2017-01-11/still-contains-links-exception}})))))
(clojure.spec.alpha/fdef delete-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/delete-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/delete-schema-response))

(clojure.core/defn delete-typed-link-facet ([delete-typed-link-facet-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-delete-typed-link-facet-request delete-typed-link-facet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/delete-typed-link-facet-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/facet/delete", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/delete-typed-link-facet-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteTypedLinkFacet", :http.request.configuration/output-deser-fn response-delete-typed-link-facet-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception}})))))
(clojure.spec.alpha/fdef delete-typed-link-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/delete-typed-link-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/delete-typed-link-facet-response))

(clojure.core/defn publish-schema ([publish-schema-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-publish-schema-request publish-schema-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/publish-schema-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/publish", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/publish-schema-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PublishSchema", :http.request.configuration/output-deser-fn response-publish-schema-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "SchemaAlreadyPublishedException" :portkey.aws.clouddirectory.-2017-01-11/schema-already-published-exception}})))))
(clojure.spec.alpha/fdef publish-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/publish-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/publish-schema-response))

(clojure.core/defn disable-directory ([disable-directory-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-disable-directory-request disable-directory-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/disable-directory-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/directory/disable", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/disable-directory-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisableDirectory", :http.request.configuration/output-deser-fn response-disable-directory-response, :http.request.spec/error-spec {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2017-01-11/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception}})))))
(clojure.spec.alpha/fdef disable-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/disable-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/disable-directory-response))

(clojure.core/defn create-typed-link-facet ([create-typed-link-facet-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-create-typed-link-facet-request create-typed-link-facet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/create-typed-link-facet-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/facet/create", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/create-typed-link-facet-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateTypedLinkFacet", :http.request.configuration/output-deser-fn response-create-typed-link-facet-response, :http.request.spec/error-spec {"InvalidRuleException" :portkey.aws.clouddirectory.-2017-01-11/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2017-01-11/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef create-typed-link-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/create-typed-link-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/create-typed-link-facet-response))

(clojure.core/defn get-object-attributes ([get-object-attributes-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-object-attributes-request get-object-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-object-attributes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/attributes/get", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-object-attributes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetObjectAttributes", :http.request.configuration/output-deser-fn response-get-object-attributes-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef get-object-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-object-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-object-attributes-response))

(clojure.core/defn create-facet ([create-facet-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-create-facet-request create-facet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/create-facet-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/facet/create", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/create-facet-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateFacet", :http.request.configuration/output-deser-fn response-create-facet-response, :http.request.spec/error-spec {"InvalidRuleException" :portkey.aws.clouddirectory.-2017-01-11/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2017-01-11/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef create-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/create-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/create-facet-response))

(clojure.core/defn detach-object ([detach-object-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-detach-object-request detach-object-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/detach-object-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/detach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/detach-object-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachObject", :http.request.configuration/output-deser-fn response-detach-object-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory.-2017-01-11/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef detach-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/detach-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/detach-object-response))

(clojure.core/defn get-object-information ([get-object-information-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-object-information-request get-object-information-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-object-information-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/information", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-object-information-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetObjectInformation", :http.request.configuration/output-deser-fn response-get-object-information-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef get-object-information :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-object-information-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-object-information-response))

(clojure.core/defn list-facet-names ([list-facet-names-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-facet-names-request list-facet-names-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-facet-names-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/facet/list", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-facet-names-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListFacetNames", :http.request.configuration/output-deser-fn response-list-facet-names-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception}})))))
(clojure.spec.alpha/fdef list-facet-names :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-facet-names-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-facet-names-response))

(clojure.core/defn upgrade-published-schema ([upgrade-published-schema-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-upgrade-published-schema-request upgrade-published-schema-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/upgrade-published-schema-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/upgradepublished", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/upgrade-published-schema-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpgradePublishedSchema", :http.request.configuration/output-deser-fn response-upgrade-published-schema-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "IncompatibleSchemaException" :portkey.aws.clouddirectory.-2017-01-11/incompatible-schema-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2017-01-11/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef upgrade-published-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/upgrade-published-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/upgrade-published-schema-response))

(clojure.core/defn detach-from-index ([detach-from-index-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-detach-from-index-request detach-from-index-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/detach-from-index-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/index/detach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/detach-from-index-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachFromIndex", :http.request.configuration/output-deser-fn response-detach-from-index-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2017-01-11/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ObjectAlreadyDetachedException" :portkey.aws.clouddirectory.-2017-01-11/object-already-detached-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef detach-from-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/detach-from-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/detach-from-index-response))

(clojure.core/defn attach-object ([attach-object-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-attach-object-request attach-object-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/attach-object-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/attach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/attach-object-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachObject", :http.request.configuration/output-deser-fn response-attach-object-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2017-01-11/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2017-01-11/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef attach-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/attach-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attach-object-response))

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-tags-for-resource-request list-tags-for-resource-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-tags-for-resource-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/tags", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-tags-for-resource-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-list-tags-for-resource-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2017-01-11/invalid-tagging-request-exception}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-tags-for-resource-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-tags-for-resource-response))

(clojure.core/defn apply-schema ([apply-schema-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-apply-schema-request apply-schema-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/apply-schema-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/apply", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/apply-schema-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ApplySchema", :http.request.configuration/output-deser-fn response-apply-schema-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory.-2017-01-11/schema-already-exists-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2017-01-11/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef apply-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/apply-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/apply-schema-response))

(clojure.core/defn list-policy-attachments ([list-policy-attachments-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-policy-attachments-request list-policy-attachments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-policy-attachments-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/policy/attachment", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-policy-attachments-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListPolicyAttachments", :http.request.configuration/output-deser-fn response-list-policy-attachments-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2017-01-11/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-policy-attachments :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-policy-attachments-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-policy-attachments-response))

(clojure.core/defn list-outgoing-typed-links ([list-outgoing-typed-links-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-outgoing-typed-links-request list-outgoing-typed-links-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-outgoing-typed-links-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/outgoing", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-outgoing-typed-links-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListOutgoingTypedLinks", :http.request.configuration/output-deser-fn response-list-outgoing-typed-links-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-outgoing-typed-links :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-outgoing-typed-links-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-outgoing-typed-links-response))

(clojure.core/defn get-facet ([get-facet-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-facet-request get-facet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-facet-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/facet", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-facet-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetFacet", :http.request.configuration/output-deser-fn response-get-facet-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception}})))))
(clojure.spec.alpha/fdef get-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-facet-response))

(clojure.core/defn list-facet-attributes ([list-facet-attributes-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-facet-attributes-request list-facet-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-facet-attributes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/facet/attributes", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-facet-attributes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListFacetAttributes", :http.request.configuration/output-deser-fn response-list-facet-attributes-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-facet-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-facet-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-facet-attributes-response))

(clojure.core/defn update-link-attributes ([update-link-attributes-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-update-link-attributes-request update-link-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/update-link-attributes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/attributes/update", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/update-link-attributes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateLinkAttributes", :http.request.configuration/output-deser-fn response-update-link-attributes-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef update-link-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/update-link-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-link-attributes-response))

(clojure.core/defn attach-to-index ([attach-to-index-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-attach-to-index-request attach-to-index-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/attach-to-index-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/index/attach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/attach-to-index-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachToIndex", :http.request.configuration/output-deser-fn response-attach-to-index-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2017-01-11/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2017-01-11/not-index-exception, "IndexedAttributeMissingException" :portkey.aws.clouddirectory.-2017-01-11/indexed-attribute-missing-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2017-01-11/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef attach-to-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/attach-to-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attach-to-index-response))

(clojure.core/defn list-directories ([] (list-directories {})) ([list-directories-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-directories-request list-directories-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-directories-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/directory/list", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-directories-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListDirectories", :http.request.configuration/output-deser-fn response-list-directories-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception}})))))
(clojure.spec.alpha/fdef list-directories :args (clojure.spec.alpha/? :portkey.aws.clouddirectory.-2017-01-11/list-directories-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-directories-response))

(clojure.core/defn get-link-attributes ([get-link-attributes-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-link-attributes-request get-link-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-link-attributes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/attributes/get", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-link-attributes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetLinkAttributes", :http.request.configuration/output-deser-fn response-get-link-attributes-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef get-link-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-link-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-link-attributes-response))

(clojure.core/defn list-object-attributes ([list-object-attributes-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-object-attributes-request list-object-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-attributes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/attributes", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-attributes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListObjectAttributes", :http.request.configuration/output-deser-fn response-list-object-attributes-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-object-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-object-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-object-attributes-response))

(clojure.core/defn list-index ([list-index-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-index-request list-index-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-index-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/index/targets", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-index-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListIndex", :http.request.configuration/output-deser-fn response-list-index-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2017-01-11/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-index-response))

(clojure.core/defn attach-typed-link ([attach-typed-link-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-attach-typed-link-request attach-typed-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/attach-typed-link-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/attach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/attach-typed-link-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachTypedLink", :http.request.configuration/output-deser-fn response-attach-typed-link-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2017-01-11/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef attach-typed-link :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/attach-typed-link-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attach-typed-link-response))

(clojure.core/defn detach-typed-link ([detach-typed-link-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-detach-typed-link-request detach-typed-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/detach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/detach-typed-link-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachTypedLink", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1013883__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef detach-typed-link :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/detach-typed-link-request) :ret clojure.core/true?)

(clojure.core/defn list-object-children ([list-object-children-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-object-children-request list-object-children-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-children-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/children", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-children-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListObjectChildren", :http.request.configuration/output-deser-fn response-list-object-children-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory.-2017-01-11/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-object-children :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-object-children-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-object-children-response))

(clojure.core/defn update-typed-link-facet ([update-typed-link-facet-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-update-typed-link-facet-request update-typed-link-facet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/update-typed-link-facet-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/facet", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/update-typed-link-facet-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateTypedLinkFacet", :http.request.configuration/output-deser-fn response-update-typed-link-facet-response, :http.request.spec/error-spec {"InvalidRuleException" :portkey.aws.clouddirectory.-2017-01-11/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2017-01-11/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef update-typed-link-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/update-typed-link-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-typed-link-facet-response))

(clojure.core/defn add-facet-to-object ([add-facet-to-object-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-add-facet-to-object-request add-facet-to-object-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/add-facet-to-object-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/facets", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/add-facet-to-object-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddFacetToObject", :http.request.configuration/output-deser-fn response-add-facet-to-object-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef add-facet-to-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/add-facet-to-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/add-facet-to-object-response))

(clojure.core/defn get-applied-schema-version ([get-applied-schema-version-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-applied-schema-version-request get-applied-schema-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-applied-schema-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/getappliedschema", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-applied-schema-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetAppliedSchemaVersion", :http.request.configuration/output-deser-fn response-get-applied-schema-version-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef get-applied-schema-version :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-applied-schema-version-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-applied-schema-version-response))

(clojure.core/defn create-schema ([create-schema-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-create-schema-request create-schema-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/create-schema-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/create", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/create-schema-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSchema", :http.request.configuration/output-deser-fn response-create-schema-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory.-2017-01-11/schema-already-exists-exception}})))))
(clojure.spec.alpha/fdef create-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/create-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/create-schema-response))

(clojure.core/defn update-object-attributes ([update-object-attributes-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-update-object-attributes-request update-object-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/update-object-attributes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/update", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/update-object-attributes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateObjectAttributes", :http.request.configuration/output-deser-fn response-update-object-attributes-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2017-01-11/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef update-object-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/update-object-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-object-attributes-response))

(clojure.core/defn delete-object ([delete-object-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-delete-object-request delete-object-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/delete-object-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/delete", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/delete-object-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteObject", :http.request.configuration/output-deser-fn response-delete-object-response, :http.request.spec/error-spec {"ObjectNotDetachedException" :portkey.aws.clouddirectory.-2017-01-11/object-not-detached-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef delete-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/delete-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/delete-object-response))

(clojure.core/defn list-object-parents ([list-object-parents-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-object-parents-request list-object-parents-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-parents-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/parent", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-object-parents-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListObjectParents", :http.request.configuration/output-deser-fn response-list-object-parents-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "CannotListParentOfRootException" :portkey.aws.clouddirectory.-2017-01-11/cannot-list-parent-of-root-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-object-parents :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-object-parents-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-object-parents-response))

(clojure.core/defn update-schema ([update-schema-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-update-schema-request update-schema-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/update-schema-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/update", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/update-schema-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateSchema", :http.request.configuration/output-deser-fn response-update-schema-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/update-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-schema-response))

(clojure.core/defn untag-resource ([untag-resource-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-untag-resource-request untag-resource-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/untag-resource-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/tags/remove", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/untag-resource-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UntagResource", :http.request.configuration/output-deser-fn response-untag-resource-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2017-01-11/invalid-tagging-request-exception}})))))
(clojure.spec.alpha/fdef untag-resource :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/untag-resource-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/untag-resource-response))

(clojure.core/defn update-facet ([update-facet-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-update-facet-request update-facet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/update-facet-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/facet", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/update-facet-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateFacet", :http.request.configuration/output-deser-fn response-update-facet-response, :http.request.spec/error-spec {"InvalidRuleException" :portkey.aws.clouddirectory.-2017-01-11/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2017-01-11/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef update-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/update-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/update-facet-response))

(clojure.core/defn list-applied-schema-arns ([list-applied-schema-arns-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-applied-schema-arns-request list-applied-schema-arns-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-applied-schema-arns-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/applied", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-applied-schema-arns-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListAppliedSchemaArns", :http.request.configuration/output-deser-fn response-list-applied-schema-arns-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception}})))))
(clojure.spec.alpha/fdef list-applied-schema-arns :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-applied-schema-arns-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-applied-schema-arns-response))

(clojure.core/defn create-directory ([create-directory-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-create-directory-request create-directory-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/create-directory-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/directory/create", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/create-directory-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDirectory", :http.request.configuration/output-deser-fn response-create-directory-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "DirectoryAlreadyExistsException" :portkey.aws.clouddirectory.-2017-01-11/directory-already-exists-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef create-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/create-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/create-directory-response))

(clojure.core/defn get-schema-as-json ([get-schema-as-json-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-schema-as-json-request get-schema-as-json-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-schema-as-json-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/json", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-schema-as-json-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetSchemaAsJson", :http.request.configuration/output-deser-fn response-get-schema-as-json-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef get-schema-as-json :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-schema-as-json-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-schema-as-json-response))

(clojure.core/defn list-attached-indices ([list-attached-indices-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-attached-indices-request list-attached-indices-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-attached-indices-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/indices", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-attached-indices-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListAttachedIndices", :http.request.configuration/output-deser-fn response-list-attached-indices-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef list-attached-indices :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-attached-indices-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-attached-indices-response))

(clojure.core/defn attach-policy ([attach-policy-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-attach-policy-request attach-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/attach-policy-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/policy/attach", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/attach-policy-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachPolicy", :http.request.configuration/output-deser-fn response-attach-policy-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2017-01-11/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef attach-policy :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/attach-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/attach-policy-response))

(clojure.core/defn get-typed-link-facet-information ([get-typed-link-facet-information-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-typed-link-facet-information-request get-typed-link-facet-information-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-typed-link-facet-information-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/facet/get", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-typed-link-facet-information-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetTypedLinkFacetInformation", :http.request.configuration/output-deser-fn response-get-typed-link-facet-information-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef get-typed-link-facet-information :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-typed-link-facet-information-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-typed-link-facet-information-response))

(clojure.core/defn lookup-policy ([lookup-policy-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-lookup-policy-request lookup-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/lookup-policy-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/policy/lookup", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/lookup-policy-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "LookupPolicy", :http.request.configuration/output-deser-fn response-lookup-policy-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef lookup-policy :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/lookup-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/lookup-policy-response))

(clojure.core/defn get-directory ([get-directory-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-get-directory-request get-directory-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/get-directory-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/directory/get", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/get-directory-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDirectory", :http.request.configuration/output-deser-fn response-get-directory-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception}})))))
(clojure.spec.alpha/fdef get-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/get-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/get-directory-response))

(clojure.core/defn list-managed-schema-arns ([] (list-managed-schema-arns {})) ([list-managed-schema-arns-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-managed-schema-arns-request list-managed-schema-arns-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-managed-schema-arns-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/managed", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-managed-schema-arns-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListManagedSchemaArns", :http.request.configuration/output-deser-fn response-list-managed-schema-arns-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception}})))))
(clojure.spec.alpha/fdef list-managed-schema-arns :args (clojure.spec.alpha/? :portkey.aws.clouddirectory.-2017-01-11/list-managed-schema-arns-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-managed-schema-arns-response))

(clojure.core/defn list-published-schema-arns ([] (list-published-schema-arns {})) ([list-published-schema-arns-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-published-schema-arns-request list-published-schema-arns-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-published-schema-arns-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/schema/published", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-published-schema-arns-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListPublishedSchemaArns", :http.request.configuration/output-deser-fn response-list-published-schema-arns-response, :http.request.spec/error-spec {"InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception}})))))
(clojure.spec.alpha/fdef list-published-schema-arns :args (clojure.spec.alpha/? :portkey.aws.clouddirectory.-2017-01-11/list-published-schema-arns-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-published-schema-arns-response))

(clojure.core/defn list-typed-link-facet-attributes ([list-typed-link-facet-attributes-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-list-typed-link-facet-attributes-request list-typed-link-facet-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-attributes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-attributes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListTypedLinkFacetAttributes", :http.request.configuration/output-deser-fn response-list-typed-link-facet-attributes-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2017-01-11/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef list-typed-link-facet-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/list-typed-link-facet-attributes-response))

(clojure.core/defn enable-directory ([enable-directory-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-enable-directory-request enable-directory-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/enable-directory-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/directory/enable", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/enable-directory-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "EnableDirectory", :http.request.configuration/output-deser-fn response-enable-directory-response, :http.request.spec/error-spec {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2017-01-11/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception}})))))
(clojure.spec.alpha/fdef enable-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/enable-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/enable-directory-response))

(clojure.core/defn delete-facet ([delete-facet-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-delete-facet-request delete-facet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/delete-facet-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/facet/delete", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/delete-facet-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteFacet", :http.request.configuration/output-deser-fn response-delete-facet-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "FacetInUseException" :portkey.aws.clouddirectory.-2017-01-11/facet-in-use-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef delete-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/delete-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/delete-facet-response))

(clojure.core/defn remove-facet-from-object ([remove-facet-from-object-requestinput] (clojure.core/let [request-function-result__1013884__auto__ (req-remove-facet-from-object-request remove-facet-from-object-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1013884__auto__ {:http.request.configuration/endpoints portkey.aws.clouddirectory.-2017-01-11/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.clouddirectory.-2017-01-11/remove-facet-from-object-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/amazonclouddirectory/2017-01-11/object/facets/delete", :http.request.configuration/version "2017-01-11", :http.request.configuration/service-id "CloudDirectory", :http.request.spec/input-spec :portkey.aws.clouddirectory.-2017-01-11/remove-facet-from-object-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveFacetFromObject", :http.request.configuration/output-deser-fn response-remove-facet-from-object-response, :http.request.spec/error-spec {"ValidationException" :portkey.aws.clouddirectory.-2017-01-11/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2017-01-11/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2017-01-11/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2017-01-11/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2017-01-11/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2017-01-11/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2017-01-11/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2017-01-11/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2017-01-11/internal-service-exception}})))))
(clojure.spec.alpha/fdef remove-facet-from-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2017-01-11/remove-facet-from-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2017-01-11/remove-facet-from-object-response))
