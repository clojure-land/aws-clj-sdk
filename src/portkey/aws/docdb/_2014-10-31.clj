(ns portkey.aws.docdb.-2014-10-31 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "rds", :region "us-gov-east-1"},
    :ssl-common-name "rds.us-gov-east-1.amazonaws.com",
    :endpoint "https://rds.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "rds", :region "eu-north-1"},
    :ssl-common-name "rds.eu-north-1.amazonaws.com",
    :endpoint "https://rds.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-filter-value-list)

(clojure.core/declare ser-parameters-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-string)

(clojure.core/declare ser-parameter)

(clojure.core/declare ser-vpc-security-group-id-list)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-event-categories-list)

(clojure.core/declare ser-apply-method)

(clojure.core/declare ser-cloudwatch-logs-export-configuration)

(clojure.core/declare ser-log-type-list)

(clojure.core/declare ser-attribute-value-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-availability-zones)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-filter-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Value"}))) input), :shape "FilterValueList", :type "list"})

(clojure.core/defn- ser-parameters-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter coll) #:http.request.field{:shape "Parameter", :location-name "Parameter"}))) input), :shape "ParametersList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-filter-value-list (:values input)) #:http.request.field{:name "Values", :shape "FilterValueList"})], :shape "Filter", :type "structure"}))

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:dbcluster "db-cluster", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :dbsecuritygroup "db-security-group", :dbclustersnapshot "db-cluster-snapshot", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :dbparametergroup "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :dbsnapshot "db-snapshot", :dbinstance "db-instance"} input), :shape "SourceType"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-parameter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Parameter", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :minimum-engine-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :minimum-engine-version)) #:http.request.field{:name "MinimumEngineVersion", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :apply-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-apply-method (input :apply-method)) #:http.request.field{:name "ApplyMethod", :shape "ApplyMethod"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-vpc-security-group-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcSecurityGroupId"}))) input), :shape "VpcSecurityGroupIdList", :type "list"})

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-event-categories-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "EventCategory"}))) input), :shape "EventCategoriesList", :type "list"})

(clojure.core/defn- ser-apply-method [input] #:http.request.field{:value (clojure.core/get {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pendingreboot "pending-reboot"} input), :shape "ApplyMethod"})

(clojure.core/defn- ser-cloudwatch-logs-export-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudwatchLogsExportConfiguration", :type "structure"} (clojure.core/contains? input :enable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-log-types)) #:http.request.field{:name "EnableLogTypes", :shape "LogTypeList"})) (clojure.core/contains? input :disable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :disable-log-types)) #:http.request.field{:name "DisableLogTypes", :shape "LogTypeList"}))))

(clojure.core/defn- ser-log-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "LogTypeList", :type "list"})

(clojure.core/defn- ser-attribute-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AttributeValue"}))) input), :shape "AttributeValueList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-availability-zones [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZones", :type "list"})

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-db-cluster-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"}))))

(clojure.core/defn- req-copy-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-snapshot-identifier)) #:http.request.field{:name "SourceDBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-snapshot-identifier)) #:http.request.field{:name "TargetDBClusterSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-copy-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-parameter-group-identifier)) #:http.request.field{:name "SourceDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-identifier)) #:http.request.field{:name "TargetDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-description)) #:http.request.field{:name "TargetDBClusterParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-describe-db-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :list-supported-character-sets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-character-sets)) #:http.request.field{:name "ListSupportedCharacterSets", :shape "BooleanOptional"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :list-supported-timezones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-timezones)) #:http.request.field{:name "ListSupportedTimezones", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}))))

(clojure.core/defn- req-describe-db-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-restore-db-cluster-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :restore-to-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-to-time)) #:http.request.field{:name "RestoreToTime", :shape "TStamp"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :snapshot-identifier)) #:http.request.field{:name "SnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"}))))

(clojure.core/defn- req-modify-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :db-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}))))

(clojure.core/defn- req-create-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"}))))

(clojure.core/defn- req-delete-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-delete-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-apply-pending-maintenance-action-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :apply-action)) #:http.request.field{:name "ApplyAction", :shape "String"}) (clojure.core/into (ser-string (input :opt-in-type)) #:http.request.field{:name "OptInType", :shape "String"})]}))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-pending-maintenance-actions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"}))))

(clojure.core/defn- req-describe-engine-default-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-orderable-db-instance-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :vpc) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :vpc)) #:http.request.field{:name "Vpc", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :new-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-cluster-identifier)) #:http.request.field{:name "NewDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-reboot-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :force-failover) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force-failover)) #:http.request.field{:name "ForceFailover", :shape "BooleanOptional"}))))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-modify-db-cluster-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-describe-db-cluster-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-event-categories-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-failover-db-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :target-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-instance-identifier)) #:http.request.field{:name "NewDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"}))))

(clojure.core/declare deser-vpc-security-group-membership-list)

(clojure.core/declare deser-pending-maintenance-action)

(clojure.core/declare deser-parameters-list)

(clojure.core/declare deser-db-cluster-role)

(clojure.core/declare deser-pending-maintenance-action-details)

(clojure.core/declare deser-pending-maintenance-actions)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-db-cluster-snapshot)

(clojure.core/declare deser-pending-cloudwatch-logs-exports)

(clojure.core/declare deser-db-cluster-list)

(clojure.core/declare deser-db-engine-version-list)

(clojure.core/declare deser-db-cluster-member)

(clojure.core/declare deser-resource-pending-maintenance-actions)

(clojure.core/declare deser-db-cluster)

(clojure.core/declare deser-db-instance-status-info)

(clojure.core/declare deser-event-list)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-orderable-db-instance-options-list)

(clojure.core/declare deser-event)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-db-cluster-parameter-group-list)

(clojure.core/declare deser-db-cluster-member-list)

(clojure.core/declare deser-valid-upgrade-target-list)

(clojure.core/declare deser-db-cluster-roles)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-db-cluster-snapshot-list)

(clojure.core/declare deser-db-engine-version)

(clojure.core/declare deser-vpc-security-group-membership)

(clojure.core/declare deser-db-cluster-snapshot-attribute-list)

(clojure.core/declare deser-event-categories-map-list)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-db-cluster-snapshot-attribute)

(clojure.core/declare deser-parameter)

(clojure.core/declare deser-db-cluster-snapshot-attributes-result)

(clojure.core/declare deser-db-instance)

(clojure.core/declare deser-t-stamp)

(clojure.core/declare deser-event-categories-map)

(clojure.core/declare deser-event-categories-list)

(clojure.core/declare deser-db-cluster-parameter-group)

(clojure.core/declare deser-apply-method)

(clojure.core/declare deser-endpoint)

(clojure.core/declare deser-log-type-list)

(clojure.core/declare deser-upgrade-target)

(clojure.core/declare deser-attribute-value-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-boolean-optional)

(clojure.core/declare deser-db-instance-list)

(clojure.core/declare deser-engine-defaults)

(clojure.core/declare deser-availability-zones)

(clojure.core/declare deser-db-subnet-groups)

(clojure.core/declare deser-integer-optional)

(clojure.core/declare deser-db-instance-status-info-list)

(clojure.core/declare deser-orderable-db-instance-option)

(clojure.core/declare deser-pending-modified-values)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-db-subnet-group)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-vpc-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-security-group-membership coll))) input))

(clojure.core/defn- deser-pending-maintenance-action [input] (clojure.core/let [letvar561818 {"Action" (portkey.aws/search-for-tag input "Action" :flattened? nil :xmlAttribute? nil), "AutoAppliedAfterDate" (portkey.aws/search-for-tag input "AutoAppliedAfterDate" :flattened? nil :xmlAttribute? nil), "ForcedApplyDate" (portkey.aws/search-for-tag input "ForcedApplyDate" :flattened? nil :xmlAttribute? nil), "OptInStatus" (portkey.aws/search-for-tag input "OptInStatus" :flattened? nil :xmlAttribute? nil), "CurrentApplyDate" (portkey.aws/search-for-tag input "CurrentApplyDate" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar561818 "Action") (clojure.core/assoc :action (deser-string (clojure.core/get-in letvar561818 ["Action" :content]))) (letvar561818 "AutoAppliedAfterDate") (clojure.core/assoc :auto-applied-after-date (deser-t-stamp (clojure.core/get-in letvar561818 ["AutoAppliedAfterDate" :content]))) (letvar561818 "ForcedApplyDate") (clojure.core/assoc :forced-apply-date (deser-t-stamp (clojure.core/get-in letvar561818 ["ForcedApplyDate" :content]))) (letvar561818 "OptInStatus") (clojure.core/assoc :opt-in-status (deser-string (clojure.core/get-in letvar561818 ["OptInStatus" :content]))) (letvar561818 "CurrentApplyDate") (clojure.core/assoc :current-apply-date (deser-t-stamp (clojure.core/get-in letvar561818 ["CurrentApplyDate" :content]))) (letvar561818 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar561818 ["Description" :content]))))))

(clojure.core/defn- deser-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter coll))) input))

(clojure.core/defn- deser-db-cluster-role [input] (clojure.core/let [letvar561943 {"RoleArn" (portkey.aws/search-for-tag input "RoleArn" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar561943 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar561943 ["RoleArn" :content]))) (letvar561943 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar561943 ["Status" :content]))))))

(clojure.core/defn- deser-pending-maintenance-action-details [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-pending-maintenance-action coll))) input))

(clojure.core/defn- deser-pending-maintenance-actions [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-resource-pending-maintenance-actions coll))) input))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar562085 {"SubnetIdentifier" (portkey.aws/search-for-tag input "SubnetIdentifier" :flattened? nil :xmlAttribute? nil), "SubnetAvailabilityZone" (portkey.aws/search-for-tag input "SubnetAvailabilityZone" :flattened? nil :xmlAttribute? nil), "SubnetStatus" (portkey.aws/search-for-tag input "SubnetStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562085 "SubnetIdentifier") (clojure.core/assoc :subnet-identifier (deser-string (clojure.core/get-in letvar562085 ["SubnetIdentifier" :content]))) (letvar562085 "SubnetAvailabilityZone") (clojure.core/assoc :subnet-availability-zone (deser-availability-zone (clojure.core/get-in letvar562085 ["SubnetAvailabilityZone" :content]))) (letvar562085 "SubnetStatus") (clojure.core/assoc :subnet-status (deser-string (clojure.core/get-in letvar562085 ["SubnetStatus" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot [input] (clojure.core/let [letvar562193 {"SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnapshotType" (portkey.aws/search-for-tag input "SnapshotType" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "SourceDBClusterSnapshotArn" (portkey.aws/search-for-tag input "SourceDBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotArn" (portkey.aws/search-for-tag input "DBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562193 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar562193 ["SnapshotCreateTime" :content]))) (letvar562193 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar562193 ["DBClusterSnapshotIdentifier" :content]))) (letvar562193 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar562193 ["Status" :content]))) (letvar562193 "SnapshotType") (clojure.core/assoc :snapshot-type (deser-string (clojure.core/get-in letvar562193 ["SnapshotType" :content]))) (letvar562193 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar562193 ["MasterUsername" :content]))) (letvar562193 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar562193 ["EngineVersion" :content]))) (letvar562193 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar562193 ["StorageEncrypted" :content]))) (letvar562193 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar562193 ["Port" :content]))) (letvar562193 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar562193 ["VpcId" :content]))) (letvar562193 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar562193 ["KmsKeyId" :content]))) (letvar562193 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar562193 ["ClusterCreateTime" :content]))) (letvar562193 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar562193 ["Engine" :content]))) (letvar562193 "SourceDBClusterSnapshotArn") (clojure.core/assoc :source-db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar562193 ["SourceDBClusterSnapshotArn" :content]))) (letvar562193 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar562193 ["AvailabilityZones" :content]))) (letvar562193 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar562193 ["DBClusterIdentifier" :content]))) (letvar562193 "DBClusterSnapshotArn") (clojure.core/assoc :db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar562193 ["DBClusterSnapshotArn" :content]))) (letvar562193 "PercentProgress") (clojure.core/assoc :percent-progress (deser-integer (clojure.core/get-in letvar562193 ["PercentProgress" :content]))))))

(clojure.core/defn- deser-pending-cloudwatch-logs-exports [input] (clojure.core/let [letvar562301 {"LogTypesToEnable" (portkey.aws/search-for-tag input "LogTypesToEnable" :flattened? nil :xmlAttribute? nil), "LogTypesToDisable" (portkey.aws/search-for-tag input "LogTypesToDisable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562301 "LogTypesToEnable") (clojure.core/assoc :log-types-to-enable (deser-log-type-list (clojure.core/get-in letvar562301 ["LogTypesToEnable" :content]))) (letvar562301 "LogTypesToDisable") (clojure.core/assoc :log-types-to-disable (deser-log-type-list (clojure.core/get-in letvar562301 ["LogTypesToDisable" :content]))))))

(clojure.core/defn- deser-db-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster coll))) input))

(clojure.core/defn- deser-db-engine-version-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-engine-version coll))) input))

(clojure.core/defn- deser-db-cluster-member [input] (clojure.core/let [letvar562443 {"DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "IsClusterWriter" (portkey.aws/search-for-tag input "IsClusterWriter" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupStatus" (portkey.aws/search-for-tag input "DBClusterParameterGroupStatus" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562443 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar562443 ["DBInstanceIdentifier" :content]))) (letvar562443 "IsClusterWriter") (clojure.core/assoc :is-cluster-writer (deser-boolean (clojure.core/get-in letvar562443 ["IsClusterWriter" :content]))) (letvar562443 "DBClusterParameterGroupStatus") (clojure.core/assoc :db-cluster-parameter-group-status (deser-string (clojure.core/get-in letvar562443 ["DBClusterParameterGroupStatus" :content]))) (letvar562443 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar562443 ["PromotionTier" :content]))))))

(clojure.core/defn- deser-resource-pending-maintenance-actions [input] (clojure.core/let [letvar562551 {"ResourceIdentifier" (portkey.aws/search-for-tag input "ResourceIdentifier" :flattened? nil :xmlAttribute? nil), "PendingMaintenanceActionDetails" (portkey.aws/search-for-tag input "PendingMaintenanceActionDetails" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562551 "ResourceIdentifier") (clojure.core/assoc :resource-identifier (deser-string (clojure.core/get-in letvar562551 ["ResourceIdentifier" :content]))) (letvar562551 "PendingMaintenanceActionDetails") (clojure.core/assoc :pending-maintenance-action-details (deser-pending-maintenance-action-details (clojure.core/get-in letvar562551 ["PendingMaintenanceActionDetails" :content]))))))

(clojure.core/defn- deser-db-cluster [input] (clojure.core/let [letvar562659 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "EarliestRestorableTime" (portkey.aws/search-for-tag input "EarliestRestorableTime" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "EnabledCloudwatchLogsExports" (portkey.aws/search-for-tag input "EnabledCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "DbClusterResourceId" (portkey.aws/search-for-tag input "DbClusterResourceId" :flattened? nil :xmlAttribute? nil), "DBClusterMembers" (portkey.aws/search-for-tag input "DBClusterMembers" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroup" (portkey.aws/search-for-tag input "DBClusterParameterGroup" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "DBClusterArn" (portkey.aws/search-for-tag input "DBClusterArn" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "ReaderEndpoint" (portkey.aws/search-for-tag input "ReaderEndpoint" :flattened? nil :xmlAttribute? nil), "AssociatedRoles" (portkey.aws/search-for-tag input "AssociatedRoles" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562659 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar562659 ["BackupRetentionPeriod" :content]))) (letvar562659 "EarliestRestorableTime") (clojure.core/assoc :earliest-restorable-time (deser-t-stamp (clojure.core/get-in letvar562659 ["EarliestRestorableTime" :content]))) (letvar562659 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar562659 ["PreferredMaintenanceWindow" :content]))) (letvar562659 "EnabledCloudwatchLogsExports") (clojure.core/assoc :enabled-cloudwatch-logs-exports (deser-log-type-list (clojure.core/get-in letvar562659 ["EnabledCloudwatchLogsExports" :content]))) (letvar562659 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar562659 ["Status" :content]))) (letvar562659 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar562659 ["MasterUsername" :content]))) (letvar562659 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar562659 ["EngineVersion" :content]))) (letvar562659 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar562659 ["HostedZoneId" :content]))) (letvar562659 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar562659 ["StorageEncrypted" :content]))) (letvar562659 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar562659 ["Port" :content]))) (letvar562659 "DbClusterResourceId") (clojure.core/assoc :db-cluster-resource-id (deser-string (clojure.core/get-in letvar562659 ["DbClusterResourceId" :content]))) (letvar562659 "DBClusterMembers") (clojure.core/assoc :db-cluster-members (deser-db-cluster-member-list (clojure.core/get-in letvar562659 ["DBClusterMembers" :content]))) (letvar562659 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar562659 ["KmsKeyId" :content]))) (letvar562659 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar562659 ["ClusterCreateTime" :content]))) (letvar562659 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-string (clojure.core/get-in letvar562659 ["DBClusterParameterGroup" :content]))) (letvar562659 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar562659 ["Endpoint" :content]))) (letvar562659 "DBClusterArn") (clojure.core/assoc :db-cluster-arn (deser-string (clojure.core/get-in letvar562659 ["DBClusterArn" :content]))) (letvar562659 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar562659 ["VpcSecurityGroups" :content]))) (letvar562659 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar562659 ["Engine" :content]))) (letvar562659 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar562659 ["AvailabilityZones" :content]))) (letvar562659 "ReaderEndpoint") (clojure.core/assoc :reader-endpoint (deser-string (clojure.core/get-in letvar562659 ["ReaderEndpoint" :content]))) (letvar562659 "AssociatedRoles") (clojure.core/assoc :associated-roles (deser-db-cluster-roles (clojure.core/get-in letvar562659 ["AssociatedRoles" :content]))) (letvar562659 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar562659 ["MultiAZ" :content]))) (letvar562659 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar562659 ["DBClusterIdentifier" :content]))) (letvar562659 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar562659 ["PreferredBackupWindow" :content]))) (letvar562659 "PercentProgress") (clojure.core/assoc :percent-progress (deser-string (clojure.core/get-in letvar562659 ["PercentProgress" :content]))) (letvar562659 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar562659 ["LatestRestorableTime" :content]))) (letvar562659 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-string (clojure.core/get-in letvar562659 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-db-instance-status-info [input] (clojure.core/let [letvar562767 {"StatusType" (portkey.aws/search-for-tag input "StatusType" :flattened? nil :xmlAttribute? nil), "Normal" (portkey.aws/search-for-tag input "Normal" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562767 "StatusType") (clojure.core/assoc :status-type (deser-string (clojure.core/get-in letvar562767 ["StatusType" :content]))) (letvar562767 "Normal") (clojure.core/assoc :normal (deser-boolean (clojure.core/get-in letvar562767 ["Normal" :content]))) (letvar562767 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar562767 ["Status" :content]))) (letvar562767 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar562767 ["Message" :content]))))))

(clojure.core/defn- deser-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event coll))) input))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"db-instance" :dbinstance, "db-parameter-group" :dbparametergroup, "db-security-group" :dbsecuritygroup, "db-snapshot" :dbsnapshot, "db-cluster" :dbcluster, "db-cluster-snapshot" :dbclustersnapshot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-orderable-db-instance-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-orderable-db-instance-option coll))) input))

(clojure.core/defn- deser-event [input] (clojure.core/let [letvar562914 {"SourceIdentifier" (portkey.aws/search-for-tag input "SourceIdentifier" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil), "Date" (portkey.aws/search-for-tag input "Date" :flattened? nil :xmlAttribute? nil), "SourceArn" (portkey.aws/search-for-tag input "SourceArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar562914 "SourceIdentifier") (clojure.core/assoc :source-identifier (deser-string (clojure.core/get-in letvar562914 ["SourceIdentifier" :content]))) (letvar562914 "SourceType") (clojure.core/assoc :source-type (deser-source-type (clojure.core/get-in letvar562914 ["SourceType" :content]))) (letvar562914 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar562914 ["Message" :content]))) (letvar562914 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar562914 ["EventCategories" :content]))) (letvar562914 "Date") (clojure.core/assoc :date (deser-t-stamp (clojure.core/get-in letvar562914 ["Date" :content]))) (letvar562914 "SourceArn") (clojure.core/assoc :source-arn (deser-string (clojure.core/get-in letvar562914 ["SourceArn" :content]))))))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar563039 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563039 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar563039 ["Name" :content]))))))

(clojure.core/defn- deser-db-cluster-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-parameter-group coll))) input))

(clojure.core/defn- deser-db-cluster-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-member coll))) input))

(clojure.core/defn- deser-valid-upgrade-target-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-upgrade-target coll))) input))

(clojure.core/defn- deser-db-cluster-roles [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-role coll))) input))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-db-cluster-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot coll))) input))

(clojure.core/defn- deser-db-engine-version [input] (clojure.core/let [letvar563249 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "DBEngineDescription" (portkey.aws/search-for-tag input "DBEngineDescription" :flattened? nil :xmlAttribute? nil), "DBEngineVersionDescription" (portkey.aws/search-for-tag input "DBEngineVersionDescription" :flattened? nil :xmlAttribute? nil), "ValidUpgradeTarget" (portkey.aws/search-for-tag input "ValidUpgradeTarget" :flattened? nil :xmlAttribute? nil), "ExportableLogTypes" (portkey.aws/search-for-tag input "ExportableLogTypes" :flattened? nil :xmlAttribute? nil), "SupportsLogExportsToCloudwatchLogs" (portkey.aws/search-for-tag input "SupportsLogExportsToCloudwatchLogs" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563249 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar563249 ["Engine" :content]))) (letvar563249 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar563249 ["EngineVersion" :content]))) (letvar563249 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar563249 ["DBParameterGroupFamily" :content]))) (letvar563249 "DBEngineDescription") (clojure.core/assoc :db-engine-description (deser-string (clojure.core/get-in letvar563249 ["DBEngineDescription" :content]))) (letvar563249 "DBEngineVersionDescription") (clojure.core/assoc :db-engine-version-description (deser-string (clojure.core/get-in letvar563249 ["DBEngineVersionDescription" :content]))) (letvar563249 "ValidUpgradeTarget") (clojure.core/assoc :valid-upgrade-target (deser-valid-upgrade-target-list (clojure.core/get-in letvar563249 ["ValidUpgradeTarget" :content]))) (letvar563249 "ExportableLogTypes") (clojure.core/assoc :exportable-log-types (deser-log-type-list (clojure.core/get-in letvar563249 ["ExportableLogTypes" :content]))) (letvar563249 "SupportsLogExportsToCloudwatchLogs") (clojure.core/assoc :supports-log-exports-to-cloudwatch-logs (deser-boolean (clojure.core/get-in letvar563249 ["SupportsLogExportsToCloudwatchLogs" :content]))))))

(clojure.core/defn- deser-vpc-security-group-membership [input] (clojure.core/let [letvar563357 {"VpcSecurityGroupId" (portkey.aws/search-for-tag input "VpcSecurityGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563357 "VpcSecurityGroupId") (clojure.core/assoc :vpc-security-group-id (deser-string (clojure.core/get-in letvar563357 ["VpcSecurityGroupId" :content]))) (letvar563357 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar563357 ["Status" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot-attribute coll))) input))

(clojure.core/defn- deser-event-categories-map-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-categories-map coll))) input))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-cluster-snapshot-attribute [input] (clojure.core/let [letvar563506 {"AttributeName" (portkey.aws/search-for-tag input "AttributeName" :flattened? nil :xmlAttribute? nil), "AttributeValues" (portkey.aws/search-for-tag input "AttributeValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563506 "AttributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar563506 ["AttributeName" :content]))) (letvar563506 "AttributeValues") (clojure.core/assoc :attribute-values (deser-attribute-value-list (clojure.core/get-in letvar563506 ["AttributeValues" :content]))))))

(clojure.core/defn- deser-parameter [input] (clojure.core/let [letvar563614 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "ApplyMethod" (portkey.aws/search-for-tag input "ApplyMethod" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "ParameterValue" (portkey.aws/search-for-tag input "ParameterValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563614 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar563614 ["DataType" :content]))) (letvar563614 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar563614 ["ParameterName" :content]))) (letvar563614 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar563614 ["Source" :content]))) (letvar563614 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar563614 ["MinimumEngineVersion" :content]))) (letvar563614 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar563614 ["AllowedValues" :content]))) (letvar563614 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar563614 ["ApplyType" :content]))) (letvar563614 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar563614 ["Description" :content]))) (letvar563614 "ApplyMethod") (clojure.core/assoc :apply-method (deser-apply-method (clojure.core/get-in letvar563614 ["ApplyMethod" :content]))) (letvar563614 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar563614 ["IsModifiable" :content]))) (letvar563614 "ParameterValue") (clojure.core/assoc :parameter-value (deser-string (clojure.core/get-in letvar563614 ["ParameterValue" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-attributes-result [input] (clojure.core/let [letvar563722 {"DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotAttributes" (portkey.aws/search-for-tag input "DBClusterSnapshotAttributes" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563722 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar563722 ["DBClusterSnapshotIdentifier" :content]))) (letvar563722 "DBClusterSnapshotAttributes") (clojure.core/assoc :db-cluster-snapshot-attributes (deser-db-cluster-snapshot-attribute-list (clojure.core/get-in letvar563722 ["DBClusterSnapshotAttributes" :content]))))))

(clojure.core/defn- deser-db-instance [input] (clojure.core/let [letvar563830 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil), "PubliclyAccessible" (portkey.aws/search-for-tag input "PubliclyAccessible" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "EnabledCloudwatchLogsExports" (portkey.aws/search-for-tag input "EnabledCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "DBInstanceArn" (portkey.aws/search-for-tag input "DBInstanceArn" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "DBInstanceStatus" (portkey.aws/search-for-tag input "DBInstanceStatus" :flattened? nil :xmlAttribute? nil), "StatusInfos" (portkey.aws/search-for-tag input "StatusInfos" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563830 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer (clojure.core/get-in letvar563830 ["BackupRetentionPeriod" :content]))) (letvar563830 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar563830 ["PromotionTier" :content]))) (letvar563830 "PubliclyAccessible") (clojure.core/assoc :publicly-accessible (deser-boolean (clojure.core/get-in letvar563830 ["PubliclyAccessible" :content]))) (letvar563830 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar563830 ["PreferredMaintenanceWindow" :content]))) (letvar563830 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar563830 ["DBInstanceIdentifier" :content]))) (letvar563830 "EnabledCloudwatchLogsExports") (clojure.core/assoc :enabled-cloudwatch-logs-exports (deser-log-type-list (clojure.core/get-in letvar563830 ["EnabledCloudwatchLogsExports" :content]))) (letvar563830 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar563830 ["AutoMinorVersionUpgrade" :content]))) (letvar563830 "DBInstanceArn") (clojure.core/assoc :db-instance-arn (deser-string (clojure.core/get-in letvar563830 ["DBInstanceArn" :content]))) (letvar563830 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar563830 ["InstanceCreateTime" :content]))) (letvar563830 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar563830 ["AvailabilityZone" :content]))) (letvar563830 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar563830 ["EngineVersion" :content]))) (letvar563830 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar563830 ["StorageEncrypted" :content]))) (letvar563830 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar563830 ["KmsKeyId" :content]))) (letvar563830 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar563830 ["DbiResourceId" :content]))) (letvar563830 "Endpoint") (clojure.core/assoc :endpoint (deser-endpoint (clojure.core/get-in letvar563830 ["Endpoint" :content]))) (letvar563830 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar563830 ["DBInstanceClass" :content]))) (letvar563830 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar563830 ["VpcSecurityGroups" :content]))) (letvar563830 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar563830 ["Engine" :content]))) (letvar563830 "DBInstanceStatus") (clojure.core/assoc :db-instance-status (deser-string (clojure.core/get-in letvar563830 ["DBInstanceStatus" :content]))) (letvar563830 "StatusInfos") (clojure.core/assoc :status-infos (deser-db-instance-status-info-list (clojure.core/get-in letvar563830 ["StatusInfos" :content]))) (letvar563830 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar563830 ["DBClusterIdentifier" :content]))) (letvar563830 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar563830 ["PreferredBackupWindow" :content]))) (letvar563830 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-pending-modified-values (clojure.core/get-in letvar563830 ["PendingModifiedValues" :content]))) (letvar563830 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar563830 ["LatestRestorableTime" :content]))) (letvar563830 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar563830 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-t-stamp [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-event-categories-map [input] (clojure.core/let [letvar563940 {"SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar563940 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar563940 ["SourceType" :content]))) (letvar563940 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar563940 ["EventCategories" :content]))))))

(clojure.core/defn- deser-event-categories-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-cluster-parameter-group [input] (clojure.core/let [letvar564065 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag input "DBClusterParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupArn" (portkey.aws/search-for-tag input "DBClusterParameterGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564065 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar564065 ["DBClusterParameterGroupName" :content]))) (letvar564065 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar564065 ["DBParameterGroupFamily" :content]))) (letvar564065 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar564065 ["Description" :content]))) (letvar564065 "DBClusterParameterGroupArn") (clojure.core/assoc :db-cluster-parameter-group-arn (deser-string (clojure.core/get-in letvar564065 ["DBClusterParameterGroupArn" :content]))))))

(clojure.core/defn- deser-apply-method [input] (clojure.core/get {"immediate" :immediate, "pending-reboot" :pendingreboot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-endpoint [input] (clojure.core/let [letvar564178 {"Address" (portkey.aws/search-for-tag input "Address" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564178 "Address") (clojure.core/assoc :address (deser-string (clojure.core/get-in letvar564178 ["Address" :content]))) (letvar564178 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar564178 ["Port" :content]))) (letvar564178 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar564178 ["HostedZoneId" :content]))))))

(clojure.core/defn- deser-log-type-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-upgrade-target [input] (clojure.core/let [letvar564303 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "AutoUpgrade" (portkey.aws/search-for-tag input "AutoUpgrade" :flattened? nil :xmlAttribute? nil), "IsMajorVersionUpgrade" (portkey.aws/search-for-tag input "IsMajorVersionUpgrade" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564303 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar564303 ["Engine" :content]))) (letvar564303 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar564303 ["EngineVersion" :content]))) (letvar564303 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar564303 ["Description" :content]))) (letvar564303 "AutoUpgrade") (clojure.core/assoc :auto-upgrade (deser-boolean (clojure.core/get-in letvar564303 ["AutoUpgrade" :content]))) (letvar564303 "IsMajorVersionUpgrade") (clojure.core/assoc :is-major-version-upgrade (deser-boolean (clojure.core/get-in letvar564303 ["IsMajorVersionUpgrade" :content]))))))

(clojure.core/defn- deser-attribute-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar564428 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564428 "Key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar564428 ["Key" :content]))) (letvar564428 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar564428 ["Value" :content]))))))

(clojure.core/defn- deser-boolean-optional [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- deser-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance coll))) input))

(clojure.core/defn- deser-engine-defaults [input] (clojure.core/let [letvar564555 {"DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Marker" (portkey.aws/search-for-tag input "Marker" :flattened? nil :xmlAttribute? nil), "Parameters" (portkey.aws/search-for-tag input "Parameters" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564555 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar564555 ["DBParameterGroupFamily" :content]))) (letvar564555 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar564555 ["Marker" :content]))) (letvar564555 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar564555 ["Parameters" :content]))))))

(clojure.core/defn- deser-availability-zones [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-subnet-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-subnet-group coll))) input))

(clojure.core/defn- deser-integer-optional [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-db-instance-status-info-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-status-info coll))) input))

(clojure.core/defn- deser-orderable-db-instance-option [input] (clojure.core/let [letvar564716 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "Vpc" (portkey.aws/search-for-tag input "Vpc" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564716 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar564716 ["Engine" :content]))) (letvar564716 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar564716 ["EngineVersion" :content]))) (letvar564716 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar564716 ["DBInstanceClass" :content]))) (letvar564716 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar564716 ["LicenseModel" :content]))) (letvar564716 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar564716 ["AvailabilityZones" :content]))) (letvar564716 "Vpc") (clojure.core/assoc :vpc (deser-boolean (clojure.core/get-in letvar564716 ["Vpc" :content]))))))

(clojure.core/defn- deser-pending-modified-values [input] (clojure.core/let [letvar564824 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "PendingCloudwatchLogsExports" (portkey.aws/search-for-tag input "PendingCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "MasterUserPassword" (portkey.aws/search-for-tag input "MasterUserPassword" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "CACertificateIdentifier" (portkey.aws/search-for-tag input "CACertificateIdentifier" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564824 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar564824 ["BackupRetentionPeriod" :content]))) (letvar564824 "PendingCloudwatchLogsExports") (clojure.core/assoc :pending-cloudwatch-logs-exports (deser-pending-cloudwatch-logs-exports (clojure.core/get-in letvar564824 ["PendingCloudwatchLogsExports" :content]))) (letvar564824 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar564824 ["DBInstanceIdentifier" :content]))) (letvar564824 "MasterUserPassword") (clojure.core/assoc :master-user-password (deser-string (clojure.core/get-in letvar564824 ["MasterUserPassword" :content]))) (letvar564824 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar564824 ["LicenseModel" :content]))) (letvar564824 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar564824 ["AllocatedStorage" :content]))) (letvar564824 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar564824 ["EngineVersion" :content]))) (letvar564824 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar564824 ["DBSubnetGroupName" :content]))) (letvar564824 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar564824 ["Port" :content]))) (letvar564824 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar564824 ["Iops" :content]))) (letvar564824 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar564824 ["StorageType" :content]))) (letvar564824 "CACertificateIdentifier") (clojure.core/assoc :ca-certificate-identifier (deser-string (clojure.core/get-in letvar564824 ["CACertificateIdentifier" :content]))) (letvar564824 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar564824 ["DBInstanceClass" :content]))) (letvar564824 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean-optional (clojure.core/get-in letvar564824 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-db-subnet-group [input] (clojure.core/let [letvar564949 {"DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupDescription" (portkey.aws/search-for-tag input "DBSubnetGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "SubnetGroupStatus" (portkey.aws/search-for-tag input "SubnetGroupStatus" :flattened? nil :xmlAttribute? nil), "Subnets" (portkey.aws/search-for-tag input "Subnets" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupArn" (portkey.aws/search-for-tag input "DBSubnetGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar564949 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar564949 ["DBSubnetGroupName" :content]))) (letvar564949 "DBSubnetGroupDescription") (clojure.core/assoc :db-subnet-group-description (deser-string (clojure.core/get-in letvar564949 ["DBSubnetGroupDescription" :content]))) (letvar564949 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar564949 ["VpcId" :content]))) (letvar564949 "SubnetGroupStatus") (clojure.core/assoc :subnet-group-status (deser-string (clojure.core/get-in letvar564949 ["SubnetGroupStatus" :content]))) (letvar564949 "Subnets") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar564949 ["Subnets" :content]))) (letvar564949 "DBSubnetGroupArn") (clojure.core/assoc :db-subnet-group-arn (deser-string (clojure.core/get-in letvar564949 ["DBSubnetGroupArn" :content]))))))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- response-restore-db-cluster-to-point-in-time-result ([input] (response-restore-db-cluster-to-point-in-time-result nil input)) ([resultWrapper564953 input] (clojure.core/let [rawinput564952 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564954 {"DBCluster" (portkey.aws/search-for-tag rawinput564952 "DBCluster" :flattened? nil :result-wrapper resultWrapper564953)}] (clojure.core/cond-> {} (letvar564954 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar564954 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-instance-not-found-fault ([input] (response-db-instance-not-found-fault nil input)) ([resultWrapper564956 input] (clojure.core/let [rawinput564955 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564957 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-snapshot-quota-exceeded-fault ([input] (response-snapshot-quota-exceeded-fault nil input)) ([resultWrapper564959 input] (clojure.core/let [rawinput564958 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564960 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-snapshot-already-exists-fault ([input] (response-db-snapshot-already-exists-fault nil input)) ([resultWrapper564962 input] (clojure.core/let [rawinput564961 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564963 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-already-exists-fault ([input] (response-db-cluster-already-exists-fault nil input)) ([resultWrapper564965 input] (clojure.core/let [rawinput564964 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564966 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-result ([input] (response-create-db-cluster-result nil input)) ([resultWrapper564968 input] (clojure.core/let [rawinput564967 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564969 {"DBCluster" (portkey.aws/search-for-tag rawinput564967 "DBCluster" :flattened? nil :result-wrapper resultWrapper564968)}] (clojure.core/cond-> {} (letvar564969 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar564969 ["DBCluster" :content])))))))

(clojure.core/defn- response-invalid-db-instance-state-fault ([input] (response-invalid-db-instance-state-fault nil input)) ([resultWrapper564971 input] (clojure.core/let [rawinput564970 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564972 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reboot-db-instance-result ([input] (response-reboot-db-instance-result nil input)) ([resultWrapper564974 input] (clojure.core/let [rawinput564973 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564975 {"DBInstance" (portkey.aws/search-for-tag rawinput564973 "DBInstance" :flattened? nil :result-wrapper resultWrapper564974)}] (clojure.core/cond-> {} (letvar564975 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar564975 ["DBInstance" :content])))))))

(clojure.core/defn- response-instance-quota-exceeded-fault ([input] (response-instance-quota-exceeded-fault nil input)) ([resultWrapper564977 input] (clojure.core/let [rawinput564976 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564978 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-apply-pending-maintenance-action-result ([input] (response-apply-pending-maintenance-action-result nil input)) ([resultWrapper564980 input] (clojure.core/let [rawinput564979 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564981 {"ResourcePendingMaintenanceActions" (portkey.aws/search-for-tag rawinput564979 "ResourcePendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper564980)}] (clojure.core/cond-> {} (letvar564981 "ResourcePendingMaintenanceActions") (clojure.core/assoc :resource-pending-maintenance-actions (deser-resource-pending-maintenance-actions (clojure.core/get-in letvar564981 ["ResourcePendingMaintenanceActions" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-name-message ([input] (response-db-cluster-parameter-group-name-message nil input)) ([resultWrapper564983 input] (clojure.core/let [rawinput564982 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564984 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag rawinput564982 "DBClusterParameterGroupName" :flattened? nil :result-wrapper resultWrapper564983)}] (clojure.core/cond-> {} (letvar564984 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar564984 ["DBClusterParameterGroupName" :content])))))))

(clojure.core/defn- response-restore-db-cluster-from-snapshot-result ([input] (response-restore-db-cluster-from-snapshot-result nil input)) ([resultWrapper564986 input] (clojure.core/let [rawinput564985 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564987 {"DBCluster" (portkey.aws/search-for-tag rawinput564985 "DBCluster" :flattened? nil :result-wrapper resultWrapper564986)}] (clojure.core/cond-> {} (letvar564987 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar564987 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-subnet-group-message ([input] (response-db-subnet-group-message nil input)) ([resultWrapper564989 input] (clojure.core/let [rawinput564988 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564990 {"Marker" (portkey.aws/search-for-tag rawinput564988 "Marker" :flattened? nil :result-wrapper resultWrapper564989), "DBSubnetGroups" (portkey.aws/search-for-tag rawinput564988 "DBSubnetGroups" :flattened? nil :result-wrapper resultWrapper564989)}] (clojure.core/cond-> {} (letvar564990 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar564990 ["Marker" :content]))) (letvar564990 "DBSubnetGroups") (clojure.core/assoc :db-subnet-groups (deser-db-subnet-groups (clojure.core/get-in letvar564990 ["DBSubnetGroups" :content])))))))

(clojure.core/defn- response-invalid-vpc-network-state-fault ([input] (response-invalid-vpc-network-state-fault nil input)) ([resultWrapper564992 input] (clojure.core/let [rawinput564991 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564993 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-already-exists-fault ([input] (response-db-instance-already-exists-fault nil input)) ([resultWrapper564995 input] (clojure.core/let [rawinput564994 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564996 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-shared-snapshot-quota-exceeded-fault ([input] (response-shared-snapshot-quota-exceeded-fault nil input)) ([resultWrapper564998 input] (clojure.core/let [rawinput564997 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar564999 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-certificate-not-found-fault ([input] (response-certificate-not-found-fault nil input)) ([resultWrapper565001 input] (clojure.core/let [rawinput565000 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565002 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-cluster-snapshot-result ([input] (response-delete-db-cluster-snapshot-result nil input)) ([resultWrapper565004 input] (clojure.core/let [rawinput565003 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565005 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput565003 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper565004)}] (clojure.core/cond-> {} (letvar565005 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar565005 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-copy-db-cluster-snapshot-result ([input] (response-copy-db-cluster-snapshot-result nil input)) ([resultWrapper565007 input] (clojure.core/let [rawinput565006 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565008 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput565006 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper565007)}] (clojure.core/cond-> {} (letvar565008 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar565008 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-orderable-db-instance-options-message ([input] (response-orderable-db-instance-options-message nil input)) ([resultWrapper565010 input] (clojure.core/let [rawinput565009 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565011 {"OrderableDBInstanceOptions" (portkey.aws/search-for-tag rawinput565009 "OrderableDBInstanceOptions" :flattened? nil :result-wrapper resultWrapper565010), "Marker" (portkey.aws/search-for-tag rawinput565009 "Marker" :flattened? nil :result-wrapper resultWrapper565010)}] (clojure.core/cond-> {} (letvar565011 "OrderableDBInstanceOptions") (clojure.core/assoc :orderable-db-instance-options (deser-orderable-db-instance-options-list (clojure.core/get-in letvar565011 ["OrderableDBInstanceOptions" :content]))) (letvar565011 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565011 ["Marker" :content])))))))

(clojure.core/defn- response-event-categories-message ([input] (response-event-categories-message nil input)) ([resultWrapper565013 input] (clojure.core/let [rawinput565012 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565014 {"EventCategoriesMapList" (portkey.aws/search-for-tag rawinput565012 "EventCategoriesMapList" :flattened? nil :result-wrapper resultWrapper565013)}] (clojure.core/cond-> {} (letvar565014 "EventCategoriesMapList") (clojure.core/assoc :event-categories-map-list (deser-event-categories-map-list (clojure.core/get-in letvar565014 ["EventCategoriesMapList" :content])))))))

(clojure.core/defn- response-invalid-db-subnet-group-state-fault ([input] (response-invalid-db-subnet-group-state-fault nil input)) ([resultWrapper565016 input] (clojure.core/let [rawinput565015 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565017 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-not-found-fault ([input] (response-db-cluster-not-found-fault nil input)) ([resultWrapper565019 input] (clojure.core/let [rawinput565018 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565020 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-events-message ([input] (response-events-message nil input)) ([resultWrapper565022 input] (clojure.core/let [rawinput565021 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565023 {"Marker" (portkey.aws/search-for-tag rawinput565021 "Marker" :flattened? nil :result-wrapper resultWrapper565022), "Events" (portkey.aws/search-for-tag rawinput565021 "Events" :flattened? nil :result-wrapper resultWrapper565022)}] (clojure.core/cond-> {} (letvar565023 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565023 ["Marker" :content]))) (letvar565023 "Events") (clojure.core/assoc :events (deser-event-list (clojure.core/get-in letvar565023 ["Events" :content])))))))

(clojure.core/defn- response-db-cluster-snapshot-message ([input] (response-db-cluster-snapshot-message nil input)) ([resultWrapper565025 input] (clojure.core/let [rawinput565024 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565026 {"Marker" (portkey.aws/search-for-tag rawinput565024 "Marker" :flattened? nil :result-wrapper resultWrapper565025), "DBClusterSnapshots" (portkey.aws/search-for-tag rawinput565024 "DBClusterSnapshots" :flattened? nil :result-wrapper resultWrapper565025)}] (clojure.core/cond-> {} (letvar565026 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565026 ["Marker" :content]))) (letvar565026 "DBClusterSnapshots") (clojure.core/assoc :db-cluster-snapshots (deser-db-cluster-snapshot-list (clojure.core/get-in letvar565026 ["DBClusterSnapshots" :content])))))))

(clojure.core/defn- response-create-db-subnet-group-result ([input] (response-create-db-subnet-group-result nil input)) ([resultWrapper565028 input] (clojure.core/let [rawinput565027 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565029 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput565027 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper565028)}] (clojure.core/cond-> {} (letvar565029 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar565029 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-details ([input] (response-db-cluster-parameter-group-details nil input)) ([resultWrapper565031 input] (clojure.core/let [rawinput565030 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565032 {"Parameters" (portkey.aws/search-for-tag rawinput565030 "Parameters" :flattened? nil :result-wrapper resultWrapper565031), "Marker" (portkey.aws/search-for-tag rawinput565030 "Marker" :flattened? nil :result-wrapper resultWrapper565031)}] (clojure.core/cond-> {} (letvar565032 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar565032 ["Parameters" :content]))) (letvar565032 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565032 ["Marker" :content])))))))

(clojure.core/defn- response-invalid-db-security-group-state-fault ([input] (response-invalid-db-security-group-state-fault nil input)) ([resultWrapper565034 input] (clojure.core/let [rawinput565033 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565035 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-storage-type-not-supported-fault ([input] (response-storage-type-not-supported-fault nil input)) ([resultWrapper565037 input] (clojure.core/let [rawinput565036 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565038 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-parameter-group-not-found-fault ([input] (response-db-cluster-parameter-group-not-found-fault nil input)) ([resultWrapper565040 input] (clojure.core/let [rawinput565039 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565041 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-does-not-cover-enough-a-zs ([input] (response-db-subnet-group-does-not-cover-enough-a-zs nil input)) ([resultWrapper565043 input] (clojure.core/let [rawinput565042 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565044 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-snapshot-already-exists-fault ([input] (response-db-cluster-snapshot-already-exists-fault nil input)) ([resultWrapper565046 input] (clojure.core/let [rawinput565045 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565047 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-not-found-fault ([input] (response-authorization-not-found-fault nil input)) ([resultWrapper565049 input] (clojure.core/let [rawinput565048 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565050 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-instance-result ([input] (response-create-db-instance-result nil input)) ([resultWrapper565052 input] (clojure.core/let [rawinput565051 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565053 {"DBInstance" (portkey.aws/search-for-tag rawinput565051 "DBInstance" :flattened? nil :result-wrapper resultWrapper565052)}] (clojure.core/cond-> {} (letvar565053 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar565053 ["DBInstance" :content])))))))

(clojure.core/defn- response-copy-db-cluster-parameter-group-result ([input] (response-copy-db-cluster-parameter-group-result nil input)) ([resultWrapper565055 input] (clojure.core/let [rawinput565054 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565056 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput565054 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper565055)}] (clojure.core/cond-> {} (letvar565056 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar565056 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-subnet-already-in-use ([input] (response-subnet-already-in-use nil input)) ([resultWrapper565058 input] (clojure.core/let [rawinput565057 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565059 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-storage-cluster-capacity-fault ([input] (response-insufficient-storage-cluster-capacity-fault nil input)) ([resultWrapper565061 input] (clojure.core/let [rawinput565060 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565062 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-snapshot-not-found-fault ([input] (response-db-cluster-snapshot-not-found-fault nil input)) ([resultWrapper565064 input] (clojure.core/let [rawinput565063 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565065 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-cluster-state-fault ([input] (response-invalid-db-cluster-state-fault nil input)) ([resultWrapper565067 input] (clojure.core/let [rawinput565066 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565068 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-subnet-group-result ([input] (response-modify-db-subnet-group-result nil input)) ([resultWrapper565070 input] (clojure.core/let [rawinput565069 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565071 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput565069 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper565070)}] (clojure.core/cond-> {} (letvar565071 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar565071 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-invalid-subnet ([input] (response-invalid-subnet nil input)) ([resultWrapper565073 input] (clojure.core/let [rawinput565072 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565074 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-upgrade-dependency-failure-fault ([input] (response-db-upgrade-dependency-failure-fault nil input)) ([resultWrapper565076 input] (clojure.core/let [rawinput565075 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565077 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-quota-exceeded-fault ([input] (response-db-cluster-quota-exceeded-fault nil input)) ([resultWrapper565079 input] (clojure.core/let [rawinput565078 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565080 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-tag-list-message ([input] (response-tag-list-message nil input)) ([resultWrapper565082 input] (clojure.core/let [rawinput565081 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565083 {"TagList" (portkey.aws/search-for-tag rawinput565081 "TagList" :flattened? nil :result-wrapper resultWrapper565082)}] (clojure.core/cond-> {} (letvar565083 "TagList") (clojure.core/assoc :tag-list (deser-tag-list (clojure.core/get-in letvar565083 ["TagList" :content])))))))

(clojure.core/defn- response-db-subnet-group-not-found-fault ([input] (response-db-subnet-group-not-found-fault nil input)) ([resultWrapper565085 input] (clojure.core/let [rawinput565084 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565086 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-instance-result ([input] (response-modify-db-instance-result nil input)) ([resultWrapper565088 input] (clojure.core/let [rawinput565087 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565089 {"DBInstance" (portkey.aws/search-for-tag rawinput565087 "DBInstance" :flattened? nil :result-wrapper resultWrapper565088)}] (clojure.core/cond-> {} (letvar565089 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar565089 ["DBInstance" :content])))))))

(clojure.core/defn- response-resource-not-found-fault ([input] (response-resource-not-found-fault nil input)) ([resultWrapper565091 input] (clojure.core/let [rawinput565090 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565092 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-parameter-group-result ([input] (response-create-db-cluster-parameter-group-result nil input)) ([resultWrapper565094 input] (clojure.core/let [rawinput565093 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565095 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput565093 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper565094)}] (clojure.core/cond-> {} (letvar565095 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar565095 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-create-db-cluster-snapshot-result ([input] (response-create-db-cluster-snapshot-result nil input)) ([resultWrapper565097 input] (clojure.core/let [rawinput565096 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565098 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput565096 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper565097)}] (clojure.core/cond-> {} (letvar565098 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar565098 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-db-parameter-group-not-found-fault ([input] (response-db-parameter-group-not-found-fault nil input)) ([resultWrapper565100 input] (clojure.core/let [rawinput565099 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565101 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-message ([input] (response-db-cluster-message nil input)) ([resultWrapper565103 input] (clojure.core/let [rawinput565102 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565104 {"Marker" (portkey.aws/search-for-tag rawinput565102 "Marker" :flattened? nil :result-wrapper resultWrapper565103), "DBClusters" (portkey.aws/search-for-tag rawinput565102 "DBClusters" :flattened? nil :result-wrapper resultWrapper565103)}] (clojure.core/cond-> {} (letvar565104 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565104 ["Marker" :content]))) (letvar565104 "DBClusters") (clojure.core/assoc :db-clusters (deser-db-cluster-list (clojure.core/get-in letvar565104 ["DBClusters" :content])))))))

(clojure.core/defn- response-describe-db-cluster-snapshot-attributes-result ([input] (response-describe-db-cluster-snapshot-attributes-result nil input)) ([resultWrapper565106 input] (clojure.core/let [rawinput565105 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565107 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput565105 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper565106)}] (clojure.core/cond-> {} (letvar565107 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar565107 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-kms-key-not-accessible-fault ([input] (response-kms-key-not-accessible-fault nil input)) ([resultWrapper565109 input] (clojure.core/let [rawinput565108 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565110 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-engine-version-message ([input] (response-db-engine-version-message nil input)) ([resultWrapper565112 input] (clojure.core/let [rawinput565111 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565113 {"Marker" (portkey.aws/search-for-tag rawinput565111 "Marker" :flattened? nil :result-wrapper resultWrapper565112), "DBEngineVersions" (portkey.aws/search-for-tag rawinput565111 "DBEngineVersions" :flattened? nil :result-wrapper resultWrapper565112)}] (clojure.core/cond-> {} (letvar565113 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565113 ["Marker" :content]))) (letvar565113 "DBEngineVersions") (clojure.core/assoc :db-engine-versions (deser-db-engine-version-list (clojure.core/get-in letvar565113 ["DBEngineVersions" :content])))))))

(clojure.core/defn- response-modify-db-cluster-snapshot-attribute-result ([input] (response-modify-db-cluster-snapshot-attribute-result nil input)) ([resultWrapper565115 input] (clojure.core/let [rawinput565114 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565116 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput565114 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper565115)}] (clojure.core/cond-> {} (letvar565116 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar565116 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-db-instance-message ([input] (response-db-instance-message nil input)) ([resultWrapper565118 input] (clojure.core/let [rawinput565117 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565119 {"Marker" (portkey.aws/search-for-tag rawinput565117 "Marker" :flattened? nil :result-wrapper resultWrapper565118), "DBInstances" (portkey.aws/search-for-tag rawinput565117 "DBInstances" :flattened? nil :result-wrapper resultWrapper565118)}] (clojure.core/cond-> {} (letvar565119 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565119 ["Marker" :content]))) (letvar565119 "DBInstances") (clojure.core/assoc :db-instances (deser-db-instance-list (clojure.core/get-in letvar565119 ["DBInstances" :content])))))))

(clojure.core/defn- response-describe-engine-default-cluster-parameters-result ([input] (response-describe-engine-default-cluster-parameters-result nil input)) ([resultWrapper565121 input] (clojure.core/let [rawinput565120 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565122 {"EngineDefaults" (portkey.aws/search-for-tag rawinput565120 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper565121)}] (clojure.core/cond-> {} (letvar565122 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar565122 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-snapshot-state-fault ([input] (response-invalid-db-cluster-snapshot-state-fault nil input)) ([resultWrapper565124 input] (clojure.core/let [rawinput565123 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565125 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-storage-quota-exceeded-fault ([input] (response-storage-quota-exceeded-fault nil input)) ([resultWrapper565127 input] (clojure.core/let [rawinput565126 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565128 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-restore-fault ([input] (response-invalid-restore-fault nil input)) ([resultWrapper565130 input] (clojure.core/let [rawinput565129 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565131 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-db-cluster-capacity-fault ([input] (response-insufficient-db-cluster-capacity-fault nil input)) ([resultWrapper565133 input] (clojure.core/let [rawinput565132 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565134 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-already-exists-fault ([input] (response-db-parameter-group-already-exists-fault nil input)) ([resultWrapper565136 input] (clojure.core/let [rawinput565135 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565137 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-state-fault ([input] (response-invalid-db-subnet-state-fault nil input)) ([resultWrapper565139 input] (clojure.core/let [rawinput565138 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565140 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-quota-exceeded-fault ([input] (response-db-parameter-group-quota-exceeded-fault nil input)) ([resultWrapper565142 input] (clojure.core/let [rawinput565141 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565143 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-db-instance-capacity-fault ([input] (response-insufficient-db-instance-capacity-fault nil input)) ([resultWrapper565145 input] (clojure.core/let [rawinput565144 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565146 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-failover-db-cluster-result ([input] (response-failover-db-cluster-result nil input)) ([resultWrapper565148 input] (clojure.core/let [rawinput565147 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565149 {"DBCluster" (portkey.aws/search-for-tag rawinput565147 "DBCluster" :flattened? nil :result-wrapper resultWrapper565148)}] (clojure.core/cond-> {} (letvar565149 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar565149 ["DBCluster" :content])))))))

(clojure.core/defn- response-delete-db-instance-result ([input] (response-delete-db-instance-result nil input)) ([resultWrapper565151 input] (clojure.core/let [rawinput565150 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565152 {"DBInstance" (portkey.aws/search-for-tag rawinput565150 "DBInstance" :flattened? nil :result-wrapper resultWrapper565151)}] (clojure.core/cond-> {} (letvar565152 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar565152 ["DBInstance" :content])))))))

(clojure.core/defn- response-pending-maintenance-actions-message ([input] (response-pending-maintenance-actions-message nil input)) ([resultWrapper565154 input] (clojure.core/let [rawinput565153 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565155 {"PendingMaintenanceActions" (portkey.aws/search-for-tag rawinput565153 "PendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper565154), "Marker" (portkey.aws/search-for-tag rawinput565153 "Marker" :flattened? nil :result-wrapper resultWrapper565154)}] (clojure.core/cond-> {} (letvar565155 "PendingMaintenanceActions") (clojure.core/assoc :pending-maintenance-actions (deser-pending-maintenance-actions (clojure.core/get-in letvar565155 ["PendingMaintenanceActions" :content]))) (letvar565155 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565155 ["Marker" :content])))))))

(clojure.core/defn- response-db-subnet-group-quota-exceeded-fault ([input] (response-db-subnet-group-quota-exceeded-fault nil input)) ([resultWrapper565157 input] (clojure.core/let [rawinput565156 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565158 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-parameter-groups-message ([input] (response-db-cluster-parameter-groups-message nil input)) ([resultWrapper565160 input] (clojure.core/let [rawinput565159 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565161 {"Marker" (portkey.aws/search-for-tag rawinput565159 "Marker" :flattened? nil :result-wrapper resultWrapper565160), "DBClusterParameterGroups" (portkey.aws/search-for-tag rawinput565159 "DBClusterParameterGroups" :flattened? nil :result-wrapper resultWrapper565160)}] (clojure.core/cond-> {} (letvar565161 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar565161 ["Marker" :content]))) (letvar565161 "DBClusterParameterGroups") (clojure.core/assoc :db-cluster-parameter-groups (deser-db-cluster-parameter-group-list (clojure.core/get-in letvar565161 ["DBClusterParameterGroups" :content])))))))

(clojure.core/defn- response-delete-db-cluster-result ([input] (response-delete-db-cluster-result nil input)) ([resultWrapper565163 input] (clojure.core/let [rawinput565162 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565164 {"DBCluster" (portkey.aws/search-for-tag rawinput565162 "DBCluster" :flattened? nil :result-wrapper resultWrapper565163)}] (clojure.core/cond-> {} (letvar565164 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar565164 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-subnet-quota-exceeded-fault ([input] (response-db-subnet-quota-exceeded-fault nil input)) ([resultWrapper565166 input] (clojure.core/let [rawinput565165 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565167 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-snapshot-state-fault ([input] (response-invalid-db-snapshot-state-fault nil input)) ([resultWrapper565169 input] (clojure.core/let [rawinput565168 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565170 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-already-exists-fault ([input] (response-db-subnet-group-already-exists-fault nil input)) ([resultWrapper565172 input] (clojure.core/let [rawinput565171 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565173 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-snapshot-not-found-fault ([input] (response-db-snapshot-not-found-fault nil input)) ([resultWrapper565175 input] (clojure.core/let [rawinput565174 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565176 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-parameter-group-state-fault ([input] (response-invalid-db-parameter-group-state-fault nil input)) ([resultWrapper565178 input] (clojure.core/let [rawinput565177 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565179 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-cluster-result ([input] (response-modify-db-cluster-result nil input)) ([resultWrapper565181 input] (clojure.core/let [rawinput565180 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565182 {"DBCluster" (portkey.aws/search-for-tag rawinput565180 "DBCluster" :flattened? nil :result-wrapper resultWrapper565181)}] (clojure.core/cond-> {} (letvar565182 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar565182 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-security-group-not-found-fault ([input] (response-db-security-group-not-found-fault nil input)) ([resultWrapper565184 input] (clojure.core/let [rawinput565183 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar565185 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/restore-db-cluster-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/action (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/auto-applied-after-date (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/forced-apply-date (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/opt-in-status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/current-apply-date (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/pending-maintenance-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.pending-maintenance-action/action :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/auto-applied-after-date :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/forced-apply-date :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/opt-in-status :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/current-apply-date :portkey.aws.docdb.-2014-10-31.pending-maintenance-action/description]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/parameter))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/snapshot-type :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/filters :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/max-records :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/marker :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/include-shared :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshots-message/include-public]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-role/role-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-role/status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-role/role-arn :portkey.aws.docdb.-2014-10-31.db-cluster-role/status]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.filter/name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.filter/values (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/filter (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.filter/name :portkey.aws.docdb.-2014-10-31.filter/values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/pending-maintenance-action-details (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/pending-maintenance-action))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/copy-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/kms-key-id :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/pre-signed-url :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/copy-tags :portkey.aws.docdb.-2014-10-31.copy-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-instances-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-db-instances-message/db-instance-identifier :portkey.aws.docdb.-2014-10-31.describe-db-instances-message/filters :portkey.aws.docdb.-2014-10-31.describe-db-instances-message/max-records :portkey.aws.docdb.-2014-10-31.describe-db-instances-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.reset-db-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.reset-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/reset-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.docdb.-2014-10-31.reset-db-cluster-parameter-group-message/reset-all-parameters :portkey.aws.docdb.-2014-10-31.reset-db-cluster-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/copy-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier :portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier :portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description] :opt-un [:portkey.aws.docdb.-2014-10-31.copy-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.docdb.-2014-10-31.modify-db-cluster-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/reboot-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/apply-pending-maintenance-action-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/resource-pending-maintenance-actions]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/list-supported-timezones (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/max-records :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/marker :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/list-supported-character-sets :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/default-only :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/engine-version :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/list-supported-timezones :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/filters :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/engine :portkey.aws.docdb.-2014-10-31.describe-db-engine-versions-message/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/filters :portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/max-records :portkey.aws.docdb.-2014-10-31.describe-db-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/pending-maintenance-actions (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/resource-pending-maintenance-actions))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/restore-db-cluster-from-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/availability-zone))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.subnet/subnet-identifier :portkey.aws.docdb.-2014-10-31.subnet/subnet-availability-zone :portkey.aws.docdb.-2014-10-31.subnet/subnet-status]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-subnet-group-message/marker :portkey.aws.docdb.-2014-10-31/db-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-to-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/restore-db-cluster-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-to-time :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/tags :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/port :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/kms-key-id :portkey.aws.docdb.-2014-10-31.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/restore-db-cluster-from-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/snapshot-identifier :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/engine] :opt-un [:portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/tags :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/vpc-security-group-ids :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-version :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/port :portkey.aws.docdb.-2014-10-31.restore-db-cluster-from-snapshot-message/kms-key-id :portkey.aws.docdb.-2014-10-31/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/storage-encrypted (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/source-db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/snapshot-create-time :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-identifier :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/status :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/snapshot-type :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/master-username :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/engine-version :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/storage-encrypted :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/port :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/vpc-id :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/kms-key-id :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/cluster-create-time :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/engine :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/source-db-cluster-snapshot-arn :portkey.aws.docdb.-2014-10-31/availability-zones :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-arn :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.modify-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.docdb.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-description]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-enable (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-disable (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/pending-cloudwatch-logs-exports (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-enable :portkey.aws.docdb.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-disable]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-instance-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.create-db-instance-message/db-instance-identifier :portkey.aws.docdb.-2014-10-31.create-db-instance-message/db-instance-class :portkey.aws.docdb.-2014-10-31.create-db-instance-message/engine :portkey.aws.docdb.-2014-10-31.create-db-instance-message/db-cluster-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.create-db-instance-message/promotion-tier :portkey.aws.docdb.-2014-10-31.create-db-instance-message/preferred-maintenance-window :portkey.aws.docdb.-2014-10-31.create-db-instance-message/auto-minor-version-upgrade :portkey.aws.docdb.-2014-10-31.create-db-instance-message/tags :portkey.aws.docdb.-2014-10-31.create-db-instance-message/availability-zone]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/key-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-cluster))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-engine-version))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-member/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-member/is-cluster-writer (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-member/db-cluster-parameter-group-status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-member/promotion-tier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-member/db-instance-identifier :portkey.aws.docdb.-2014-10-31.db-cluster-member/is-cluster-writer :portkey.aws.docdb.-2014-10-31.db-cluster-member/db-cluster-parameter-group-status :portkey.aws.docdb.-2014-10-31.db-cluster-member/promotion-tier]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.delete-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.delete-db-instance-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/shared-snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/certificate-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/copy-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-options-message/orderable-db-instance-options (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/orderable-db-instance-options-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.orderable-db-instance-options-message/orderable-db-instance-options :portkey.aws.docdb.-2014-10-31.orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/event-categories-map-list]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.resource-pending-maintenance-actions/resource-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/resource-pending-maintenance-actions (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.resource-pending-maintenance-actions/resource-identifier :portkey.aws.docdb.-2014-10-31/pending-maintenance-action-details]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.apply-pending-maintenance-action-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.apply-pending-maintenance-action-message/apply-action (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.apply-pending-maintenance-action-message/opt-in-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/apply-pending-maintenance-action-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.apply-pending-maintenance-action-message/resource-identifier :portkey.aws.docdb.-2014-10-31.apply-pending-maintenance-action-message/apply-action :portkey.aws.docdb.-2014-10-31.apply-pending-maintenance-action-message/opt-in-type] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-events-message/end-time :portkey.aws.docdb.-2014-10-31.describe-events-message/start-time :portkey.aws.docdb.-2014-10-31.describe-events-message/max-records :portkey.aws.docdb.-2014-10-31.describe-events-message/marker :portkey.aws.docdb.-2014-10-31/source-type :portkey.aws.docdb.-2014-10-31.describe-events-message/duration :portkey.aws.docdb.-2014-10-31.describe-events-message/event-categories :portkey.aws.docdb.-2014-10-31.describe-events-message/filters :portkey.aws.docdb.-2014-10-31.describe-events-message/source-identifier]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/backup-retention-period (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/earliest-restorable-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/master-username (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-members (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-parameter-group (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/endpoint (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/reader-endpoint (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/associated-roles (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-roles))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/multi-az (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/percent-progress (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster/db-subnet-group (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster/backup-retention-period :portkey.aws.docdb.-2014-10-31.db-cluster/earliest-restorable-time :portkey.aws.docdb.-2014-10-31.db-cluster/preferred-maintenance-window :portkey.aws.docdb.-2014-10-31.db-cluster/enabled-cloudwatch-logs-exports :portkey.aws.docdb.-2014-10-31.db-cluster/status :portkey.aws.docdb.-2014-10-31.db-cluster/master-username :portkey.aws.docdb.-2014-10-31.db-cluster/engine-version :portkey.aws.docdb.-2014-10-31.db-cluster/hosted-zone-id :portkey.aws.docdb.-2014-10-31.db-cluster/storage-encrypted :portkey.aws.docdb.-2014-10-31.db-cluster/port :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-resource-id :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-members :portkey.aws.docdb.-2014-10-31.db-cluster/kms-key-id :portkey.aws.docdb.-2014-10-31.db-cluster/cluster-create-time :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-parameter-group :portkey.aws.docdb.-2014-10-31.db-cluster/endpoint :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-arn :portkey.aws.docdb.-2014-10-31.db-cluster/vpc-security-groups :portkey.aws.docdb.-2014-10-31.db-cluster/engine :portkey.aws.docdb.-2014-10-31/availability-zones :portkey.aws.docdb.-2014-10-31.db-cluster/reader-endpoint :portkey.aws.docdb.-2014-10-31.db-cluster/associated-roles :portkey.aws.docdb.-2014-10-31.db-cluster/multi-az :portkey.aws.docdb.-2014-10-31.db-cluster/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.db-cluster/preferred-backup-window :portkey.aws.docdb.-2014-10-31.db-cluster/percent-progress :portkey.aws.docdb.-2014-10-31.db-cluster/latest-restorable-time :portkey.aws.docdb.-2014-10-31.db-cluster/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/resource-identifier :portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/filters :portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/marker :portkey.aws.docdb.-2014-10-31.describe-pending-maintenance-actions-message/max-records]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-subnet-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance-status-info/normal (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance-status-info/status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance-status-info/message (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-instance-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-instance-status-info/status-type :portkey.aws.docdb.-2014-10-31.db-instance-status-info/normal :portkey.aws.docdb.-2014-10-31.db-instance-status-info/status :portkey.aws.docdb.-2014-10-31.db-instance-status-info/message]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/event-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/event))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-engine-default-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/filters :portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/max-records :portkey.aws.docdb.-2014-10-31.describe-engine-default-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.events-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.events-message/events (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/event-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.events-message/marker :portkey.aws.docdb.-2014-10-31.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/source-type #{:dbcluster "db-security-group" "db-cluster" :dbsecuritygroup :dbclustersnapshot "db-instance" "db-cluster-snapshot" :dbparametergroup "db-parameter-group" "db-snapshot" :dbsnapshot :dbinstance})

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/orderable-db-instance-options-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/orderable-db-instance-option))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-message/db-cluster-snapshots (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-message/marker :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-message/db-cluster-snapshots]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.event/source-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.event/message (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.event/event-categories (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.event/date (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.event/source-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.event/source-identifier :portkey.aws.docdb.-2014-10-31/source-type :portkey.aws.docdb.-2014-10-31.event/message :portkey.aws.docdb.-2014-10-31.event/event-categories :portkey.aws.docdb.-2014-10-31.event/date :portkey.aws.docdb.-2014-10-31.event/source-arn]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/availability-zone))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/filters :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/max-records :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.availability-zone/name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group-details/parameters :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/engine] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/engine-version :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/db-instance-class :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/license-model :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/vpc :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/filters :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/max-records :portkey.aws.docdb.-2014-10-31.describe-orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/db-subnet-group-description :portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.docdb.-2014-10-31.create-db-subnet-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-cluster-member))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/storage-type-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/valid-upgrade-target-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/upgrade-target))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/copy-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/subnet-already-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/insufficient-storage-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-roles (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-cluster-role))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/tag-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/tag))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/new-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/backup-retention-period :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/new-db-cluster-identifier :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/preferred-maintenance-window :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/vpc-security-group-ids :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/master-user-password :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/engine-version :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/port :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/apply-immediately :portkey.aws.docdb.-2014-10-31/cloudwatch-logs-export-configuration :portkey.aws.docdb.-2014-10-31.modify-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/db-engine-description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/db-engine-version-description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/valid-upgrade-target (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/valid-upgrade-target-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/exportable-log-types (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version/supports-log-exports-to-cloudwatch-logs (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-engine-version/engine :portkey.aws.docdb.-2014-10-31.db-engine-version/engine-version :portkey.aws.docdb.-2014-10-31.db-engine-version/db-parameter-group-family :portkey.aws.docdb.-2014-10-31.db-engine-version/db-engine-description :portkey.aws.docdb.-2014-10-31.db-engine-version/db-engine-version-description :portkey.aws.docdb.-2014-10-31.db-engine-version/valid-upgrade-target :portkey.aws.docdb.-2014-10-31.db-engine-version/exportable-log-types :portkey.aws.docdb.-2014-10-31.db-engine-version/supports-log-exports-to-cloudwatch-logs]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/source :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/filters :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/max-records :portkey.aws.docdb.-2014-10-31.describe-db-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-upgrade-dependency-failure-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.add-tags-to-resource-message/resource-name :portkey.aws.docdb.-2014-10-31.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/tag-list]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/vpc-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.vpc-security-group-membership/vpc-security-group-id :portkey.aws.docdb.-2014-10-31.vpc-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.reboot-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.reboot-db-instance-message/force-failover (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/reboot-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.reboot-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.reboot-db-instance-message/force-failover]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/resource-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/key-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.remove-tags-from-resource-message/resource-name :portkey.aws.docdb.-2014-10-31.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-cluster-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier :portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-add :portkey.aws.docdb.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attribute/attribute-name :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/data-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/source (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.parameter/data-type :portkey.aws.docdb.-2014-10-31.parameter/parameter-name :portkey.aws.docdb.-2014-10-31.parameter/source :portkey.aws.docdb.-2014-10-31.parameter/minimum-engine-version :portkey.aws.docdb.-2014-10-31.parameter/allowed-values :portkey.aws.docdb.-2014-10-31.parameter/apply-type :portkey.aws.docdb.-2014-10-31.parameter/description :portkey.aws.docdb.-2014-10-31/apply-method :portkey.aws.docdb.-2014-10-31.parameter/is-modifiable :portkey.aws.docdb.-2014-10-31.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier :portkey.aws.docdb.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/promotion-tier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/instance-create-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/storage-encrypted (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/kms-key-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/status-infos (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-instance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-instance/backup-retention-period :portkey.aws.docdb.-2014-10-31.db-instance/promotion-tier :portkey.aws.docdb.-2014-10-31.db-instance/publicly-accessible :portkey.aws.docdb.-2014-10-31.db-instance/preferred-maintenance-window :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-identifier :portkey.aws.docdb.-2014-10-31.db-instance/enabled-cloudwatch-logs-exports :portkey.aws.docdb.-2014-10-31.db-instance/auto-minor-version-upgrade :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-arn :portkey.aws.docdb.-2014-10-31.db-instance/instance-create-time :portkey.aws.docdb.-2014-10-31.db-instance/availability-zone :portkey.aws.docdb.-2014-10-31.db-instance/engine-version :portkey.aws.docdb.-2014-10-31.db-instance/storage-encrypted :portkey.aws.docdb.-2014-10-31.db-instance/kms-key-id :portkey.aws.docdb.-2014-10-31.db-instance/dbi-resource-id :portkey.aws.docdb.-2014-10-31/endpoint :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-class :portkey.aws.docdb.-2014-10-31.db-instance/vpc-security-groups :portkey.aws.docdb.-2014-10-31.db-instance/engine :portkey.aws.docdb.-2014-10-31.db-instance/db-instance-status :portkey.aws.docdb.-2014-10-31.db-instance/status-infos :portkey.aws.docdb.-2014-10-31.db-instance/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.db-instance/preferred-backup-window :portkey.aws.docdb.-2014-10-31/pending-modified-values :portkey.aws.docdb.-2014-10-31.db-instance/latest-restorable-time :portkey.aws.docdb.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-message/db-clusters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-message/marker :portkey.aws.docdb.-2014-10-31.db-cluster-message/db-clusters]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/event-categories-map (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.event-categories-map/source-type :portkey.aws.docdb.-2014-10-31.event-categories-map/event-categories]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/kms-key-not-accessible-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-engine-version-message/db-engine-versions (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-engine-version-message/marker :portkey.aws.docdb.-2014-10-31.db-engine-version-message/db-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-cluster-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-instance-message/db-instances (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-instance-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-instance-message/marker :portkey.aws.docdb.-2014-10-31.db-instance-message/db-instances]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-db-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/filters :portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/max-records :portkey.aws.docdb.-2014-10-31.describe-db-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-name :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/db-parameter-group-family :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/description :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/apply-method #{"immediate" :pendingreboot :immediate "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-engine-default-cluster-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier :portkey.aws.docdb.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.create-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.endpoint/address (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.endpoint/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.endpoint/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.endpoint/address :portkey.aws.docdb.-2014-10-31.endpoint/port :portkey.aws.docdb.-2014-10-31.endpoint/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/storage-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.cloudwatch-logs-export-configuration/enable-log-types (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.cloudwatch-logs-export-configuration/disable-log-types (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/cloudwatch-logs-export-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.cloudwatch-logs-export-configuration/enable-log-types :portkey.aws.docdb.-2014-10-31.cloudwatch-logs-export-configuration/disable-log-types]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-restore-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/log-type-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/insufficient-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.upgrade-target/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.upgrade-target/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.upgrade-target/description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.upgrade-target/auto-upgrade (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.upgrade-target/is-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/upgrade-target (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.upgrade-target/engine :portkey.aws.docdb.-2014-10-31.upgrade-target/engine-version :portkey.aws.docdb.-2014-10-31.upgrade-target/description :portkey.aws.docdb.-2014-10-31.upgrade-target/auto-upgrade :portkey.aws.docdb.-2014-10-31.upgrade-target/is-major-version-upgrade]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-subnet-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.delete-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.delete-db-cluster-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.delete-db-cluster-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.delete-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.delete-db-cluster-message/skip-final-snapshot :portkey.aws.docdb.-2014-10-31.delete-db-cluster-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.tag/key (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.tag/value (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.tag/key :portkey.aws.docdb.-2014-10-31.tag/value]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/describe-event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.describe-event-categories-message/source-type :portkey.aws.docdb.-2014-10-31.describe-event-categories-message/filters]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/insufficient-db-instance-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/failover-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.list-tags-for-resource-message/resource-name] :opt-un [:portkey.aws.docdb.-2014-10-31.list-tags-for-resource-message/filters]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.failover-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.failover-db-cluster-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/failover-db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.failover-db-cluster-message/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.failover-db-cluster-message/target-db-instance-identifier]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.delete-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.delete-db-subnet-group-message/db-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-instance))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.create-db-cluster-message/db-cluster-identifier :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/engine] :opt-un [:portkey.aws.docdb.-2014-10-31.create-db-cluster-message/backup-retention-period :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/preferred-maintenance-window :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/enable-cloudwatch-logs-exports :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/tags :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/vpc-security-group-ids :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/master-user-password :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/master-username :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/engine-version :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/storage-encrypted :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/port :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/kms-key-id :portkey.aws.docdb.-2014-10-31/availability-zones :portkey.aws.docdb.-2014-10-31.create-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/pending-maintenance-actions :portkey.aws.docdb.-2014-10-31.pending-maintenance-actions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-groups-message/db-cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-cluster-parameter-groups-message/marker :portkey.aws.docdb.-2014-10-31.db-cluster-parameter-groups-message/db-cluster-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/create-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/db-parameter-group-family :portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/description] :opt-un [:portkey.aws.docdb.-2014-10-31.create-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.engine-defaults/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.engine-defaults/db-parameter-group-family :portkey.aws.docdb.-2014-10-31.engine-defaults/marker :portkey.aws.docdb.-2014-10-31.engine-defaults/parameters]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-subnet-group))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/delete-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-instance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/db-instance-status-info))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/engine (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/db-instance-class (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/license-model (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/vpc (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/orderable-db-instance-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/engine :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/engine-version :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/db-instance-class :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/license-model :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/availability-zones :portkey.aws.docdb.-2014-10-31.orderable-db-instance-option/vpc]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/license-model (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/storage-type (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/db-instance-class (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.pending-modified-values/multi-az (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.pending-modified-values/backup-retention-period :portkey.aws.docdb.-2014-10-31/pending-cloudwatch-logs-exports :portkey.aws.docdb.-2014-10-31.pending-modified-values/db-instance-identifier :portkey.aws.docdb.-2014-10-31.pending-modified-values/master-user-password :portkey.aws.docdb.-2014-10-31.pending-modified-values/license-model :portkey.aws.docdb.-2014-10-31.pending-modified-values/allocated-storage :portkey.aws.docdb.-2014-10-31.pending-modified-values/engine-version :portkey.aws.docdb.-2014-10-31.pending-modified-values/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.pending-modified-values/port :portkey.aws.docdb.-2014-10-31.pending-modified-values/iops :portkey.aws.docdb.-2014-10-31.pending-modified-values/storage-type :portkey.aws.docdb.-2014-10-31.pending-modified-values/ca-certificate-identifier :portkey.aws.docdb.-2014-10-31.pending-modified-values/db-instance-class :portkey.aws.docdb.-2014-10-31.pending-modified-values/multi-az]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/subnet))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/filter-list (clojure.spec.alpha/coll-of :portkey.aws.docdb.-2014-10-31/filter))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/invalid-db-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/new-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.docdb.-2014-10-31.modify-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.docdb.-2014-10-31.modify-db-instance-message/db-instance-class :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/apply-immediately :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/preferred-maintenance-window :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/auto-minor-version-upgrade :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/new-db-instance-identifier :portkey.aws.docdb.-2014-10-31.modify-db-instance-message/promotion-tier]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/modify-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-subnet-group/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-subnet-group/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/subnet-list))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31.db-subnet-group/db-subnet-group-arn (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/db-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.docdb.-2014-10-31.db-subnet-group/db-subnet-group-name :portkey.aws.docdb.-2014-10-31.db-subnet-group/db-subnet-group-description :portkey.aws.docdb.-2014-10-31.db-subnet-group/vpc-id :portkey.aws.docdb.-2014-10-31.db-subnet-group/subnet-group-status :portkey.aws.docdb.-2014-10-31.db-subnet-group/subnets :portkey.aws.docdb.-2014-10-31.db-subnet-group/db-subnet-group-arn]))

(clojure.spec.alpha/def :portkey.aws.docdb.-2014-10-31/boolean clojure.core/boolean?)

(clojure.core/defn delete-db-subnet-group "Deletes a DB subnet group.\n The specified database subnet group must not be associated with any DB\ninstances." ([delete-db-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-subnet-group-message delete-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/delete-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSubnetGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidDBSubnetGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-subnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-subnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/delete-db-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-orderable-db-instance-options "Returns a list of orderable DB instance options for the specified engine." ([describe-orderable-db-instance-options-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-orderable-db-instance-options-message describe-orderable-db-instance-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/orderable-db-instance-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-orderable-db-instance-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOrderableDBInstanceOptionsResult", :http.request.configuration/action "DescribeOrderableDBInstanceOptions", :http.request.configuration/output-deser-fn response-orderable-db-instance-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-orderable-db-instance-options :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/describe-orderable-db-instance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/orderable-db-instance-options-message))

(clojure.core/defn copy-db-cluster-parameter-group "Copies the specified DB cluster parameter group." ([copy-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-db-cluster-parameter-group-message copy-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/copy-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/copy-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterParameterGroupResult", :http.request.configuration/action "CopyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-copy-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/copy-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/copy-db-cluster-parameter-group-result))

(clojure.core/defn modify-db-subnet-group "Modifies an existing DB subnet group. DB subnet groups must contain at least one\nsubnet in at least two Availability Zones in the AWS Region." ([modify-db-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-subnet-group-message modify-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/modify-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/modify-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSubnetGroupResult", :http.request.configuration/action "ModifyDBSubnetGroup", :http.request.configuration/output-deser-fn response-modify-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.docdb.-2014-10-31/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.docdb.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.docdb.-2014-10-31/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/modify-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/modify-db-subnet-group-result))

(clojure.core/defn restore-db-cluster-to-point-in-time "Restores a DB cluster to an arbitrary point in time. Users can restore to any\npoint in time before LatestRestorableTime for up to BackupRetentionPeriod days.\nThe target DB cluster is created from the source DB cluster with the same\nconfiguration as the original DB cluster, except that the new DB cluster is\ncreated with the default DB security group." ([restore-db-cluster-to-point-in-time-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-cluster-to-point-in-time-message restore-db-cluster-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/restore-db-cluster-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/restore-db-cluster-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterToPointInTimeResult", :http.request.configuration/action "RestoreDBClusterToPointInTime", :http.request.configuration/output-deser-fn response-restore-db-cluster-to-point-in-time-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.docdb.-2014-10-31/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.docdb.-2014-10-31/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.docdb.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.docdb.-2014-10-31/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.docdb.-2014-10-31/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.docdb.-2014-10-31/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/restore-db-cluster-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/restore-db-cluster-to-point-in-time-result))

(clojure.core/defn describe-events "Returns events related to DB instances, DB security groups, DB snapshots, and DB\nparameter groups for the past 14 days. You can obtain events specific to a\nparticular DB instance, DB security group, DB snapshot, or DB parameter group by\nproviding the name as a parameter. By default, the events of the past hour are\nreturned." ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventsResult", :http.request.configuration/action "DescribeEvents", :http.request.configuration/output-deser-fn response-events-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/events-message))

(clojure.core/defn delete-db-cluster-snapshot "Deletes a DB cluster snapshot. If the snapshot is being copied, the copy\noperation is terminated.\n The DB cluster snapshot must be in the available state to be deleted." ([delete-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-cluster-snapshot-message delete-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/delete-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/delete-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterSnapshotResult", :http.request.configuration/action "DeleteDBClusterSnapshot", :http.request.configuration/output-deser-fn response-delete-db-cluster-snapshot-result, :http.request.spec/error-spec {"InvalidDBClusterSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/delete-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/delete-db-cluster-snapshot-result))

(clojure.core/defn reboot-db-instance "You might need to reboot your DB instance, usually for maintenance reasons. For\nexample, if you make certain changes, or if you change the DB cluster parameter\ngroup that is associated with the DB instance, you must reboot the instance for\nthe changes to take effect.\n Rebooting a DB instance restarts the database engine service. Rebooting a DB\ninstance results in a momentary outage, during which the DB instance status is\nset to rebooting." ([reboot-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-reboot-db-instance-message reboot-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/reboot-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/reboot-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RebootDBInstanceResult", :http.request.configuration/action "RebootDBInstance", :http.request.configuration/output-deser-fn response-reboot-db-instance-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/reboot-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/reboot-db-instance-result))

(clojure.core/defn create-db-cluster-parameter-group "Creates a new DB cluster parameter group.\n Parameters in a DB cluster parameter group apply to all of the instances in a\nDB cluster.\n A DB cluster parameter group is initially created with the default parameters\nfor the database engine used by instances in the DB cluster. To provide custom\nvalues for any of the parameters, you must modify the group after you create it.\nAfter you create a DB cluster parameter group, you must associate it with your\nDB cluster. For the new DB cluster parameter group and associated settings to\ntake effect, you must then reboot the DB instances in the DB cluster without\nfailover.\n After you create a DB cluster parameter group, you should wait at least 5\nminutes before creating your first DB cluster that uses that DB cluster\nparameter group as the default parameter group. This allows Amazon DocumentDB to\nfully complete the create action before the DB cluster parameter group is used\nas the default for a new DB cluster. This step is especially important for\nparameters that are critical when creating the default database for a DB\ncluster, such as the character set for the default database defined by the\ncharacter_set_database parameter." ([create-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-cluster-parameter-group-message create-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/create-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/create-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterParameterGroupResult", :http.request.configuration/action "CreateDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-create-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/create-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/create-db-cluster-parameter-group-result))

(clojure.core/defn list-tags-for-resource "Lists all tags on an Amazon DocumentDB resource." ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListTagsForResourceResult", :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/tag-list-message))

(clojure.core/defn delete-db-instance "Deletes a previously provisioned DB instance." ([delete-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-instance-message delete-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/delete-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/delete-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBInstanceResult", :http.request.configuration/action "DeleteDBInstance", :http.request.configuration/output-deser-fn response-delete-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/delete-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/delete-db-instance-result))

(clojure.core/defn describe-db-subnet-groups "Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is\nspecified, the list will contain only the descriptions of the specified\nDBSubnetGroup." ([] (describe-db-subnet-groups {})) ([describe-db-subnet-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-subnet-groups-message describe-db-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSubnetGroupsResult", :http.request.configuration/action "DescribeDBSubnetGroups", :http.request.configuration/output-deser-fn response-db-subnet-group-message, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-db-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-subnet-group-message))

(clojure.core/defn describe-db-clusters "Returns information about provisioned Amazon DocumentDB DB clusters. This API\noperation supports pagination." ([] (describe-db-clusters {})) ([describe-db-clusters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-clusters-message describe-db-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClustersResult", :http.request.configuration/action "DescribeDBClusters", :http.request.configuration/output-deser-fn response-db-cluster-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-clusters :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-db-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-message))

(clojure.core/defn create-db-cluster "Creates a new Amazon DocumentDB DB cluster." ([create-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-cluster-message create-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/create-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/create-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterResult", :http.request.configuration/action "CreateDBCluster", :http.request.configuration/output-deser-fn response-create-db-cluster-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault, "DBClusterAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.docdb.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.docdb.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InsufficientStorageClusterCapacityFault" :portkey.aws.docdb.-2014-10-31/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.docdb.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.docdb.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/create-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/create-db-cluster-result))

(clojure.core/defn failover-db-cluster "Forces a failover for a DB cluster.\n A failover for a DB cluster promotes one of the Amazon DocumentDB replicas\n(read-only instances) in the DB cluster to be the primary instance (the cluster\nwriter).\n If the primary instance fails, Amazon DocumentDB automatically fails over to an\nAmazon DocumentDB replica, if one exists. You can force a failover when you want\nto simulate a failure of a primary instance for testing." ([] (failover-db-cluster {})) ([failover-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-failover-db-cluster-message failover-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/failover-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/failover-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "FailoverDBClusterResult", :http.request.configuration/action "FailoverDBCluster", :http.request.configuration/output-deser-fn response-failover-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef failover-db-cluster :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/failover-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/failover-db-cluster-result))

(clojure.core/defn reset-db-cluster-parameter-group " Modifies the parameters of a DB cluster parameter group to the default value.\nTo reset specific parameters, submit a list of the following: ParameterName and\nApplyMethod. To reset the entire DB cluster parameter group, specify the\nDBClusterParameterGroupName and ResetAllParameters parameters.\n When you reset the entire group, dynamic parameters are updated immediately and\nstatic parameters are set to pending-reboot to take effect on the next DB\ninstance reboot." ([reset-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-db-cluster-parameter-group-message reset-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/reset-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBClusterParameterGroupResult", :http.request.configuration/action "ResetDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/reset-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-name-message))

(clojure.core/defn create-db-instance "Creates a new DB instance." ([create-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-instance-message create-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/create-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/create-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceResult", :http.request.configuration/action "CreateDBInstance", :http.request.configuration/output-deser-fn response-create-db-instance-result, :http.request.spec/error-spec {"InstanceQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/instance-quota-exceeded-fault, "InvalidVPCNetworkStateFault" :portkey.aws.docdb.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-instance-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.docdb.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.docdb.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.docdb.-2014-10-31/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.docdb.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault, "DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.docdb.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.docdb.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/create-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/create-db-instance-result))

(clojure.core/defn apply-pending-maintenance-action "Applies a pending maintenance action to a resource (for example, to a DB\ninstance)." ([apply-pending-maintenance-action-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-apply-pending-maintenance-action-message apply-pending-maintenance-action-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/apply-pending-maintenance-action-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/apply-pending-maintenance-action-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ApplyPendingMaintenanceActionResult", :http.request.configuration/action "ApplyPendingMaintenanceAction", :http.request.configuration/output-deser-fn response-apply-pending-maintenance-action-result, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.docdb.-2014-10-31/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef apply-pending-maintenance-action :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/apply-pending-maintenance-action-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/apply-pending-maintenance-action-result))

(clojure.core/defn delete-db-cluster "Deletes a previously provisioned DB cluster. When you delete a DB cluster, all\nautomated backups for that DB cluster are deleted and can't be recovered. Manual\nDB cluster snapshots of the specified DB cluster are not deleted." ([delete-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-cluster-message delete-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/delete-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/delete-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterResult", :http.request.configuration/action "DeleteDBCluster", :http.request.configuration/output-deser-fn response-delete-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterSnapshotAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/delete-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/delete-db-cluster-result))

(clojure.core/defn create-db-subnet-group "Creates a new DB subnet group. DB subnet groups must contain at least one subnet\nin at least two Availability Zones in the AWS Region." ([create-db-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-subnet-group-message create-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/create-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/create-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSubnetGroupResult", :http.request.configuration/action "CreateDBSubnetGroup", :http.request.configuration/output-deser-fn response-create-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-subnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.docdb.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.docdb.-2014-10-31/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/create-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/create-db-subnet-group-result))

(clojure.core/defn describe-db-cluster-parameters "Returns the detailed parameter list for a particular DB cluster parameter group." ([describe-db-cluster-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-parameters-message describe-db-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParametersResult", :http.request.configuration/action "DescribeDBClusterParameters", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/describe-db-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-details))

(clojure.core/defn describe-event-categories "Displays a list of categories for all event source types, or, if specified, for\na specified source type." ([] (describe-event-categories {})) ([describe-event-categories-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-event-categories-message describe-event-categories-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/event-categories-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-event-categories-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventCategoriesResult", :http.request.configuration/action "DescribeEventCategories", :http.request.configuration/output-deser-fn response-event-categories-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/event-categories-message))

(clojure.core/defn describe-engine-default-cluster-parameters "Returns the default engine and system parameter information for the cluster\ndatabase engine." ([describe-engine-default-cluster-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-engine-default-cluster-parameters-message describe-engine-default-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/describe-engine-default-cluster-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-engine-default-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultClusterParametersResult", :http.request.configuration/action "DescribeEngineDefaultClusterParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-cluster-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/describe-engine-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/describe-engine-default-cluster-parameters-result))

(clojure.core/defn modify-db-cluster "Modifies a setting for an Amazon DocumentDB DB cluster. You can change one or\nmore database configuration parameters by specifying these parameters and the\nnew values in the request." ([modify-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-cluster-message modify-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/modify-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/modify-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterResult", :http.request.configuration/action "ModifyDBCluster", :http.request.configuration/output-deser-fn response-modify-db-cluster-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.docdb.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-security-group-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.docdb.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/modify-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/modify-db-cluster-result))

(clojure.core/defn describe-pending-maintenance-actions "Returns a list of resources (for example, DB instances) that have at least one\npending maintenance action." ([] (describe-pending-maintenance-actions {})) ([describe-pending-maintenance-actions-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-pending-maintenance-actions-message describe-pending-maintenance-actions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/pending-maintenance-actions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-pending-maintenance-actions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribePendingMaintenanceActionsResult", :http.request.configuration/action "DescribePendingMaintenanceActions", :http.request.configuration/output-deser-fn response-pending-maintenance-actions-message, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.docdb.-2014-10-31/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-pending-maintenance-actions :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-pending-maintenance-actions-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/pending-maintenance-actions-message))

(clojure.core/defn describe-db-instances "Returns information about provisioned Amazon DocumentDB instances. This API\nsupports pagination." ([] (describe-db-instances {})) ([describe-db-instances-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-instances-message describe-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBInstancesResult", :http.request.configuration/action "DescribeDBInstances", :http.request.configuration/output-deser-fn response-db-instance-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instances :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-instance-message))

(clojure.core/defn describe-db-engine-versions "Returns a list of the available DB engines." ([] (describe-db-engine-versions {})) ([describe-db-engine-versions-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-engine-versions-message describe-db-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBEngineVersionsResult", :http.request.configuration/action "DescribeDBEngineVersions", :http.request.configuration/output-deser-fn response-db-engine-version-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-db-engine-versions :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-db-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-engine-version-message))

(clojure.core/defn modify-db-cluster-parameter-group " Modifies the parameters of a DB cluster parameter group. To modify more than\none parameter, submit a list of the following: ParameterName, ParameterValue,\nand ApplyMethod. A maximum of 20 parameters can be modified in a single request.\n Changes to dynamic parameters are applied immediately. Changes to static\nparameters require a reboot or maintenance window before the change can take\neffect.\n After you create a DB cluster parameter group, you should wait at least 5\nminutes before creating your first DB cluster that uses that DB cluster\nparameter group as the default parameter group. This allows Amazon DocumentDB to\nfully complete the create action before the parameter group is used as the\ndefault for a new DB cluster. This step is especially important for parameters\nthat are critical when creating the default database for a DB cluster, such as\nthe character set for the default database defined by the character_set_database\nparameter." ([modify-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-cluster-parameter-group-message modify-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/modify-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterParameterGroupResult", :http.request.configuration/action "ModifyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/modify-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-group-name-message))

(clojure.core/defn modify-db-cluster-snapshot-attribute "Adds an attribute and values to, or removes an attribute and values from, a\nmanual DB cluster snapshot.\n To share a manual DB cluster snapshot with other AWS accounts, specify restore\nas the AttributeName, and use the ValuesToAdd parameter to add a list of IDs of\nthe AWS accounts that are authorized to restore the manual DB cluster snapshot.\nUse the value all to make the manual DB cluster snapshot public, which means\nthat it can be copied or restored by all AWS accounts. Do not add the all value\nfor any manual DB cluster snapshots that contain private information that you\ndon't want available to all AWS accounts. If a manual DB cluster snapshot is\nencrypted, it can be shared, but only by specifying a list of authorized AWS\naccount IDs for the ValuesToAdd parameter. You can't use all as a value for that\nparameter in this case." ([modify-db-cluster-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-cluster-snapshot-attribute-message modify-db-cluster-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/modify-db-cluster-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/modify-db-cluster-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterSnapshotAttributeResult", :http.request.configuration/action "ModifyDBClusterSnapshotAttribute", :http.request.configuration/output-deser-fn response-modify-db-cluster-snapshot-attribute-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/modify-db-cluster-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/modify-db-cluster-snapshot-attribute-result))

(clojure.core/defn describe-db-cluster-snapshots "Returns information about DB cluster snapshots. This API operation supports\npagination." ([] (describe-db-cluster-snapshots {})) ([describe-db-cluster-snapshots-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-snapshots-message describe-db-cluster-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotsResult", :http.request.configuration/action "DescribeDBClusterSnapshots", :http.request.configuration/output-deser-fn response-db-cluster-snapshot-message, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-message))

(clojure.core/defn modify-db-instance "Modifies settings for a DB instance. You can change one or more database\nconfiguration parameters by specifying these parameters and the new values in\nthe request." ([modify-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-instance-message modify-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/modify-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/modify-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBInstanceResult", :http.request.configuration/action "ModifyDBInstance", :http.request.configuration/output-deser-fn response-modify-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.docdb.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-instance-already-exists-fault, "CertificateNotFoundFault" :portkey.aws.docdb.-2014-10-31/certificate-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-security-group-state-fault, "StorageTypeNotSupportedFault" :portkey.aws.docdb.-2014-10-31/storage-type-not-supported-fault, "AuthorizationNotFoundFault" :portkey.aws.docdb.-2014-10-31/authorization-not-found-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.docdb.-2014-10-31/db-upgrade-dependency-failure-fault, "DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.docdb.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/modify-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/modify-db-instance-result))

(clojure.core/defn describe-db-cluster-parameter-groups "Returns a list of DBClusterParameterGroup descriptions. If a\nDBClusterParameterGroupName parameter is specified, the list contains only the\ndescription of the specified DB cluster parameter group." ([] (describe-db-cluster-parameter-groups {})) ([describe-db-cluster-parameter-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-parameter-groups-message describe-db-cluster-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-cluster-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParameterGroupsResult", :http.request.configuration/action "DescribeDBClusterParameterGroups", :http.request.configuration/output-deser-fn response-db-cluster-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.docdb.-2014-10-31/describe-db-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/db-cluster-parameter-groups-message))

(clojure.core/defn create-db-cluster-snapshot "Creates a snapshot of a DB cluster." ([create-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-cluster-snapshot-message create-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/create-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/create-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterSnapshotResult", :http.request.configuration/action "CreateDBClusterSnapshot", :http.request.configuration/output-deser-fn response-create-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/create-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/create-db-cluster-snapshot-result))

(clojure.core/defn remove-tags-from-resource "Removes metadata tags from an Amazon DocumentDB resource." ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-cluster-snapshot "Copies a snapshot of a DB cluster.\n To copy a DB cluster snapshot from a shared manual DB cluster snapshot,\nSourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN) of the\nshared DB cluster snapshot.\n To cancel the copy operation after it is in progress, delete the target DB\ncluster snapshot identified by TargetDBClusterSnapshotIdentifier while that DB\ncluster snapshot is in the copying status." ([copy-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-db-cluster-snapshot-message copy-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/copy-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/copy-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterSnapshotResult", :http.request.configuration/action "CopyDBClusterSnapshot", :http.request.configuration/output-deser-fn response-copy-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-already-exists-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.docdb.-2014-10-31/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/copy-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/copy-db-cluster-snapshot-result))

(clojure.core/defn delete-db-cluster-parameter-group "Deletes a specified DB cluster parameter group. The DB cluster parameter group\nto be deleted can't be associated with any DB clusters." ([delete-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-cluster-parameter-group-message delete-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/delete-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBClusterParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/delete-db-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn add-tags-to-resource "Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with\ncost allocation reporting to track costs that are associated with Amazon\nDocumentDB resources. or in a Condition statement in an AWS Identity and Access\nManagement (IAM) policy for Amazon DocumentDB." ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddTagsToResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-snapshot "Creates a new DB cluster from a DB snapshot or DB cluster snapshot.\n If a DB snapshot is specified, the target DB cluster is created from the source\nDB snapshot with a default configuration and default security group.\n If a DB cluster snapshot is specified, the target DB cluster is created from\nthe source DB cluster restore point with the same configuration as the original\nsource DB cluster, except that the new DB cluster is created with the default\nsecurity group." ([restore-db-cluster-from-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-cluster-from-snapshot-message restore-db-cluster-from-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/restore-db-cluster-from-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/restore-db-cluster-from-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterFromSnapshotResult", :http.request.configuration/action "RestoreDBClusterFromSnapshot", :http.request.configuration/output-deser-fn response-restore-db-cluster-from-snapshot-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.docdb.-2014-10-31/db-cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.docdb.-2014-10-31/invalid-vpc-network-state-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.docdb.-2014-10-31/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.docdb.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.docdb.-2014-10-31/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.docdb.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.docdb.-2014-10-31/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.docdb.-2014-10-31/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.docdb.-2014-10-31/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/restore-db-cluster-from-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/restore-db-cluster-from-snapshot-result))

(clojure.core/defn describe-db-cluster-snapshot-attributes "Returns a list of DB cluster snapshot attribute names and values for a manual DB\ncluster snapshot.\n When you share snapshots with other AWS accounts,\nDescribeDBClusterSnapshotAttributes returns the restore attribute and a list of\nIDs for the AWS accounts that are authorized to copy or restore the manual DB\ncluster snapshot. If all is included in the list of values for the restore\nattribute, then the manual DB cluster snapshot is public and can be copied or\nrestored by all AWS accounts." ([describe-db-cluster-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-snapshot-attributes-message describe-db-cluster-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.docdb.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "DocDB", :http.request.spec/input-spec :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotAttributesResult", :http.request.configuration/action "DescribeDBClusterSnapshotAttributes", :http.request.configuration/output-deser-fn response-describe-db-cluster-snapshot-attributes-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.docdb.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.docdb.-2014-10-31/describe-db-cluster-snapshot-attributes-result))
