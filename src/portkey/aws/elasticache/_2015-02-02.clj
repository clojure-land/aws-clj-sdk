(ns portkey.aws.elasticache.-2015-02-02 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-1"},
    :ssl-common-name "elasticache.ap-northeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "elasticache", :region "eu-west-1"},
    :ssl-common-name "elasticache.eu-west-1.amazonaws.com",
    :endpoint "https://elasticache.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "elasticache", :region "us-east-2"},
    :ssl-common-name "elasticache.us-east-2.amazonaws.com",
    :endpoint "https://elasticache.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-2"},
    :ssl-common-name "elasticache.ap-southeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "elasticache", :region "cn-north-1"},
    :ssl-common-name "elasticache.cn-north-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "elasticache", :region "sa-east-1"},
    :ssl-common-name "elasticache.sa-east-1.amazonaws.com",
    :endpoint "https://elasticache.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-1"},
    :ssl-common-name "elasticache.ap-southeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope
    {:service "elasticache", :region "cn-northwest-1"},
    :ssl-common-name "elasticache.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-2"},
    :ssl-common-name "elasticache.ap-northeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "elasticache", :region "eu-west-3"},
    :ssl-common-name "elasticache.eu-west-3.amazonaws.com",
    :endpoint "https://elasticache.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "elasticache", :region "ca-central-1"},
    :ssl-common-name "elasticache.ca-central-1.amazonaws.com",
    :endpoint "https://elasticache.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "elasticache", :region "eu-central-1"},
    :ssl-common-name "elasticache.eu-central-1.amazonaws.com",
    :endpoint "https://elasticache.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "elasticache", :region "eu-west-2"},
    :ssl-common-name "elasticache.eu-west-2.amazonaws.com",
    :endpoint "https://elasticache.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope
    {:service "elasticache", :region "us-gov-west-1"},
    :ssl-common-name "elasticache.us-gov-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "elasticache", :region "us-west-2"},
    :ssl-common-name "elasticache.us-west-2.amazonaws.com",
    :endpoint "https://elasticache.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "elasticache", :region "us-east-1"},
    :ssl-common-name "elasticache.us-east-1.amazonaws.com",
    :endpoint "https://elasticache.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "elasticache", :region "us-west-1"},
    :ssl-common-name "elasticache.us-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "elasticache", :region "ap-south-1"},
    :ssl-common-name "elasticache.ap-south-1.amazonaws.com",
    :endpoint "https://elasticache.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list ser-azmode ser-node-group-configuration-list ser-node-groups-to-remove-list ser-security-group-ids-list ser-parameter-name-value-list ser-resharding-configuration-list ser-key-list ser-availability-zones-list ser-source-type ser-snapshot-arns-list ser-parameter-name-value ser-tag-list ser-cache-security-group-name-list ser-node-group-configuration ser-cache-node-ids-list ser-integer ser-string ser-resharding-configuration ser-tstamp ser-preferred-availability-zone-list ser-tag ser-boolean-optional ser-integer-optional ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-azmode [shape-input] ({"single-az" "single-az", :single-az "single-az", "cross-az" "cross-az", :cross-az "cross-az"} shape-input))
(clojure.core/defn- ser-node-group-configuration-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-node-groups-to-remove-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-security-group-ids-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-parameter-name-value-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-resharding-configuration-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-key-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-availability-zones-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-source-type [shape-input] ({:cache-subnet-group "cache-subnet-group", "cache-subnet-group" "cache-subnet-group", "cache-parameter-group" "cache-parameter-group", "cache-cluster" "cache-cluster", :cache-security-group "cache-security-group", :cache-parameter-group "cache-parameter-group", "replication-group" "replication-group", "cache-security-group" "cache-security-group", :replication-group "replication-group", :cache-cluster "cache-cluster"} shape-input))
(clojure.core/defn- ser-snapshot-arns-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-parameter-name-value [shape-input] (clojure.core/cond-> {} (:parameter-name shape-input) (clojure.core/assoc "ParameterNameValue.ParameterName" (ser-string (:parameter-name shape-input))) (:parameter-value shape-input) (clojure.core/assoc "ParameterNameValue.ParameterValue" (ser-string (:parameter-value shape-input)))))
(clojure.core/defn- ser-tag-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-cache-security-group-name-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-node-group-configuration [shape-input] (clojure.core/cond-> {} (:slots shape-input) (clojure.core/assoc "NodeGroupConfiguration.Slots" (ser-string (:slots shape-input))) (:replica-count shape-input) (clojure.core/assoc "NodeGroupConfiguration.ReplicaCount" (ser-integer-optional (:replica-count shape-input))) (:primary-availability-zone shape-input) (clojure.core/assoc "NodeGroupConfiguration.PrimaryAvailabilityZone" (ser-string (:primary-availability-zone shape-input))) (:replica-availability-zones shape-input) (clojure.core/assoc "NodeGroupConfiguration.ReplicaAvailabilityZones" (ser-availability-zones-list (:replica-availability-zones shape-input)))))
(clojure.core/defn- ser-cache-node-ids-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-integer [shape-input] shape-input)
(clojure.core/defn- ser-string [shape-input] shape-input)
(clojure.core/defn- ser-resharding-configuration [shape-input] (clojure.core/cond-> {} (:preferred-availability-zones shape-input) (clojure.core/assoc "ReshardingConfiguration.PreferredAvailabilityZones" (ser-availability-zones-list (:preferred-availability-zones shape-input)))))
(clojure.core/defn- ser-tstamp [shape-input] shape-input)
(clojure.core/defn- ser-preferred-availability-zone-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag [shape-input] (clojure.core/cond-> {} (:key shape-input) (clojure.core/assoc "Tag.Key" (ser-string (:key shape-input))) (:value shape-input) (clojure.core/assoc "Tag.Value" (ser-string (:value shape-input)))))
(clojure.core/defn- ser-boolean-optional [shape-input] shape-input)
(clojure.core/defn- ser-integer-optional [shape-input] shape-input)
(clojure.core/defn- ser-boolean [shape-input] shape-input)

(clojure.core/defn req<-describe-cache-parameter-groups-message [action-name44818 input44817] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44818}} (clojure.core/contains? input44817 :cache-parameter-group-name) (clojure.core/assoc-in [:body "CacheParameterGroupName"] (ser-string (input44817 :cache-parameter-group-name))) (clojure.core/contains? input44817 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44817 :max-records))) (clojure.core/contains? input44817 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44817 :marker)))))
(clojure.core/defn req<-modify-replication-group-shard-configuration-message [action-name44820 input44819] (clojure.core/let [input44821 {:body {"ReplicationGroupId" (ser-string (input44819 :replication-group-id)), "NodeGroupCount" (ser-integer (input44819 :node-group-count)), "ApplyImmediately" (ser-boolean (input44819 :apply-immediately)), "Version" "2015-02-02", "Action" action-name44820}}] (clojure.core/cond-> input44821 (clojure.core/contains? input44819 :resharding-configuration) (clojure.core/assoc-in [:body "ReshardingConfiguration"] (ser-resharding-configuration-list (input44819 :resharding-configuration))) (clojure.core/contains? input44819 :node-groups-to-remove) (clojure.core/assoc-in [:body "NodeGroupsToRemove"] (ser-node-groups-to-remove-list (input44819 :node-groups-to-remove))))))
(clojure.core/defn req<-describe-cache-security-groups-message [action-name44823 input44822] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44823}} (clojure.core/contains? input44822 :cache-security-group-name) (clojure.core/assoc-in [:body "CacheSecurityGroupName"] (ser-string (input44822 :cache-security-group-name))) (clojure.core/contains? input44822 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44822 :max-records))) (clojure.core/contains? input44822 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44822 :marker)))))
(clojure.core/defn req<-modify-cache-parameter-group-message [action-name44825 input44824] {:body {"CacheParameterGroupName" (ser-string (input44824 :cache-parameter-group-name)), "ParameterNameValues" (ser-parameter-name-value-list (input44824 :parameter-name-values)), "Version" "2015-02-02", "Action" action-name44825}})
(clojure.core/defn req<-test-failover-message [action-name44827 input44826] {:body {"ReplicationGroupId" (ser-string (input44826 :replication-group-id)), "NodeGroupId" (ser-string (input44826 :node-group-id)), "Version" "2015-02-02", "Action" action-name44827}})
(clojure.core/defn req<-delete-cache-parameter-group-message [action-name44829 input44828] {:body {"CacheParameterGroupName" (ser-string (input44828 :cache-parameter-group-name)), "Version" "2015-02-02", "Action" action-name44829}})
(clojure.core/defn req<-delete-replication-group-message [action-name44831 input44830] (clojure.core/let [input44832 {:body {"ReplicationGroupId" (ser-string (input44830 :replication-group-id)), "Version" "2015-02-02", "Action" action-name44831}}] (clojure.core/cond-> input44832 (clojure.core/contains? input44830 :retain-primary-cluster) (clojure.core/assoc-in [:body "RetainPrimaryCluster"] (ser-boolean-optional (input44830 :retain-primary-cluster))) (clojure.core/contains? input44830 :final-snapshot-identifier) (clojure.core/assoc-in [:body "FinalSnapshotIdentifier"] (ser-string (input44830 :final-snapshot-identifier))))))
(clojure.core/defn req<-purchase-reserved-cache-nodes-offering-message [action-name44834 input44833] (clojure.core/let [input44835 {:body {"ReservedCacheNodesOfferingId" (ser-string (input44833 :reserved-cache-nodes-offering-id)), "Version" "2015-02-02", "Action" action-name44834}}] (clojure.core/cond-> input44835 (clojure.core/contains? input44833 :reserved-cache-node-id) (clojure.core/assoc-in [:body "ReservedCacheNodeId"] (ser-string (input44833 :reserved-cache-node-id))) (clojure.core/contains? input44833 :cache-node-count) (clojure.core/assoc-in [:body "CacheNodeCount"] (ser-integer-optional (input44833 :cache-node-count))))))
(clojure.core/defn req<-describe-events-message [action-name44837 input44836] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44837}} (clojure.core/contains? input44836 :source-identifier) (clojure.core/assoc-in [:body "SourceIdentifier"] (ser-string (input44836 :source-identifier))) (clojure.core/contains? input44836 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-source-type (input44836 :source-type))) (clojure.core/contains? input44836 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-tstamp (input44836 :start-time))) (clojure.core/contains? input44836 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-tstamp (input44836 :end-time))) (clojure.core/contains? input44836 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-integer-optional (input44836 :duration))) (clojure.core/contains? input44836 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44836 :max-records))) (clojure.core/contains? input44836 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44836 :marker)))))
(clojure.core/defn req<-create-snapshot-message [action-name44839 input44838] (clojure.core/let [input44840 {:body {"SnapshotName" (ser-string (input44838 :snapshot-name)), "Version" "2015-02-02", "Action" action-name44839}}] (clojure.core/cond-> input44840 (clojure.core/contains? input44838 :replication-group-id) (clojure.core/assoc-in [:body "ReplicationGroupId"] (ser-string (input44838 :replication-group-id))) (clojure.core/contains? input44838 :cache-cluster-id) (clojure.core/assoc-in [:body "CacheClusterId"] (ser-string (input44838 :cache-cluster-id))))))
(clojure.core/defn req<-describe-cache-engine-versions-message [action-name44842 input44841] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44842}} (clojure.core/contains? input44841 :engine) (clojure.core/assoc-in [:body "Engine"] (ser-string (input44841 :engine))) (clojure.core/contains? input44841 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input44841 :engine-version))) (clojure.core/contains? input44841 :cache-parameter-group-family) (clojure.core/assoc-in [:body "CacheParameterGroupFamily"] (ser-string (input44841 :cache-parameter-group-family))) (clojure.core/contains? input44841 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44841 :max-records))) (clojure.core/contains? input44841 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44841 :marker))) (clojure.core/contains? input44841 :default-only) (clojure.core/assoc-in [:body "DefaultOnly"] (ser-boolean (input44841 :default-only)))))
(clojure.core/defn req<-reset-cache-parameter-group-message [action-name44844 input44843] (clojure.core/let [input44845 {:body {"CacheParameterGroupName" (ser-string (input44843 :cache-parameter-group-name)), "Version" "2015-02-02", "Action" action-name44844}}] (clojure.core/cond-> input44845 (clojure.core/contains? input44843 :reset-all-parameters) (clojure.core/assoc-in [:body "ResetAllParameters"] (ser-boolean (input44843 :reset-all-parameters))) (clojure.core/contains? input44843 :parameter-name-values) (clojure.core/assoc-in [:body "ParameterNameValues"] (ser-parameter-name-value-list (input44843 :parameter-name-values))))))
(clojure.core/defn req<-modify-replication-group-message [action-name44847 input44846] (clojure.core/let [input44848 {:body {"ReplicationGroupId" (ser-string (input44846 :replication-group-id)), "Version" "2015-02-02", "Action" action-name44847}}] (clojure.core/cond-> input44848 (clojure.core/contains? input44846 :cache-node-type) (clojure.core/assoc-in [:body "CacheNodeType"] (ser-string (input44846 :cache-node-type))) (clojure.core/contains? input44846 :security-group-ids) (clojure.core/assoc-in [:body "SecurityGroupIds"] (ser-security-group-ids-list (input44846 :security-group-ids))) (clojure.core/contains? input44846 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input44846 :preferred-maintenance-window))) (clojure.core/contains? input44846 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input44846 :auto-minor-version-upgrade))) (clojure.core/contains? input44846 :primary-cluster-id) (clojure.core/assoc-in [:body "PrimaryClusterId"] (ser-string (input44846 :primary-cluster-id))) (clojure.core/contains? input44846 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input44846 :engine-version))) (clojure.core/contains? input44846 :notification-topic-status) (clojure.core/assoc-in [:body "NotificationTopicStatus"] (ser-string (input44846 :notification-topic-status))) (clojure.core/contains? input44846 :notification-topic-arn) (clojure.core/assoc-in [:body "NotificationTopicArn"] (ser-string (input44846 :notification-topic-arn))) (clojure.core/contains? input44846 :snapshot-window) (clojure.core/assoc-in [:body "SnapshotWindow"] (ser-string (input44846 :snapshot-window))) (clojure.core/contains? input44846 :snapshotting-cluster-id) (clojure.core/assoc-in [:body "SnapshottingClusterId"] (ser-string (input44846 :snapshotting-cluster-id))) (clojure.core/contains? input44846 :cache-parameter-group-name) (clojure.core/assoc-in [:body "CacheParameterGroupName"] (ser-string (input44846 :cache-parameter-group-name))) (clojure.core/contains? input44846 :snapshot-retention-limit) (clojure.core/assoc-in [:body "SnapshotRetentionLimit"] (ser-integer-optional (input44846 :snapshot-retention-limit))) (clojure.core/contains? input44846 :apply-immediately) (clojure.core/assoc-in [:body "ApplyImmediately"] (ser-boolean (input44846 :apply-immediately))) (clojure.core/contains? input44846 :automatic-failover-enabled) (clojure.core/assoc-in [:body "AutomaticFailoverEnabled"] (ser-boolean-optional (input44846 :automatic-failover-enabled))) (clojure.core/contains? input44846 :replication-group-description) (clojure.core/assoc-in [:body "ReplicationGroupDescription"] (ser-string (input44846 :replication-group-description))) (clojure.core/contains? input44846 :node-group-id) (clojure.core/assoc-in [:body "NodeGroupId"] (ser-string (input44846 :node-group-id))) (clojure.core/contains? input44846 :cache-security-group-names) (clojure.core/assoc-in [:body "CacheSecurityGroupNames"] (ser-cache-security-group-name-list (input44846 :cache-security-group-names))))))
(clojure.core/defn req<-describe-replication-groups-message [action-name44850 input44849] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44850}} (clojure.core/contains? input44849 :replication-group-id) (clojure.core/assoc-in [:body "ReplicationGroupId"] (ser-string (input44849 :replication-group-id))) (clojure.core/contains? input44849 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44849 :max-records))) (clojure.core/contains? input44849 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44849 :marker)))))
(clojure.core/defn req<-reboot-cache-cluster-message [action-name44852 input44851] {:body {"CacheClusterId" (ser-string (input44851 :cache-cluster-id)), "CacheNodeIdsToReboot" (ser-cache-node-ids-list (input44851 :cache-node-ids-to-reboot)), "Version" "2015-02-02", "Action" action-name44852}})
(clojure.core/defn req<-list-tags-for-resource-message [action-name44854 input44853] {:body {"ResourceName" (ser-string (input44853 :resource-name)), "Version" "2015-02-02", "Action" action-name44854}})
(clojure.core/defn req<-describe-engine-default-parameters-message [action-name44856 input44855] (clojure.core/let [input44857 {:body {"CacheParameterGroupFamily" (ser-string (input44855 :cache-parameter-group-family)), "Version" "2015-02-02", "Action" action-name44856}}] (clojure.core/cond-> input44857 (clojure.core/contains? input44855 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44855 :max-records))) (clojure.core/contains? input44855 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44855 :marker))))))
(clojure.core/defn req<-describe-cache-clusters-message [action-name44859 input44858] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44859}} (clojure.core/contains? input44858 :cache-cluster-id) (clojure.core/assoc-in [:body "CacheClusterId"] (ser-string (input44858 :cache-cluster-id))) (clojure.core/contains? input44858 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44858 :max-records))) (clojure.core/contains? input44858 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44858 :marker))) (clojure.core/contains? input44858 :show-cache-node-info) (clojure.core/assoc-in [:body "ShowCacheNodeInfo"] (ser-boolean-optional (input44858 :show-cache-node-info))) (clojure.core/contains? input44858 :show-cache-clusters-not-in-replication-groups) (clojure.core/assoc-in [:body "ShowCacheClustersNotInReplicationGroups"] (ser-boolean-optional (input44858 :show-cache-clusters-not-in-replication-groups)))))
(clojure.core/defn req<-authorize-cache-security-group-ingress-message [action-name44861 input44860] {:body {"CacheSecurityGroupName" (ser-string (input44860 :cache-security-group-name)), "EC2SecurityGroupName" (ser-string (input44860 :ec2-security-group-name)), "EC2SecurityGroupOwnerId" (ser-string (input44860 :ec2-security-group-owner-id)), "Version" "2015-02-02", "Action" action-name44861}})
(clojure.core/defn req<-create-cache-cluster-message [action-name44863 input44862] (clojure.core/let [input44864 {:body {"CacheClusterId" (ser-string (input44862 :cache-cluster-id)), "Version" "2015-02-02", "Action" action-name44863}}] (clojure.core/cond-> input44864 (clojure.core/contains? input44862 :cache-node-type) (clojure.core/assoc-in [:body "CacheNodeType"] (ser-string (input44862 :cache-node-type))) (clojure.core/contains? input44862 :cache-subnet-group-name) (clojure.core/assoc-in [:body "CacheSubnetGroupName"] (ser-string (input44862 :cache-subnet-group-name))) (clojure.core/contains? input44862 :azmode) (clojure.core/assoc-in [:body "AZMode"] (ser-azmode (input44862 :azmode))) (clojure.core/contains? input44862 :auth-token) (clojure.core/assoc-in [:body "AuthToken"] (ser-string (input44862 :auth-token))) (clojure.core/contains? input44862 :preferred-availability-zone) (clojure.core/assoc-in [:body "PreferredAvailabilityZone"] (ser-string (input44862 :preferred-availability-zone))) (clojure.core/contains? input44862 :snapshot-arns) (clojure.core/assoc-in [:body "SnapshotArns"] (ser-snapshot-arns-list (input44862 :snapshot-arns))) (clojure.core/contains? input44862 :security-group-ids) (clojure.core/assoc-in [:body "SecurityGroupIds"] (ser-security-group-ids-list (input44862 :security-group-ids))) (clojure.core/contains? input44862 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input44862 :preferred-maintenance-window))) (clojure.core/contains? input44862 :preferred-availability-zones) (clojure.core/assoc-in [:body "PreferredAvailabilityZones"] (ser-preferred-availability-zone-list (input44862 :preferred-availability-zones))) (clojure.core/contains? input44862 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input44862 :auto-minor-version-upgrade))) (clojure.core/contains? input44862 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input44862 :tags))) (clojure.core/contains? input44862 :num-cache-nodes) (clojure.core/assoc-in [:body "NumCacheNodes"] (ser-integer-optional (input44862 :num-cache-nodes))) (clojure.core/contains? input44862 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input44862 :engine-version))) (clojure.core/contains? input44862 :notification-topic-arn) (clojure.core/assoc-in [:body "NotificationTopicArn"] (ser-string (input44862 :notification-topic-arn))) (clojure.core/contains? input44862 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input44862 :port))) (clojure.core/contains? input44862 :snapshot-window) (clojure.core/assoc-in [:body "SnapshotWindow"] (ser-string (input44862 :snapshot-window))) (clojure.core/contains? input44862 :replication-group-id) (clojure.core/assoc-in [:body "ReplicationGroupId"] (ser-string (input44862 :replication-group-id))) (clojure.core/contains? input44862 :cache-parameter-group-name) (clojure.core/assoc-in [:body "CacheParameterGroupName"] (ser-string (input44862 :cache-parameter-group-name))) (clojure.core/contains? input44862 :snapshot-retention-limit) (clojure.core/assoc-in [:body "SnapshotRetentionLimit"] (ser-integer-optional (input44862 :snapshot-retention-limit))) (clojure.core/contains? input44862 :engine) (clojure.core/assoc-in [:body "Engine"] (ser-string (input44862 :engine))) (clojure.core/contains? input44862 :cache-security-group-names) (clojure.core/assoc-in [:body "CacheSecurityGroupNames"] (ser-cache-security-group-name-list (input44862 :cache-security-group-names))) (clojure.core/contains? input44862 :snapshot-name) (clojure.core/assoc-in [:body "SnapshotName"] (ser-string (input44862 :snapshot-name))))))
(clojure.core/defn req<-delete-cache-security-group-message [action-name44866 input44865] {:body {"CacheSecurityGroupName" (ser-string (input44865 :cache-security-group-name)), "Version" "2015-02-02", "Action" action-name44866}})
(clojure.core/defn req<-delete-cache-subnet-group-message [action-name44868 input44867] {:body {"CacheSubnetGroupName" (ser-string (input44867 :cache-subnet-group-name)), "Version" "2015-02-02", "Action" action-name44868}})
(clojure.core/defn req<-delete-snapshot-message [action-name44870 input44869] {:body {"SnapshotName" (ser-string (input44869 :snapshot-name)), "Version" "2015-02-02", "Action" action-name44870}})
(clojure.core/defn req<-describe-cache-parameters-message [action-name44872 input44871] (clojure.core/let [input44873 {:body {"CacheParameterGroupName" (ser-string (input44871 :cache-parameter-group-name)), "Version" "2015-02-02", "Action" action-name44872}}] (clojure.core/cond-> input44873 (clojure.core/contains? input44871 :source) (clojure.core/assoc-in [:body "Source"] (ser-string (input44871 :source))) (clojure.core/contains? input44871 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44871 :max-records))) (clojure.core/contains? input44871 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44871 :marker))))))
(clojure.core/defn req<-create-replication-group-message [action-name44875 input44874] (clojure.core/let [input44876 {:body {"ReplicationGroupId" (ser-string (input44874 :replication-group-id)), "ReplicationGroupDescription" (ser-string (input44874 :replication-group-description)), "Version" "2015-02-02", "Action" action-name44875}}] (clojure.core/cond-> input44876 (clojure.core/contains? input44874 :cache-node-type) (clojure.core/assoc-in [:body "CacheNodeType"] (ser-string (input44874 :cache-node-type))) (clojure.core/contains? input44874 :cache-subnet-group-name) (clojure.core/assoc-in [:body "CacheSubnetGroupName"] (ser-string (input44874 :cache-subnet-group-name))) (clojure.core/contains? input44874 :num-node-groups) (clojure.core/assoc-in [:body "NumNodeGroups"] (ser-integer-optional (input44874 :num-node-groups))) (clojure.core/contains? input44874 :auth-token) (clojure.core/assoc-in [:body "AuthToken"] (ser-string (input44874 :auth-token))) (clojure.core/contains? input44874 :snapshot-arns) (clojure.core/assoc-in [:body "SnapshotArns"] (ser-snapshot-arns-list (input44874 :snapshot-arns))) (clojure.core/contains? input44874 :security-group-ids) (clojure.core/assoc-in [:body "SecurityGroupIds"] (ser-security-group-ids-list (input44874 :security-group-ids))) (clojure.core/contains? input44874 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input44874 :preferred-maintenance-window))) (clojure.core/contains? input44874 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input44874 :auto-minor-version-upgrade))) (clojure.core/contains? input44874 :replicas-per-node-group) (clojure.core/assoc-in [:body "ReplicasPerNodeGroup"] (ser-integer-optional (input44874 :replicas-per-node-group))) (clojure.core/contains? input44874 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input44874 :tags))) (clojure.core/contains? input44874 :preferred-cache-clusterazs) (clojure.core/assoc-in [:body "PreferredCacheClusterAZs"] (ser-availability-zones-list (input44874 :preferred-cache-clusterazs))) (clojure.core/contains? input44874 :at-rest-encryption-enabled) (clojure.core/assoc-in [:body "AtRestEncryptionEnabled"] (ser-boolean-optional (input44874 :at-rest-encryption-enabled))) (clojure.core/contains? input44874 :transit-encryption-enabled) (clojure.core/assoc-in [:body "TransitEncryptionEnabled"] (ser-boolean-optional (input44874 :transit-encryption-enabled))) (clojure.core/contains? input44874 :primary-cluster-id) (clojure.core/assoc-in [:body "PrimaryClusterId"] (ser-string (input44874 :primary-cluster-id))) (clojure.core/contains? input44874 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input44874 :engine-version))) (clojure.core/contains? input44874 :notification-topic-arn) (clojure.core/assoc-in [:body "NotificationTopicArn"] (ser-string (input44874 :notification-topic-arn))) (clojure.core/contains? input44874 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input44874 :port))) (clojure.core/contains? input44874 :snapshot-window) (clojure.core/assoc-in [:body "SnapshotWindow"] (ser-string (input44874 :snapshot-window))) (clojure.core/contains? input44874 :node-group-configuration) (clojure.core/assoc-in [:body "NodeGroupConfiguration"] (ser-node-group-configuration-list (input44874 :node-group-configuration))) (clojure.core/contains? input44874 :cache-parameter-group-name) (clojure.core/assoc-in [:body "CacheParameterGroupName"] (ser-string (input44874 :cache-parameter-group-name))) (clojure.core/contains? input44874 :snapshot-retention-limit) (clojure.core/assoc-in [:body "SnapshotRetentionLimit"] (ser-integer-optional (input44874 :snapshot-retention-limit))) (clojure.core/contains? input44874 :automatic-failover-enabled) (clojure.core/assoc-in [:body "AutomaticFailoverEnabled"] (ser-boolean-optional (input44874 :automatic-failover-enabled))) (clojure.core/contains? input44874 :num-cache-clusters) (clojure.core/assoc-in [:body "NumCacheClusters"] (ser-integer-optional (input44874 :num-cache-clusters))) (clojure.core/contains? input44874 :engine) (clojure.core/assoc-in [:body "Engine"] (ser-string (input44874 :engine))) (clojure.core/contains? input44874 :cache-security-group-names) (clojure.core/assoc-in [:body "CacheSecurityGroupNames"] (ser-cache-security-group-name-list (input44874 :cache-security-group-names))) (clojure.core/contains? input44874 :snapshot-name) (clojure.core/assoc-in [:body "SnapshotName"] (ser-string (input44874 :snapshot-name))))))
(clojure.core/defn req<-revoke-cache-security-group-ingress-message [action-name44878 input44877] {:body {"CacheSecurityGroupName" (ser-string (input44877 :cache-security-group-name)), "EC2SecurityGroupName" (ser-string (input44877 :ec2-security-group-name)), "EC2SecurityGroupOwnerId" (ser-string (input44877 :ec2-security-group-owner-id)), "Version" "2015-02-02", "Action" action-name44878}})
(clojure.core/defn req<-create-cache-subnet-group-message [action-name44880 input44879] {:body {"CacheSubnetGroupName" (ser-string (input44879 :cache-subnet-group-name)), "CacheSubnetGroupDescription" (ser-string (input44879 :cache-subnet-group-description)), "SubnetIds" (ser-subnet-identifier-list (input44879 :subnet-ids)), "Version" "2015-02-02", "Action" action-name44880}})
(clojure.core/defn req<-describe-cache-subnet-groups-message [action-name44882 input44881] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44882}} (clojure.core/contains? input44881 :cache-subnet-group-name) (clojure.core/assoc-in [:body "CacheSubnetGroupName"] (ser-string (input44881 :cache-subnet-group-name))) (clojure.core/contains? input44881 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44881 :max-records))) (clojure.core/contains? input44881 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44881 :marker)))))
(clojure.core/defn req<-describe-snapshots-message [action-name44884 input44883] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44884}} (clojure.core/contains? input44883 :replication-group-id) (clojure.core/assoc-in [:body "ReplicationGroupId"] (ser-string (input44883 :replication-group-id))) (clojure.core/contains? input44883 :cache-cluster-id) (clojure.core/assoc-in [:body "CacheClusterId"] (ser-string (input44883 :cache-cluster-id))) (clojure.core/contains? input44883 :snapshot-name) (clojure.core/assoc-in [:body "SnapshotName"] (ser-string (input44883 :snapshot-name))) (clojure.core/contains? input44883 :snapshot-source) (clojure.core/assoc-in [:body "SnapshotSource"] (ser-string (input44883 :snapshot-source))) (clojure.core/contains? input44883 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44883 :marker))) (clojure.core/contains? input44883 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44883 :max-records))) (clojure.core/contains? input44883 :show-node-group-config) (clojure.core/assoc-in [:body "ShowNodeGroupConfig"] (ser-boolean-optional (input44883 :show-node-group-config)))))
(clojure.core/defn req<-modify-cache-cluster-message [action-name44886 input44885] (clojure.core/let [input44887 {:body {"CacheClusterId" (ser-string (input44885 :cache-cluster-id)), "Version" "2015-02-02", "Action" action-name44886}}] (clojure.core/cond-> input44887 (clojure.core/contains? input44885 :cache-node-type) (clojure.core/assoc-in [:body "CacheNodeType"] (ser-string (input44885 :cache-node-type))) (clojure.core/contains? input44885 :azmode) (clojure.core/assoc-in [:body "AZMode"] (ser-azmode (input44885 :azmode))) (clojure.core/contains? input44885 :security-group-ids) (clojure.core/assoc-in [:body "SecurityGroupIds"] (ser-security-group-ids-list (input44885 :security-group-ids))) (clojure.core/contains? input44885 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input44885 :preferred-maintenance-window))) (clojure.core/contains? input44885 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input44885 :auto-minor-version-upgrade))) (clojure.core/contains? input44885 :num-cache-nodes) (clojure.core/assoc-in [:body "NumCacheNodes"] (ser-integer-optional (input44885 :num-cache-nodes))) (clojure.core/contains? input44885 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input44885 :engine-version))) (clojure.core/contains? input44885 :notification-topic-status) (clojure.core/assoc-in [:body "NotificationTopicStatus"] (ser-string (input44885 :notification-topic-status))) (clojure.core/contains? input44885 :notification-topic-arn) (clojure.core/assoc-in [:body "NotificationTopicArn"] (ser-string (input44885 :notification-topic-arn))) (clojure.core/contains? input44885 :snapshot-window) (clojure.core/assoc-in [:body "SnapshotWindow"] (ser-string (input44885 :snapshot-window))) (clojure.core/contains? input44885 :cache-parameter-group-name) (clojure.core/assoc-in [:body "CacheParameterGroupName"] (ser-string (input44885 :cache-parameter-group-name))) (clojure.core/contains? input44885 :snapshot-retention-limit) (clojure.core/assoc-in [:body "SnapshotRetentionLimit"] (ser-integer-optional (input44885 :snapshot-retention-limit))) (clojure.core/contains? input44885 :apply-immediately) (clojure.core/assoc-in [:body "ApplyImmediately"] (ser-boolean (input44885 :apply-immediately))) (clojure.core/contains? input44885 :cache-node-ids-to-remove) (clojure.core/assoc-in [:body "CacheNodeIdsToRemove"] (ser-cache-node-ids-list (input44885 :cache-node-ids-to-remove))) (clojure.core/contains? input44885 :cache-security-group-names) (clojure.core/assoc-in [:body "CacheSecurityGroupNames"] (ser-cache-security-group-name-list (input44885 :cache-security-group-names))) (clojure.core/contains? input44885 :new-availability-zones) (clojure.core/assoc-in [:body "NewAvailabilityZones"] (ser-preferred-availability-zone-list (input44885 :new-availability-zones))))))
(clojure.core/defn req<-copy-snapshot-message [action-name44889 input44888] (clojure.core/let [input44890 {:body {"SourceSnapshotName" (ser-string (input44888 :source-snapshot-name)), "TargetSnapshotName" (ser-string (input44888 :target-snapshot-name)), "Version" "2015-02-02", "Action" action-name44889}}] (clojure.core/cond-> input44890 (clojure.core/contains? input44888 :target-bucket) (clojure.core/assoc-in [:body "TargetBucket"] (ser-string (input44888 :target-bucket))))))
(clojure.core/defn req<-modify-cache-subnet-group-message [action-name44892 input44891] (clojure.core/let [input44893 {:body {"CacheSubnetGroupName" (ser-string (input44891 :cache-subnet-group-name)), "Version" "2015-02-02", "Action" action-name44892}}] (clojure.core/cond-> input44893 (clojure.core/contains? input44891 :cache-subnet-group-description) (clojure.core/assoc-in [:body "CacheSubnetGroupDescription"] (ser-string (input44891 :cache-subnet-group-description))) (clojure.core/contains? input44891 :subnet-ids) (clojure.core/assoc-in [:body "SubnetIds"] (ser-subnet-identifier-list (input44891 :subnet-ids))))))
(clojure.core/defn req<-create-cache-security-group-message [action-name44895 input44894] {:body {"CacheSecurityGroupName" (ser-string (input44894 :cache-security-group-name)), "Description" (ser-string (input44894 :description)), "Version" "2015-02-02", "Action" action-name44895}})
(clojure.core/defn req<-remove-tags-from-resource-message [action-name44897 input44896] {:body {"ResourceName" (ser-string (input44896 :resource-name)), "TagKeys" (ser-key-list (input44896 :tag-keys)), "Version" "2015-02-02", "Action" action-name44897}})
(clojure.core/defn req<-list-allowed-node-type-modifications-message [action-name44899 input44898] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44899}} (clojure.core/contains? input44898 :cache-cluster-id) (clojure.core/assoc-in [:body "CacheClusterId"] (ser-string (input44898 :cache-cluster-id))) (clojure.core/contains? input44898 :replication-group-id) (clojure.core/assoc-in [:body "ReplicationGroupId"] (ser-string (input44898 :replication-group-id)))))
(clojure.core/defn req<-create-cache-parameter-group-message [action-name44901 input44900] {:body {"CacheParameterGroupName" (ser-string (input44900 :cache-parameter-group-name)), "CacheParameterGroupFamily" (ser-string (input44900 :cache-parameter-group-family)), "Description" (ser-string (input44900 :description)), "Version" "2015-02-02", "Action" action-name44901}})
(clojure.core/defn req<-add-tags-to-resource-message [action-name44903 input44902] {:body {"ResourceName" (ser-string (input44902 :resource-name)), "Tags" (ser-tag-list (input44902 :tags)), "Version" "2015-02-02", "Action" action-name44903}})
(clojure.core/defn req<-describe-reserved-cache-nodes-message [action-name44905 input44904] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44905}} (clojure.core/contains? input44904 :reserved-cache-node-id) (clojure.core/assoc-in [:body "ReservedCacheNodeId"] (ser-string (input44904 :reserved-cache-node-id))) (clojure.core/contains? input44904 :reserved-cache-nodes-offering-id) (clojure.core/assoc-in [:body "ReservedCacheNodesOfferingId"] (ser-string (input44904 :reserved-cache-nodes-offering-id))) (clojure.core/contains? input44904 :cache-node-type) (clojure.core/assoc-in [:body "CacheNodeType"] (ser-string (input44904 :cache-node-type))) (clojure.core/contains? input44904 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-string (input44904 :duration))) (clojure.core/contains? input44904 :product-description) (clojure.core/assoc-in [:body "ProductDescription"] (ser-string (input44904 :product-description))) (clojure.core/contains? input44904 :offering-type) (clojure.core/assoc-in [:body "OfferingType"] (ser-string (input44904 :offering-type))) (clojure.core/contains? input44904 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44904 :max-records))) (clojure.core/contains? input44904 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44904 :marker)))))
(clojure.core/defn req<-describe-reserved-cache-nodes-offerings-message [action-name44907 input44906] (clojure.core/cond-> {:body {"Version" "2015-02-02", "Action" action-name44907}} (clojure.core/contains? input44906 :reserved-cache-nodes-offering-id) (clojure.core/assoc-in [:body "ReservedCacheNodesOfferingId"] (ser-string (input44906 :reserved-cache-nodes-offering-id))) (clojure.core/contains? input44906 :cache-node-type) (clojure.core/assoc-in [:body "CacheNodeType"] (ser-string (input44906 :cache-node-type))) (clojure.core/contains? input44906 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-string (input44906 :duration))) (clojure.core/contains? input44906 :product-description) (clojure.core/assoc-in [:body "ProductDescription"] (ser-string (input44906 :product-description))) (clojure.core/contains? input44906 :offering-type) (clojure.core/assoc-in [:body "OfferingType"] (ser-string (input44906 :offering-type))) (clojure.core/contains? input44906 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input44906 :max-records))) (clojure.core/contains? input44906 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input44906 :marker)))))
(clojure.core/defn req<-delete-cache-cluster-message [action-name44909 input44908] (clojure.core/let [input44910 {:body {"CacheClusterId" (ser-string (input44908 :cache-cluster-id)), "Version" "2015-02-02", "Action" action-name44909}}] (clojure.core/cond-> input44910 (clojure.core/contains? input44908 :final-snapshot-identifier) (clojure.core/assoc-in [:body "FinalSnapshotIdentifier"] (ser-string (input44908 :final-snapshot-identifier))))))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/read-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/current-role (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-member/CacheClusterId :portkey.aws.elasticache.-2015-02-02.node-group-member/CacheNodeId :portkey.aws.elasticache.-2015-02-02.node-group-member/ReadEndpoint :portkey.aws.elasticache.-2015-02-02.node-group-member/PreferredAvailabilityZone :portkey.aws.elasticache.-2015-02-02.node-group-member/CurrentRole] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.test-failover-message/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.test-failover-message/NodeGroupId] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/Engine :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/EngineVersion :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/CacheParameterGroupFamily :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/Marker :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/DefaultOnly] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/retain-primary-cluster (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/ReplicationGroupId] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/RetainPrimaryCluster :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/FinalSnapshotIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/ec2-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/ec2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group/OwnerId :portkey.aws.elasticache.-2015-02-02.cache-security-group/CacheSecurityGroupName :portkey.aws.elasticache.-2015-02-02.cache-security-group/Description :portkey.aws.elasticache.-2015-02-02.cache-security-group/EC2SecurityGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/azmode {"single-az" "single-az", :single-az "single-az", "cross-az" "cross-az", :cross-az "cross-az"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/ec2-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/change-type {"immediate" "immediate", :immediate "immediate", "requires-reboot" "requires-reboot", :requires-reboot "requires-reboot"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/CacheParameterGroupFamily :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/Description] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/replication-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/ReservedCacheNodesOfferingId :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/CacheNodeType :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/Duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/FixedPrice :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/UsagePrice :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/ProductDescription :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/OfferingType :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/RecurringCharges] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-engine-version))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.slot-migration/progress-percentage (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/slot-migration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.slot-migration/ProgressPercentage] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/parameter-group-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/source-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/customer-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node/CacheNodeId :portkey.aws.elasticache.-2015-02-02.cache-node/CacheNodeStatus :portkey.aws.elasticache.-2015-02-02.cache-node/CacheNodeCreateTime :portkey.aws.elasticache.-2015-02-02/Endpoint :portkey.aws.elasticache.-2015-02-02.cache-node/ParameterGroupStatus :portkey.aws.elasticache.-2015-02-02.cache-node/SourceCacheNodeId :portkey.aws.elasticache.-2015-02-02.cache-node/CustomerAvailabilityZone] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status {"enabled" "enabled", :enabled "enabled", "disabled" "disabled", :disabled "disabled"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/CacheParameterGroupFamily] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ReservedCacheNode] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalidarnfault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/CacheParameterGroupFamily :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/Description] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/CacheSubnetGroupName] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/CacheSubnetGroupDescription :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/SubnetIds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/member-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cluster-id-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cluster-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/pending-modified-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group/CacheNodeType :portkey.aws.elasticache.-2015-02-02.replication-group/MemberClusters :portkey.aws.elasticache.-2015-02-02.replication-group/AutomaticFailover :portkey.aws.elasticache.-2015-02-02.replication-group/NodeGroups :portkey.aws.elasticache.-2015-02-02.replication-group/ConfigurationEndpoint :portkey.aws.elasticache.-2015-02-02.replication-group/AuthTokenEnabled :portkey.aws.elasticache.-2015-02-02.replication-group/Status :portkey.aws.elasticache.-2015-02-02.replication-group/AtRestEncryptionEnabled :portkey.aws.elasticache.-2015-02-02.replication-group/ClusterEnabled :portkey.aws.elasticache.-2015-02-02.replication-group/TransitEncryptionEnabled :portkey.aws.elasticache.-2015-02-02.replication-group/Description :portkey.aws.elasticache.-2015-02-02.replication-group/SnapshotWindow :portkey.aws.elasticache.-2015-02-02.replication-group/SnapshottingClusterId :portkey.aws.elasticache.-2015-02-02.replication-group/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.replication-group/SnapshotRetentionLimit :portkey.aws.elasticache.-2015-02-02.replication-group/PendingModifiedValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zone))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.subnet/SubnetIdentifier :portkey.aws.elasticache.-2015-02-02.subnet/SubnetAvailabilityZone] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter-name-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/CacheParameterGroupName] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/Source :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/state (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node/CacheNodeType :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/StartTime :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/CacheNodeCount :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/FixedPrice :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/ReservedCacheNodeId :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/Duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/UsagePrice :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/ProductDescription :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/State :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/ReservedCacheNodesOfferingId :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/RecurringCharges :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/OfferingType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/scale-up-modifications (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-type-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/ScaleUpModifications] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/ReservedCacheNodesOfferingId] :opt-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/ReservedCacheNodeId :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/CacheNodeCount] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group/CacheSubnetGroupName :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/CacheSubnetGroupDescription :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/VpcId :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/Subnets] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/Marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/Snapshots] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/resharding-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/new-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/CacheClusterId] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/CacheNodeType :portkey.aws.elasticache.-2015-02-02/AZMode :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/SecurityGroupIds :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/PreferredMaintenanceWindow :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/AutoMinorVersionUpgrade :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/NumCacheNodes :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/EngineVersion :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/NotificationTopicStatus :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/NotificationTopicArn :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/SnapshotWindow :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/SnapshotRetentionLimit :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/ApplyImmediately :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/CacheNodeIdsToRemove :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/CacheSecurityGroupNames :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/NewAvailabilityZones] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/key-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/CacheSecurityGroupName :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/Description] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/Marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/Parameters :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/CacheNodeTypeSpecificParameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-member))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/ReplicationGroupId] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/CacheNodeType :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/SecurityGroupIds :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/PreferredMaintenanceWindow :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/AutoMinorVersionUpgrade :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/PrimaryClusterId :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/EngineVersion :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/NotificationTopicStatus :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/NotificationTopicArn :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/SnapshotWindow :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/SnapshottingClusterId :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/SnapshotRetentionLimit :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/ApplyImmediately :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/AutomaticFailoverEnabled :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/ReplicationGroupDescription :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/NodeGroupId :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/CacheSecurityGroupNames] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalidvpcnetwork-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replicas-per-node-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-cache-clusterazs (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/node-group-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/ReplicationGroupDescription] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/CacheNodeType :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/CacheSubnetGroupName :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/NumNodeGroups :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/AuthToken :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/SnapshotArns :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/SecurityGroupIds :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/PreferredMaintenanceWindow :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/AutoMinorVersionUpgrade :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/ReplicasPerNodeGroup :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/Tags :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/PreferredCacheClusterAZs :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/AtRestEncryptionEnabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/TransitEncryptionEnabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/PrimaryClusterId :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/EngineVersion :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/NotificationTopicArn :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/Port :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/SnapshotWindow :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/NodeGroupConfiguration :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/SnapshotRetentionLimit :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/AutomaticFailoverEnabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/NumCacheClusters :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/Engine :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/CacheSecurityGroupNames :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/SnapshotName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zones-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-events-message/SourceIdentifier :portkey.aws.elasticache.-2015-02-02/SourceType :portkey.aws.elasticache.-2015-02-02.describe-events-message/StartTime :portkey.aws.elasticache.-2015-02-02.describe-events-message/EndTime :portkey.aws.elasticache.-2015-02-02.describe-events-message/Duration :portkey.aws.elasticache.-2015-02-02.describe-events-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-events-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/show-node-group-config (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/CacheClusterId :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/SnapshotName :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/SnapshotSource :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/Marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/ShowNodeGroupConfig] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/CacheSecurityGroupName :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/EC2SecurityGroupName :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/EC2SecurityGroupOwnerId] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/event))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-group-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/resharding-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/NodeGroupCount :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/ApplyImmediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/ReshardingConfiguration :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/NodeGroupsToRemove] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/events (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/event-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.events-message/Marker :portkey.aws.elasticache.-2015-02-02.events-message/Events] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/SnapshotName] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/CacheClusterId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/source-type {:cache-subnet-group "cache-subnet-group", "cache-subnet-group" "cache-subnet-group", "cache-parameter-group" "cache-parameter-group", "cache-cluster" "cache-cluster", :cache-security-group "cache-security-group", :cache-parameter-group "cache-parameter-group", "replication-group" "replication-group", "cache-security-group" "cache-security-group", :replication-group "replication-group", :cache-cluster "cache-cluster"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/date (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.event/SourceIdentifier :portkey.aws.elasticache.-2015-02-02/SourceType :portkey.aws.elasticache.-2015-02-02.event/Message :portkey.aws.elasticache.-2015-02-02.event/Date] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.availability-zone/name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zone (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.availability-zone/Name] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/reserved-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/Marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/ReservedCacheNodes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-node-info (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-clusters-not-in-replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/CacheClusterId :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/Marker :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/ShowCacheNodeInfo :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/ShowCacheClustersNotInReplicationGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-cluster))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-version-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version/Engine :portkey.aws.elasticache.-2015-02-02.cache-engine-version/EngineVersion :portkey.aws.elasticache.-2015-02-02.cache-engine-version/CacheParameterGroupFamily :portkey.aws.elasticache.-2015-02-02.cache-engine-version/CacheEngineDescription :portkey.aws.elasticache.-2015-02-02.cache-engine-version/CacheEngineVersionDescription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ReplicationGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/CacheClusterId :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/CacheNodeIdsToReboot] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/primary-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-members (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-member-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group/NodeGroupId :portkey.aws.elasticache.-2015-02-02.node-group/Status :portkey.aws.elasticache.-2015-02-02.node-group/PrimaryEndpoint :portkey.aws.elasticache.-2015-02-02.node-group/Slots :portkey.aws.elasticache.-2015-02-02.node-group/NodeGroupMembers] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/CacheSubnetGroupName :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/CacheSubnetGroupDescription :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/SubnetIds] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.recurring-charge/RecurringChargeAmount :portkey.aws.elasticache.-2015-02-02.recurring-charge/RecurringChargeFrequency] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/EngineDefaults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/CacheNodeType :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/Value] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/CacheClusterId] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/CacheNodeType :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/CacheSubnetGroupName :portkey.aws.elasticache.-2015-02-02/AZMode :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/AuthToken :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/PreferredAvailabilityZone :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/SnapshotArns :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/SecurityGroupIds :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/PreferredMaintenanceWindow :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/PreferredAvailabilityZones :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/AutoMinorVersionUpgrade :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/Tags :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/NumCacheNodes :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/EngineVersion :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/NotificationTopicArn :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/Port :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/SnapshotWindow :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/SnapshotRetentionLimit :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/Engine :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/CacheSecurityGroupNames :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/SnapshotName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.parameter-name-value/ParameterName :portkey.aws.elasticache.-2015-02-02.parameter-name-value/ParameterValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/reserved-cache-nodes-offerings (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/Marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/ReservedCacheNodesOfferings] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-subnet (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-in-use (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/tag))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-message/Marker :portkey.aws.elasticache.-2015-02-02/CacheSecurityGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/ResourceName :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/Tags] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/CacheParameterGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ReplicationGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/TagList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ReplicationGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ReplicationGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster-message/Marker :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/CacheClusters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/cache-parameter-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/Marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/CacheParameterGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/primary-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-configuration/Slots :portkey.aws.elasticache.-2015-02-02.node-group-configuration/ReplicaCount :portkey.aws.elasticache.-2015-02-02.node-group-configuration/PrimaryAvailabilityZone :portkey.aws.elasticache.-2015-02-02.node-group-configuration/ReplicaAvailabilityZones] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheParameterGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec2-security-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec2-security-group/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec2-security-group/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec2-security-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.ec2-security-group/Status :portkey.aws.elasticache.-2015-02-02.ec2-security-group/EC2SecurityGroupName :portkey.aws.elasticache.-2015-02-02.ec2-security-group/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-id-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/automatic-failover-status {"enabled" "enabled", :enabled "enabled", "disabled" "disabled", :disabled "disabled", "enabling" "enabling", :enabling "enabling", "disabling" "disabling", :disabling "disabling"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/automatic-failover-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/resharding (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/PrimaryClusterId :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/AutomaticFailoverStatus :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/Resharding] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/key-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/ResourceName :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/TagKeys] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/SlotMigration] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ChangeType :portkey.aws.elasticache.-2015-02-02.parameter/DataType :portkey.aws.elasticache.-2015-02-02.parameter/ParameterName :portkey.aws.elasticache.-2015-02-02.parameter/Source :portkey.aws.elasticache.-2015-02-02.parameter/MinimumEngineVersion :portkey.aws.elasticache.-2015-02-02.parameter/AllowedValues :portkey.aws.elasticache.-2015-02-02.parameter/Description :portkey.aws.elasticache.-2015-02-02.parameter/IsModifiable :portkey.aws.elasticache.-2015-02-02.parameter/ParameterValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/cache-node-type-specific-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ChangeType :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/DataType :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/ParameterName :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/Source :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/MinimumEngineVersion :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/AllowedValues :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/CacheNodeTypeSpecificValues :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/Description :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/IsModifiable] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.resharding-configuration/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.resharding-configuration/PreferredAvailabilityZones] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/CacheClusterId] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/FinalSnapshotIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/CacheSecurityGroupName :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/node-snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.snapshot/CacheNodeType :portkey.aws.elasticache.-2015-02-02.snapshot/CacheSubnetGroupName :portkey.aws.elasticache.-2015-02-02.snapshot/NumNodeGroups :portkey.aws.elasticache.-2015-02-02.snapshot/NodeSnapshots :portkey.aws.elasticache.-2015-02-02.snapshot/PreferredAvailabilityZone :portkey.aws.elasticache.-2015-02-02.snapshot/AutomaticFailover :portkey.aws.elasticache.-2015-02-02.snapshot/PreferredMaintenanceWindow :portkey.aws.elasticache.-2015-02-02.snapshot/CacheClusterId :portkey.aws.elasticache.-2015-02-02.snapshot/AutoMinorVersionUpgrade :portkey.aws.elasticache.-2015-02-02.snapshot/CacheClusterCreateTime :portkey.aws.elasticache.-2015-02-02.snapshot/NumCacheNodes :portkey.aws.elasticache.-2015-02-02.snapshot/SnapshotStatus :portkey.aws.elasticache.-2015-02-02.snapshot/EngineVersion :portkey.aws.elasticache.-2015-02-02.snapshot/Port :portkey.aws.elasticache.-2015-02-02.snapshot/SnapshotWindow :portkey.aws.elasticache.-2015-02-02.snapshot/VpcId :portkey.aws.elasticache.-2015-02-02.snapshot/TopicArn :portkey.aws.elasticache.-2015-02-02.snapshot/SnapshotSource :portkey.aws.elasticache.-2015-02-02.snapshot/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.snapshot/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.snapshot/SnapshotRetentionLimit :portkey.aws.elasticache.-2015-02-02.snapshot/Engine :portkey.aws.elasticache.-2015-02-02.snapshot/ReplicationGroupDescription :portkey.aws.elasticache.-2015-02-02.snapshot/SnapshotName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tstamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/SnapshotName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/CacheClusterId :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/ReplicationGroupId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/CacheSecurityGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/CacheSubnetGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/CacheParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-parameter-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/client-download-landing-page (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheNodeType :portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheSubnetGroupName :portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheParameterGroup :portkey.aws.elasticache.-2015-02-02.cache-cluster/PreferredAvailabilityZone :portkey.aws.elasticache.-2015-02-02.cache-cluster/PreferredMaintenanceWindow :portkey.aws.elasticache.-2015-02-02.cache-cluster/SecurityGroups :portkey.aws.elasticache.-2015-02-02.cache-cluster/ConfigurationEndpoint :portkey.aws.elasticache.-2015-02-02.cache-cluster/AuthTokenEnabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheClusterId :portkey.aws.elasticache.-2015-02-02.cache-cluster/AutoMinorVersionUpgrade :portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheClusterStatus :portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheSecurityGroups :portkey.aws.elasticache.-2015-02-02.cache-cluster/AtRestEncryptionEnabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheClusterCreateTime :portkey.aws.elasticache.-2015-02-02.cache-cluster/NumCacheNodes :portkey.aws.elasticache.-2015-02-02.cache-cluster/TransitEncryptionEnabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/EngineVersion :portkey.aws.elasticache.-2015-02-02.cache-cluster/ClientDownloadLandingPage :portkey.aws.elasticache.-2015-02-02.cache-cluster/SnapshotWindow :portkey.aws.elasticache.-2015-02-02.cache-cluster/ReplicationGroupId :portkey.aws.elasticache.-2015-02-02.cache-cluster/SnapshotRetentionLimit :portkey.aws.elasticache.-2015-02-02.cache-cluster/Engine :portkey.aws.elasticache.-2015-02-02/NotificationConfiguration :portkey.aws.elasticache.-2015-02-02.cache-cluster/CacheNodes :portkey.aws.elasticache.-2015-02-02/PendingModifiedValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/CacheSecurityGroupName :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/address (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/endpoint (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.endpoint/Address :portkey.aws.elasticache.-2015-02-02.endpoint/Port] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-message/Marker :portkey.aws.elasticache.-2015-02-02.replication-group-message/ReplicationGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-parameter-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/security-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.security-group-membership/SecurityGroupId :portkey.aws.elasticache.-2015-02-02.security-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/CacheSubnetGroupName :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-size (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tstamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-snapshot/CacheClusterId :portkey.aws.elasticache.-2015-02-02.node-snapshot/NodeGroupId :portkey.aws.elasticache.-2015-02-02.node-snapshot/CacheNodeId :portkey.aws.elasticache.-2015-02-02/NodeGroupConfiguration :portkey.aws.elasticache.-2015-02-02.node-snapshot/CacheSize :portkey.aws.elasticache.-2015-02-02.node-snapshot/CacheNodeCreateTime :portkey.aws.elasticache.-2015-02-02.node-snapshot/SnapshotCreateTime] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/key (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.tag/Key :portkey.aws.elasticache.-2015-02-02.tag/Value] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/ReservedCacheNodesOfferingId :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/CacheNodeType :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/Duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/ProductDescription :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/OfferingType :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/ResourceName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/notification-configuration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.notification-configuration/TopicArn :portkey.aws.elasticache.-2015-02-02.notification-configuration/TopicStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/ParameterApplyStatus :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/CacheNodeIdsToReboot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/CacheSecurityGroupName :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/EC2SecurityGroupName :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/EC2SecurityGroupOwnerId] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/CacheParameterGroupName] :opt-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/ResetAllParameters :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/ParameterNameValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/aws-query-error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/engine-defaults (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.engine-defaults/CacheParameterGroupFamily :portkey.aws.elasticache.-2015-02-02.engine-defaults/Marker :portkey.aws.elasticache.-2015-02-02.engine-defaults/Parameters :portkey.aws.elasticache.-2015-02-02.engine-defaults/CacheNodeTypeSpecificParameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/cache-engine-versions (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/Marker :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/CacheEngineVersions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/CacheParameterGroupName :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/ParameterNameValues] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/ReservedCacheNodeId :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/ReservedCacheNodesOfferingId :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/CacheNodeType :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/Duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/ProductDescription :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/OfferingType :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/MaxRecords :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/Marker :portkey.aws.elasticache.-2015-02-02/CacheSubnetGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-modified-values (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.pending-modified-values/NumCacheNodes :portkey.aws.elasticache.-2015-02-02.pending-modified-values/CacheNodeIdsToRemove :portkey.aws.elasticache.-2015-02-02.pending-modified-values/EngineVersion :portkey.aws.elasticache.-2015-02-02.pending-modified-values/CacheNodeType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/source-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-bucket (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/SourceSnapshotName :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/TargetSnapshotName] :opt-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/TargetBucket] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-type-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/apicall-rate-for-customer-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/subnet))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/CacheSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/ReplicationGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-subnet-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.core/defn describe-cache-parameter-groups "Returns a list of cache parameter group descriptions. If a cache parameter group\nname is specified, the list contains only the descriptions for that group." ([] (describe-cache-parameter-groups {})) ([describe-cache-parameter-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cache-parameter-groups-message "DescribeCacheParameterGroups" describe-cache-parameter-groups-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-cache-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message))

(clojure.core/defn modify-replication-group-shard-configuration "Performs horizontal scaling on a Redis (cluster mode enabled) cluster with no\ndowntime. Requires Redis engine version 3.2.10 or newer. For information on\nupgrading your engine to a newer version, see Upgrading Engine Versions\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/VersionManagement.html)\nin the Amazon ElastiCache User Guide.\n For more information on ElastiCache for Redis online horizontal scaling, see\nElastiCache for Redis Horizontal Scaling\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/redis-cluster-resharding-online.html)" ([modify-replication-group-shard-configuration-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-replication-group-shard-configuration-message "ModifyReplicationGroupShardConfiguration" modify-replication-group-shard-configuration-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalidvpcnetwork-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}))))
(clojure.spec.alpha/fdef modify-replication-group-shard-configuration :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result))

(clojure.core/defn describe-cache-security-groups "Returns a list of cache security group descriptions. If a cache security group\nname is specified, the list contains only the description of that group." ([] (describe-cache-security-groups {})) ([describe-cache-security-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cache-security-groups-message "DescribeCacheSecurityGroups" describe-cache-security-groups-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-security-group-message {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-cache-security-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-message))

(clojure.core/defn modify-cache-parameter-group "Modifies the parameters of a cache parameter group. You can modify up to 20\nparameters in a single request by submitting a list parameter name and value\npairs." ([modify-cache-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cache-parameter-group-message "ModifyCacheParameterGroup" modify-cache-parameter-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef modify-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn test-failover "Represents the input of a TestFailover operation which test automatic failover\non a specified node group (called shard in the console) in a replication group\n(called cluster in the console).\n Note the following\n * A customer can use this operation to test automatic failover on up to 5\nshards (called node groups in the ElastiCache API and AWS CLI) in any rolling\n24-hour period.\n * If calling this operation on shards in different clusters (called replication\ngroups in the API and CLI), the calls can be made concurrently.\n * If calling this operation multiple times on different shards in the same\nRedis (cluster mode enabled) replication group, the first node replacement must\ncomplete before a subsequent call can be made.\n * To determine whether the node replacement is complete you can check Events\nusing the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look\nfor the following automatic failover related events, listed here in order of\noccurrance:\n * Replication group message: Test Failover API called for node group\n<node-group-id>\n * Cache cluster message: Failover from master node <primary-node-id> to replica\nnode <node-id> completed\n * Replication group message: Failover from master node <primary-node-id> to\nreplica node <node-id> completed\n * Cache cluster message: Recovering cache nodes <node-id>\n * Cache cluster message: Finished recovery for cache nodes <node-id>\n For more information see:\n * Viewing ElastiCache Events\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/ECEvents.Viewing.html)\nin the ElastiCache User Guide\n * DescribeEvents\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html)\nin the ElastiCache API Reference\n Also see, Testing Multi-AZ with Automatic Failover\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoFailover.html#auto-failover-test)\nin the ElastiCache User Guide." ([test-failover-message] (clojure.core/let [req<-input__36755__auto__ (req<-test-failover-message "TestFailover" test-failover-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/test-failover-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/test-failover-result {"APICallRateForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/apicall-rate-for-customer-exceeded-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "TestFailoverNotAvailableFault" :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef test-failover :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/test-failover-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/test-failover-result))

(clojure.core/defn delete-cache-parameter-group "Deletes the specified cache parameter group. You cannot delete a cache parameter\ngroup if it is associated with any cache clusters." ([delete-cache-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cache-parameter-group-message "DeleteCacheParameterGroup" delete-cache-parameter-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef delete-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-replication-group "Deletes an existing replication group. By default, this operation deletes the\nentire replication group, including the primary/primaries and all of the read\nreplicas. If the replication group has only one primary, you can optionally\ndelete only the read replicas, while retaining the primary by setting\nRetainPrimaryCluster=true.\n When you receive a successful response from this operation, Amazon ElastiCache\nimmediately begins deleting the selected resources; you cannot cancel or revert\nthis operation.\n This operation is valid for Redis only." ([delete-replication-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-replication-group-message "DeleteReplicationGroup" delete-replication-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef delete-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result))

(clojure.core/defn purchase-reserved-cache-nodes-offering "Allows you to purchase a reserved cache node offering." ([purchase-reserved-cache-nodes-offering-message] (clojure.core/let [req<-input__36755__auto__ (req<-purchase-reserved-cache-nodes-offering-message "PurchaseReservedCacheNodesOffering" purchase-reserved-cache-nodes-offering-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "ReservedCacheNodeAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault, "ReservedCacheNodeQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef purchase-reserved-cache-nodes-offering :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result))

(clojure.core/defn describe-events "Returns events related to clusters, cache security groups, and cache parameter\ngroups. You can obtain events specific to a particular cluster, cache security\ngroup, or cache parameter group by providing the name as a parameter.\n By default, only the events occurring within the last hour are returned;\nhowever, you can retrieve up to 14 days' worth of events if necessary." ([] (describe-events {})) ([describe-events-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-events-message "DescribeEvents" describe-events-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-events-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/events-message {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/events-message))

(clojure.core/defn create-snapshot "Creates a copy of an entire cluster or replication group at a specific moment in\ntime.\n This operation is valid for Redis only." ([create-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-snapshot-message "CreateSnapshot" create-snapshot-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/create-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/create-snapshot-result {"SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault}))))
(clojure.spec.alpha/fdef create-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-snapshot-result))

(clojure.core/defn describe-cache-engine-versions "Returns a list of the available cache engines and their versions." ([] (describe-cache-engine-versions {})) ([describe-cache-engine-versions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cache-engine-versions-message "DescribeCacheEngineVersions" describe-cache-engine-versions-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message {}))))
(clojure.spec.alpha/fdef describe-cache-engine-versions :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message))

(clojure.core/defn reset-cache-parameter-group "Modifies the parameters of a cache parameter group to the engine or system\ndefault value. You can reset specific parameters by submitting a list of\nparameter names. To reset the entire cache parameter group, specify the\nResetAllParameters and CacheParameterGroupName parameters." ([reset-cache-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-reset-cache-parameter-group-message "ResetCacheParameterGroup" reset-cache-parameter-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef reset-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn modify-replication-group "Modifies the settings for a replication group.\n Due to current limitations on Redis (cluster mode disabled), this operation or\nparameter is not supported on Redis (cluster mode enabled) replication groups.\n This operation is valid for Redis only." ([modify-replication-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-replication-group-message "ModifyReplicationGroup" modify-replication-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalidvpcnetwork-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}))))
(clojure.spec.alpha/fdef modify-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result))

(clojure.core/defn describe-replication-groups "Returns information about a particular replication group. If no identifier is\nspecified, DescribeReplicationGroups returns information about all replication\ngroups.\n This operation is valid for Redis only." ([] (describe-replication-groups {})) ([describe-replication-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-replication-groups-message "DescribeReplicationGroups" describe-replication-groups-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/replication-group-message {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-replication-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-message))

(clojure.core/defn reboot-cache-cluster "Reboots some, or all, of the cache nodes within a provisioned cluster. This\noperation applies any modified cache parameter groups to the cluster. The reboot\noperation takes place as soon as possible, and results in a momentary outage to\nthe cluster. During the reboot, the cluster status is set to REBOOTING.\n The reboot causes the contents of the cache (for each cache node being\nrebooted) to be lost.\n When the reboot is complete, a cluster event is created.\n Rebooting a cluster is currently supported on Memcached and Redis (cluster mode\ndisabled) clusters. Rebooting is not supported on Redis (cluster mode enabled)\nclusters.\n If you make changes to parameters that require a Redis (cluster mode enabled)\ncluster reboot for the changes to be applied, see Rebooting a Cluster\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Clusters.Rebooting.htm)\nfor an alternate process." ([reboot-cache-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-reboot-cache-cluster-message "RebootCacheCluster" reboot-cache-cluster-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result {"InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault}))))
(clojure.spec.alpha/fdef reboot-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result))

(clojure.core/defn list-tags-for-resource "Lists all cost allocation tags currently on the named resource. A cost\nallocation tag is a key-value pair where the key is case-sensitive and the value\nis optional. You can use cost allocation tags to categorize and track your AWS\ncosts.\n You can have a maximum of 50 cost allocation tags on an ElastiCache resource.\nFor more information, see Using Cost Allocation Tags in Amazon ElastiCache\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/BestPractices.html)." ([list-tags-for-resource-message] (clojure.core/let [req<-input__36755__auto__ (req<-list-tags-for-resource-message "ListTagsForResource" list-tags-for-resource-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/tag-list-message {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalidarnfault}))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-engine-default-parameters "Returns the default engine and system parameter information for the specified\ncache engine." ([describe-engine-default-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-engine-default-parameters-message "DescribeEngineDefaultParameters" describe-engine-default-parameters-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result))

(clojure.core/defn describe-cache-clusters "Returns information about all provisioned clusters if no cluster identifier is\nspecified, or about a specific cache cluster if a cluster identifier is\nsupplied.\n By default, abbreviated information about the clusters is returned. You can use\nthe optional ShowCacheNodeInfo flag to retrieve detailed information about the\ncache nodes associated with the clusters. These details include the DNS address\nand port for the cache node endpoint.\n If the cluster is in the creating state, only cluster-level information is\ndisplayed until all of the nodes are successfully provisioned.\n If the cluster is in the deleting state, only cluster-level information is\ndisplayed.\n If cache nodes are currently being added to the cluster, node endpoint\ninformation and creation time for the additional nodes are not displayed until\nthey are completely provisioned. When the cluster state is available, the\ncluster is ready for use.\n If cache nodes are currently being removed from the cluster, no endpoint\ninformation for the removed nodes is displayed." ([] (describe-cache-clusters {})) ([describe-cache-clusters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cache-clusters-message "DescribeCacheClusters" describe-cache-clusters-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-cluster-message {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-cache-clusters :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-message))

(clojure.core/defn authorize-cache-security-group-ingress "Allows network ingress to a cache security group. Applications using ElastiCache\nmust be running on Amazon EC2, and Amazon EC2 security groups are used as the\nauthorization mechanism.\n You cannot authorize ingress from an Amazon EC2 security group in one region to\nan ElastiCache cluster in another region." ([authorize-cache-security-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-authorize-cache-security-group-ingress-message "AuthorizeCacheSecurityGroupIngress" authorize-cache-security-group-ingress-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef authorize-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result))

(clojure.core/defn create-cache-cluster "Creates a cluster. All nodes in the cluster run the same protocol-compliant\ncache engine software, either Memcached or Redis.\n Due to current limitations on Redis (cluster mode disabled), this operation or\nparameter is not supported on Redis (cluster mode enabled) replication groups." ([create-cache-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cache-cluster-message "CreateCacheCluster" create-cache-cluster-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalidvpcnetwork-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "CacheClusterAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault}))))
(clojure.spec.alpha/fdef create-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result))

(clojure.core/defn delete-cache-security-group "Deletes a cache security group.\n You cannot delete a cache security group if it is associated with any clusters." ([delete-cache-security-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cache-security-group-message "DeleteCacheSecurityGroup" delete-cache-security-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef delete-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-cache-subnet-group "Deletes a cache subnet group.\n You cannot delete a cache subnet group if it is associated with any clusters." ([delete-cache-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cache-subnet-group-message "DeleteCacheSubnetGroup" delete-cache-subnet-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"CacheSubnetGroupInUse" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-snapshot "Deletes an existing snapshot. When you receive a successful response from this\noperation, ElastiCache immediately begins deleting the snapshot; you cannot\ncancel or revert this operation.\n This operation is valid for Redis only." ([delete-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-snapshot-message "DeleteSnapshot" delete-snapshot-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result {"SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef delete-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result))

(clojure.core/defn describe-cache-parameters "Returns the detailed parameter list for a particular cache parameter group." ([describe-cache-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cache-parameters-message "DescribeCacheParameters" describe-cache-parameters-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-cache-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details))

(clojure.core/defn create-replication-group "Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled)\nreplication group.\n A Redis (cluster mode disabled) replication group is a collection of clusters,\nwhere one of the clusters is a read/write primary and the others are read-only\nreplicas. Writes to the primary are asynchronously propagated to the replicas.\n A Redis (cluster mode enabled) replication group is a collection of 1 to 15\nnode groups (shards). Each node group (shard) has one read/write primary node\nand up to 5 read-only replica nodes. Writes to the primary are asynchronously\npropagated to the replicas. Redis (cluster mode enabled) replication groups\npartition the data across node groups (shards).\n When a Redis (cluster mode disabled) replication group has been successfully\ncreated, you can add one or more read replicas to it, up to a total of 5 read\nreplicas. You cannot alter a Redis (cluster mode enabled) replication group\nafter it has been created. However, if you need to increase or decrease the\nnumber of node groups (console: shards), you can avail yourself of ElastiCache\nfor Redis' enhanced backup and restore. For more information, see Restoring From\na Backup with Cluster Resizing\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/backups-restoring.html)\nin the ElastiCache User Guide.\n This operation is valid for Redis only." ([create-replication-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-replication-group-message "CreateReplicationGroup" create-replication-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/create-replication-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/create-replication-group-result {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalidvpcnetwork-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "ReplicationGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}))))
(clojure.spec.alpha/fdef create-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-replication-group-result))

(clojure.core/defn revoke-cache-security-group-ingress "Revokes ingress from a cache security group. Use this operation to disallow\naccess from an Amazon EC2 security group that had been previously authorized." ([revoke-cache-security-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-revoke-cache-security-group-ingress-message "RevokeCacheSecurityGroupIngress" revoke-cache-security-group-ingress-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef revoke-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result))

(clojure.core/defn create-cache-subnet-group "Creates a new cache subnet group.\n Use this parameter only when you are creating a cluster in an Amazon Virtual\nPrivate Cloud (Amazon VPC)." ([create-cache-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cache-subnet-group-message "CreateCacheSubnetGroup" create-cache-subnet-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result {"CacheSubnetGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault, "CacheSubnetGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}))))
(clojure.spec.alpha/fdef create-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result))

(clojure.core/defn describe-cache-subnet-groups "Returns a list of cache subnet group descriptions. If a subnet group name is\nspecified, the list contains only the description of that group." ([] (describe-cache-subnet-groups {})) ([describe-cache-subnet-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cache-subnet-groups-message "DescribeCacheSubnetGroups" describe-cache-subnet-groups-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}))))
(clojure.spec.alpha/fdef describe-cache-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message))

(clojure.core/defn describe-snapshots "Returns information about cluster or replication group snapshots. By default,\nDescribeSnapshots lists all of your snapshots; it can optionally describe a\nsingle snapshot, or just the snapshots associated with a particular cache\ncluster.\n This operation is valid for Redis only." ([] (describe-snapshots {})) ([describe-snapshots-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-snapshots-message "DescribeSnapshots" describe-snapshots-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-snapshots :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message))

(clojure.core/defn modify-cache-cluster "Modifies the settings for a cluster. You can use this operation to change one or\nmore cluster configuration parameters by specifying the parameters and the new\nvalues." ([modify-cache-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cache-cluster-message "ModifyCacheCluster" modify-cache-cluster-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalidvpcnetwork-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}))))
(clojure.spec.alpha/fdef modify-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result))

(clojure.core/defn copy-snapshot "Makes a copy of an existing snapshot.\n This operation is valid for Redis only.\n Users or groups that have permissions to use the CopySnapshot operation can\ncreate their own Amazon S3 buckets and copy snapshots to it. To control access\nto your snapshots, use an IAM policy to control who has the ability to use the\nCopySnapshot operation. For more information about using IAM to control the use\nof ElastiCache operations, see Exporting Snapshots\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Snapshots.Exporting.html)\nand Authentication & Access Control\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/IAM.html).\n You could receive the following error messages.\n Error Messages\n * Error Message: The S3 bucket %s is outside of the region.\n Solution: Create an Amazon S3 bucket in the same region as your snapshot. For\nmore information, see Step 1: Create an Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Snapshots.Exporting.html#Snapshots.Exporting.CreateBucket)\nin the ElastiCache User Guide.\n * Error Message: The S3 bucket %s does not exist.\n Solution: Create an Amazon S3 bucket in the same region as your snapshot. For\nmore information, see Step 1: Create an Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Snapshots.Exporting.html#Snapshots.Exporting.CreateBucket)\nin the ElastiCache User Guide.\n * Error Message: The S3 bucket %s is not owned by the authenticated user.\n Solution: Create an Amazon S3 bucket in the same region as your snapshot. For\nmore information, see Step 1: Create an Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Snapshots.Exporting.html#Snapshots.Exporting.CreateBucket)\nin the ElastiCache User Guide.\n * Error Message: The authenticated user does not have sufficient permissions to\nperform the desired activity.\n Solution: Contact your system administrator to get the needed permissions.\n * Error Message: The S3 bucket %s already contains an object with key %s.\n Solution: Give the TargetSnapshotName a new and unique value. If exporting a\nsnapshot, you could alternatively create a new Amazon S3 bucket and use this\nsame value for TargetSnapshotName.\n * Error Message: ElastiCache has not been granted READ permissions %s on the S3\nBucket.\n Solution: Add List and Read permissions on the bucket. For more information,\nsee Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Snapshots.Exporting.html#Snapshots.Exporting.GrantAccess)\nin the ElastiCache User Guide.\n * Error Message: ElastiCache has not been granted WRITE permissions %s on the\nS3 Bucket.\n Solution: Add Upload/Delete permissions on the bucket. For more information,\nsee Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Snapshots.Exporting.html#Snapshots.Exporting.GrantAccess)\nin the ElastiCache User Guide.\n * Error Message: ElastiCache has not been granted READ_ACP permissions %s on\nthe S3 Bucket.\n Solution: Add View Permissions on the bucket. For more information, see Step 2:\nGrant ElastiCache Access to Your Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Snapshots.Exporting.html#Snapshots.Exporting.GrantAccess)\nin the ElastiCache User Guide." ([copy-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-copy-snapshot-message "CopySnapshot" copy-snapshot-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result {"SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef copy-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result))

(clojure.core/defn modify-cache-subnet-group "Modifies an existing cache subnet group." ([modify-cache-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cache-subnet-group-message "ModifyCacheSubnetGroup" modify-cache-subnet-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "SubnetInUse" :portkey.aws.elasticache.-2015-02-02/subnet-in-use, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}))))
(clojure.spec.alpha/fdef modify-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result))

(clojure.core/defn create-cache-security-group "Creates a new cache security group. Use a cache security group to control access\nto one or more clusters.\n Cache security groups are only used when you are creating a cluster outside of\nan Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster\ninside of a VPC, use a cache subnet group instead. For more information, see\nCreateCacheSubnetGroup\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html)." ([create-cache-security-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cache-security-group-message "CreateCacheSecurityGroup" create-cache-security-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result {"CacheSecurityGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault, "CacheSecurityGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef create-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result))

(clojure.core/defn remove-tags-from-resource "Removes the tags identified by the TagKeys list from the named resource." ([remove-tags-from-resource-message] (clojure.core/let [req<-input__36755__auto__ (req<-remove-tags-from-resource-message "RemoveTagsFromResource" remove-tags-from-resource-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/tag-list-message {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalidarnfault, "TagNotFoundFault" :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault}))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn list-allowed-node-type-modifications "Lists all available node types that you can scale your Redis cluster's or\nreplication group's current node type up to.\n When you use the ModifyCacheCluster or ModifyReplicationGroup operations to\nscale up your cluster or replication group, the value of the CacheNodeType\nparameter must be one of the node types returned by this operation." ([] (list-allowed-node-type-modifications {})) ([list-allowed-node-type-modifications-message] (clojure.core/let [req<-input__36755__auto__ (req<-list-allowed-node-type-modifications-message "ListAllowedNodeTypeModifications" list-allowed-node-type-modifications-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception}))))
(clojure.spec.alpha/fdef list-allowed-node-type-modifications :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message))

(clojure.core/defn create-cache-parameter-group "Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache\nparameter group is a collection of parameters and their values that are applied\nto all of the nodes in any cluster or replication group using the\nCacheParameterGroup.\n A newly created CacheParameterGroup is an exact duplicate of the default\nparameter group for the CacheParameterGroupFamily. To customize the newly\ncreated CacheParameterGroup you can change the values of specific parameters.\nFor more information, see:\n * ModifyCacheParameterGroup\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html)\nin the ElastiCache API Reference.\n * Parameters and Parameter Groups\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/ParameterGroups.html)\nin the ElastiCache User Guide." ([create-cache-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cache-parameter-group-message "CreateCacheParameterGroup" create-cache-parameter-group-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result {"CacheParameterGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault, "CacheParameterGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef create-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result))

(clojure.core/defn add-tags-to-resource "Adds up to 50 cost allocation tags to the named resource. A cost allocation tag\nis a key-value pair where the key and value are case-sensitive. You can use cost\nallocation tags to categorize and track your AWS costs.\n When you apply tags to your ElastiCache resources, AWS generates a cost\nallocation report as a comma-separated value (CSV) file with your usage and\ncosts aggregated by your tags. You can apply tags that represent business\ncategories (such as cost centers, application names, or owners) to organize your\ncosts across multiple services. For more information, see Using Cost Allocation\nTags in Amazon ElastiCache\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Tagging.html) in\nthe ElastiCache User Guide." ([add-tags-to-resource-message] (clojure.core/let [req<-input__36755__auto__ (req<-add-tags-to-resource-message "AddTagsToResource" add-tags-to-resource-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/tag-list-message {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalidarnfault}))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-reserved-cache-nodes "Returns information about reserved cache nodes for this account, or about a\nspecified reserved cache node." ([] (describe-reserved-cache-nodes {})) ([describe-reserved-cache-nodes-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserved-cache-nodes-message "DescribeReservedCacheNodes" describe-reserved-cache-nodes-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message {"ReservedCacheNodeNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message))

(clojure.core/defn describe-reserved-cache-nodes-offerings "Lists available reserved cache node offerings." ([] (describe-reserved-cache-nodes-offerings {})) ([describe-reserved-cache-nodes-offerings-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserved-cache-nodes-offerings-message "DescribeReservedCacheNodesOfferings" describe-reserved-cache-nodes-offerings-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes-offerings :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message))

(clojure.core/defn delete-cache-cluster "Deletes a previously provisioned cluster. DeleteCacheCluster deletes all\nassociated cache nodes, node endpoints and the cluster itself. When you receive\na successful response from this operation, Amazon ElastiCache immediately begins\ndeleting the cluster; you cannot cancel or revert this operation.\n This operation cannot be used to delete a cluster that is the last read replica\nof a replication group or node group (shard) that has Multi-AZ mode enabled or a\ncluster from a Redis (cluster mode enabled) replication group.\n Due to current limitations on Redis (cluster mode disabled), this operation or\nparameter is not supported on Redis (cluster mode enabled) replication groups." ([delete-cache-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cache-cluster-message "DeleteCacheCluster" delete-cache-cluster-message)] (portkey.aws/-query-call portkey.aws.elasticache.-2015-02-02/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}))))
(clojure.spec.alpha/fdef delete-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result))
