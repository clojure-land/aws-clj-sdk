(ns portkey.aws.elasticache.-2015-02-02 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-1"},
    :ssl-common-name "elasticache.ap-northeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "elasticache", :region "eu-west-1"},
    :ssl-common-name "elasticache.eu-west-1.amazonaws.com",
    :endpoint "https://elasticache.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "elasticache", :region "us-east-2"},
    :ssl-common-name "elasticache.us-east-2.amazonaws.com",
    :endpoint "https://elasticache.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-2"},
    :ssl-common-name "elasticache.ap-southeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "elasticache", :region "cn-north-1"},
    :ssl-common-name "elasticache.cn-north-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "elasticache", :region "sa-east-1"},
    :ssl-common-name "elasticache.sa-east-1.amazonaws.com",
    :endpoint "https://elasticache.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-1"},
    :ssl-common-name "elasticache.ap-southeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope
    {:service "elasticache", :region "cn-northwest-1"},
    :ssl-common-name "elasticache.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-2"},
    :ssl-common-name "elasticache.ap-northeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "elasticache", :region "eu-west-3"},
    :ssl-common-name "elasticache.eu-west-3.amazonaws.com",
    :endpoint "https://elasticache.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "elasticache", :region "ca-central-1"},
    :ssl-common-name "elasticache.ca-central-1.amazonaws.com",
    :endpoint "https://elasticache.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "elasticache", :region "eu-central-1"},
    :ssl-common-name "elasticache.eu-central-1.amazonaws.com",
    :endpoint "https://elasticache.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "elasticache", :region "eu-west-2"},
    :ssl-common-name "elasticache.eu-west-2.amazonaws.com",
    :endpoint "https://elasticache.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope
    {:service "elasticache", :region "us-gov-west-1"},
    :ssl-common-name "elasticache.us-gov-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "elasticache", :region "us-west-2"},
    :ssl-common-name "elasticache.us-west-2.amazonaws.com",
    :endpoint "https://elasticache.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "elasticache", :region "us-east-1"},
    :ssl-common-name "elasticache.us-east-1.amazonaws.com",
    :endpoint "https://elasticache.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "elasticache", :region "us-west-1"},
    :ssl-common-name "elasticache.us-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "elasticache", :region "ap-south-1"},
    :ssl-common-name "elasticache.ap-south-1.amazonaws.com",
    :endpoint "https://elasticache.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "fips"
   {:credential-scope
    {:service "elasticache", :region "us-gov-west-1"},
    :ssl-common-name "elasticache-fips.us-gov-west-1.amazonaws.com",
    :endpoint "https://elasticache-fips.us-gov-west-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-az-mode)

(clojure.core/declare ser-node-group-configuration-list)

(clojure.core/declare ser-node-groups-to-remove-list)

(clojure.core/declare ser-security-group-ids-list)

(clojure.core/declare ser-parameter-name-value-list)

(clojure.core/declare ser-resharding-configuration-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-availability-zones-list)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-snapshot-arns-list)

(clojure.core/declare ser-parameter-name-value)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-cache-security-group-name-list)

(clojure.core/declare ser-remove-replicas-list)

(clojure.core/declare ser-node-group-configuration)

(clojure.core/declare ser-cache-node-ids-list)

(clojure.core/declare ser-allowed-node-group-id)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-resharding-configuration)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-preferred-availability-zone-list)

(clojure.core/declare ser-node-groups-to-retain-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-configure-shard)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-replica-configuration-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-az-mode [input] #:http.request.field{:value (clojure.core/get {"single-az" "single-az", :singleaz "single-az", "cross-az" "cross-az", :crossaz "cross-az"} input), :shape "AZMode"})

(clojure.core/defn- ser-node-group-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-node-group-configuration coll) #:http.request.field{:shape "NodeGroupConfiguration", :location-name "NodeGroupConfiguration"}))) input), :shape "NodeGroupConfigurationList", :type "list"})

(clojure.core/defn- ser-node-groups-to-remove-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-allowed-node-group-id coll) #:http.request.field{:shape "AllowedNodeGroupId", :location-name "NodeGroupToRemove"}))) input), :shape "NodeGroupsToRemoveList", :type "list"})

(clojure.core/defn- ser-security-group-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "SecurityGroupIdsList", :type "list"})

(clojure.core/defn- ser-parameter-name-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter-name-value coll) #:http.request.field{:shape "ParameterNameValue", :location-name "ParameterNameValue"}))) input), :shape "ParameterNameValueList", :type "list"})

(clojure.core/defn- ser-resharding-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resharding-configuration coll) #:http.request.field{:shape "ReshardingConfiguration", :location-name "ReshardingConfiguration"}))) input), :shape "ReshardingConfigurationList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-availability-zones-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZonesList", :type "list"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:cacheparametergroup "cache-parameter-group", "cache-subnet-group" "cache-subnet-group", "cache-parameter-group" "cache-parameter-group", "cache-cluster" "cache-cluster", :replicationgroup "replication-group", "replication-group" "replication-group", "cache-security-group" "cache-security-group", :cachesubnetgroup "cache-subnet-group", :cachecluster "cache-cluster", :cachesecuritygroup "cache-security-group"} input), :shape "SourceType"})

(clojure.core/defn- ser-snapshot-arns-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SnapshotArn"}))) input), :shape "SnapshotArnsList", :type "list"})

(clojure.core/defn- ser-parameter-name-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ParameterNameValue", :type "structure"} (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-cache-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CacheSecurityGroupName"}))) input), :shape "CacheSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-remove-replicas-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "RemoveReplicasList", :type "list"})

(clojure.core/defn- ser-node-group-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NodeGroupConfiguration", :type "structure"} (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})) (clojure.core/contains? input :slots) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :slots)) #:http.request.field{:name "Slots", :shape "String"})) (clojure.core/contains? input :replica-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :replica-count)) #:http.request.field{:name "ReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :primary-availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-availability-zone)) #:http.request.field{:name "PrimaryAvailabilityZone", :shape "String"})) (clojure.core/contains? input :replica-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :replica-availability-zones)) #:http.request.field{:name "ReplicaAvailabilityZones", :shape "AvailabilityZonesList"}))))

(clojure.core/defn- ser-cache-node-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CacheNodeId"}))) input), :shape "CacheNodeIdsList", :type "list"})

(clojure.core/defn- ser-allowed-node-group-id [input] #:http.request.field{:value input, :shape "AllowedNodeGroupId"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-resharding-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReshardingConfiguration", :type "structure"} (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})) (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "AvailabilityZonesList"}))))

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-preferred-availability-zone-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PreferredAvailabilityZone"}))) input), :shape "PreferredAvailabilityZoneList", :type "list"})

(clojure.core/defn- ser-node-groups-to-retain-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-allowed-node-group-id coll) #:http.request.field{:shape "AllowedNodeGroupId", :location-name "NodeGroupToRetain"}))) input), :shape "NodeGroupsToRetainList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-configure-shard [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-allowed-node-group-id (:node-group-id input)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"}) (clojure.core/into (ser-integer (:new-replica-count input)) #:http.request.field{:name "NewReplicaCount", :shape "Integer"})], :shape "ConfigureShard", :type "structure"} (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "PreferredAvailabilityZoneList"}))))

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-replica-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-configure-shard coll) #:http.request.field{:shape "ConfigureShard", :location-name "ConfigureShard"}))) input), :shape "ReplicaConfigurationList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-test-failover-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})]}))

(clojure.core/defn- req-describe-cache-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"}))))

(clojure.core/defn- req-delete-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})]} (clojure.core/contains? input :retain-primary-cluster) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :retain-primary-cluster)) #:http.request.field{:name "RetainPrimaryCluster", :shape "BooleanOptional"})) (clojure.core/contains? input :final-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-snapshot-identifier)) #:http.request.field{:name "FinalSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]}))

(clojure.core/defn- req-modify-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})]} (clojure.core/contains? input :cache-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-description)) #:http.request.field{:name "CacheSubnetGroupDescription", :shape "String"})) (clojure.core/contains? input :subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"}))))

(clojure.core/defn- req-decrease-replica-count-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :new-replica-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :new-replica-count)) #:http.request.field{:name "NewReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :replica-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-replica-configuration-list (input :replica-configuration)) #:http.request.field{:name "ReplicaConfiguration", :shape "ReplicaConfigurationList"})) (clojure.core/contains? input :replicas-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-remove-replicas-list (input :replicas-to-remove)) #:http.request.field{:name "ReplicasToRemove", :shape "RemoveReplicasList"}))))

(clojure.core/defn- req-describe-cache-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-purchase-reserved-cache-nodes-offering-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})]} (clojure.core/contains? input :reserved-cache-node-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-node-id)) #:http.request.field{:name "ReservedCacheNodeId", :shape "String"})) (clojure.core/contains? input :cache-node-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :cache-node-count)) #:http.request.field{:name "CacheNodeCount", :shape "IntegerOptional"}))))

(clojure.core/defn- req-modify-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :az-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-az-mode (input :az-mode)) #:http.request.field{:name "AZMode", :shape "AZMode"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :num-cache-nodes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-nodes)) #:http.request.field{:name "NumCacheNodes", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-status) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-status)) #:http.request.field{:name "NotificationTopicStatus", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :cache-node-ids-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-node-ids-list (input :cache-node-ids-to-remove)) #:http.request.field{:name "CacheNodeIdsToRemove", :shape "CacheNodeIdsList"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :new-availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :new-availability-zones)) #:http.request.field{:name "NewAvailabilityZones", :shape "PreferredAvailabilityZoneList"}))))

(clojure.core/defn- req-create-cache-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]}))

(clojure.core/defn- req-modify-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :primary-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-cluster-id)) #:http.request.field{:name "PrimaryClusterId", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-status) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-status)) #:http.request.field{:name "NotificationTopicStatus", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :snapshotting-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshotting-cluster-id)) #:http.request.field{:name "SnapshottingClusterId", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :automatic-failover-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :automatic-failover-enabled)) #:http.request.field{:name "AutomaticFailoverEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :replication-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-description)) #:http.request.field{:name "ReplicationGroupDescription", :shape "String"})) (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "String", :deprecated true})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"}))))

(clojure.core/defn- req-increase-replica-count-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :new-replica-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :new-replica-count)) #:http.request.field{:name "NewReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :replica-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-replica-configuration-list (input :replica-configuration)) #:http.request.field{:name "ReplicaConfiguration", :shape "ReplicaConfigurationList"}))))

(clojure.core/defn- req-create-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-string (input :replication-group-description)) #:http.request.field{:name "ReplicationGroupDescription", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :num-node-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-node-groups)) #:http.request.field{:name "NumNodeGroups", :shape "IntegerOptional"})) (clojure.core/contains? input :auth-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :auth-token)) #:http.request.field{:name "AuthToken", :shape "String"})) (clojure.core/contains? input :snapshot-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-arns-list (input :snapshot-arns)) #:http.request.field{:name "SnapshotArns", :shape "SnapshotArnsList"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :replicas-per-node-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :replicas-per-node-group)) #:http.request.field{:name "ReplicasPerNodeGroup", :shape "IntegerOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :preferred-cache-cluster-a-zs) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :preferred-cache-cluster-a-zs)) #:http.request.field{:name "PreferredCacheClusterAZs", :shape "AvailabilityZonesList"})) (clojure.core/contains? input :at-rest-encryption-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :at-rest-encryption-enabled)) #:http.request.field{:name "AtRestEncryptionEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :transit-encryption-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :transit-encryption-enabled)) #:http.request.field{:name "TransitEncryptionEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :primary-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-cluster-id)) #:http.request.field{:name "PrimaryClusterId", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :node-group-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-group-configuration-list (input :node-group-configuration)) #:http.request.field{:name "NodeGroupConfiguration", :shape "NodeGroupConfigurationList"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :automatic-failover-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :automatic-failover-enabled)) #:http.request.field{:name "AutomaticFailoverEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :num-cache-clusters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-clusters)) #:http.request.field{:name "NumCacheClusters", :shape "IntegerOptional"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"}))))

(clojure.core/defn- req-describe-cache-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})) (clojure.core/contains? input :snapshot-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-source)) #:http.request.field{:name "SnapshotSource", :shape "String"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :show-node-group-config) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-node-group-config)) #:http.request.field{:name "ShowNodeGroupConfig", :shape "BooleanOptional"}))))

(clojure.core/defn- req-authorize-cache-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"})]}))

(clojure.core/defn- req-modify-replication-group-shard-configuration-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-integer (input :node-group-count)) #:http.request.field{:name "NodeGroupCount", :shape "Integer"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :resharding-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resharding-configuration-list (input :resharding-configuration)) #:http.request.field{:name "ReshardingConfiguration", :shape "ReshardingConfigurationList"})) (clojure.core/contains? input :node-groups-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-groups-to-remove-list (input :node-groups-to-remove)) #:http.request.field{:name "NodeGroupsToRemove", :shape "NodeGroupsToRemoveList"})) (clojure.core/contains? input :node-groups-to-retain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-groups-to-retain-list (input :node-groups-to-retain)) #:http.request.field{:name "NodeGroupsToRetain", :shape "NodeGroupsToRetainList"}))))

(clojure.core/defn- req-describe-replication-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})]} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"}))))

(clojure.core/defn- req-describe-cache-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :show-cache-node-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-cache-node-info)) #:http.request.field{:name "ShowCacheNodeInfo", :shape "BooleanOptional"})) (clojure.core/contains? input :show-cache-clusters-not-in-replication-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-cache-clusters-not-in-replication-groups)) #:http.request.field{:name "ShowCacheClustersNotInReplicationGroups", :shape "BooleanOptional"}))))

(clojure.core/defn- req-reboot-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"}) (clojure.core/into (ser-cache-node-ids-list (input :cache-node-ids-to-reboot)) #:http.request.field{:name "CacheNodeIdsToReboot", :shape "CacheNodeIdsList"})]}))

(clojure.core/defn- req-create-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :cache-subnet-group-description)) #:http.request.field{:name "CacheSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]}))

(clojure.core/defn- req-create-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :az-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-az-mode (input :az-mode)) #:http.request.field{:name "AZMode", :shape "AZMode"})) (clojure.core/contains? input :auth-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :auth-token)) #:http.request.field{:name "AuthToken", :shape "String"})) (clojure.core/contains? input :preferred-availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-availability-zone)) #:http.request.field{:name "PreferredAvailabilityZone", :shape "String"})) (clojure.core/contains? input :snapshot-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-arns-list (input :snapshot-arns)) #:http.request.field{:name "SnapshotArns", :shape "SnapshotArnsList"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "PreferredAvailabilityZoneList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :num-cache-nodes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-nodes)) #:http.request.field{:name "NumCacheNodes", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"}))))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-delete-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-delete-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :final-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-snapshot-identifier)) #:http.request.field{:name "FinalSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-cache-security-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})]}))

(clojure.core/defn- req-list-allowed-node-type-modifications-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}))))

(clojure.core/defn- req-delete-cache-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"})]}))

(clojure.core/defn- req-delete-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-cache-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-reserved-cache-nodes-offerings-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-cache-nodes-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})) (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]}))

(clojure.core/defn- req-revoke-cache-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"})]}))

(clojure.core/defn- req-reset-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameter-name-values) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameter-name-value-list (input :parameter-name-values)) #:http.request.field{:name "ParameterNameValues", :shape "ParameterNameValueList"}))))

(clojure.core/defn- req-modify-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameter-name-value-list (input :parameter-name-values)) #:http.request.field{:name "ParameterNameValues", :shape "ParameterNameValueList"})]}))

(clojure.core/defn- req-describe-reserved-cache-nodes-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-cache-node-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-node-id)) #:http.request.field{:name "ReservedCacheNodeId", :shape "String"})) (clojure.core/contains? input :reserved-cache-nodes-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})) (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-copy-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-snapshot-name)) #:http.request.field{:name "SourceSnapshotName", :shape "String"}) (clojure.core/into (ser-string (input :target-snapshot-name)) #:http.request.field{:name "TargetSnapshotName", :shape "String"})]} (clojure.core/contains? input :target-bucket) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-bucket)) #:http.request.field{:name "TargetBucket", :shape "String"}))))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/read-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/current-role (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-member/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-node-id :portkey.aws.elasticache.-2015-02-02.node-group-member/read-endpoint :portkey.aws.elasticache.-2015-02-02.node-group-member/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.node-group-member/current-role]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.test-failover-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.test-failover-message/node-group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine-version :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/marker :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/default-only]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/retain-primary-cluster (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/replication-group-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/retain-primary-cluster :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/final-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/ec-2-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/ec-2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group/owner-id :portkey.aws.elasticache.-2015-02-02.cache-security-group/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.cache-security-group/description :portkey.aws.elasticache.-2015-02-02.cache-security-group/ec-2-security-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/az-mode #{:crossaz "cross-az" :singleaz "single-az"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec-2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/ec-2-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/change-type #{"immediate" :requiresreboot "requires-reboot" :immediate})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/description]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/replication-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/cache-node-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/fixed-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/usage-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/product-description :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/offering-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/recurring-charges]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-engine-version))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.slot-migration/progress-percentage (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/slot-migration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.slot-migration/progress-percentage]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/parameter-group-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/source-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/customer-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-id :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-status :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-create-time :portkey.aws.elasticache.-2015-02-02/endpoint :portkey.aws.elasticache.-2015-02-02.cache-node/parameter-group-status :portkey.aws.elasticache.-2015-02-02.cache-node/source-cache-node-id :portkey.aws.elasticache.-2015-02-02.cache-node/customer-availability-zone]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status #{:disabled "enabled" "disabled" :enabled})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/cache-parameter-group-family] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/reserved-cache-node]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/description] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/subnet-ids]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replica-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replica-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replicas-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/remove-replicas-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/new-replica-count :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replica-configuration :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replicas-to-remove]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/member-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cluster-id-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cluster-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/pending-modified-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group/cache-node-type :portkey.aws.elasticache.-2015-02-02.replication-group/member-clusters :portkey.aws.elasticache.-2015-02-02.replication-group/automatic-failover :portkey.aws.elasticache.-2015-02-02.replication-group/node-groups :portkey.aws.elasticache.-2015-02-02.replication-group/configuration-endpoint :portkey.aws.elasticache.-2015-02-02.replication-group/auth-token-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/status :portkey.aws.elasticache.-2015-02-02.replication-group/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/cluster-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/description :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-window :portkey.aws.elasticache.-2015-02-02.replication-group/snapshotting-cluster-id :portkey.aws.elasticache.-2015-02-02.replication-group/replication-group-id :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.replication-group/pending-modified-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zone))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.subnet/subnet-identifier :portkey.aws.elasticache.-2015-02-02.subnet/subnet-availability-zone]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter-name-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/cache-parameter-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/source :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reservation-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/state (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/start-time :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-count :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/fixed-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reservation-arn :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/usage-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/product-description :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/state :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/recurring-charges :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/offering-type]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/scale-up-modifications (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-type-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/scale-up-modifications]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-nodes-offering-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/cache-node-count]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/vpc-id :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/subnets]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/snapshots]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/resharding-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/new-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-type :portkey.aws.elasticache.-2015-02-02/az-mode :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/engine-version :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-status :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/apply-immediately :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-ids-to-remove :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/new-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/key-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/description] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/parameters :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/cache-node-type-specific-parameters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-member))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/engine-version :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-status :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshotting-cluster-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/apply-immediately :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/automatic-failover-enabled :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-description :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/node-group-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-security-group-names]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replica-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replica-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/new-replica-count :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replica-configuration]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replicas-per-node-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-cache-cluster-a-zs (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/node-group-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-description] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-node-groups :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auth-token :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-arns :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replicas-per-node-group :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/tags :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-cache-cluster-a-zs :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine-version :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/port :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/node-group-configuration :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/automatic-failover-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-cache-clusters :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zones-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-events-message/source-identifier :portkey.aws.elasticache.-2015-02-02/source-type :portkey.aws.elasticache.-2015-02-02.describe-events-message/start-time :portkey.aws.elasticache.-2015-02-02.describe-events-message/end-time :portkey.aws.elasticache.-2015-02-02.describe-events-message/duration :portkey.aws.elasticache.-2015-02-02.describe-events-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-events-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/show-node-group-config (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-name :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-source :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/show-node-group-config]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-owner-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/event))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-group-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/resharding-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-retain (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-groups-to-retain-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-group-count :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/resharding-configuration :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-remove :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-retain]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/events (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/event-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.events-message/marker :portkey.aws.elasticache.-2015-02-02.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/snapshot-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/cache-cluster-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/source-type #{:cacheparametergroup "cache-subnet-group" "cache-parameter-group" "cache-cluster" :replicationgroup "replication-group" "cache-security-group" :cachesubnetgroup :cachecluster :cachesecuritygroup})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/date (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.event/source-identifier :portkey.aws.elasticache.-2015-02-02/source-type :portkey.aws.elasticache.-2015-02-02.event/message :portkey.aws.elasticache.-2015-02-02.event/date]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.availability-zone/name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/reserved-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/reserved-cache-nodes]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-node-info (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-clusters-not-in-replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/marker :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-node-info :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-clusters-not-in-replication-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-cluster))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-version-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine-version :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-description :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-version-description]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-node-ids-to-reboot] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/primary-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-members (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-member-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group/node-group-id :portkey.aws.elasticache.-2015-02-02.node-group/status :portkey.aws.elasticache.-2015-02-02.node-group/primary-endpoint :portkey.aws.elasticache.-2015-02-02.node-group/slots :portkey.aws.elasticache.-2015-02-02.node-group/node-group-members]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/service-linked-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/subnet-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-amount :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-frequency]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/cache-node-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02/az-mode :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auth-token :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-arns :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zones :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/tags :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine-version :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/port :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-name :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/reserved-cache-nodes-offerings (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/reserved-cache-nodes-offerings]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/tag))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-message/marker :portkey.aws.elasticache.-2015-02-02/cache-security-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/resource-name :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/cache-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/tag-list]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/remove-replicas-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster-message/marker :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/cache-clusters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/cache-parameter-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/cache-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/primary-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-configuration/node-group-id :portkey.aws.elasticache.-2015-02-02.node-group-configuration/slots :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-count :portkey.aws.elasticache.-2015-02-02.node-group-configuration/primary-availability-zone :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec-2-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.ec-2-security-group/status :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-id-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/automatic-failover-status #{:disabled "enabled" :disabling :enabling "disabling" "enabling" "disabled" :enabled})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/automatic-failover-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/resharding (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/automatic-failover-status :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/resharding]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/key-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/resource-name :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__194563__auto__] (clojure.core/<= 1 (clojure.core/count s__194563__auto__))) (clojure.core/fn [s__194564__auto__] (clojure.core/< (clojure.core/count s__194564__auto__) 4)) (clojure.core/fn [s__194565__auto__] (clojure.core/re-matches #"\d+" s__194565__auto__))))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/slot-migration]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/change-type :portkey.aws.elasticache.-2015-02-02.parameter/data-type :portkey.aws.elasticache.-2015-02-02.parameter/parameter-name :portkey.aws.elasticache.-2015-02-02.parameter/source :portkey.aws.elasticache.-2015-02-02.parameter/minimum-engine-version :portkey.aws.elasticache.-2015-02-02.parameter/allowed-values :portkey.aws.elasticache.-2015-02-02.parameter/description :portkey.aws.elasticache.-2015-02-02.parameter/is-modifiable :portkey.aws.elasticache.-2015-02-02.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/cache-node-type-specific-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/change-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/data-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/parameter-name :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/source :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/minimum-engine-version :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/allowed-values :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/cache-node-type-specific-values :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/description :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/is-modifiable]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.resharding-configuration/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.resharding-configuration/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.resharding-configuration/node-group-id :portkey.aws.elasticache.-2015-02-02.resharding-configuration/preferred-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/final-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/node-snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.snapshot/cache-node-type :portkey.aws.elasticache.-2015-02-02.snapshot/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.snapshot/num-node-groups :portkey.aws.elasticache.-2015-02-02.snapshot/node-snapshots :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.snapshot/automatic-failover :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.snapshot/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-create-time :portkey.aws.elasticache.-2015-02-02.snapshot/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-status :portkey.aws.elasticache.-2015-02-02.snapshot/engine-version :portkey.aws.elasticache.-2015-02-02.snapshot/port :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-window :portkey.aws.elasticache.-2015-02-02.snapshot/vpc-id :portkey.aws.elasticache.-2015-02-02.snapshot/topic-arn :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-source :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-id :portkey.aws.elasticache.-2015-02-02.snapshot/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.snapshot/engine :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-description :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/snapshot-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/replication-group-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/cache-security-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/cache-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/cache-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-parameter-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/client-download-landing-page (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-node-type :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-parameter-group :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.cache-cluster/security-groups :portkey.aws.elasticache.-2015-02-02.cache-cluster/configuration-endpoint :portkey.aws.elasticache.-2015-02-02.cache-cluster/auth-token-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.cache-cluster/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-status :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-security-groups :portkey.aws.elasticache.-2015-02-02.cache-cluster/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-create-time :portkey.aws.elasticache.-2015-02-02.cache-cluster/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.cache-cluster/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine-version :portkey.aws.elasticache.-2015-02-02.cache-cluster/client-download-landing-page :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-window :portkey.aws.elasticache.-2015-02-02.cache-cluster/replication-group-id :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine :portkey.aws.elasticache.-2015-02-02/notification-configuration :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-nodes :portkey.aws.elasticache.-2015-02-02/pending-modified-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/address (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.endpoint/address :portkey.aws.elasticache.-2015-02-02.endpoint/port]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-to-retain-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-message/marker :portkey.aws.elasticache.-2015-02-02.replication-group-message/replication-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-parameter-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/security-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.security-group-membership/security-group-id :portkey.aws.elasticache.-2015-02-02.security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-size (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.node-snapshot/node-group-id :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-id :portkey.aws.elasticache.-2015-02-02/node-group-configuration :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-size :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-create-time :portkey.aws.elasticache.-2015-02-02.node-snapshot/snapshot-create-time]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/key (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.tag/key :portkey.aws.elasticache.-2015-02-02.tag/value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/product-description :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/offering-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/resource-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/notification-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-arn :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/parameter-apply-status :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-node-ids-to-reboot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-owner-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/cache-parameter-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/reset-all-parameters :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/parameter-name-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/aws-query-error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.engine-defaults/marker :portkey.aws.elasticache.-2015-02-02.engine-defaults/parameters :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-node-type-specific-parameters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/configure-shard (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.configure-shard/node-group-id :portkey.aws.elasticache.-2015-02-02.configure-shard/new-replica-count] :opt-un [:portkey.aws.elasticache.-2015-02-02.configure-shard/preferred-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/cache-engine-versions (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/marker :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/cache-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/parameter-name-values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/product-description :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/offering-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/marker :portkey.aws.elasticache.-2015-02-02/cache-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/no-operation-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.pending-modified-values/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-ids-to-remove :portkey.aws.elasticache.-2015-02-02.pending-modified-values/engine-version :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-type]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/source-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-bucket (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/source-snapshot-name :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-snapshot-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-bucket]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-type-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/api-call-rate-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/subnet))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-subnet-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replica-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/configure-shard))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.core/defn describe-cache-parameter-groups ([] (describe-cache-parameter-groups {})) ([describe-cache-parameter-groups-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-cache-parameter-groups-message describe-cache-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCacheParameterGroups", :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message))

(clojure.core/defn modify-replication-group-shard-configuration ([modify-replication-group-shard-configuration-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-modify-replication-group-shard-configuration-message modify-replication-group-shard-configuration-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyReplicationGroupShardConfiguration", :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-replication-group-shard-configuration :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result))

(clojure.core/defn describe-cache-security-groups ([] (describe-cache-security-groups {})) ([describe-cache-security-groups-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-cache-security-groups-message describe-cache-security-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-security-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCacheSecurityGroups", :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-security-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-message))

(clojure.core/defn modify-cache-parameter-group ([modify-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-modify-cache-parameter-group-message modify-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyCacheParameterGroup", :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef modify-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn test-failover ([test-failover-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-test-failover-message test-failover-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/test-failover-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/test-failover-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "TestFailover", :http.request.spec/error-spec {"APICallRateForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/api-call-rate-for-customer-exceeded-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "TestFailoverNotAvailableFault" :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef test-failover :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/test-failover-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/test-failover-result))

(clojure.core/defn delete-cache-parameter-group ([delete-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-delete-cache-parameter-group-message delete-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteCacheParameterGroup", :http.request.spec/error-spec {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-replication-group ([delete-replication-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-delete-replication-group-message delete-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteReplicationGroup", :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result))

(clojure.core/defn purchase-reserved-cache-nodes-offering ([purchase-reserved-cache-nodes-offering-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-purchase-reserved-cache-nodes-offering-message purchase-reserved-cache-nodes-offering-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PurchaseReservedCacheNodesOffering", :http.request.spec/error-spec {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "ReservedCacheNodeAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault, "ReservedCacheNodeQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef purchase-reserved-cache-nodes-offering :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result))

(clojure.core/defn describe-events ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEvents", :http.request.spec/error-spec {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/events-message))

(clojure.core/defn create-snapshot ([create-snapshot-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-create-snapshot-message create-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSnapshot", :http.request.spec/error-spec {"SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-snapshot-result))

(clojure.core/defn increase-replica-count ([increase-replica-count-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-increase-replica-count-message increase-replica-count-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "IncreaseReplicaCount", :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "NoOperationFault" :portkey.aws.elasticache.-2015-02-02/no-operation-fault, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef increase-replica-count :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result))

(clojure.core/defn describe-cache-engine-versions ([] (describe-cache-engine-versions {})) ([describe-cache-engine-versions-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-cache-engine-versions-message describe-cache-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCacheEngineVersions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-cache-engine-versions :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message))

(clojure.core/defn reset-cache-parameter-group ([reset-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-reset-cache-parameter-group-message reset-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetCacheParameterGroup", :http.request.spec/error-spec {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef reset-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn modify-replication-group ([modify-replication-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-modify-replication-group-message modify-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyReplicationGroup", :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result))

(clojure.core/defn describe-replication-groups ([] (describe-replication-groups {})) ([describe-replication-groups-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-replication-groups-message describe-replication-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/replication-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReplicationGroups", :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-replication-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-message))

(clojure.core/defn reboot-cache-cluster ([reboot-cache-cluster-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-reboot-cache-cluster-message reboot-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RebootCacheCluster", :http.request.spec/error-spec {"InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result))

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ListTagsForResource", :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-engine-default-parameters ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.spec/error-spec {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result))

(clojure.core/defn describe-cache-clusters ([] (describe-cache-clusters {})) ([describe-cache-clusters-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-cache-clusters-message describe-cache-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCacheClusters", :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-clusters :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-message))

(clojure.core/defn authorize-cache-security-group-ingress ([authorize-cache-security-group-ingress-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-authorize-cache-security-group-ingress-message authorize-cache-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AuthorizeCacheSecurityGroupIngress", :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef authorize-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result))

(clojure.core/defn create-cache-cluster ([create-cache-cluster-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-create-cache-cluster-message create-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateCacheCluster", :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "CacheClusterAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault}})))))
(clojure.spec.alpha/fdef create-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result))

(clojure.core/defn delete-cache-security-group ([delete-cache-security-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-delete-cache-security-group-message delete-cache-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteCacheSecurityGroup", :http.request.spec/error-spec {"InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-cache-subnet-group ([delete-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-delete-cache-subnet-group-message delete-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteCacheSubnetGroup", :http.request.spec/error-spec {"CacheSubnetGroupInUse" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-snapshot ([delete-snapshot-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-delete-snapshot-message delete-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSnapshot", :http.request.spec/error-spec {"SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result))

(clojure.core/defn describe-cache-parameters ([describe-cache-parameters-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-cache-parameters-message describe-cache-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCacheParameters", :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details))

(clojure.core/defn create-replication-group ([create-replication-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-create-replication-group-message create-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateReplicationGroup", :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "ReplicationGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef create-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-replication-group-result))

(clojure.core/defn revoke-cache-security-group-ingress ([revoke-cache-security-group-ingress-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-revoke-cache-security-group-ingress-message revoke-cache-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RevokeCacheSecurityGroupIngress", :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef revoke-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result))

(clojure.core/defn create-cache-subnet-group ([create-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-create-cache-subnet-group-message create-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateCacheSubnetGroup", :http.request.spec/error-spec {"CacheSubnetGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault, "CacheSubnetGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result))

(clojure.core/defn describe-cache-subnet-groups ([] (describe-cache-subnet-groups {})) ([describe-cache-subnet-groups-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-cache-subnet-groups-message describe-cache-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCacheSubnetGroups", :http.request.spec/error-spec {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-cache-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message))

(clojure.core/defn describe-snapshots ([] (describe-snapshots {})) ([describe-snapshots-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-snapshots-message describe-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSnapshots", :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-snapshots :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message))

(clojure.core/defn decrease-replica-count ([decrease-replica-count-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-decrease-replica-count-message decrease-replica-count-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DecreaseReplicaCount", :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "ServiceLinkedRoleNotFoundFault" :portkey.aws.elasticache.-2015-02-02/service-linked-role-not-found-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "NoOperationFault" :portkey.aws.elasticache.-2015-02-02/no-operation-fault, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef decrease-replica-count :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result))

(clojure.core/defn modify-cache-cluster ([modify-cache-cluster-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-modify-cache-cluster-message modify-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyCacheCluster", :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result))

(clojure.core/defn copy-snapshot ([copy-snapshot-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-copy-snapshot-message copy-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopySnapshot", :http.request.spec/error-spec {"SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef copy-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result))

(clojure.core/defn modify-cache-subnet-group ([modify-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-modify-cache-subnet-group-message modify-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyCacheSubnetGroup", :http.request.spec/error-spec {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "SubnetInUse" :portkey.aws.elasticache.-2015-02-02/subnet-in-use, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result))

(clojure.core/defn create-cache-security-group ([create-cache-security-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-create-cache-security-group-message create-cache-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateCacheSecurityGroup", :http.request.spec/error-spec {"CacheSecurityGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault, "CacheSecurityGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef create-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result))

(clojure.core/defn remove-tags-from-resource ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault, "TagNotFoundFault" :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn list-allowed-node-type-modifications ([] (list-allowed-node-type-modifications {})) ([list-allowed-node-type-modifications-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-list-allowed-node-type-modifications-message list-allowed-node-type-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ListAllowedNodeTypeModifications", :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception}})))))
(clojure.spec.alpha/fdef list-allowed-node-type-modifications :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message))

(clojure.core/defn create-cache-parameter-group ([create-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-create-cache-parameter-group-message create-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateCacheParameterGroup", :http.request.spec/error-spec {"CacheParameterGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault, "CacheParameterGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef create-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result))

(clojure.core/defn add-tags-to-resource ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AddTagsToResource", :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-reserved-cache-nodes ([] (describe-reserved-cache-nodes {})) ([describe-reserved-cache-nodes-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-reserved-cache-nodes-message describe-reserved-cache-nodes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedCacheNodes", :http.request.spec/error-spec {"ReservedCacheNodeNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message))

(clojure.core/defn describe-reserved-cache-nodes-offerings ([] (describe-reserved-cache-nodes-offerings {})) ([describe-reserved-cache-nodes-offerings-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-describe-reserved-cache-nodes-offerings-message describe-reserved-cache-nodes-offerings-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedCacheNodesOfferings", :http.request.spec/error-spec {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes-offerings :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message))

(clojure.core/defn delete-cache-cluster ([delete-cache-cluster-messageinput] (clojure.core/let [request-function-result__195099__auto__ (req-delete-cache-cluster-message delete-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__195099__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteCacheCluster", :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result))
