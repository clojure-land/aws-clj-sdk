(ns portkey.aws.elasticache.-2015-02-02 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope
    {:service "elasticache", :region "us-gov-east-1"},
    :ssl-common-name "elasticache.us-gov-east-1.amazonaws.com",
    :endpoint "https://elasticache.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-1"},
    :ssl-common-name "elasticache.ap-northeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "elasticache", :region "eu-west-1"},
    :ssl-common-name "elasticache.eu-west-1.amazonaws.com",
    :endpoint "https://elasticache.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "elasticache", :region "us-east-2"},
    :ssl-common-name "elasticache.us-east-2.amazonaws.com",
    :endpoint "https://elasticache.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-2"},
    :ssl-common-name "elasticache.ap-southeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "elasticache", :region "cn-north-1"},
    :ssl-common-name "elasticache.cn-north-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "elasticache", :region "sa-east-1"},
    :ssl-common-name "elasticache.sa-east-1.amazonaws.com",
    :endpoint "https://elasticache.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-1"},
    :ssl-common-name "elasticache.ap-southeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope
    {:service "elasticache", :region "cn-northwest-1"},
    :ssl-common-name "elasticache.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-2"},
    :ssl-common-name "elasticache.ap-northeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "elasticache", :region "eu-west-3"},
    :ssl-common-name "elasticache.eu-west-3.amazonaws.com",
    :endpoint "https://elasticache.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "elasticache", :region "ca-central-1"},
    :ssl-common-name "elasticache.ca-central-1.amazonaws.com",
    :endpoint "https://elasticache.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "elasticache", :region "eu-central-1"},
    :ssl-common-name "elasticache.eu-central-1.amazonaws.com",
    :endpoint "https://elasticache.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "elasticache", :region "eu-west-2"},
    :ssl-common-name "elasticache.eu-west-2.amazonaws.com",
    :endpoint "https://elasticache.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope
    {:service "elasticache", :region "us-gov-west-1"},
    :ssl-common-name "elasticache.us-gov-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "elasticache", :region "us-west-2"},
    :ssl-common-name "elasticache.us-west-2.amazonaws.com",
    :endpoint "https://elasticache.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "elasticache", :region "us-east-1"},
    :ssl-common-name "elasticache.us-east-1.amazonaws.com",
    :endpoint "https://elasticache.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "elasticache", :region "us-west-1"},
    :ssl-common-name "elasticache.us-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "elasticache", :region "ap-south-1"},
    :ssl-common-name "elasticache.ap-south-1.amazonaws.com",
    :endpoint "https://elasticache.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "fips"
   {:credential-scope
    {:service "elasticache", :region "us-gov-west-1"},
    :ssl-common-name "elasticache-fips.us-gov-west-1.amazonaws.com",
    :endpoint "https://elasticache-fips.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "elasticache", :region "eu-north-1"},
    :ssl-common-name "elasticache.eu-north-1.amazonaws.com",
    :endpoint "https://elasticache.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-az-mode)

(clojure.core/declare ser-node-group-configuration-list)

(clojure.core/declare ser-node-groups-to-remove-list)

(clojure.core/declare ser-security-group-ids-list)

(clojure.core/declare ser-parameter-name-value-list)

(clojure.core/declare ser-resharding-configuration-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-availability-zones-list)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-snapshot-arns-list)

(clojure.core/declare ser-parameter-name-value)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-cache-security-group-name-list)

(clojure.core/declare ser-remove-replicas-list)

(clojure.core/declare ser-node-group-configuration)

(clojure.core/declare ser-cache-node-ids-list)

(clojure.core/declare ser-allowed-node-group-id)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-resharding-configuration)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-preferred-availability-zone-list)

(clojure.core/declare ser-node-groups-to-retain-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-configure-shard)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-replica-configuration-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-az-mode [input] #:http.request.field{:value (clojure.core/get {"single-az" "single-az", :singleaz "single-az", "cross-az" "cross-az", :crossaz "cross-az"} input), :shape "AZMode"})

(clojure.core/defn- ser-node-group-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-node-group-configuration coll) #:http.request.field{:shape "NodeGroupConfiguration", :location-name "NodeGroupConfiguration"}))) input), :shape "NodeGroupConfigurationList", :type "list"})

(clojure.core/defn- ser-node-groups-to-remove-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-allowed-node-group-id coll) #:http.request.field{:shape "AllowedNodeGroupId", :location-name "NodeGroupToRemove"}))) input), :shape "NodeGroupsToRemoveList", :type "list"})

(clojure.core/defn- ser-security-group-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "SecurityGroupIdsList", :type "list"})

(clojure.core/defn- ser-parameter-name-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter-name-value coll) #:http.request.field{:shape "ParameterNameValue", :location-name "ParameterNameValue"}))) input), :shape "ParameterNameValueList", :type "list"})

(clojure.core/defn- ser-resharding-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resharding-configuration coll) #:http.request.field{:shape "ReshardingConfiguration", :location-name "ReshardingConfiguration"}))) input), :shape "ReshardingConfigurationList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-availability-zones-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZonesList", :type "list"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:cacheparametergroup "cache-parameter-group", "cache-subnet-group" "cache-subnet-group", "cache-parameter-group" "cache-parameter-group", "cache-cluster" "cache-cluster", :replicationgroup "replication-group", "replication-group" "replication-group", "cache-security-group" "cache-security-group", :cachesubnetgroup "cache-subnet-group", :cachecluster "cache-cluster", :cachesecuritygroup "cache-security-group"} input), :shape "SourceType"})

(clojure.core/defn- ser-snapshot-arns-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SnapshotArn"}))) input), :shape "SnapshotArnsList", :type "list"})

(clojure.core/defn- ser-parameter-name-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ParameterNameValue", :type "structure"} (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-cache-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CacheSecurityGroupName"}))) input), :shape "CacheSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-remove-replicas-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "RemoveReplicasList", :type "list"})

(clojure.core/defn- ser-node-group-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NodeGroupConfiguration", :type "structure"} (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})) (clojure.core/contains? input :slots) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :slots)) #:http.request.field{:name "Slots", :shape "String"})) (clojure.core/contains? input :replica-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :replica-count)) #:http.request.field{:name "ReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :primary-availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-availability-zone)) #:http.request.field{:name "PrimaryAvailabilityZone", :shape "String"})) (clojure.core/contains? input :replica-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :replica-availability-zones)) #:http.request.field{:name "ReplicaAvailabilityZones", :shape "AvailabilityZonesList"}))))

(clojure.core/defn- ser-cache-node-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CacheNodeId"}))) input), :shape "CacheNodeIdsList", :type "list"})

(clojure.core/defn- ser-allowed-node-group-id [input] #:http.request.field{:value input, :shape "AllowedNodeGroupId"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-resharding-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReshardingConfiguration", :type "structure"} (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})) (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "AvailabilityZonesList"}))))

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-preferred-availability-zone-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PreferredAvailabilityZone"}))) input), :shape "PreferredAvailabilityZoneList", :type "list"})

(clojure.core/defn- ser-node-groups-to-retain-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-allowed-node-group-id coll) #:http.request.field{:shape "AllowedNodeGroupId", :location-name "NodeGroupToRetain"}))) input), :shape "NodeGroupsToRetainList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-configure-shard [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-allowed-node-group-id (:node-group-id input)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"}) (clojure.core/into (ser-integer (:new-replica-count input)) #:http.request.field{:name "NewReplicaCount", :shape "Integer"})], :shape "ConfigureShard", :type "structure"} (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "PreferredAvailabilityZoneList"}))))

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-replica-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-configure-shard coll) #:http.request.field{:shape "ConfigureShard", :location-name "ConfigureShard"}))) input), :shape "ReplicaConfigurationList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-test-failover-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})]}))

(clojure.core/defn- req-describe-cache-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"}))))

(clojure.core/defn- req-delete-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})]} (clojure.core/contains? input :retain-primary-cluster) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :retain-primary-cluster)) #:http.request.field{:name "RetainPrimaryCluster", :shape "BooleanOptional"})) (clojure.core/contains? input :final-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-snapshot-identifier)) #:http.request.field{:name "FinalSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]}))

(clojure.core/defn- req-modify-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})]} (clojure.core/contains? input :cache-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-description)) #:http.request.field{:name "CacheSubnetGroupDescription", :shape "String"})) (clojure.core/contains? input :subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"}))))

(clojure.core/defn- req-decrease-replica-count-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :new-replica-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :new-replica-count)) #:http.request.field{:name "NewReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :replica-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-replica-configuration-list (input :replica-configuration)) #:http.request.field{:name "ReplicaConfiguration", :shape "ReplicaConfigurationList"})) (clojure.core/contains? input :replicas-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-remove-replicas-list (input :replicas-to-remove)) #:http.request.field{:name "ReplicasToRemove", :shape "RemoveReplicasList"}))))

(clojure.core/defn- req-describe-cache-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-purchase-reserved-cache-nodes-offering-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})]} (clojure.core/contains? input :reserved-cache-node-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-node-id)) #:http.request.field{:name "ReservedCacheNodeId", :shape "String"})) (clojure.core/contains? input :cache-node-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :cache-node-count)) #:http.request.field{:name "CacheNodeCount", :shape "IntegerOptional"}))))

(clojure.core/defn- req-modify-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :az-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-az-mode (input :az-mode)) #:http.request.field{:name "AZMode", :shape "AZMode"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :num-cache-nodes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-nodes)) #:http.request.field{:name "NumCacheNodes", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-status) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-status)) #:http.request.field{:name "NotificationTopicStatus", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :cache-node-ids-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-node-ids-list (input :cache-node-ids-to-remove)) #:http.request.field{:name "CacheNodeIdsToRemove", :shape "CacheNodeIdsList"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :new-availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :new-availability-zones)) #:http.request.field{:name "NewAvailabilityZones", :shape "PreferredAvailabilityZoneList"}))))

(clojure.core/defn- req-create-cache-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]}))

(clojure.core/defn- req-modify-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :primary-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-cluster-id)) #:http.request.field{:name "PrimaryClusterId", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-status) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-status)) #:http.request.field{:name "NotificationTopicStatus", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :snapshotting-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshotting-cluster-id)) #:http.request.field{:name "SnapshottingClusterId", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :automatic-failover-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :automatic-failover-enabled)) #:http.request.field{:name "AutomaticFailoverEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :replication-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-description)) #:http.request.field{:name "ReplicationGroupDescription", :shape "String"})) (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "String", :deprecated true})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"}))))

(clojure.core/defn- req-increase-replica-count-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :new-replica-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :new-replica-count)) #:http.request.field{:name "NewReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :replica-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-replica-configuration-list (input :replica-configuration)) #:http.request.field{:name "ReplicaConfiguration", :shape "ReplicaConfigurationList"}))))

(clojure.core/defn- req-create-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-string (input :replication-group-description)) #:http.request.field{:name "ReplicationGroupDescription", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :num-node-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-node-groups)) #:http.request.field{:name "NumNodeGroups", :shape "IntegerOptional"})) (clojure.core/contains? input :auth-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :auth-token)) #:http.request.field{:name "AuthToken", :shape "String"})) (clojure.core/contains? input :snapshot-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-arns-list (input :snapshot-arns)) #:http.request.field{:name "SnapshotArns", :shape "SnapshotArnsList"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :replicas-per-node-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :replicas-per-node-group)) #:http.request.field{:name "ReplicasPerNodeGroup", :shape "IntegerOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :preferred-cache-cluster-a-zs) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :preferred-cache-cluster-a-zs)) #:http.request.field{:name "PreferredCacheClusterAZs", :shape "AvailabilityZonesList"})) (clojure.core/contains? input :at-rest-encryption-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :at-rest-encryption-enabled)) #:http.request.field{:name "AtRestEncryptionEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :transit-encryption-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :transit-encryption-enabled)) #:http.request.field{:name "TransitEncryptionEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :primary-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-cluster-id)) #:http.request.field{:name "PrimaryClusterId", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :node-group-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-group-configuration-list (input :node-group-configuration)) #:http.request.field{:name "NodeGroupConfiguration", :shape "NodeGroupConfigurationList"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :automatic-failover-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :automatic-failover-enabled)) #:http.request.field{:name "AutomaticFailoverEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :num-cache-clusters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-clusters)) #:http.request.field{:name "NumCacheClusters", :shape "IntegerOptional"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"}))))

(clojure.core/defn- req-describe-cache-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})) (clojure.core/contains? input :snapshot-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-source)) #:http.request.field{:name "SnapshotSource", :shape "String"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :show-node-group-config) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-node-group-config)) #:http.request.field{:name "ShowNodeGroupConfig", :shape "BooleanOptional"}))))

(clojure.core/defn- req-authorize-cache-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"})]}))

(clojure.core/defn- req-modify-replication-group-shard-configuration-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-integer (input :node-group-count)) #:http.request.field{:name "NodeGroupCount", :shape "Integer"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :resharding-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resharding-configuration-list (input :resharding-configuration)) #:http.request.field{:name "ReshardingConfiguration", :shape "ReshardingConfigurationList"})) (clojure.core/contains? input :node-groups-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-groups-to-remove-list (input :node-groups-to-remove)) #:http.request.field{:name "NodeGroupsToRemove", :shape "NodeGroupsToRemoveList"})) (clojure.core/contains? input :node-groups-to-retain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-groups-to-retain-list (input :node-groups-to-retain)) #:http.request.field{:name "NodeGroupsToRetain", :shape "NodeGroupsToRetainList"}))))

(clojure.core/defn- req-describe-replication-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})]} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"}))))

(clojure.core/defn- req-describe-cache-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :show-cache-node-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-cache-node-info)) #:http.request.field{:name "ShowCacheNodeInfo", :shape "BooleanOptional"})) (clojure.core/contains? input :show-cache-clusters-not-in-replication-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-cache-clusters-not-in-replication-groups)) #:http.request.field{:name "ShowCacheClustersNotInReplicationGroups", :shape "BooleanOptional"}))))

(clojure.core/defn- req-reboot-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"}) (clojure.core/into (ser-cache-node-ids-list (input :cache-node-ids-to-reboot)) #:http.request.field{:name "CacheNodeIdsToReboot", :shape "CacheNodeIdsList"})]}))

(clojure.core/defn- req-create-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :cache-subnet-group-description)) #:http.request.field{:name "CacheSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]}))

(clojure.core/defn- req-create-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :az-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-az-mode (input :az-mode)) #:http.request.field{:name "AZMode", :shape "AZMode"})) (clojure.core/contains? input :auth-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :auth-token)) #:http.request.field{:name "AuthToken", :shape "String"})) (clojure.core/contains? input :preferred-availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-availability-zone)) #:http.request.field{:name "PreferredAvailabilityZone", :shape "String"})) (clojure.core/contains? input :snapshot-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-arns-list (input :snapshot-arns)) #:http.request.field{:name "SnapshotArns", :shape "SnapshotArnsList"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "PreferredAvailabilityZoneList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :num-cache-nodes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-nodes)) #:http.request.field{:name "NumCacheNodes", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"}))))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-delete-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-delete-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :final-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-snapshot-identifier)) #:http.request.field{:name "FinalSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-cache-security-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})]}))

(clojure.core/defn- req-list-allowed-node-type-modifications-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}))))

(clojure.core/defn- req-delete-cache-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"})]}))

(clojure.core/defn- req-delete-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-cache-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-reserved-cache-nodes-offerings-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-cache-nodes-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})) (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]}))

(clojure.core/defn- req-revoke-cache-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"})]}))

(clojure.core/defn- req-reset-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameter-name-values) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameter-name-value-list (input :parameter-name-values)) #:http.request.field{:name "ParameterNameValues", :shape "ParameterNameValueList"}))))

(clojure.core/defn- req-modify-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameter-name-value-list (input :parameter-name-values)) #:http.request.field{:name "ParameterNameValues", :shape "ParameterNameValueList"})]}))

(clojure.core/defn- req-describe-reserved-cache-nodes-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-cache-node-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-node-id)) #:http.request.field{:name "ReservedCacheNodeId", :shape "String"})) (clojure.core/contains? input :reserved-cache-nodes-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})) (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-copy-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-snapshot-name)) #:http.request.field{:name "SourceSnapshotName", :shape "String"}) (clojure.core/into (ser-string (input :target-snapshot-name)) #:http.request.field{:name "TargetSnapshotName", :shape "String"})]} (clojure.core/contains? input :target-bucket) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-bucket)) #:http.request.field{:name "TargetBucket", :shape "String"}))))

(clojure.core/declare deser-node-group-member)

(clojure.core/declare deser-cache-security-group)

(clojure.core/declare deser-double)

(clojure.core/declare deser-parameters-list)

(clojure.core/declare deser-ec-2-security-group-list)

(clojure.core/declare deser-change-type)

(clojure.core/declare deser-cache-parameter-group)

(clojure.core/declare deser-security-group-membership-list)

(clojure.core/declare deser-replication-group-list)

(clojure.core/declare deser-reserved-cache-nodes-offering)

(clojure.core/declare deser-cache-engine-version-list)

(clojure.core/declare deser-slot-migration)

(clojure.core/declare deser-cache-node)

(clojure.core/declare deser-pending-automatic-failover-status)

(clojure.core/declare deser-replication-group)

(clojure.core/declare deser-snapshot-list)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-reserved-cache-node)

(clojure.core/declare deser-cache-subnet-group)

(clojure.core/declare deser-node-group-member-list)

(clojure.core/declare deser-reserved-cache-nodes-offering-list)

(clojure.core/declare deser-availability-zones-list)

(clojure.core/declare deser-node-snapshot-list)

(clojure.core/declare deser-event-list)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-cache-security-groups)

(clojure.core/declare deser-event)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-cache-cluster-list)

(clojure.core/declare deser-cache-engine-version)

(clojure.core/declare deser-cache-node-list)

(clojure.core/declare deser-node-group)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-cache-node-type-specific-value)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-cache-node-type-specific-parameters-list)

(clojure.core/declare deser-node-group-configuration)

(clojure.core/declare deser-ec-2-security-group)

(clojure.core/declare deser-cluster-id-list)

(clojure.core/declare deser-cache-node-ids-list)

(clojure.core/declare deser-automatic-failover-status)

(clojure.core/declare deser-replication-group-pending-modified-values)

(clojure.core/declare deser-allowed-node-group-id)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-resharding-status)

(clojure.core/declare deser-string)

(clojure.core/declare deser-parameter)

(clojure.core/declare deser-cache-node-type-specific-parameter)

(clojure.core/declare deser-snapshot)

(clojure.core/declare deser-t-stamp)

(clojure.core/declare deser-recurring-charge-list)

(clojure.core/declare deser-cache-cluster)

(clojure.core/declare deser-cache-security-group-membership)

(clojure.core/declare deser-endpoint)

(clojure.core/declare deser-cache-parameter-group-list)

(clojure.core/declare deser-security-group-membership)

(clojure.core/declare deser-node-snapshot)

(clojure.core/declare deser-reserved-cache-node-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-boolean-optional)

(clojure.core/declare deser-cache-node-type-specific-value-list)

(clojure.core/declare deser-cache-security-group-membership-list)

(clojure.core/declare deser-node-group-list)

(clojure.core/declare deser-notification-configuration)

(clojure.core/declare deser-cache-parameter-group-status)

(clojure.core/declare deser-aws-query-error-message)

(clojure.core/declare deser-engine-defaults)

(clojure.core/declare deser-integer-optional)

(clojure.core/declare deser-pending-modified-values)

(clojure.core/declare deser-node-type-list)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-cache-subnet-groups)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-node-group-member [input] (clojure.core/let [letvar838915 {"CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "CacheNodeId" (portkey.aws/search-for-tag input "CacheNodeId" :flattened? nil :xmlAttribute? nil), "ReadEndpoint" (portkey.aws/search-for-tag input "ReadEndpoint" :flattened? nil :xmlAttribute? nil), "PreferredAvailabilityZone" (portkey.aws/search-for-tag input "PreferredAvailabilityZone" :flattened? nil :xmlAttribute? nil), "CurrentRole" (portkey.aws/search-for-tag input "CurrentRole" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar838915 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar838915 ["CacheClusterId" :content]))) (letvar838915 "CacheNodeId") (clojure.core/assoc :cache-node-id (deser-string (clojure.core/get-in letvar838915 ["CacheNodeId" :content]))) (letvar838915 "ReadEndpoint") (clojure.core/assoc :read-endpoint (deser-endpoint (clojure.core/get-in letvar838915 ["ReadEndpoint" :content]))) (letvar838915 "PreferredAvailabilityZone") (clojure.core/assoc :preferred-availability-zone (deser-string (clojure.core/get-in letvar838915 ["PreferredAvailabilityZone" :content]))) (letvar838915 "CurrentRole") (clojure.core/assoc :current-role (deser-string (clojure.core/get-in letvar838915 ["CurrentRole" :content]))))))

(clojure.core/defn- deser-cache-security-group [input] (clojure.core/let [letvar839023 {"OwnerId" (portkey.aws/search-for-tag input "OwnerId" :flattened? nil :xmlAttribute? nil), "CacheSecurityGroupName" (portkey.aws/search-for-tag input "CacheSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroups" (portkey.aws/search-for-tag input "EC2SecurityGroups" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839023 "OwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar839023 ["OwnerId" :content]))) (letvar839023 "CacheSecurityGroupName") (clojure.core/assoc :cache-security-group-name (deser-string (clojure.core/get-in letvar839023 ["CacheSecurityGroupName" :content]))) (letvar839023 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar839023 ["Description" :content]))) (letvar839023 "EC2SecurityGroups") (clojure.core/assoc :ec-2-security-groups (deser-ec-2-security-group-list (clojure.core/get-in letvar839023 ["EC2SecurityGroups" :content]))))))

(clojure.core/defn- deser-double [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter coll))) input))

(clojure.core/defn- deser-ec-2-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ec-2-security-group coll))) input))

(clojure.core/defn- deser-change-type [input] (clojure.core/get {"immediate" :immediate, "requires-reboot" :requiresreboot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-cache-parameter-group [input] (clojure.core/let [letvar839172 {"CacheParameterGroupName" (portkey.aws/search-for-tag input "CacheParameterGroupName" :flattened? nil :xmlAttribute? nil), "CacheParameterGroupFamily" (portkey.aws/search-for-tag input "CacheParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839172 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar839172 ["CacheParameterGroupName" :content]))) (letvar839172 "CacheParameterGroupFamily") (clojure.core/assoc :cache-parameter-group-family (deser-string (clojure.core/get-in letvar839172 ["CacheParameterGroupFamily" :content]))) (letvar839172 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar839172 ["Description" :content]))))))

(clojure.core/defn- deser-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group-membership coll))) input))

(clojure.core/defn- deser-replication-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-replication-group coll))) input))

(clojure.core/defn- deser-reserved-cache-nodes-offering [input] (clojure.core/let [letvar839314 {"ReservedCacheNodesOfferingId" (portkey.aws/search-for-tag input "ReservedCacheNodesOfferingId" :flattened? nil :xmlAttribute? nil), "CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839314 "ReservedCacheNodesOfferingId") (clojure.core/assoc :reserved-cache-nodes-offering-id (deser-string (clojure.core/get-in letvar839314 ["ReservedCacheNodesOfferingId" :content]))) (letvar839314 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar839314 ["CacheNodeType" :content]))) (letvar839314 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar839314 ["Duration" :content]))) (letvar839314 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar839314 ["FixedPrice" :content]))) (letvar839314 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar839314 ["UsagePrice" :content]))) (letvar839314 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar839314 ["ProductDescription" :content]))) (letvar839314 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar839314 ["OfferingType" :content]))) (letvar839314 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar839314 ["RecurringCharges" :content]))))))

(clojure.core/defn- deser-cache-engine-version-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-engine-version coll))) input))

(clojure.core/defn- deser-slot-migration [input] (clojure.core/let [letvar839439 {"ProgressPercentage" (portkey.aws/search-for-tag input "ProgressPercentage" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839439 "ProgressPercentage") (clojure.core/assoc :progress-percentage (deser-double (clojure.core/get-in letvar839439 ["ProgressPercentage" :content]))))))

(clojure.core/defn- deser-cache-node [input] (clojure.core/let [letvar839547 {"CacheNodeId" (portkey.aws/search-for-tag input "CacheNodeId" :flattened? nil :xmlAttribute? nil), "CacheNodeStatus" (portkey.aws/search-for-tag input "CacheNodeStatus" :flattened? nil :xmlAttribute? nil), "CacheNodeCreateTime" (portkey.aws/search-for-tag input "CacheNodeCreateTime" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "ParameterGroupStatus" (portkey.aws/search-for-tag input "ParameterGroupStatus" :flattened? nil :xmlAttribute? nil), "SourceCacheNodeId" (portkey.aws/search-for-tag input "SourceCacheNodeId" :flattened? nil :xmlAttribute? nil), "CustomerAvailabilityZone" (portkey.aws/search-for-tag input "CustomerAvailabilityZone" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839547 "CacheNodeId") (clojure.core/assoc :cache-node-id (deser-string (clojure.core/get-in letvar839547 ["CacheNodeId" :content]))) (letvar839547 "CacheNodeStatus") (clojure.core/assoc :cache-node-status (deser-string (clojure.core/get-in letvar839547 ["CacheNodeStatus" :content]))) (letvar839547 "CacheNodeCreateTime") (clojure.core/assoc :cache-node-create-time (deser-t-stamp (clojure.core/get-in letvar839547 ["CacheNodeCreateTime" :content]))) (letvar839547 "Endpoint") (clojure.core/assoc :endpoint (deser-endpoint (clojure.core/get-in letvar839547 ["Endpoint" :content]))) (letvar839547 "ParameterGroupStatus") (clojure.core/assoc :parameter-group-status (deser-string (clojure.core/get-in letvar839547 ["ParameterGroupStatus" :content]))) (letvar839547 "SourceCacheNodeId") (clojure.core/assoc :source-cache-node-id (deser-string (clojure.core/get-in letvar839547 ["SourceCacheNodeId" :content]))) (letvar839547 "CustomerAvailabilityZone") (clojure.core/assoc :customer-availability-zone (deser-string (clojure.core/get-in letvar839547 ["CustomerAvailabilityZone" :content]))))))

(clojure.core/defn- deser-pending-automatic-failover-status [input] (clojure.core/get {"enabled" :enabled, "disabled" :disabled} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-replication-group [input] (clojure.core/let [letvar839660 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "MemberClusters" (portkey.aws/search-for-tag input "MemberClusters" :flattened? nil :xmlAttribute? nil), "AutomaticFailover" (portkey.aws/search-for-tag input "AutomaticFailover" :flattened? nil :xmlAttribute? nil), "NodeGroups" (portkey.aws/search-for-tag input "NodeGroups" :flattened? nil :xmlAttribute? nil), "ConfigurationEndpoint" (portkey.aws/search-for-tag input "ConfigurationEndpoint" :flattened? nil :xmlAttribute? nil), "AuthTokenEnabled" (portkey.aws/search-for-tag input "AuthTokenEnabled" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "AtRestEncryptionEnabled" (portkey.aws/search-for-tag input "AtRestEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "ClusterEnabled" (portkey.aws/search-for-tag input "ClusterEnabled" :flattened? nil :xmlAttribute? nil), "TransitEncryptionEnabled" (portkey.aws/search-for-tag input "TransitEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "SnapshotWindow" (portkey.aws/search-for-tag input "SnapshotWindow" :flattened? nil :xmlAttribute? nil), "SnapshottingClusterId" (portkey.aws/search-for-tag input "SnapshottingClusterId" :flattened? nil :xmlAttribute? nil), "ReplicationGroupId" (portkey.aws/search-for-tag input "ReplicationGroupId" :flattened? nil :xmlAttribute? nil), "SnapshotRetentionLimit" (portkey.aws/search-for-tag input "SnapshotRetentionLimit" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839660 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar839660 ["CacheNodeType" :content]))) (letvar839660 "MemberClusters") (clojure.core/assoc :member-clusters (deser-cluster-id-list (clojure.core/get-in letvar839660 ["MemberClusters" :content]))) (letvar839660 "AutomaticFailover") (clojure.core/assoc :automatic-failover (deser-automatic-failover-status (clojure.core/get-in letvar839660 ["AutomaticFailover" :content]))) (letvar839660 "NodeGroups") (clojure.core/assoc :node-groups (deser-node-group-list (clojure.core/get-in letvar839660 ["NodeGroups" :content]))) (letvar839660 "ConfigurationEndpoint") (clojure.core/assoc :configuration-endpoint (deser-endpoint (clojure.core/get-in letvar839660 ["ConfigurationEndpoint" :content]))) (letvar839660 "AuthTokenEnabled") (clojure.core/assoc :auth-token-enabled (deser-boolean-optional (clojure.core/get-in letvar839660 ["AuthTokenEnabled" :content]))) (letvar839660 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar839660 ["Status" :content]))) (letvar839660 "AtRestEncryptionEnabled") (clojure.core/assoc :at-rest-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar839660 ["AtRestEncryptionEnabled" :content]))) (letvar839660 "ClusterEnabled") (clojure.core/assoc :cluster-enabled (deser-boolean-optional (clojure.core/get-in letvar839660 ["ClusterEnabled" :content]))) (letvar839660 "TransitEncryptionEnabled") (clojure.core/assoc :transit-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar839660 ["TransitEncryptionEnabled" :content]))) (letvar839660 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar839660 ["Description" :content]))) (letvar839660 "SnapshotWindow") (clojure.core/assoc :snapshot-window (deser-string (clojure.core/get-in letvar839660 ["SnapshotWindow" :content]))) (letvar839660 "SnapshottingClusterId") (clojure.core/assoc :snapshotting-cluster-id (deser-string (clojure.core/get-in letvar839660 ["SnapshottingClusterId" :content]))) (letvar839660 "ReplicationGroupId") (clojure.core/assoc :replication-group-id (deser-string (clojure.core/get-in letvar839660 ["ReplicationGroupId" :content]))) (letvar839660 "SnapshotRetentionLimit") (clojure.core/assoc :snapshot-retention-limit (deser-integer-optional (clojure.core/get-in letvar839660 ["SnapshotRetentionLimit" :content]))) (letvar839660 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-replication-group-pending-modified-values (clojure.core/get-in letvar839660 ["PendingModifiedValues" :content]))))))

(clojure.core/defn- deser-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot coll))) input))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar839785 {"SubnetIdentifier" (portkey.aws/search-for-tag input "SubnetIdentifier" :flattened? nil :xmlAttribute? nil), "SubnetAvailabilityZone" (portkey.aws/search-for-tag input "SubnetAvailabilityZone" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839785 "SubnetIdentifier") (clojure.core/assoc :subnet-identifier (deser-string (clojure.core/get-in letvar839785 ["SubnetIdentifier" :content]))) (letvar839785 "SubnetAvailabilityZone") (clojure.core/assoc :subnet-availability-zone (deser-availability-zone (clojure.core/get-in letvar839785 ["SubnetAvailabilityZone" :content]))))))

(clojure.core/defn- deser-reserved-cache-node [input] (clojure.core/let [letvar839893 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "StartTime" (portkey.aws/search-for-tag input "StartTime" :flattened? nil :xmlAttribute? nil), "CacheNodeCount" (portkey.aws/search-for-tag input "CacheNodeCount" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "ReservationARN" (portkey.aws/search-for-tag input "ReservationARN" :flattened? nil :xmlAttribute? nil), "ReservedCacheNodeId" (portkey.aws/search-for-tag input "ReservedCacheNodeId" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "State" (portkey.aws/search-for-tag input "State" :flattened? nil :xmlAttribute? nil), "ReservedCacheNodesOfferingId" (portkey.aws/search-for-tag input "ReservedCacheNodesOfferingId" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar839893 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar839893 ["CacheNodeType" :content]))) (letvar839893 "StartTime") (clojure.core/assoc :start-time (deser-t-stamp (clojure.core/get-in letvar839893 ["StartTime" :content]))) (letvar839893 "CacheNodeCount") (clojure.core/assoc :cache-node-count (deser-integer (clojure.core/get-in letvar839893 ["CacheNodeCount" :content]))) (letvar839893 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar839893 ["FixedPrice" :content]))) (letvar839893 "ReservationARN") (clojure.core/assoc :reservation-arn (deser-string (clojure.core/get-in letvar839893 ["ReservationARN" :content]))) (letvar839893 "ReservedCacheNodeId") (clojure.core/assoc :reserved-cache-node-id (deser-string (clojure.core/get-in letvar839893 ["ReservedCacheNodeId" :content]))) (letvar839893 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar839893 ["Duration" :content]))) (letvar839893 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar839893 ["UsagePrice" :content]))) (letvar839893 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar839893 ["ProductDescription" :content]))) (letvar839893 "State") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar839893 ["State" :content]))) (letvar839893 "ReservedCacheNodesOfferingId") (clojure.core/assoc :reserved-cache-nodes-offering-id (deser-string (clojure.core/get-in letvar839893 ["ReservedCacheNodesOfferingId" :content]))) (letvar839893 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar839893 ["RecurringCharges" :content]))) (letvar839893 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar839893 ["OfferingType" :content]))))))

(clojure.core/defn- deser-cache-subnet-group [input] (clojure.core/let [letvar840001 {"CacheSubnetGroupName" (portkey.aws/search-for-tag input "CacheSubnetGroupName" :flattened? nil :xmlAttribute? nil), "CacheSubnetGroupDescription" (portkey.aws/search-for-tag input "CacheSubnetGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "Subnets" (portkey.aws/search-for-tag input "Subnets" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840001 "CacheSubnetGroupName") (clojure.core/assoc :cache-subnet-group-name (deser-string (clojure.core/get-in letvar840001 ["CacheSubnetGroupName" :content]))) (letvar840001 "CacheSubnetGroupDescription") (clojure.core/assoc :cache-subnet-group-description (deser-string (clojure.core/get-in letvar840001 ["CacheSubnetGroupDescription" :content]))) (letvar840001 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar840001 ["VpcId" :content]))) (letvar840001 "Subnets") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar840001 ["Subnets" :content]))))))

(clojure.core/defn- deser-node-group-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-node-group-member coll))) input))

(clojure.core/defn- deser-reserved-cache-nodes-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-cache-nodes-offering coll))) input))

(clojure.core/defn- deser-availability-zones-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-node-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-node-snapshot coll))) input))

(clojure.core/defn- deser-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event coll))) input))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"cache-cluster" :cachecluster, "cache-parameter-group" :cacheparametergroup, "cache-security-group" :cachesecuritygroup, "cache-subnet-group" :cachesubnetgroup, "replication-group" :replicationgroup} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-cache-security-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-security-group coll))) input))

(clojure.core/defn- deser-event [input] (clojure.core/let [letvar840216 {"SourceIdentifier" (portkey.aws/search-for-tag input "SourceIdentifier" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "Date" (portkey.aws/search-for-tag input "Date" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840216 "SourceIdentifier") (clojure.core/assoc :source-identifier (deser-string (clojure.core/get-in letvar840216 ["SourceIdentifier" :content]))) (letvar840216 "SourceType") (clojure.core/assoc :source-type (deser-source-type (clojure.core/get-in letvar840216 ["SourceType" :content]))) (letvar840216 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar840216 ["Message" :content]))) (letvar840216 "Date") (clojure.core/assoc :date (deser-t-stamp (clojure.core/get-in letvar840216 ["Date" :content]))))))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar840324 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840324 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar840324 ["Name" :content]))))))

(clojure.core/defn- deser-cache-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-cluster coll))) input))

(clojure.core/defn- deser-cache-engine-version [input] (clojure.core/let [letvar840449 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "CacheParameterGroupFamily" (portkey.aws/search-for-tag input "CacheParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "CacheEngineDescription" (portkey.aws/search-for-tag input "CacheEngineDescription" :flattened? nil :xmlAttribute? nil), "CacheEngineVersionDescription" (portkey.aws/search-for-tag input "CacheEngineVersionDescription" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840449 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar840449 ["Engine" :content]))) (letvar840449 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar840449 ["EngineVersion" :content]))) (letvar840449 "CacheParameterGroupFamily") (clojure.core/assoc :cache-parameter-group-family (deser-string (clojure.core/get-in letvar840449 ["CacheParameterGroupFamily" :content]))) (letvar840449 "CacheEngineDescription") (clojure.core/assoc :cache-engine-description (deser-string (clojure.core/get-in letvar840449 ["CacheEngineDescription" :content]))) (letvar840449 "CacheEngineVersionDescription") (clojure.core/assoc :cache-engine-version-description (deser-string (clojure.core/get-in letvar840449 ["CacheEngineVersionDescription" :content]))))))

(clojure.core/defn- deser-cache-node-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-node coll))) input))

(clojure.core/defn- deser-node-group [input] (clojure.core/let [letvar840574 {"NodeGroupId" (portkey.aws/search-for-tag input "NodeGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "PrimaryEndpoint" (portkey.aws/search-for-tag input "PrimaryEndpoint" :flattened? nil :xmlAttribute? nil), "Slots" (portkey.aws/search-for-tag input "Slots" :flattened? nil :xmlAttribute? nil), "NodeGroupMembers" (portkey.aws/search-for-tag input "NodeGroupMembers" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840574 "NodeGroupId") (clojure.core/assoc :node-group-id (deser-string (clojure.core/get-in letvar840574 ["NodeGroupId" :content]))) (letvar840574 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar840574 ["Status" :content]))) (letvar840574 "PrimaryEndpoint") (clojure.core/assoc :primary-endpoint (deser-endpoint (clojure.core/get-in letvar840574 ["PrimaryEndpoint" :content]))) (letvar840574 "Slots") (clojure.core/assoc :slots (deser-string (clojure.core/get-in letvar840574 ["Slots" :content]))) (letvar840574 "NodeGroupMembers") (clojure.core/assoc :node-group-members (deser-node-group-member-list (clojure.core/get-in letvar840574 ["NodeGroupMembers" :content]))))))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar840682 {"RecurringChargeAmount" (portkey.aws/search-for-tag input "RecurringChargeAmount" :flattened? nil :xmlAttribute? nil), "RecurringChargeFrequency" (portkey.aws/search-for-tag input "RecurringChargeFrequency" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840682 "RecurringChargeAmount") (clojure.core/assoc :recurring-charge-amount (deser-double (clojure.core/get-in letvar840682 ["RecurringChargeAmount" :content]))) (letvar840682 "RecurringChargeFrequency") (clojure.core/assoc :recurring-charge-frequency (deser-string (clojure.core/get-in letvar840682 ["RecurringChargeFrequency" :content]))))))

(clojure.core/defn- deser-cache-node-type-specific-value [input] (clojure.core/let [letvar840790 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840790 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar840790 ["CacheNodeType" :content]))) (letvar840790 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar840790 ["Value" :content]))))))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-cache-node-type-specific-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-node-type-specific-parameter coll))) input))

(clojure.core/defn- deser-node-group-configuration [input] (clojure.core/let [letvar840932 {"NodeGroupId" (portkey.aws/search-for-tag input "NodeGroupId" :flattened? nil :xmlAttribute? nil), "Slots" (portkey.aws/search-for-tag input "Slots" :flattened? nil :xmlAttribute? nil), "ReplicaCount" (portkey.aws/search-for-tag input "ReplicaCount" :flattened? nil :xmlAttribute? nil), "PrimaryAvailabilityZone" (portkey.aws/search-for-tag input "PrimaryAvailabilityZone" :flattened? nil :xmlAttribute? nil), "ReplicaAvailabilityZones" (portkey.aws/search-for-tag input "ReplicaAvailabilityZones" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar840932 "NodeGroupId") (clojure.core/assoc :node-group-id (deser-allowed-node-group-id (clojure.core/get-in letvar840932 ["NodeGroupId" :content]))) (letvar840932 "Slots") (clojure.core/assoc :slots (deser-string (clojure.core/get-in letvar840932 ["Slots" :content]))) (letvar840932 "ReplicaCount") (clojure.core/assoc :replica-count (deser-integer-optional (clojure.core/get-in letvar840932 ["ReplicaCount" :content]))) (letvar840932 "PrimaryAvailabilityZone") (clojure.core/assoc :primary-availability-zone (deser-string (clojure.core/get-in letvar840932 ["PrimaryAvailabilityZone" :content]))) (letvar840932 "ReplicaAvailabilityZones") (clojure.core/assoc :replica-availability-zones (deser-availability-zones-list (clojure.core/get-in letvar840932 ["ReplicaAvailabilityZones" :content]))))))

(clojure.core/defn- deser-ec-2-security-group [input] (clojure.core/let [letvar841040 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupName" (portkey.aws/search-for-tag input "EC2SecurityGroupName" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupOwnerId" (portkey.aws/search-for-tag input "EC2SecurityGroupOwnerId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841040 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar841040 ["Status" :content]))) (letvar841040 "EC2SecurityGroupName") (clojure.core/assoc :ec-2-security-group-name (deser-string (clojure.core/get-in letvar841040 ["EC2SecurityGroupName" :content]))) (letvar841040 "EC2SecurityGroupOwnerId") (clojure.core/assoc :ec-2-security-group-owner-id (deser-string (clojure.core/get-in letvar841040 ["EC2SecurityGroupOwnerId" :content]))))))

(clojure.core/defn- deser-cluster-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-cache-node-ids-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-automatic-failover-status [input] (clojure.core/get {"enabled" :enabled, "disabled" :disabled, "enabling" :enabling, "disabling" :disabling} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-replication-group-pending-modified-values [input] (clojure.core/let [letvar841187 {"PrimaryClusterId" (portkey.aws/search-for-tag input "PrimaryClusterId" :flattened? nil :xmlAttribute? nil), "AutomaticFailoverStatus" (portkey.aws/search-for-tag input "AutomaticFailoverStatus" :flattened? nil :xmlAttribute? nil), "Resharding" (portkey.aws/search-for-tag input "Resharding" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841187 "PrimaryClusterId") (clojure.core/assoc :primary-cluster-id (deser-string (clojure.core/get-in letvar841187 ["PrimaryClusterId" :content]))) (letvar841187 "AutomaticFailoverStatus") (clojure.core/assoc :automatic-failover-status (deser-pending-automatic-failover-status (clojure.core/get-in letvar841187 ["AutomaticFailoverStatus" :content]))) (letvar841187 "Resharding") (clojure.core/assoc :resharding (deser-resharding-status (clojure.core/get-in letvar841187 ["Resharding" :content]))))))

(clojure.core/defn- deser-allowed-node-group-id [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-resharding-status [input] (clojure.core/let [letvar841302 {"SlotMigration" (portkey.aws/search-for-tag input "SlotMigration" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841302 "SlotMigration") (clojure.core/assoc :slot-migration (deser-slot-migration (clojure.core/get-in letvar841302 ["SlotMigration" :content]))))))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-parameter [input] (clojure.core/let [letvar841415 {"ChangeType" (portkey.aws/search-for-tag input "ChangeType" :flattened? nil :xmlAttribute? nil), "DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "ParameterValue" (portkey.aws/search-for-tag input "ParameterValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841415 "ChangeType") (clojure.core/assoc :change-type (deser-change-type (clojure.core/get-in letvar841415 ["ChangeType" :content]))) (letvar841415 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar841415 ["DataType" :content]))) (letvar841415 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar841415 ["ParameterName" :content]))) (letvar841415 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar841415 ["Source" :content]))) (letvar841415 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar841415 ["MinimumEngineVersion" :content]))) (letvar841415 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar841415 ["AllowedValues" :content]))) (letvar841415 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar841415 ["Description" :content]))) (letvar841415 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar841415 ["IsModifiable" :content]))) (letvar841415 "ParameterValue") (clojure.core/assoc :parameter-value (deser-string (clojure.core/get-in letvar841415 ["ParameterValue" :content]))))))

(clojure.core/defn- deser-cache-node-type-specific-parameter [input] (clojure.core/let [letvar841523 {"ChangeType" (portkey.aws/search-for-tag input "ChangeType" :flattened? nil :xmlAttribute? nil), "DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "CacheNodeTypeSpecificValues" (portkey.aws/search-for-tag input "CacheNodeTypeSpecificValues" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841523 "ChangeType") (clojure.core/assoc :change-type (deser-change-type (clojure.core/get-in letvar841523 ["ChangeType" :content]))) (letvar841523 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar841523 ["DataType" :content]))) (letvar841523 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar841523 ["ParameterName" :content]))) (letvar841523 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar841523 ["Source" :content]))) (letvar841523 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar841523 ["MinimumEngineVersion" :content]))) (letvar841523 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar841523 ["AllowedValues" :content]))) (letvar841523 "CacheNodeTypeSpecificValues") (clojure.core/assoc :cache-node-type-specific-values (deser-cache-node-type-specific-value-list (clojure.core/get-in letvar841523 ["CacheNodeTypeSpecificValues" :content]))) (letvar841523 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar841523 ["Description" :content]))) (letvar841523 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar841523 ["IsModifiable" :content]))))))

(clojure.core/defn- deser-snapshot [input] (clojure.core/let [letvar841631 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "CacheSubnetGroupName" (portkey.aws/search-for-tag input "CacheSubnetGroupName" :flattened? nil :xmlAttribute? nil), "NumNodeGroups" (portkey.aws/search-for-tag input "NumNodeGroups" :flattened? nil :xmlAttribute? nil), "NodeSnapshots" (portkey.aws/search-for-tag input "NodeSnapshots" :flattened? nil :xmlAttribute? nil), "PreferredAvailabilityZone" (portkey.aws/search-for-tag input "PreferredAvailabilityZone" :flattened? nil :xmlAttribute? nil), "AutomaticFailover" (portkey.aws/search-for-tag input "AutomaticFailover" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "CacheClusterCreateTime" (portkey.aws/search-for-tag input "CacheClusterCreateTime" :flattened? nil :xmlAttribute? nil), "NumCacheNodes" (portkey.aws/search-for-tag input "NumCacheNodes" :flattened? nil :xmlAttribute? nil), "SnapshotStatus" (portkey.aws/search-for-tag input "SnapshotStatus" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "SnapshotWindow" (portkey.aws/search-for-tag input "SnapshotWindow" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "TopicArn" (portkey.aws/search-for-tag input "TopicArn" :flattened? nil :xmlAttribute? nil), "SnapshotSource" (portkey.aws/search-for-tag input "SnapshotSource" :flattened? nil :xmlAttribute? nil), "ReplicationGroupId" (portkey.aws/search-for-tag input "ReplicationGroupId" :flattened? nil :xmlAttribute? nil), "CacheParameterGroupName" (portkey.aws/search-for-tag input "CacheParameterGroupName" :flattened? nil :xmlAttribute? nil), "SnapshotRetentionLimit" (portkey.aws/search-for-tag input "SnapshotRetentionLimit" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "ReplicationGroupDescription" (portkey.aws/search-for-tag input "ReplicationGroupDescription" :flattened? nil :xmlAttribute? nil), "SnapshotName" (portkey.aws/search-for-tag input "SnapshotName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841631 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar841631 ["CacheNodeType" :content]))) (letvar841631 "CacheSubnetGroupName") (clojure.core/assoc :cache-subnet-group-name (deser-string (clojure.core/get-in letvar841631 ["CacheSubnetGroupName" :content]))) (letvar841631 "NumNodeGroups") (clojure.core/assoc :num-node-groups (deser-integer-optional (clojure.core/get-in letvar841631 ["NumNodeGroups" :content]))) (letvar841631 "NodeSnapshots") (clojure.core/assoc :node-snapshots (deser-node-snapshot-list (clojure.core/get-in letvar841631 ["NodeSnapshots" :content]))) (letvar841631 "PreferredAvailabilityZone") (clojure.core/assoc :preferred-availability-zone (deser-string (clojure.core/get-in letvar841631 ["PreferredAvailabilityZone" :content]))) (letvar841631 "AutomaticFailover") (clojure.core/assoc :automatic-failover (deser-automatic-failover-status (clojure.core/get-in letvar841631 ["AutomaticFailover" :content]))) (letvar841631 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar841631 ["PreferredMaintenanceWindow" :content]))) (letvar841631 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar841631 ["CacheClusterId" :content]))) (letvar841631 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar841631 ["AutoMinorVersionUpgrade" :content]))) (letvar841631 "CacheClusterCreateTime") (clojure.core/assoc :cache-cluster-create-time (deser-t-stamp (clojure.core/get-in letvar841631 ["CacheClusterCreateTime" :content]))) (letvar841631 "NumCacheNodes") (clojure.core/assoc :num-cache-nodes (deser-integer-optional (clojure.core/get-in letvar841631 ["NumCacheNodes" :content]))) (letvar841631 "SnapshotStatus") (clojure.core/assoc :snapshot-status (deser-string (clojure.core/get-in letvar841631 ["SnapshotStatus" :content]))) (letvar841631 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar841631 ["EngineVersion" :content]))) (letvar841631 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar841631 ["Port" :content]))) (letvar841631 "SnapshotWindow") (clojure.core/assoc :snapshot-window (deser-string (clojure.core/get-in letvar841631 ["SnapshotWindow" :content]))) (letvar841631 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar841631 ["VpcId" :content]))) (letvar841631 "TopicArn") (clojure.core/assoc :topic-arn (deser-string (clojure.core/get-in letvar841631 ["TopicArn" :content]))) (letvar841631 "SnapshotSource") (clojure.core/assoc :snapshot-source (deser-string (clojure.core/get-in letvar841631 ["SnapshotSource" :content]))) (letvar841631 "ReplicationGroupId") (clojure.core/assoc :replication-group-id (deser-string (clojure.core/get-in letvar841631 ["ReplicationGroupId" :content]))) (letvar841631 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar841631 ["CacheParameterGroupName" :content]))) (letvar841631 "SnapshotRetentionLimit") (clojure.core/assoc :snapshot-retention-limit (deser-integer-optional (clojure.core/get-in letvar841631 ["SnapshotRetentionLimit" :content]))) (letvar841631 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar841631 ["Engine" :content]))) (letvar841631 "ReplicationGroupDescription") (clojure.core/assoc :replication-group-description (deser-string (clojure.core/get-in letvar841631 ["ReplicationGroupDescription" :content]))) (letvar841631 "SnapshotName") (clojure.core/assoc :snapshot-name (deser-string (clojure.core/get-in letvar841631 ["SnapshotName" :content]))))))

(clojure.core/defn- deser-t-stamp [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-recurring-charge-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-cache-cluster [input] (clojure.core/let [letvar841758 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "CacheSubnetGroupName" (portkey.aws/search-for-tag input "CacheSubnetGroupName" :flattened? nil :xmlAttribute? nil), "CacheParameterGroup" (portkey.aws/search-for-tag input "CacheParameterGroup" :flattened? nil :xmlAttribute? nil), "PreferredAvailabilityZone" (portkey.aws/search-for-tag input "PreferredAvailabilityZone" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "SecurityGroups" (portkey.aws/search-for-tag input "SecurityGroups" :flattened? nil :xmlAttribute? nil), "ConfigurationEndpoint" (portkey.aws/search-for-tag input "ConfigurationEndpoint" :flattened? nil :xmlAttribute? nil), "AuthTokenEnabled" (portkey.aws/search-for-tag input "AuthTokenEnabled" :flattened? nil :xmlAttribute? nil), "CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "CacheClusterStatus" (portkey.aws/search-for-tag input "CacheClusterStatus" :flattened? nil :xmlAttribute? nil), "CacheSecurityGroups" (portkey.aws/search-for-tag input "CacheSecurityGroups" :flattened? nil :xmlAttribute? nil), "AtRestEncryptionEnabled" (portkey.aws/search-for-tag input "AtRestEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "CacheClusterCreateTime" (portkey.aws/search-for-tag input "CacheClusterCreateTime" :flattened? nil :xmlAttribute? nil), "NumCacheNodes" (portkey.aws/search-for-tag input "NumCacheNodes" :flattened? nil :xmlAttribute? nil), "TransitEncryptionEnabled" (portkey.aws/search-for-tag input "TransitEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "ClientDownloadLandingPage" (portkey.aws/search-for-tag input "ClientDownloadLandingPage" :flattened? nil :xmlAttribute? nil), "SnapshotWindow" (portkey.aws/search-for-tag input "SnapshotWindow" :flattened? nil :xmlAttribute? nil), "ReplicationGroupId" (portkey.aws/search-for-tag input "ReplicationGroupId" :flattened? nil :xmlAttribute? nil), "SnapshotRetentionLimit" (portkey.aws/search-for-tag input "SnapshotRetentionLimit" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "NotificationConfiguration" (portkey.aws/search-for-tag input "NotificationConfiguration" :flattened? nil :xmlAttribute? nil), "CacheNodes" (portkey.aws/search-for-tag input "CacheNodes" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841758 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar841758 ["CacheNodeType" :content]))) (letvar841758 "CacheSubnetGroupName") (clojure.core/assoc :cache-subnet-group-name (deser-string (clojure.core/get-in letvar841758 ["CacheSubnetGroupName" :content]))) (letvar841758 "CacheParameterGroup") (clojure.core/assoc :cache-parameter-group (deser-cache-parameter-group-status (clojure.core/get-in letvar841758 ["CacheParameterGroup" :content]))) (letvar841758 "PreferredAvailabilityZone") (clojure.core/assoc :preferred-availability-zone (deser-string (clojure.core/get-in letvar841758 ["PreferredAvailabilityZone" :content]))) (letvar841758 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar841758 ["PreferredMaintenanceWindow" :content]))) (letvar841758 "SecurityGroups") (clojure.core/assoc :security-groups (deser-security-group-membership-list (clojure.core/get-in letvar841758 ["SecurityGroups" :content]))) (letvar841758 "ConfigurationEndpoint") (clojure.core/assoc :configuration-endpoint (deser-endpoint (clojure.core/get-in letvar841758 ["ConfigurationEndpoint" :content]))) (letvar841758 "AuthTokenEnabled") (clojure.core/assoc :auth-token-enabled (deser-boolean-optional (clojure.core/get-in letvar841758 ["AuthTokenEnabled" :content]))) (letvar841758 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar841758 ["CacheClusterId" :content]))) (letvar841758 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar841758 ["AutoMinorVersionUpgrade" :content]))) (letvar841758 "CacheClusterStatus") (clojure.core/assoc :cache-cluster-status (deser-string (clojure.core/get-in letvar841758 ["CacheClusterStatus" :content]))) (letvar841758 "CacheSecurityGroups") (clojure.core/assoc :cache-security-groups (deser-cache-security-group-membership-list (clojure.core/get-in letvar841758 ["CacheSecurityGroups" :content]))) (letvar841758 "AtRestEncryptionEnabled") (clojure.core/assoc :at-rest-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar841758 ["AtRestEncryptionEnabled" :content]))) (letvar841758 "CacheClusterCreateTime") (clojure.core/assoc :cache-cluster-create-time (deser-t-stamp (clojure.core/get-in letvar841758 ["CacheClusterCreateTime" :content]))) (letvar841758 "NumCacheNodes") (clojure.core/assoc :num-cache-nodes (deser-integer-optional (clojure.core/get-in letvar841758 ["NumCacheNodes" :content]))) (letvar841758 "TransitEncryptionEnabled") (clojure.core/assoc :transit-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar841758 ["TransitEncryptionEnabled" :content]))) (letvar841758 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar841758 ["EngineVersion" :content]))) (letvar841758 "ClientDownloadLandingPage") (clojure.core/assoc :client-download-landing-page (deser-string (clojure.core/get-in letvar841758 ["ClientDownloadLandingPage" :content]))) (letvar841758 "SnapshotWindow") (clojure.core/assoc :snapshot-window (deser-string (clojure.core/get-in letvar841758 ["SnapshotWindow" :content]))) (letvar841758 "ReplicationGroupId") (clojure.core/assoc :replication-group-id (deser-string (clojure.core/get-in letvar841758 ["ReplicationGroupId" :content]))) (letvar841758 "SnapshotRetentionLimit") (clojure.core/assoc :snapshot-retention-limit (deser-integer-optional (clojure.core/get-in letvar841758 ["SnapshotRetentionLimit" :content]))) (letvar841758 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar841758 ["Engine" :content]))) (letvar841758 "NotificationConfiguration") (clojure.core/assoc :notification-configuration (deser-notification-configuration (clojure.core/get-in letvar841758 ["NotificationConfiguration" :content]))) (letvar841758 "CacheNodes") (clojure.core/assoc :cache-nodes (deser-cache-node-list (clojure.core/get-in letvar841758 ["CacheNodes" :content]))) (letvar841758 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-pending-modified-values (clojure.core/get-in letvar841758 ["PendingModifiedValues" :content]))))))

(clojure.core/defn- deser-cache-security-group-membership [input] (clojure.core/let [letvar841866 {"CacheSecurityGroupName" (portkey.aws/search-for-tag input "CacheSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841866 "CacheSecurityGroupName") (clojure.core/assoc :cache-security-group-name (deser-string (clojure.core/get-in letvar841866 ["CacheSecurityGroupName" :content]))) (letvar841866 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar841866 ["Status" :content]))))))

(clojure.core/defn- deser-endpoint [input] (clojure.core/let [letvar841974 {"Address" (portkey.aws/search-for-tag input "Address" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar841974 "Address") (clojure.core/assoc :address (deser-string (clojure.core/get-in letvar841974 ["Address" :content]))) (letvar841974 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar841974 ["Port" :content]))))))

(clojure.core/defn- deser-cache-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-parameter-group coll))) input))

(clojure.core/defn- deser-security-group-membership [input] (clojure.core/let [letvar842099 {"SecurityGroupId" (portkey.aws/search-for-tag input "SecurityGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar842099 "SecurityGroupId") (clojure.core/assoc :security-group-id (deser-string (clojure.core/get-in letvar842099 ["SecurityGroupId" :content]))) (letvar842099 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar842099 ["Status" :content]))))))

(clojure.core/defn- deser-node-snapshot [input] (clojure.core/let [letvar842207 {"CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "NodeGroupId" (portkey.aws/search-for-tag input "NodeGroupId" :flattened? nil :xmlAttribute? nil), "CacheNodeId" (portkey.aws/search-for-tag input "CacheNodeId" :flattened? nil :xmlAttribute? nil), "NodeGroupConfiguration" (portkey.aws/search-for-tag input "NodeGroupConfiguration" :flattened? nil :xmlAttribute? nil), "CacheSize" (portkey.aws/search-for-tag input "CacheSize" :flattened? nil :xmlAttribute? nil), "CacheNodeCreateTime" (portkey.aws/search-for-tag input "CacheNodeCreateTime" :flattened? nil :xmlAttribute? nil), "SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar842207 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar842207 ["CacheClusterId" :content]))) (letvar842207 "NodeGroupId") (clojure.core/assoc :node-group-id (deser-string (clojure.core/get-in letvar842207 ["NodeGroupId" :content]))) (letvar842207 "CacheNodeId") (clojure.core/assoc :cache-node-id (deser-string (clojure.core/get-in letvar842207 ["CacheNodeId" :content]))) (letvar842207 "NodeGroupConfiguration") (clojure.core/assoc :node-group-configuration (deser-node-group-configuration (clojure.core/get-in letvar842207 ["NodeGroupConfiguration" :content]))) (letvar842207 "CacheSize") (clojure.core/assoc :cache-size (deser-string (clojure.core/get-in letvar842207 ["CacheSize" :content]))) (letvar842207 "CacheNodeCreateTime") (clojure.core/assoc :cache-node-create-time (deser-t-stamp (clojure.core/get-in letvar842207 ["CacheNodeCreateTime" :content]))) (letvar842207 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar842207 ["SnapshotCreateTime" :content]))))))

(clojure.core/defn- deser-reserved-cache-node-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-cache-node coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar842332 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar842332 "Key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar842332 ["Key" :content]))) (letvar842332 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar842332 ["Value" :content]))))))

(clojure.core/defn- deser-boolean-optional [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- deser-cache-node-type-specific-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-node-type-specific-value coll))) input))

(clojure.core/defn- deser-cache-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-security-group-membership coll))) input))

(clojure.core/defn- deser-node-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-node-group coll))) input))

(clojure.core/defn- deser-notification-configuration [input] (clojure.core/let [letvar842493 {"TopicArn" (portkey.aws/search-for-tag input "TopicArn" :flattened? nil :xmlAttribute? nil), "TopicStatus" (portkey.aws/search-for-tag input "TopicStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar842493 "TopicArn") (clojure.core/assoc :topic-arn (deser-string (clojure.core/get-in letvar842493 ["TopicArn" :content]))) (letvar842493 "TopicStatus") (clojure.core/assoc :topic-status (deser-string (clojure.core/get-in letvar842493 ["TopicStatus" :content]))))))

(clojure.core/defn- deser-cache-parameter-group-status [input] (clojure.core/let [letvar842601 {"CacheParameterGroupName" (portkey.aws/search-for-tag input "CacheParameterGroupName" :flattened? nil :xmlAttribute? nil), "ParameterApplyStatus" (portkey.aws/search-for-tag input "ParameterApplyStatus" :flattened? nil :xmlAttribute? nil), "CacheNodeIdsToReboot" (portkey.aws/search-for-tag input "CacheNodeIdsToReboot" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar842601 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar842601 ["CacheParameterGroupName" :content]))) (letvar842601 "ParameterApplyStatus") (clojure.core/assoc :parameter-apply-status (deser-string (clojure.core/get-in letvar842601 ["ParameterApplyStatus" :content]))) (letvar842601 "CacheNodeIdsToReboot") (clojure.core/assoc :cache-node-ids-to-reboot (deser-cache-node-ids-list (clojure.core/get-in letvar842601 ["CacheNodeIdsToReboot" :content]))))))

(clojure.core/defn- deser-aws-query-error-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-engine-defaults [input] (clojure.core/let [letvar842714 {"CacheParameterGroupFamily" (portkey.aws/search-for-tag input "CacheParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Marker" (portkey.aws/search-for-tag input "Marker" :flattened? nil :xmlAttribute? nil), "Parameters" (portkey.aws/search-for-tag input "Parameters" :flattened? nil :xmlAttribute? nil), "CacheNodeTypeSpecificParameters" (portkey.aws/search-for-tag input "CacheNodeTypeSpecificParameters" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar842714 "CacheParameterGroupFamily") (clojure.core/assoc :cache-parameter-group-family (deser-string (clojure.core/get-in letvar842714 ["CacheParameterGroupFamily" :content]))) (letvar842714 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar842714 ["Marker" :content]))) (letvar842714 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar842714 ["Parameters" :content]))) (letvar842714 "CacheNodeTypeSpecificParameters") (clojure.core/assoc :cache-node-type-specific-parameters (deser-cache-node-type-specific-parameters-list (clojure.core/get-in letvar842714 ["CacheNodeTypeSpecificParameters" :content]))))))

(clojure.core/defn- deser-integer-optional [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-pending-modified-values [input] (clojure.core/let [letvar842824 {"NumCacheNodes" (portkey.aws/search-for-tag input "NumCacheNodes" :flattened? nil :xmlAttribute? nil), "CacheNodeIdsToRemove" (portkey.aws/search-for-tag input "CacheNodeIdsToRemove" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar842824 "NumCacheNodes") (clojure.core/assoc :num-cache-nodes (deser-integer-optional (clojure.core/get-in letvar842824 ["NumCacheNodes" :content]))) (letvar842824 "CacheNodeIdsToRemove") (clojure.core/assoc :cache-node-ids-to-remove (deser-cache-node-ids-list (clojure.core/get-in letvar842824 ["CacheNodeIdsToRemove" :content]))) (letvar842824 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar842824 ["EngineVersion" :content]))) (letvar842824 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar842824 ["CacheNodeType" :content]))))))

(clojure.core/defn- deser-node-type-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-cache-subnet-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-subnet-group coll))) input))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- response-cache-parameter-group-already-exists-fault ([input] (response-cache-parameter-group-already-exists-fault nil input)) ([resultWrapper842879 input] (clojure.core/let [rawinput842878 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842880 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-test-failover-not-available-fault ([input] (response-test-failover-not-available-fault nil input)) ([resultWrapper842882 input] (clojure.core/let [rawinput842881 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842883 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-decrease-replica-count-result ([input] (response-decrease-replica-count-result nil input)) ([resultWrapper842885 input] (clojure.core/let [rawinput842884 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842886 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput842884 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper842885)}] (clojure.core/cond-> {} (letvar842886 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar842886 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-snapshot-quota-exceeded-fault ([input] (response-snapshot-quota-exceeded-fault nil input)) ([resultWrapper842888 input] (clojure.core/let [rawinput842887 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842889 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-subnet-group-already-exists-fault ([input] (response-cache-subnet-group-already-exists-fault nil input)) ([resultWrapper842891 input] (clojure.core/let [rawinput842890 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842892 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cluster-quota-for-customer-exceeded-fault ([input] (response-cluster-quota-for-customer-exceeded-fault nil input)) ([resultWrapper842894 input] (clojure.core/let [rawinput842893 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842895 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-node-group-not-found-fault ([input] (response-node-group-not-found-fault nil input)) ([resultWrapper842897 input] (clojure.core/let [rawinput842896 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842898 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-security-group-not-found-fault ([input] (response-cache-security-group-not-found-fault nil input)) ([resultWrapper842900 input] (clojure.core/let [rawinput842899 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842901 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-purchase-reserved-cache-nodes-offering-result ([input] (response-purchase-reserved-cache-nodes-offering-result nil input)) ([resultWrapper842903 input] (clojure.core/let [rawinput842902 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842904 {"ReservedCacheNode" (portkey.aws/search-for-tag rawinput842902 "ReservedCacheNode" :flattened? nil :result-wrapper resultWrapper842903)}] (clojure.core/cond-> {} (letvar842904 "ReservedCacheNode") (clojure.core/assoc :reserved-cache-node (deser-reserved-cache-node (clojure.core/get-in letvar842904 ["ReservedCacheNode" :content])))))))

(clojure.core/defn- response-invalid-arn-fault ([input] (response-invalid-arn-fault nil input)) ([resultWrapper842906 input] (clojure.core/let [rawinput842905 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842907 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-not-found-fault ([input] (response-reserved-cache-node-not-found-fault nil input)) ([resultWrapper842909 input] (clojure.core/let [rawinput842908 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842910 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-subnet-group-quota-exceeded-fault ([input] (response-cache-subnet-group-quota-exceeded-fault nil input)) ([resultWrapper842912 input] (clojure.core/let [rawinput842911 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842913 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-quota-exceeded-fault ([input] (response-reserved-cache-node-quota-exceeded-fault nil input)) ([resultWrapper842915 input] (clojure.core/let [rawinput842914 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842916 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-cache-subnet-group-result ([input] (response-modify-cache-subnet-group-result nil input)) ([resultWrapper842918 input] (clojure.core/let [rawinput842917 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842919 {"CacheSubnetGroup" (portkey.aws/search-for-tag rawinput842917 "CacheSubnetGroup" :flattened? nil :result-wrapper resultWrapper842918)}] (clojure.core/cond-> {} (letvar842919 "CacheSubnetGroup") (clojure.core/assoc :cache-subnet-group (deser-cache-subnet-group (clojure.core/get-in letvar842919 ["CacheSubnetGroup" :content])))))))

(clojure.core/defn- response-allowed-node-type-modifications-message ([input] (response-allowed-node-type-modifications-message nil input)) ([resultWrapper842921 input] (clojure.core/let [rawinput842920 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842922 {"ScaleUpModifications" (portkey.aws/search-for-tag rawinput842920 "ScaleUpModifications" :flattened? nil :result-wrapper resultWrapper842921)}] (clojure.core/cond-> {} (letvar842922 "ScaleUpModifications") (clojure.core/assoc :scale-up-modifications (deser-node-type-list (clojure.core/get-in letvar842922 ["ScaleUpModifications" :content])))))))

(clojure.core/defn- response-revoke-cache-security-group-ingress-result ([input] (response-revoke-cache-security-group-ingress-result nil input)) ([resultWrapper842924 input] (clojure.core/let [rawinput842923 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842925 {"CacheSecurityGroup" (portkey.aws/search-for-tag rawinput842923 "CacheSecurityGroup" :flattened? nil :result-wrapper resultWrapper842924)}] (clojure.core/cond-> {} (letvar842925 "CacheSecurityGroup") (clojure.core/assoc :cache-security-group (deser-cache-security-group (clojure.core/get-in letvar842925 ["CacheSecurityGroup" :content])))))))

(clojure.core/defn- response-describe-snapshots-list-message ([input] (response-describe-snapshots-list-message nil input)) ([resultWrapper842927 input] (clojure.core/let [rawinput842926 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842928 {"Marker" (portkey.aws/search-for-tag rawinput842926 "Marker" :flattened? nil :result-wrapper resultWrapper842927), "Snapshots" (portkey.aws/search-for-tag rawinput842926 "Snapshots" :flattened? nil :result-wrapper resultWrapper842927)}] (clojure.core/cond-> {} (letvar842928 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar842928 ["Marker" :content]))) (letvar842928 "Snapshots") (clojure.core/assoc :snapshots (deser-snapshot-list (clojure.core/get-in letvar842928 ["Snapshots" :content])))))))

(clojure.core/defn- response-cache-security-group-quota-exceeded-fault ([input] (response-cache-security-group-quota-exceeded-fault nil input)) ([resultWrapper842930 input] (clojure.core/let [rawinput842929 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842931 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-replication-group-not-found-fault ([input] (response-replication-group-not-found-fault nil input)) ([resultWrapper842933 input] (clojure.core/let [rawinput842932 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842934 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-details ([input] (response-cache-parameter-group-details nil input)) ([resultWrapper842936 input] (clojure.core/let [rawinput842935 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842937 {"Marker" (portkey.aws/search-for-tag rawinput842935 "Marker" :flattened? nil :result-wrapper resultWrapper842936), "Parameters" (portkey.aws/search-for-tag rawinput842935 "Parameters" :flattened? nil :result-wrapper resultWrapper842936), "CacheNodeTypeSpecificParameters" (portkey.aws/search-for-tag rawinput842935 "CacheNodeTypeSpecificParameters" :flattened? nil :result-wrapper resultWrapper842936)}] (clojure.core/cond-> {} (letvar842937 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar842937 ["Marker" :content]))) (letvar842937 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar842937 ["Parameters" :content]))) (letvar842937 "CacheNodeTypeSpecificParameters") (clojure.core/assoc :cache-node-type-specific-parameters (deser-cache-node-type-specific-parameters-list (clojure.core/get-in letvar842937 ["CacheNodeTypeSpecificParameters" :content])))))))

(clojure.core/defn- response-invalid-vpc-network-state-fault ([input] (response-invalid-vpc-network-state-fault nil input)) ([resultWrapper842939 input] (clojure.core/let [rawinput842938 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842940 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-subnet-group-not-found-fault ([input] (response-cache-subnet-group-not-found-fault nil input)) ([resultWrapper842942 input] (clojure.core/let [rawinput842941 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842943 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-tag-quota-per-resource-exceeded ([input] (response-tag-quota-per-resource-exceeded nil input)) ([resultWrapper842945 input] (clojure.core/let [rawinput842944 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842946 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-already-exists-fault ([input] (response-authorization-already-exists-fault nil input)) ([resultWrapper842948 input] (clojure.core/let [rawinput842947 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842949 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-snapshot-feature-not-supported-fault ([input] (response-snapshot-feature-not-supported-fault nil input)) ([resultWrapper842951 input] (clojure.core/let [rawinput842950 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842952 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-cluster-already-exists-fault ([input] (response-cache-cluster-already-exists-fault nil input)) ([resultWrapper842954 input] (clojure.core/let [rawinput842953 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842955 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-cache-subnet-group-result ([input] (response-create-cache-subnet-group-result nil input)) ([resultWrapper842957 input] (clojure.core/let [rawinput842956 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842958 {"CacheSubnetGroup" (portkey.aws/search-for-tag rawinput842956 "CacheSubnetGroup" :flattened? nil :result-wrapper resultWrapper842957)}] (clojure.core/cond-> {} (letvar842958 "CacheSubnetGroup") (clojure.core/assoc :cache-subnet-group (deser-cache-subnet-group (clojure.core/get-in letvar842958 ["CacheSubnetGroup" :content])))))))

(clojure.core/defn- response-events-message ([input] (response-events-message nil input)) ([resultWrapper842960 input] (clojure.core/let [rawinput842959 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842961 {"Marker" (portkey.aws/search-for-tag rawinput842959 "Marker" :flattened? nil :result-wrapper resultWrapper842960), "Events" (portkey.aws/search-for-tag rawinput842959 "Events" :flattened? nil :result-wrapper resultWrapper842960)}] (clojure.core/cond-> {} (letvar842961 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar842961 ["Marker" :content]))) (letvar842961 "Events") (clojure.core/assoc :events (deser-event-list (clojure.core/get-in letvar842961 ["Events" :content])))))))

(clojure.core/defn- response-invalid-snapshot-state-fault ([input] (response-invalid-snapshot-state-fault nil input)) ([resultWrapper842963 input] (clojure.core/let [rawinput842962 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842964 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-message ([input] (response-reserved-cache-node-message nil input)) ([resultWrapper842966 input] (clojure.core/let [rawinput842965 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842967 {"Marker" (portkey.aws/search-for-tag rawinput842965 "Marker" :flattened? nil :result-wrapper resultWrapper842966), "ReservedCacheNodes" (portkey.aws/search-for-tag rawinput842965 "ReservedCacheNodes" :flattened? nil :result-wrapper resultWrapper842966)}] (clojure.core/cond-> {} (letvar842967 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar842967 ["Marker" :content]))) (letvar842967 "ReservedCacheNodes") (clojure.core/assoc :reserved-cache-nodes (deser-reserved-cache-node-list (clojure.core/get-in letvar842967 ["ReservedCacheNodes" :content])))))))

(clojure.core/defn- response-cache-subnet-quota-exceeded-fault ([input] (response-cache-subnet-quota-exceeded-fault nil input)) ([resultWrapper842969 input] (clojure.core/let [rawinput842968 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842970 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-already-exists-fault ([input] (response-reserved-cache-node-already-exists-fault nil input)) ([resultWrapper842972 input] (clojure.core/let [rawinput842971 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842973 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-increase-replica-count-result ([input] (response-increase-replica-count-result nil input)) ([resultWrapper842975 input] (clojure.core/let [rawinput842974 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842976 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput842974 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper842975)}] (clojure.core/cond-> {} (letvar842976 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar842976 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-test-failover-result ([input] (response-test-failover-result nil input)) ([resultWrapper842978 input] (clojure.core/let [rawinput842977 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842979 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput842977 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper842978)}] (clojure.core/cond-> {} (letvar842979 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar842979 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-delete-snapshot-result ([input] (response-delete-snapshot-result nil input)) ([resultWrapper842981 input] (clojure.core/let [rawinput842980 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842982 {"Snapshot" (portkey.aws/search-for-tag rawinput842980 "Snapshot" :flattened? nil :result-wrapper resultWrapper842981)}] (clojure.core/cond-> {} (letvar842982 "Snapshot") (clojure.core/assoc :snapshot (deser-snapshot (clojure.core/get-in letvar842982 ["Snapshot" :content])))))))

(clojure.core/defn- response-service-linked-role-not-found-fault ([input] (response-service-linked-role-not-found-fault nil input)) ([resultWrapper842984 input] (clojure.core/let [rawinput842983 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842985 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-snapshot-not-found-fault ([input] (response-snapshot-not-found-fault nil input)) ([resultWrapper842987 input] (clojure.core/let [rawinput842986 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842988 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-engine-default-parameters-result ([input] (response-describe-engine-default-parameters-result nil input)) ([resultWrapper842990 input] (clojure.core/let [rawinput842989 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842991 {"EngineDefaults" (portkey.aws/search-for-tag rawinput842989 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper842990)}] (clojure.core/cond-> {} (letvar842991 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar842991 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-authorization-not-found-fault ([input] (response-authorization-not-found-fault nil input)) ([resultWrapper842993 input] (clojure.core/let [rawinput842992 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842994 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-nodes-offering-message ([input] (response-reserved-cache-nodes-offering-message nil input)) ([resultWrapper842996 input] (clojure.core/let [rawinput842995 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar842997 {"Marker" (portkey.aws/search-for-tag rawinput842995 "Marker" :flattened? nil :result-wrapper resultWrapper842996), "ReservedCacheNodesOfferings" (portkey.aws/search-for-tag rawinput842995 "ReservedCacheNodesOfferings" :flattened? nil :result-wrapper resultWrapper842996)}] (clojure.core/cond-> {} (letvar842997 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar842997 ["Marker" :content]))) (letvar842997 "ReservedCacheNodesOfferings") (clojure.core/assoc :reserved-cache-nodes-offerings (deser-reserved-cache-nodes-offering-list (clojure.core/get-in letvar842997 ["ReservedCacheNodesOfferings" :content])))))))

(clojure.core/defn- response-invalid-subnet ([input] (response-invalid-subnet nil input)) ([resultWrapper842999 input] (clojure.core/let [rawinput842998 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843000 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reboot-cache-cluster-result ([input] (response-reboot-cache-cluster-result nil input)) ([resultWrapper843002 input] (clojure.core/let [rawinput843001 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843003 {"CacheCluster" (portkey.aws/search-for-tag rawinput843001 "CacheCluster" :flattened? nil :result-wrapper resultWrapper843002)}] (clojure.core/cond-> {} (letvar843003 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar843003 ["CacheCluster" :content])))))))

(clojure.core/defn- response-subnet-in-use ([input] (response-subnet-in-use nil input)) ([resultWrapper843005 input] (clojure.core/let [rawinput843004 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843006 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-security-group-message ([input] (response-cache-security-group-message nil input)) ([resultWrapper843008 input] (clojure.core/let [rawinput843007 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843009 {"Marker" (portkey.aws/search-for-tag rawinput843007 "Marker" :flattened? nil :result-wrapper resultWrapper843008), "CacheSecurityGroups" (portkey.aws/search-for-tag rawinput843007 "CacheSecurityGroups" :flattened? nil :result-wrapper resultWrapper843008)}] (clojure.core/cond-> {} (letvar843009 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar843009 ["Marker" :content]))) (letvar843009 "CacheSecurityGroups") (clojure.core/assoc :cache-security-groups (deser-cache-security-groups (clojure.core/get-in letvar843009 ["CacheSecurityGroups" :content])))))))

(clojure.core/defn- response-create-cache-security-group-result ([input] (response-create-cache-security-group-result nil input)) ([resultWrapper843011 input] (clojure.core/let [rawinput843010 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843012 {"CacheSecurityGroup" (portkey.aws/search-for-tag rawinput843010 "CacheSecurityGroup" :flattened? nil :result-wrapper resultWrapper843011)}] (clojure.core/cond-> {} (letvar843012 "CacheSecurityGroup") (clojure.core/assoc :cache-security-group (deser-cache-security-group (clojure.core/get-in letvar843012 ["CacheSecurityGroup" :content])))))))

(clojure.core/defn- response-invalid-cache-security-group-state-fault ([input] (response-invalid-cache-security-group-state-fault nil input)) ([resultWrapper843014 input] (clojure.core/let [rawinput843013 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843015 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-snapshot-result ([input] (response-create-snapshot-result nil input)) ([resultWrapper843017 input] (clojure.core/let [rawinput843016 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843018 {"Snapshot" (portkey.aws/search-for-tag rawinput843016 "Snapshot" :flattened? nil :result-wrapper resultWrapper843017)}] (clojure.core/cond-> {} (letvar843018 "Snapshot") (clojure.core/assoc :snapshot (deser-snapshot (clojure.core/get-in letvar843018 ["Snapshot" :content])))))))

(clojure.core/defn- response-modify-cache-cluster-result ([input] (response-modify-cache-cluster-result nil input)) ([resultWrapper843020 input] (clojure.core/let [rawinput843019 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843021 {"CacheCluster" (portkey.aws/search-for-tag rawinput843019 "CacheCluster" :flattened? nil :result-wrapper resultWrapper843020)}] (clojure.core/cond-> {} (letvar843021 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar843021 ["CacheCluster" :content])))))))

(clojure.core/defn- response-replication-group-already-exists-fault ([input] (response-replication-group-already-exists-fault nil input)) ([resultWrapper843023 input] (clojure.core/let [rawinput843022 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843024 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-replication-group-shard-configuration-result ([input] (response-modify-replication-group-shard-configuration-result nil input)) ([resultWrapper843026 input] (clojure.core/let [rawinput843025 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843027 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput843025 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper843026)}] (clojure.core/cond-> {} (letvar843027 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar843027 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-delete-cache-cluster-result ([input] (response-delete-cache-cluster-result nil input)) ([resultWrapper843029 input] (clojure.core/let [rawinput843028 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843030 {"CacheCluster" (portkey.aws/search-for-tag rawinput843028 "CacheCluster" :flattened? nil :result-wrapper resultWrapper843029)}] (clojure.core/cond-> {} (letvar843030 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar843030 ["CacheCluster" :content])))))))

(clojure.core/defn- response-tag-list-message ([input] (response-tag-list-message nil input)) ([resultWrapper843032 input] (clojure.core/let [rawinput843031 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843033 {"TagList" (portkey.aws/search-for-tag rawinput843031 "TagList" :flattened? nil :result-wrapper resultWrapper843032)}] (clojure.core/cond-> {} (letvar843033 "TagList") (clojure.core/assoc :tag-list (deser-tag-list (clojure.core/get-in letvar843033 ["TagList" :content])))))))

(clojure.core/defn- response-delete-replication-group-result ([input] (response-delete-replication-group-result nil input)) ([resultWrapper843035 input] (clojure.core/let [rawinput843034 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843036 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput843034 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper843035)}] (clojure.core/cond-> {} (letvar843036 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar843036 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-cache-subnet-group-in-use ([input] (response-cache-subnet-group-in-use nil input)) ([resultWrapper843038 input] (clojure.core/let [rawinput843037 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843039 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-replication-group-state-fault ([input] (response-invalid-replication-group-state-fault nil input)) ([resultWrapper843041 input] (clojure.core/let [rawinput843040 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843042 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-replication-group-result ([input] (response-create-replication-group-result nil input)) ([resultWrapper843044 input] (clojure.core/let [rawinput843043 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843045 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput843043 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper843044)}] (clojure.core/cond-> {} (letvar843045 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar843045 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-cache-cluster-message ([input] (response-cache-cluster-message nil input)) ([resultWrapper843047 input] (clojure.core/let [rawinput843046 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843048 {"Marker" (portkey.aws/search-for-tag rawinput843046 "Marker" :flattened? nil :result-wrapper resultWrapper843047), "CacheClusters" (portkey.aws/search-for-tag rawinput843046 "CacheClusters" :flattened? nil :result-wrapper resultWrapper843047)}] (clojure.core/cond-> {} (letvar843048 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar843048 ["Marker" :content]))) (letvar843048 "CacheClusters") (clojure.core/assoc :cache-clusters (deser-cache-cluster-list (clojure.core/get-in letvar843048 ["CacheClusters" :content])))))))

(clojure.core/defn- response-node-quota-for-customer-exceeded-fault ([input] (response-node-quota-for-customer-exceeded-fault nil input)) ([resultWrapper843050 input] (clojure.core/let [rawinput843049 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843051 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-groups-message ([input] (response-cache-parameter-groups-message nil input)) ([resultWrapper843053 input] (clojure.core/let [rawinput843052 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843054 {"Marker" (portkey.aws/search-for-tag rawinput843052 "Marker" :flattened? nil :result-wrapper resultWrapper843053), "CacheParameterGroups" (portkey.aws/search-for-tag rawinput843052 "CacheParameterGroups" :flattened? nil :result-wrapper resultWrapper843053)}] (clojure.core/cond-> {} (letvar843054 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar843054 ["Marker" :content]))) (letvar843054 "CacheParameterGroups") (clojure.core/assoc :cache-parameter-groups (deser-cache-parameter-group-list (clojure.core/get-in letvar843054 ["CacheParameterGroups" :content])))))))

(clojure.core/defn- response-create-cache-parameter-group-result ([input] (response-create-cache-parameter-group-result nil input)) ([resultWrapper843056 input] (clojure.core/let [rawinput843055 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843057 {"CacheParameterGroup" (portkey.aws/search-for-tag rawinput843055 "CacheParameterGroup" :flattened? nil :result-wrapper resultWrapper843056)}] (clojure.core/cond-> {} (letvar843057 "CacheParameterGroup") (clojure.core/assoc :cache-parameter-group (deser-cache-parameter-group (clojure.core/get-in letvar843057 ["CacheParameterGroup" :content])))))))

(clojure.core/defn- response-node-groups-per-replication-group-quota-exceeded-fault ([input] (response-node-groups-per-replication-group-quota-exceeded-fault nil input)) ([resultWrapper843059 input] (clojure.core/let [rawinput843058 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843060 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-parameter-combination-exception ([input] (response-invalid-parameter-combination-exception nil input)) ([resultWrapper843062 input] (clojure.core/let [rawinput843061 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843063 {"message" (portkey.aws/search-for-tag rawinput843061 "message" :flattened? nil :result-wrapper resultWrapper843062)}] (clojure.core/cond-> {} (letvar843063 "message") (clojure.core/assoc :message (deser-aws-query-error-message (clojure.core/get-in letvar843063 ["message" :content])))))))

(clojure.core/defn- response-invalid-cache-parameter-group-state-fault ([input] (response-invalid-cache-parameter-group-state-fault nil input)) ([resultWrapper843065 input] (clojure.core/let [rawinput843064 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843066 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-not-found-fault ([input] (response-cache-parameter-group-not-found-fault nil input)) ([resultWrapper843068 input] (clojure.core/let [rawinput843067 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843069 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-name-message ([input] (response-cache-parameter-group-name-message nil input)) ([resultWrapper843071 input] (clojure.core/let [rawinput843070 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843072 {"CacheParameterGroupName" (portkey.aws/search-for-tag rawinput843070 "CacheParameterGroupName" :flattened? nil :result-wrapper resultWrapper843071)}] (clojure.core/cond-> {} (letvar843072 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar843072 ["CacheParameterGroupName" :content])))))))

(clojure.core/defn- response-create-cache-cluster-result ([input] (response-create-cache-cluster-result nil input)) ([resultWrapper843074 input] (clojure.core/let [rawinput843073 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843075 {"CacheCluster" (portkey.aws/search-for-tag rawinput843073 "CacheCluster" :flattened? nil :result-wrapper resultWrapper843074)}] (clojure.core/cond-> {} (letvar843075 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar843075 ["CacheCluster" :content])))))))

(clojure.core/defn- response-reserved-cache-nodes-offering-not-found-fault ([input] (response-reserved-cache-nodes-offering-not-found-fault nil input)) ([resultWrapper843077 input] (clojure.core/let [rawinput843076 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843078 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-cluster-not-found-fault ([input] (response-cache-cluster-not-found-fault nil input)) ([resultWrapper843080 input] (clojure.core/let [rawinput843079 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843081 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-security-group-already-exists-fault ([input] (response-cache-security-group-already-exists-fault nil input)) ([resultWrapper843083 input] (clojure.core/let [rawinput843082 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843084 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-copy-snapshot-result ([input] (response-copy-snapshot-result nil input)) ([resultWrapper843086 input] (clojure.core/let [rawinput843085 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843087 {"Snapshot" (portkey.aws/search-for-tag rawinput843085 "Snapshot" :flattened? nil :result-wrapper resultWrapper843086)}] (clojure.core/cond-> {} (letvar843087 "Snapshot") (clojure.core/assoc :snapshot (deser-snapshot (clojure.core/get-in letvar843087 ["Snapshot" :content])))))))

(clojure.core/defn- response-node-quota-for-cluster-exceeded-fault ([input] (response-node-quota-for-cluster-exceeded-fault nil input)) ([resultWrapper843089 input] (clojure.core/let [rawinput843088 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843090 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-replication-group-message ([input] (response-replication-group-message nil input)) ([resultWrapper843092 input] (clojure.core/let [rawinput843091 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843093 {"Marker" (portkey.aws/search-for-tag rawinput843091 "Marker" :flattened? nil :result-wrapper resultWrapper843092), "ReplicationGroups" (portkey.aws/search-for-tag rawinput843091 "ReplicationGroups" :flattened? nil :result-wrapper resultWrapper843092)}] (clojure.core/cond-> {} (letvar843093 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar843093 ["Marker" :content]))) (letvar843093 "ReplicationGroups") (clojure.core/assoc :replication-groups (deser-replication-group-list (clojure.core/get-in letvar843093 ["ReplicationGroups" :content])))))))

(clojure.core/defn- response-tag-not-found-fault ([input] (response-tag-not-found-fault nil input)) ([resultWrapper843095 input] (clojure.core/let [rawinput843094 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843096 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-engine-version-message ([input] (response-cache-engine-version-message nil input)) ([resultWrapper843098 input] (clojure.core/let [rawinput843097 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843099 {"Marker" (portkey.aws/search-for-tag rawinput843097 "Marker" :flattened? nil :result-wrapper resultWrapper843098), "CacheEngineVersions" (portkey.aws/search-for-tag rawinput843097 "CacheEngineVersions" :flattened? nil :result-wrapper resultWrapper843098)}] (clojure.core/cond-> {} (letvar843099 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar843099 ["Marker" :content]))) (letvar843099 "CacheEngineVersions") (clojure.core/assoc :cache-engine-versions (deser-cache-engine-version-list (clojure.core/get-in letvar843099 ["CacheEngineVersions" :content])))))))

(clojure.core/defn- response-cache-subnet-group-message ([input] (response-cache-subnet-group-message nil input)) ([resultWrapper843101 input] (clojure.core/let [rawinput843100 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843102 {"Marker" (portkey.aws/search-for-tag rawinput843100 "Marker" :flattened? nil :result-wrapper resultWrapper843101), "CacheSubnetGroups" (portkey.aws/search-for-tag rawinput843100 "CacheSubnetGroups" :flattened? nil :result-wrapper resultWrapper843101)}] (clojure.core/cond-> {} (letvar843102 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar843102 ["Marker" :content]))) (letvar843102 "CacheSubnetGroups") (clojure.core/assoc :cache-subnet-groups (deser-cache-subnet-groups (clojure.core/get-in letvar843102 ["CacheSubnetGroups" :content])))))))

(clojure.core/defn- response-invalid-parameter-value-exception ([input] (response-invalid-parameter-value-exception nil input)) ([resultWrapper843104 input] (clojure.core/let [rawinput843103 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843105 {"message" (portkey.aws/search-for-tag rawinput843103 "message" :flattened? nil :result-wrapper resultWrapper843104)}] (clojure.core/cond-> {} (letvar843105 "message") (clojure.core/assoc :message (deser-aws-query-error-message (clojure.core/get-in letvar843105 ["message" :content])))))))

(clojure.core/defn- response-no-operation-fault ([input] (response-no-operation-fault nil input)) ([resultWrapper843107 input] (clojure.core/let [rawinput843106 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843108 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-cache-cluster-capacity-fault ([input] (response-insufficient-cache-cluster-capacity-fault nil input)) ([resultWrapper843110 input] (clojure.core/let [rawinput843109 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843111 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-api-call-rate-for-customer-exceeded-fault ([input] (response-api-call-rate-for-customer-exceeded-fault nil input)) ([resultWrapper843113 input] (clojure.core/let [rawinput843112 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843114 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorize-cache-security-group-ingress-result ([input] (response-authorize-cache-security-group-ingress-result nil input)) ([resultWrapper843116 input] (clojure.core/let [rawinput843115 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843117 {"CacheSecurityGroup" (portkey.aws/search-for-tag rawinput843115 "CacheSecurityGroup" :flattened? nil :result-wrapper resultWrapper843116)}] (clojure.core/cond-> {} (letvar843117 "CacheSecurityGroup") (clojure.core/assoc :cache-security-group (deser-cache-security-group (clojure.core/get-in letvar843117 ["CacheSecurityGroup" :content])))))))

(clojure.core/defn- response-modify-replication-group-result ([input] (response-modify-replication-group-result nil input)) ([resultWrapper843119 input] (clojure.core/let [rawinput843118 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843120 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput843118 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper843119)}] (clojure.core/cond-> {} (letvar843120 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar843120 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-invalid-cache-cluster-state-fault ([input] (response-invalid-cache-cluster-state-fault nil input)) ([resultWrapper843122 input] (clojure.core/let [rawinput843121 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843123 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-snapshot-already-exists-fault ([input] (response-snapshot-already-exists-fault nil input)) ([resultWrapper843125 input] (clojure.core/let [rawinput843124 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843126 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-quota-exceeded-fault ([input] (response-cache-parameter-group-quota-exceeded-fault nil input)) ([resultWrapper843128 input] (clojure.core/let [rawinput843127 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar843129 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/read-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/current-role (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-member/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-node-id :portkey.aws.elasticache.-2015-02-02.node-group-member/read-endpoint :portkey.aws.elasticache.-2015-02-02.node-group-member/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.node-group-member/current-role]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.test-failover-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.test-failover-message/node-group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine-version :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/marker :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/default-only]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/retain-primary-cluster (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/replication-group-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/retain-primary-cluster :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/final-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/ec-2-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/ec-2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group/owner-id :portkey.aws.elasticache.-2015-02-02.cache-security-group/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.cache-security-group/description :portkey.aws.elasticache.-2015-02-02.cache-security-group/ec-2-security-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/az-mode #{:crossaz "cross-az" :singleaz "single-az"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec-2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/ec-2-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/change-type #{"immediate" :requiresreboot "requires-reboot" :immediate})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/description]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/replication-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/cache-node-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/fixed-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/usage-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/product-description :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/offering-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/recurring-charges]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-engine-version))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.slot-migration/progress-percentage (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/slot-migration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.slot-migration/progress-percentage]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/parameter-group-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/source-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/customer-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-id :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-status :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-create-time :portkey.aws.elasticache.-2015-02-02/endpoint :portkey.aws.elasticache.-2015-02-02.cache-node/parameter-group-status :portkey.aws.elasticache.-2015-02-02.cache-node/source-cache-node-id :portkey.aws.elasticache.-2015-02-02.cache-node/customer-availability-zone]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status #{:disabled "enabled" "disabled" :enabled})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/cache-parameter-group-family] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/reserved-cache-node]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/description] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/subnet-ids]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replica-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replica-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replicas-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/remove-replicas-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/new-replica-count :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replica-configuration :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replicas-to-remove]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/member-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cluster-id-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cluster-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/pending-modified-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group/cache-node-type :portkey.aws.elasticache.-2015-02-02.replication-group/member-clusters :portkey.aws.elasticache.-2015-02-02.replication-group/automatic-failover :portkey.aws.elasticache.-2015-02-02.replication-group/node-groups :portkey.aws.elasticache.-2015-02-02.replication-group/configuration-endpoint :portkey.aws.elasticache.-2015-02-02.replication-group/auth-token-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/status :portkey.aws.elasticache.-2015-02-02.replication-group/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/cluster-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/description :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-window :portkey.aws.elasticache.-2015-02-02.replication-group/snapshotting-cluster-id :portkey.aws.elasticache.-2015-02-02.replication-group/replication-group-id :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.replication-group/pending-modified-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zone))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.subnet/subnet-identifier :portkey.aws.elasticache.-2015-02-02.subnet/subnet-availability-zone]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter-name-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/cache-parameter-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/source :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reservation-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/state (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/start-time :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-count :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/fixed-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reservation-arn :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/usage-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/product-description :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/state :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/recurring-charges :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/offering-type]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/scale-up-modifications (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-type-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/scale-up-modifications]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-nodes-offering-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/cache-node-count]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/vpc-id :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/subnets]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/snapshots]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/resharding-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/new-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-type :portkey.aws.elasticache.-2015-02-02/az-mode :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/engine-version :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-status :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/apply-immediately :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-ids-to-remove :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/new-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/key-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/description] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/parameters :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/cache-node-type-specific-parameters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-member))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/engine-version :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-status :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshotting-cluster-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/apply-immediately :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/automatic-failover-enabled :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-description :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/node-group-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-security-group-names]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replica-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replica-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/new-replica-count :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replica-configuration]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replicas-per-node-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-cache-cluster-a-zs (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/node-group-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-description] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-node-groups :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auth-token :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-arns :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replicas-per-node-group :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/tags :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-cache-cluster-a-zs :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine-version :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/port :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/node-group-configuration :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/automatic-failover-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-cache-clusters :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zones-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-events-message/source-identifier :portkey.aws.elasticache.-2015-02-02/source-type :portkey.aws.elasticache.-2015-02-02.describe-events-message/start-time :portkey.aws.elasticache.-2015-02-02.describe-events-message/end-time :portkey.aws.elasticache.-2015-02-02.describe-events-message/duration :portkey.aws.elasticache.-2015-02-02.describe-events-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-events-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/show-node-group-config (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-name :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-source :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/show-node-group-config]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-owner-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/event))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-group-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/resharding-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-retain (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-groups-to-retain-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-group-count :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/resharding-configuration :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-remove :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-retain]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/events (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/event-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.events-message/marker :portkey.aws.elasticache.-2015-02-02.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/snapshot-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/cache-cluster-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/source-type #{:cacheparametergroup "cache-subnet-group" "cache-parameter-group" "cache-cluster" :replicationgroup "replication-group" "cache-security-group" :cachesubnetgroup :cachecluster :cachesecuritygroup})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/date (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.event/source-identifier :portkey.aws.elasticache.-2015-02-02/source-type :portkey.aws.elasticache.-2015-02-02.event/message :portkey.aws.elasticache.-2015-02-02.event/date]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.availability-zone/name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/reserved-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/reserved-cache-nodes]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-node-info (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-clusters-not-in-replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/marker :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-node-info :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-clusters-not-in-replication-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-cluster))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-version-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine-version :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-description :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-version-description]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-node-ids-to-reboot] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/primary-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-members (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-member-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group/node-group-id :portkey.aws.elasticache.-2015-02-02.node-group/status :portkey.aws.elasticache.-2015-02-02.node-group/primary-endpoint :portkey.aws.elasticache.-2015-02-02.node-group/slots :portkey.aws.elasticache.-2015-02-02.node-group/node-group-members]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/service-linked-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/subnet-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-amount :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-frequency]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/cache-node-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02/az-mode :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auth-token :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-arns :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zones :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/tags :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine-version :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/port :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-name :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/reserved-cache-nodes-offerings (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/reserved-cache-nodes-offerings]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/tag))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-message/marker :portkey.aws.elasticache.-2015-02-02/cache-security-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/resource-name :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/cache-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/tag-list]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/remove-replicas-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster-message/marker :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/cache-clusters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/cache-parameter-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/cache-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/primary-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-configuration/node-group-id :portkey.aws.elasticache.-2015-02-02.node-group-configuration/slots :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-count :portkey.aws.elasticache.-2015-02-02.node-group-configuration/primary-availability-zone :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec-2-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.ec-2-security-group/status :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-id-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/automatic-failover-status #{:disabled "enabled" :disabling :enabling "disabling" "enabling" "disabled" :enabled})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/automatic-failover-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/resharding (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/automatic-failover-status :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/resharding]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/key-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/resource-name :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 4)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"\d+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/slot-migration]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/change-type :portkey.aws.elasticache.-2015-02-02.parameter/data-type :portkey.aws.elasticache.-2015-02-02.parameter/parameter-name :portkey.aws.elasticache.-2015-02-02.parameter/source :portkey.aws.elasticache.-2015-02-02.parameter/minimum-engine-version :portkey.aws.elasticache.-2015-02-02.parameter/allowed-values :portkey.aws.elasticache.-2015-02-02.parameter/description :portkey.aws.elasticache.-2015-02-02.parameter/is-modifiable :portkey.aws.elasticache.-2015-02-02.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/cache-node-type-specific-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/change-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/data-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/parameter-name :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/source :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/minimum-engine-version :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/allowed-values :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/cache-node-type-specific-values :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/description :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/is-modifiable]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.resharding-configuration/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.resharding-configuration/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.resharding-configuration/node-group-id :portkey.aws.elasticache.-2015-02-02.resharding-configuration/preferred-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/final-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/node-snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.snapshot/cache-node-type :portkey.aws.elasticache.-2015-02-02.snapshot/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.snapshot/num-node-groups :portkey.aws.elasticache.-2015-02-02.snapshot/node-snapshots :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.snapshot/automatic-failover :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.snapshot/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-create-time :portkey.aws.elasticache.-2015-02-02.snapshot/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-status :portkey.aws.elasticache.-2015-02-02.snapshot/engine-version :portkey.aws.elasticache.-2015-02-02.snapshot/port :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-window :portkey.aws.elasticache.-2015-02-02.snapshot/vpc-id :portkey.aws.elasticache.-2015-02-02.snapshot/topic-arn :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-source :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-id :portkey.aws.elasticache.-2015-02-02.snapshot/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.snapshot/engine :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-description :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/snapshot-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/replication-group-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/cache-security-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/cache-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/cache-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-parameter-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/client-download-landing-page (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-node-type :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-parameter-group :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.cache-cluster/security-groups :portkey.aws.elasticache.-2015-02-02.cache-cluster/configuration-endpoint :portkey.aws.elasticache.-2015-02-02.cache-cluster/auth-token-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.cache-cluster/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-status :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-security-groups :portkey.aws.elasticache.-2015-02-02.cache-cluster/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-create-time :portkey.aws.elasticache.-2015-02-02.cache-cluster/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.cache-cluster/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine-version :portkey.aws.elasticache.-2015-02-02.cache-cluster/client-download-landing-page :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-window :portkey.aws.elasticache.-2015-02-02.cache-cluster/replication-group-id :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine :portkey.aws.elasticache.-2015-02-02/notification-configuration :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-nodes :portkey.aws.elasticache.-2015-02-02/pending-modified-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/address (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.endpoint/address :portkey.aws.elasticache.-2015-02-02.endpoint/port]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-to-retain-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-message/marker :portkey.aws.elasticache.-2015-02-02.replication-group-message/replication-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-parameter-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/security-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.security-group-membership/security-group-id :portkey.aws.elasticache.-2015-02-02.security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-size (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.node-snapshot/node-group-id :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-id :portkey.aws.elasticache.-2015-02-02/node-group-configuration :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-size :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-create-time :portkey.aws.elasticache.-2015-02-02.node-snapshot/snapshot-create-time]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/key (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.tag/key :portkey.aws.elasticache.-2015-02-02.tag/value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/product-description :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/offering-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/resource-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/notification-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-arn :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/parameter-apply-status :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-node-ids-to-reboot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-owner-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/cache-parameter-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/reset-all-parameters :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/parameter-name-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/aws-query-error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.engine-defaults/marker :portkey.aws.elasticache.-2015-02-02.engine-defaults/parameters :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-node-type-specific-parameters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/configure-shard (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.configure-shard/node-group-id :portkey.aws.elasticache.-2015-02-02.configure-shard/new-replica-count] :opt-un [:portkey.aws.elasticache.-2015-02-02.configure-shard/preferred-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/cache-engine-versions (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/marker :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/cache-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/parameter-name-values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/product-description :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/offering-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/marker :portkey.aws.elasticache.-2015-02-02/cache-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/no-operation-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.pending-modified-values/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-ids-to-remove :portkey.aws.elasticache.-2015-02-02.pending-modified-values/engine-version :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-type]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/source-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-bucket (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/source-snapshot-name :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-snapshot-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-bucket]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-type-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/api-call-rate-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/subnet))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-subnet-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replica-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/configure-shard))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.core/defn describe-cache-parameter-groups "Returns a list of cache parameter group descriptions. If a cache parameter group\nname is specified, the list contains only the descriptions for that group." ([] (describe-cache-parameter-groups {})) ([describe-cache-parameter-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-cache-parameter-groups-message describe-cache-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheParameterGroupsResult", :http.request.configuration/action "DescribeCacheParameterGroups", :http.request.configuration/output-deser-fn response-cache-parameter-groups-message, :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message))

(clojure.core/defn modify-replication-group-shard-configuration "Modifies a replication group's shards (node groups) by allowing you to add\nshards, remove shards, or rebalance the keyspaces among exisiting shards." ([modify-replication-group-shard-configuration-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-replication-group-shard-configuration-message modify-replication-group-shard-configuration-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyReplicationGroupShardConfigurationResult", :http.request.configuration/action "ModifyReplicationGroupShardConfiguration", :http.request.configuration/output-deser-fn response-modify-replication-group-shard-configuration-result, :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-replication-group-shard-configuration :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result))

(clojure.core/defn describe-cache-security-groups "Returns a list of cache security group descriptions. If a cache security group\nname is specified, the list contains only the description of that group." ([] (describe-cache-security-groups {})) ([describe-cache-security-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-cache-security-groups-message describe-cache-security-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-security-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheSecurityGroupsResult", :http.request.configuration/action "DescribeCacheSecurityGroups", :http.request.configuration/output-deser-fn response-cache-security-group-message, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-security-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-message))

(clojure.core/defn modify-cache-parameter-group "Modifies the parameters of a cache parameter group. You can modify up to 20\nparameters in a single request by submitting a list parameter name and value\npairs." ([modify-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-cache-parameter-group-message modify-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCacheParameterGroupResult", :http.request.configuration/action "ModifyCacheParameterGroup", :http.request.configuration/output-deser-fn response-cache-parameter-group-name-message, :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef modify-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn test-failover "Represents the input of a TestFailover operation which test automatic failover\non a specified node group (called shard in the console) in a replication group\n(called cluster in the console).\n Note the following\n * A customer can use this operation to test automatic failover on up to 5\nshards (called node groups in the ElastiCache API and AWS CLI) in any rolling\n24-hour period.\n * If calling this operation on shards in different clusters (called replication\ngroups in the API and CLI), the calls can be made concurrently.\n * If calling this operation multiple times on different shards in the same\nRedis (cluster mode enabled) replication group, the first node replacement must\ncomplete before a subsequent call can be made.\n * To determine whether the node replacement is complete you can check Events\nusing the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look\nfor the following automatic failover related events, listed here in order of\noccurrance:\n * Replication group message: Test Failover API called for node group\n<node-group-id>\n * Cache cluster message: Failover from master node <primary-node-id> to replica\nnode <node-id> completed\n * Replication group message: Failover from master node <primary-node-id> to\nreplica node <node-id> completed\n * Cache cluster message: Recovering cache nodes <node-id>\n * Cache cluster message: Finished recovery for cache nodes <node-id>\n For more information see:\n * Viewing ElastiCache Events\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html)\nin the ElastiCache User Guide\n * DescribeEvents\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html)\nin the ElastiCache API Reference\n Also see, Testing Multi-AZ with Automatic Failover\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test)\nin the ElastiCache User Guide." ([test-failover-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-test-failover-message test-failover-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/test-failover-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/test-failover-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "TestFailoverResult", :http.request.configuration/action "TestFailover", :http.request.configuration/output-deser-fn response-test-failover-result, :http.request.spec/error-spec {"APICallRateForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/api-call-rate-for-customer-exceeded-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "TestFailoverNotAvailableFault" :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef test-failover :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/test-failover-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/test-failover-result))

(clojure.core/defn delete-cache-parameter-group "Deletes the specified cache parameter group. You cannot delete a cache parameter\ngroup if it is associated with any cache clusters." ([delete-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-cache-parameter-group-message delete-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCacheParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-replication-group "Deletes an existing replication group. By default, this operation deletes the\nentire replication group, including the primary/primaries and all of the read\nreplicas. If the replication group has only one primary, you can optionally\ndelete only the read replicas, while retaining the primary by setting\nRetainPrimaryCluster=true.\n When you receive a successful response from this operation, Amazon ElastiCache\nimmediately begins deleting the selected resources; you cannot cancel or revert\nthis operation.\n This operation is valid for Redis only." ([delete-replication-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-replication-group-message delete-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteReplicationGroupResult", :http.request.configuration/action "DeleteReplicationGroup", :http.request.configuration/output-deser-fn response-delete-replication-group-result, :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result))

(clojure.core/defn purchase-reserved-cache-nodes-offering "Allows you to purchase a reserved cache node offering." ([purchase-reserved-cache-nodes-offering-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-purchase-reserved-cache-nodes-offering-message purchase-reserved-cache-nodes-offering-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PurchaseReservedCacheNodesOfferingResult", :http.request.configuration/action "PurchaseReservedCacheNodesOffering", :http.request.configuration/output-deser-fn response-purchase-reserved-cache-nodes-offering-result, :http.request.spec/error-spec {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "ReservedCacheNodeAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault, "ReservedCacheNodeQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef purchase-reserved-cache-nodes-offering :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result))

(clojure.core/defn describe-events "Returns events related to clusters, cache security groups, and cache parameter\ngroups. You can obtain events specific to a particular cluster, cache security\ngroup, or cache parameter group by providing the name as a parameter.\n By default, only the events occurring within the last hour are returned;\nhowever, you can retrieve up to 14 days' worth of events if necessary." ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventsResult", :http.request.configuration/action "DescribeEvents", :http.request.configuration/output-deser-fn response-events-message, :http.request.spec/error-spec {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/events-message))

(clojure.core/defn create-snapshot "Creates a copy of an entire cluster or replication group at a specific moment in\ntime.\n This operation is valid for Redis only." ([create-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-snapshot-message create-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateSnapshotResult", :http.request.configuration/action "CreateSnapshot", :http.request.configuration/output-deser-fn response-create-snapshot-result, :http.request.spec/error-spec {"SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-snapshot-result))

(clojure.core/defn increase-replica-count "Dynamically increases the number of replics in a Redis (cluster mode disabled)\nreplication group or the number of replica nodes in one or more node groups\n(shards) of a Redis (cluster mode enabled) replication group. This operation is\nperformed with no cluster down time." ([increase-replica-count-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-increase-replica-count-message increase-replica-count-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "IncreaseReplicaCountResult", :http.request.configuration/action "IncreaseReplicaCount", :http.request.configuration/output-deser-fn response-increase-replica-count-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "NoOperationFault" :portkey.aws.elasticache.-2015-02-02/no-operation-fault, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef increase-replica-count :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result))

(clojure.core/defn describe-cache-engine-versions "Returns a list of the available cache engines and their versions." ([] (describe-cache-engine-versions {})) ([describe-cache-engine-versions-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-cache-engine-versions-message describe-cache-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheEngineVersionsResult", :http.request.configuration/action "DescribeCacheEngineVersions", :http.request.configuration/output-deser-fn response-cache-engine-version-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-cache-engine-versions :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message))

(clojure.core/defn reset-cache-parameter-group "Modifies the parameters of a cache parameter group to the engine or system\ndefault value. You can reset specific parameters by submitting a list of\nparameter names. To reset the entire cache parameter group, specify the\nResetAllParameters and CacheParameterGroupName parameters." ([reset-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-cache-parameter-group-message reset-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetCacheParameterGroupResult", :http.request.configuration/action "ResetCacheParameterGroup", :http.request.configuration/output-deser-fn response-cache-parameter-group-name-message, :http.request.spec/error-spec {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef reset-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn modify-replication-group "Modifies the settings for a replication group.\n For Redis (cluster mode enabled) clusters, this operation cannot be used to\nchange a cluster's node type or engine version. For more information, see:\n * Scaling for Amazon ElastiCache for Redis—Redis (cluster mode enabled)\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html)\nin the ElastiCache User Guide\n * ModifyReplicationGroupShardConfiguration\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html)\nin the ElastiCache API Reference\n This operation is valid for Redis only." ([modify-replication-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-replication-group-message modify-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyReplicationGroupResult", :http.request.configuration/action "ModifyReplicationGroup", :http.request.configuration/output-deser-fn response-modify-replication-group-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result))

(clojure.core/defn describe-replication-groups "Returns information about a particular replication group. If no identifier is\nspecified, DescribeReplicationGroups returns information about all replication\ngroups.\n This operation is valid for Redis only." ([] (describe-replication-groups {})) ([describe-replication-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-replication-groups-message describe-replication-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/replication-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReplicationGroupsResult", :http.request.configuration/action "DescribeReplicationGroups", :http.request.configuration/output-deser-fn response-replication-group-message, :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-replication-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-message))

(clojure.core/defn reboot-cache-cluster "Reboots some, or all, of the cache nodes within a provisioned cluster. This\noperation applies any modified cache parameter groups to the cluster. The reboot\noperation takes place as soon as possible, and results in a momentary outage to\nthe cluster. During the reboot, the cluster status is set to REBOOTING.\n The reboot causes the contents of the cache (for each cache node being\nrebooted) to be lost.\n When the reboot is complete, a cluster event is created.\n Rebooting a cluster is currently supported on Memcached and Redis (cluster mode\ndisabled) clusters. Rebooting is not supported on Redis (cluster mode enabled)\nclusters.\n If you make changes to parameters that require a Redis (cluster mode enabled)\ncluster reboot for the changes to be applied, see Rebooting a Cluster\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html)\nfor an alternate process." ([reboot-cache-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-reboot-cache-cluster-message reboot-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RebootCacheClusterResult", :http.request.configuration/action "RebootCacheCluster", :http.request.configuration/output-deser-fn response-reboot-cache-cluster-result, :http.request.spec/error-spec {"InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result))

(clojure.core/defn list-tags-for-resource "Lists all cost allocation tags currently on the named resource. A cost\nallocation tag is a key-value pair where the key is case-sensitive and the value\nis optional. You can use cost allocation tags to categorize and track your AWS\ncosts.\n If the cluster is not in the available state, ListTagsForResource returns an\nerror.\n You can have a maximum of 50 cost allocation tags on an ElastiCache resource.\nFor more information, see Monitoring Costs with Tags\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html)." ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListTagsForResourceResult", :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-engine-default-parameters "Returns the default engine and system parameter information for the specified\ncache engine." ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultParametersResult", :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-parameters-result, :http.request.spec/error-spec {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result))

(clojure.core/defn describe-cache-clusters "Returns information about all provisioned clusters if no cluster identifier is\nspecified, or about a specific cache cluster if a cluster identifier is\nsupplied.\n By default, abbreviated information about the clusters is returned. You can use\nthe optional ShowCacheNodeInfo flag to retrieve detailed information about the\ncache nodes associated with the clusters. These details include the DNS address\nand port for the cache node endpoint.\n If the cluster is in the creating state, only cluster-level information is\ndisplayed until all of the nodes are successfully provisioned.\n If the cluster is in the deleting state, only cluster-level information is\ndisplayed.\n If cache nodes are currently being added to the cluster, node endpoint\ninformation and creation time for the additional nodes are not displayed until\nthey are completely provisioned. When the cluster state is available, the\ncluster is ready for use.\n If cache nodes are currently being removed from the cluster, no endpoint\ninformation for the removed nodes is displayed." ([] (describe-cache-clusters {})) ([describe-cache-clusters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-cache-clusters-message describe-cache-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheClustersResult", :http.request.configuration/action "DescribeCacheClusters", :http.request.configuration/output-deser-fn response-cache-cluster-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-clusters :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-message))

(clojure.core/defn authorize-cache-security-group-ingress "Allows network ingress to a cache security group. Applications using ElastiCache\nmust be running on Amazon EC2, and Amazon EC2 security groups are used as the\nauthorization mechanism.\n You cannot authorize ingress from an Amazon EC2 security group in one region to\nan ElastiCache cluster in another region." ([authorize-cache-security-group-ingress-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-authorize-cache-security-group-ingress-message authorize-cache-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AuthorizeCacheSecurityGroupIngressResult", :http.request.configuration/action "AuthorizeCacheSecurityGroupIngress", :http.request.configuration/output-deser-fn response-authorize-cache-security-group-ingress-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef authorize-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result))

(clojure.core/defn create-cache-cluster "Creates a cluster. All nodes in the cluster run the same protocol-compliant\ncache engine software, either Memcached or Redis.\n This operation is not supported for Redis (cluster mode enabled) clusters." ([create-cache-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-cache-cluster-message create-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheClusterResult", :http.request.configuration/action "CreateCacheCluster", :http.request.configuration/output-deser-fn response-create-cache-cluster-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "CacheClusterAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault}})))))
(clojure.spec.alpha/fdef create-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result))

(clojure.core/defn delete-cache-security-group "Deletes a cache security group.\n You cannot delete a cache security group if it is associated with any clusters." ([delete-cache-security-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-cache-security-group-message delete-cache-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCacheSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-cache-subnet-group "Deletes a cache subnet group.\n You cannot delete a cache subnet group if it is associated with any clusters." ([delete-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-cache-subnet-group-message delete-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCacheSubnetGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"CacheSubnetGroupInUse" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-snapshot "Deletes an existing snapshot. When you receive a successful response from this\noperation, ElastiCache immediately begins deleting the snapshot; you cannot\ncancel or revert this operation.\n This operation is valid for Redis only." ([delete-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-snapshot-message delete-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteSnapshotResult", :http.request.configuration/action "DeleteSnapshot", :http.request.configuration/output-deser-fn response-delete-snapshot-result, :http.request.spec/error-spec {"SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result))

(clojure.core/defn describe-cache-parameters "Returns the detailed parameter list for a particular cache parameter group." ([describe-cache-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-cache-parameters-message describe-cache-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheParametersResult", :http.request.configuration/action "DescribeCacheParameters", :http.request.configuration/output-deser-fn response-cache-parameter-group-details, :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details))

(clojure.core/defn create-replication-group "Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled)\nreplication group.\n A Redis (cluster mode disabled) replication group is a collection of clusters,\nwhere one of the clusters is a read/write primary and the others are read-only\nreplicas. Writes to the primary are asynchronously propagated to the replicas.\n A Redis (cluster mode enabled) replication group is a collection of 1 to 15\nnode groups (shards). Each node group (shard) has one read/write primary node\nand up to 5 read-only replica nodes. Writes to the primary are asynchronously\npropagated to the replicas. Redis (cluster mode enabled) replication groups\npartition the data across node groups (shards).\n When a Redis (cluster mode disabled) replication group has been successfully\ncreated, you can add one or more read replicas to it, up to a total of 5 read\nreplicas. You cannot alter a Redis (cluster mode enabled) replication group\nafter it has been created. However, if you need to increase or decrease the\nnumber of node groups (console: shards), you can avail yourself of ElastiCache\nfor Redis' enhanced backup and restore. For more information, see Restoring From\na Backup with Cluster Resizing\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html)\nin the ElastiCache User Guide.\n This operation is valid for Redis only." ([create-replication-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-replication-group-message create-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateReplicationGroupResult", :http.request.configuration/action "CreateReplicationGroup", :http.request.configuration/output-deser-fn response-create-replication-group-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "ReplicationGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef create-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-replication-group-result))

(clojure.core/defn revoke-cache-security-group-ingress "Revokes ingress from a cache security group. Use this operation to disallow\naccess from an Amazon EC2 security group that had been previously authorized." ([revoke-cache-security-group-ingress-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-revoke-cache-security-group-ingress-message revoke-cache-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RevokeCacheSecurityGroupIngressResult", :http.request.configuration/action "RevokeCacheSecurityGroupIngress", :http.request.configuration/output-deser-fn response-revoke-cache-security-group-ingress-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef revoke-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result))

(clojure.core/defn create-cache-subnet-group "Creates a new cache subnet group.\n Use this parameter only when you are creating a cluster in an Amazon Virtual\nPrivate Cloud (Amazon VPC)." ([create-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-cache-subnet-group-message create-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheSubnetGroupResult", :http.request.configuration/action "CreateCacheSubnetGroup", :http.request.configuration/output-deser-fn response-create-cache-subnet-group-result, :http.request.spec/error-spec {"CacheSubnetGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault, "CacheSubnetGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result))

(clojure.core/defn describe-cache-subnet-groups "Returns a list of cache subnet group descriptions. If a subnet group name is\nspecified, the list contains only the description of that group." ([] (describe-cache-subnet-groups {})) ([describe-cache-subnet-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-cache-subnet-groups-message describe-cache-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheSubnetGroupsResult", :http.request.configuration/action "DescribeCacheSubnetGroups", :http.request.configuration/output-deser-fn response-cache-subnet-group-message, :http.request.spec/error-spec {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-cache-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message))

(clojure.core/defn describe-snapshots "Returns information about cluster or replication group snapshots. By default,\nDescribeSnapshots lists all of your snapshots; it can optionally describe a\nsingle snapshot, or just the snapshots associated with a particular cache\ncluster.\n This operation is valid for Redis only." ([] (describe-snapshots {})) ([describe-snapshots-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-snapshots-message describe-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeSnapshotsResult", :http.request.configuration/action "DescribeSnapshots", :http.request.configuration/output-deser-fn response-describe-snapshots-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-snapshots :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message))

(clojure.core/defn decrease-replica-count "Dynamically decreases the number of replics in a Redis (cluster mode disabled)\nreplication group or the number of replica nodes in one or more node groups\n(shards) of a Redis (cluster mode enabled) replication group. This operation is\nperformed with no cluster down time." ([decrease-replica-count-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-decrease-replica-count-message decrease-replica-count-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DecreaseReplicaCountResult", :http.request.configuration/action "DecreaseReplicaCount", :http.request.configuration/output-deser-fn response-decrease-replica-count-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "ServiceLinkedRoleNotFoundFault" :portkey.aws.elasticache.-2015-02-02/service-linked-role-not-found-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "NoOperationFault" :portkey.aws.elasticache.-2015-02-02/no-operation-fault, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef decrease-replica-count :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result))

(clojure.core/defn modify-cache-cluster "Modifies the settings for a cluster. You can use this operation to change one or\nmore cluster configuration parameters by specifying the parameters and the new\nvalues." ([modify-cache-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-cache-cluster-message modify-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCacheClusterResult", :http.request.configuration/action "ModifyCacheCluster", :http.request.configuration/output-deser-fn response-modify-cache-cluster-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result))

(clojure.core/defn copy-snapshot "Makes a copy of an existing snapshot.\n This operation is valid for Redis only.\n Users or groups that have permissions to use the CopySnapshot operation can\ncreate their own Amazon S3 buckets and copy snapshots to it. To control access\nto your snapshots, use an IAM policy to control who has the ability to use the\nCopySnapshot operation. For more information about using IAM to control the use\nof ElastiCache operations, see Exporting Snapshots\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html)\nand Authentication & Access Control\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html).\n You could receive the following error messages.\n Error Messages\n * Error Message: The S3 bucket %s is outside of the region.\n Solution: Create an Amazon S3 bucket in the same region as your snapshot. For\nmore information, see Step 1: Create an Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html#Snapshots.Exporting.CreateBucket)\nin the ElastiCache User Guide.\n * Error Message: The S3 bucket %s does not exist.\n Solution: Create an Amazon S3 bucket in the same region as your snapshot. For\nmore information, see Step 1: Create an Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html#Snapshots.Exporting.CreateBucket)\nin the ElastiCache User Guide.\n * Error Message: The S3 bucket %s is not owned by the authenticated user.\n Solution: Create an Amazon S3 bucket in the same region as your snapshot. For\nmore information, see Step 1: Create an Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html#Snapshots.Exporting.CreateBucket)\nin the ElastiCache User Guide.\n * Error Message: The authenticated user does not have sufficient permissions to\nperform the desired activity.\n Solution: Contact your system administrator to get the needed permissions.\n * Error Message: The S3 bucket %s already contains an object with key %s.\n Solution: Give the TargetSnapshotName a new and unique value. If exporting a\nsnapshot, you could alternatively create a new Amazon S3 bucket and use this\nsame value for TargetSnapshotName.\n * Error Message: ElastiCache has not been granted READ permissions %s on the S3\nBucket.\n Solution: Add List and Read permissions on the bucket. For more information,\nsee Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html#Snapshots.Exporting.GrantAccess)\nin the ElastiCache User Guide.\n * Error Message: ElastiCache has not been granted WRITE permissions %s on the\nS3 Bucket.\n Solution: Add Upload/Delete permissions on the bucket. For more information,\nsee Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html#Snapshots.Exporting.GrantAccess)\nin the ElastiCache User Guide.\n * Error Message: ElastiCache has not been granted READ_ACP permissions %s on\nthe S3 Bucket.\n Solution: Add View Permissions on the bucket. For more information, see Step 2:\nGrant ElastiCache Access to Your Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html#Snapshots.Exporting.GrantAccess)\nin the ElastiCache User Guide." ([copy-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-snapshot-message copy-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopySnapshotResult", :http.request.configuration/action "CopySnapshot", :http.request.configuration/output-deser-fn response-copy-snapshot-result, :http.request.spec/error-spec {"SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef copy-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result))

(clojure.core/defn modify-cache-subnet-group "Modifies an existing cache subnet group." ([modify-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-cache-subnet-group-message modify-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCacheSubnetGroupResult", :http.request.configuration/action "ModifyCacheSubnetGroup", :http.request.configuration/output-deser-fn response-modify-cache-subnet-group-result, :http.request.spec/error-spec {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "SubnetInUse" :portkey.aws.elasticache.-2015-02-02/subnet-in-use, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result))

(clojure.core/defn create-cache-security-group "Creates a new cache security group. Use a cache security group to control access\nto one or more clusters.\n Cache security groups are only used when you are creating a cluster outside of\nan Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster\ninside of a VPC, use a cache subnet group instead. For more information, see\nCreateCacheSubnetGroup\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html)." ([create-cache-security-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-cache-security-group-message create-cache-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheSecurityGroupResult", :http.request.configuration/action "CreateCacheSecurityGroup", :http.request.configuration/output-deser-fn response-create-cache-security-group-result, :http.request.spec/error-spec {"CacheSecurityGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault, "CacheSecurityGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef create-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result))

(clojure.core/defn remove-tags-from-resource "Removes the tags identified by the TagKeys list from the named resource." ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveTagsFromResourceResult", :http.request.configuration/action "RemoveTagsFromResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault, "TagNotFoundFault" :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn list-allowed-node-type-modifications "Lists all available node types that you can scale your Redis cluster's or\nreplication group's current node type up to.\n When you use the ModifyCacheCluster or ModifyReplicationGroup operations to\nscale up your cluster or replication group, the value of the CacheNodeType\nparameter must be one of the node types returned by this operation." ([] (list-allowed-node-type-modifications {})) ([list-allowed-node-type-modifications-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-allowed-node-type-modifications-message list-allowed-node-type-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListAllowedNodeTypeModificationsResult", :http.request.configuration/action "ListAllowedNodeTypeModifications", :http.request.configuration/output-deser-fn response-allowed-node-type-modifications-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception}})))))
(clojure.spec.alpha/fdef list-allowed-node-type-modifications :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message))

(clojure.core/defn create-cache-parameter-group "Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache\nparameter group is a collection of parameters and their values that are applied\nto all of the nodes in any cluster or replication group using the\nCacheParameterGroup.\n A newly created CacheParameterGroup is an exact duplicate of the default\nparameter group for the CacheParameterGroupFamily. To customize the newly\ncreated CacheParameterGroup you can change the values of specific parameters.\nFor more information, see:\n * ModifyCacheParameterGroup\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html)\nin the ElastiCache API Reference.\n * Parameters and Parameter Groups\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html)\nin the ElastiCache User Guide." ([create-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-cache-parameter-group-message create-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheParameterGroupResult", :http.request.configuration/action "CreateCacheParameterGroup", :http.request.configuration/output-deser-fn response-create-cache-parameter-group-result, :http.request.spec/error-spec {"CacheParameterGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault, "CacheParameterGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef create-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result))

(clojure.core/defn add-tags-to-resource "Adds up to 50 cost allocation tags to the named resource. A cost allocation tag\nis a key-value pair where the key and value are case-sensitive. You can use cost\nallocation tags to categorize and track your AWS costs.\n When you apply tags to your ElastiCache resources, AWS generates a cost\nallocation report as a comma-separated value (CSV) file with your usage and\ncosts aggregated by your tags. You can apply tags that represent business\ncategories (such as cost centers, application names, or owners) to organize your\ncosts across multiple services. For more information, see Using Cost Allocation\nTags in Amazon ElastiCache\n(http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html) in the\nElastiCache User Guide." ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AddTagsToResourceResult", :http.request.configuration/action "AddTagsToResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-reserved-cache-nodes "Returns information about reserved cache nodes for this account, or about a\nspecified reserved cache node." ([] (describe-reserved-cache-nodes {})) ([describe-reserved-cache-nodes-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-cache-nodes-message describe-reserved-cache-nodes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedCacheNodesResult", :http.request.configuration/action "DescribeReservedCacheNodes", :http.request.configuration/output-deser-fn response-reserved-cache-node-message, :http.request.spec/error-spec {"ReservedCacheNodeNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message))

(clojure.core/defn describe-reserved-cache-nodes-offerings "Lists available reserved cache node offerings." ([] (describe-reserved-cache-nodes-offerings {})) ([describe-reserved-cache-nodes-offerings-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-cache-nodes-offerings-message describe-reserved-cache-nodes-offerings-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedCacheNodesOfferingsResult", :http.request.configuration/action "DescribeReservedCacheNodesOfferings", :http.request.configuration/output-deser-fn response-reserved-cache-nodes-offering-message, :http.request.spec/error-spec {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes-offerings :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message))

(clojure.core/defn delete-cache-cluster "Deletes a previously provisioned cluster. DeleteCacheCluster deletes all\nassociated cache nodes, node endpoints and the cluster itself. When you receive\na successful response from this operation, Amazon ElastiCache immediately begins\ndeleting the cluster; you cannot cancel or revert this operation.\n This operation cannot be used to delete a cluster that is the last read replica\nof a replication group or node group (shard) that has Multi-AZ mode enabled or a\ncluster from a Redis (cluster mode enabled) replication group.\n This operation is not valid for Redis (cluster mode enabled) clusters." ([delete-cache-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-cache-cluster-message delete-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteCacheClusterResult", :http.request.configuration/action "DeleteCacheCluster", :http.request.configuration/output-deser-fn response-delete-cache-cluster-result, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result))
