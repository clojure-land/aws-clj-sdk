(ns portkey.aws.elasticache.-2015-02-02 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope
    {:service "elasticache", :region "us-gov-east-1"},
    :ssl-common-name "elasticache.us-gov-east-1.amazonaws.com",
    :endpoint "https://elasticache.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-1"},
    :ssl-common-name "elasticache.ap-northeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "elasticache", :region "eu-west-1"},
    :ssl-common-name "elasticache.eu-west-1.amazonaws.com",
    :endpoint "https://elasticache.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "elasticache", :region "us-east-2"},
    :ssl-common-name "elasticache.us-east-2.amazonaws.com",
    :endpoint "https://elasticache.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-2"},
    :ssl-common-name "elasticache.ap-southeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "elasticache", :region "cn-north-1"},
    :ssl-common-name "elasticache.cn-north-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "elasticache", :region "sa-east-1"},
    :ssl-common-name "elasticache.sa-east-1.amazonaws.com",
    :endpoint "https://elasticache.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "elasticache", :region "ap-southeast-1"},
    :ssl-common-name "elasticache.ap-southeast-1.amazonaws.com",
    :endpoint "https://elasticache.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope
    {:service "elasticache", :region "cn-northwest-1"},
    :ssl-common-name "elasticache.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://elasticache.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "elasticache", :region "ap-northeast-2"},
    :ssl-common-name "elasticache.ap-northeast-2.amazonaws.com",
    :endpoint "https://elasticache.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "elasticache", :region "eu-west-3"},
    :ssl-common-name "elasticache.eu-west-3.amazonaws.com",
    :endpoint "https://elasticache.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "elasticache", :region "ca-central-1"},
    :ssl-common-name "elasticache.ca-central-1.amazonaws.com",
    :endpoint "https://elasticache.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "elasticache", :region "eu-central-1"},
    :ssl-common-name "elasticache.eu-central-1.amazonaws.com",
    :endpoint "https://elasticache.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "elasticache", :region "eu-west-2"},
    :ssl-common-name "elasticache.eu-west-2.amazonaws.com",
    :endpoint "https://elasticache.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope
    {:service "elasticache", :region "us-gov-west-1"},
    :ssl-common-name "elasticache.us-gov-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "elasticache", :region "us-west-2"},
    :ssl-common-name "elasticache.us-west-2.amazonaws.com",
    :endpoint "https://elasticache.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "elasticache", :region "us-east-1"},
    :ssl-common-name "elasticache.us-east-1.amazonaws.com",
    :endpoint "https://elasticache.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "elasticache", :region "us-west-1"},
    :ssl-common-name "elasticache.us-west-1.amazonaws.com",
    :endpoint "https://elasticache.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "elasticache", :region "ap-south-1"},
    :ssl-common-name "elasticache.ap-south-1.amazonaws.com",
    :endpoint "https://elasticache.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "fips"
   {:credential-scope
    {:service "elasticache", :region "us-gov-west-1"},
    :ssl-common-name "elasticache-fips.us-gov-west-1.amazonaws.com",
    :endpoint "https://elasticache-fips.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "elasticache", :region "eu-north-1"},
    :ssl-common-name "elasticache.eu-north-1.amazonaws.com",
    :endpoint "https://elasticache.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-az-mode)

(clojure.core/declare ser-node-group-configuration-list)

(clojure.core/declare ser-node-groups-to-remove-list)

(clojure.core/declare ser-security-group-ids-list)

(clojure.core/declare ser-parameter-name-value-list)

(clojure.core/declare ser-resharding-configuration-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-availability-zones-list)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-snapshot-arns-list)

(clojure.core/declare ser-parameter-name-value)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-cache-security-group-name-list)

(clojure.core/declare ser-remove-replicas-list)

(clojure.core/declare ser-node-group-configuration)

(clojure.core/declare ser-cache-node-ids-list)

(clojure.core/declare ser-allowed-node-group-id)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-resharding-configuration)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-preferred-availability-zone-list)

(clojure.core/declare ser-node-groups-to-retain-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-configure-shard)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-replica-configuration-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-az-mode [input] #:http.request.field{:value (clojure.core/get {"single-az" "single-az", :singleaz "single-az", "cross-az" "cross-az", :crossaz "cross-az"} input), :shape "AZMode"})

(clojure.core/defn- ser-node-group-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-node-group-configuration coll) #:http.request.field{:shape "NodeGroupConfiguration", :location-name "NodeGroupConfiguration"}))) input), :shape "NodeGroupConfigurationList", :type "list"})

(clojure.core/defn- ser-node-groups-to-remove-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-allowed-node-group-id coll) #:http.request.field{:shape "AllowedNodeGroupId", :location-name "NodeGroupToRemove"}))) input), :shape "NodeGroupsToRemoveList", :type "list"})

(clojure.core/defn- ser-security-group-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "SecurityGroupIdsList", :type "list"})

(clojure.core/defn- ser-parameter-name-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter-name-value coll) #:http.request.field{:shape "ParameterNameValue", :location-name "ParameterNameValue"}))) input), :shape "ParameterNameValueList", :type "list"})

(clojure.core/defn- ser-resharding-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resharding-configuration coll) #:http.request.field{:shape "ReshardingConfiguration", :location-name "ReshardingConfiguration"}))) input), :shape "ReshardingConfigurationList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-availability-zones-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZonesList", :type "list"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:cacheparametergroup "cache-parameter-group", "cache-subnet-group" "cache-subnet-group", "cache-parameter-group" "cache-parameter-group", "cache-cluster" "cache-cluster", :replicationgroup "replication-group", "replication-group" "replication-group", "cache-security-group" "cache-security-group", :cachesubnetgroup "cache-subnet-group", :cachecluster "cache-cluster", :cachesecuritygroup "cache-security-group"} input), :shape "SourceType"})

(clojure.core/defn- ser-snapshot-arns-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SnapshotArn"}))) input), :shape "SnapshotArnsList", :type "list"})

(clojure.core/defn- ser-parameter-name-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ParameterNameValue", :type "structure"} (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-cache-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CacheSecurityGroupName"}))) input), :shape "CacheSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-remove-replicas-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "RemoveReplicasList", :type "list"})

(clojure.core/defn- ser-node-group-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NodeGroupConfiguration", :type "structure"} (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})) (clojure.core/contains? input :slots) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :slots)) #:http.request.field{:name "Slots", :shape "String"})) (clojure.core/contains? input :replica-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :replica-count)) #:http.request.field{:name "ReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :primary-availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-availability-zone)) #:http.request.field{:name "PrimaryAvailabilityZone", :shape "String"})) (clojure.core/contains? input :replica-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :replica-availability-zones)) #:http.request.field{:name "ReplicaAvailabilityZones", :shape "AvailabilityZonesList"}))))

(clojure.core/defn- ser-cache-node-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CacheNodeId"}))) input), :shape "CacheNodeIdsList", :type "list"})

(clojure.core/defn- ser-allowed-node-group-id [input] #:http.request.field{:value input, :shape "AllowedNodeGroupId"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-resharding-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReshardingConfiguration", :type "structure"} (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})) (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "AvailabilityZonesList"}))))

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-preferred-availability-zone-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PreferredAvailabilityZone"}))) input), :shape "PreferredAvailabilityZoneList", :type "list"})

(clojure.core/defn- ser-node-groups-to-retain-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-allowed-node-group-id coll) #:http.request.field{:shape "AllowedNodeGroupId", :location-name "NodeGroupToRetain"}))) input), :shape "NodeGroupsToRetainList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-configure-shard [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-allowed-node-group-id (:node-group-id input)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"}) (clojure.core/into (ser-integer (:new-replica-count input)) #:http.request.field{:name "NewReplicaCount", :shape "Integer"})], :shape "ConfigureShard", :type "structure"} (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "PreferredAvailabilityZoneList"}))))

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-replica-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-configure-shard coll) #:http.request.field{:shape "ConfigureShard", :location-name "ConfigureShard"}))) input), :shape "ReplicaConfigurationList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-test-failover-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-allowed-node-group-id (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "AllowedNodeGroupId"})]}))

(clojure.core/defn- req-describe-cache-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"}))))

(clojure.core/defn- req-delete-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})]} (clojure.core/contains? input :retain-primary-cluster) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :retain-primary-cluster)) #:http.request.field{:name "RetainPrimaryCluster", :shape "BooleanOptional"})) (clojure.core/contains? input :final-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-snapshot-identifier)) #:http.request.field{:name "FinalSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :cache-parameter-group-family)) #:http.request.field{:name "CacheParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]}))

(clojure.core/defn- req-modify-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})]} (clojure.core/contains? input :cache-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-description)) #:http.request.field{:name "CacheSubnetGroupDescription", :shape "String"})) (clojure.core/contains? input :subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"}))))

(clojure.core/defn- req-decrease-replica-count-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :new-replica-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :new-replica-count)) #:http.request.field{:name "NewReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :replica-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-replica-configuration-list (input :replica-configuration)) #:http.request.field{:name "ReplicaConfiguration", :shape "ReplicaConfigurationList"})) (clojure.core/contains? input :replicas-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-remove-replicas-list (input :replicas-to-remove)) #:http.request.field{:name "ReplicasToRemove", :shape "RemoveReplicasList"}))))

(clojure.core/defn- req-describe-cache-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-purchase-reserved-cache-nodes-offering-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})]} (clojure.core/contains? input :reserved-cache-node-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-node-id)) #:http.request.field{:name "ReservedCacheNodeId", :shape "String"})) (clojure.core/contains? input :cache-node-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :cache-node-count)) #:http.request.field{:name "CacheNodeCount", :shape "IntegerOptional"}))))

(clojure.core/defn- req-modify-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :az-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-az-mode (input :az-mode)) #:http.request.field{:name "AZMode", :shape "AZMode"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :num-cache-nodes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-nodes)) #:http.request.field{:name "NumCacheNodes", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-status) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-status)) #:http.request.field{:name "NotificationTopicStatus", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :cache-node-ids-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-node-ids-list (input :cache-node-ids-to-remove)) #:http.request.field{:name "CacheNodeIdsToRemove", :shape "CacheNodeIdsList"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :new-availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :new-availability-zones)) #:http.request.field{:name "NewAvailabilityZones", :shape "PreferredAvailabilityZoneList"}))))

(clojure.core/defn- req-create-cache-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]}))

(clojure.core/defn- req-modify-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :primary-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-cluster-id)) #:http.request.field{:name "PrimaryClusterId", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-status) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-status)) #:http.request.field{:name "NotificationTopicStatus", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :snapshotting-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshotting-cluster-id)) #:http.request.field{:name "SnapshottingClusterId", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :automatic-failover-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :automatic-failover-enabled)) #:http.request.field{:name "AutomaticFailoverEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :replication-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-description)) #:http.request.field{:name "ReplicationGroupDescription", :shape "String"})) (clojure.core/contains? input :node-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :node-group-id)) #:http.request.field{:name "NodeGroupId", :shape "String", :deprecated true})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"}))))

(clojure.core/defn- req-increase-replica-count-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :new-replica-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :new-replica-count)) #:http.request.field{:name "NewReplicaCount", :shape "IntegerOptional"})) (clojure.core/contains? input :replica-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-replica-configuration-list (input :replica-configuration)) #:http.request.field{:name "ReplicaConfiguration", :shape "ReplicaConfigurationList"}))))

(clojure.core/defn- req-create-replication-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-string (input :replication-group-description)) #:http.request.field{:name "ReplicationGroupDescription", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :num-node-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-node-groups)) #:http.request.field{:name "NumNodeGroups", :shape "IntegerOptional"})) (clojure.core/contains? input :auth-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :auth-token)) #:http.request.field{:name "AuthToken", :shape "String"})) (clojure.core/contains? input :snapshot-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-arns-list (input :snapshot-arns)) #:http.request.field{:name "SnapshotArns", :shape "SnapshotArnsList"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :replicas-per-node-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :replicas-per-node-group)) #:http.request.field{:name "ReplicasPerNodeGroup", :shape "IntegerOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :preferred-cache-cluster-a-zs) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones-list (input :preferred-cache-cluster-a-zs)) #:http.request.field{:name "PreferredCacheClusterAZs", :shape "AvailabilityZonesList"})) (clojure.core/contains? input :at-rest-encryption-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :at-rest-encryption-enabled)) #:http.request.field{:name "AtRestEncryptionEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :transit-encryption-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :transit-encryption-enabled)) #:http.request.field{:name "TransitEncryptionEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :primary-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :primary-cluster-id)) #:http.request.field{:name "PrimaryClusterId", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :node-group-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-group-configuration-list (input :node-group-configuration)) #:http.request.field{:name "NodeGroupConfiguration", :shape "NodeGroupConfigurationList"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :automatic-failover-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :automatic-failover-enabled)) #:http.request.field{:name "AutomaticFailoverEnabled", :shape "BooleanOptional"})) (clojure.core/contains? input :num-cache-clusters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-clusters)) #:http.request.field{:name "NumCacheClusters", :shape "IntegerOptional"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"}))))

(clojure.core/defn- req-describe-cache-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})) (clojure.core/contains? input :snapshot-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-source)) #:http.request.field{:name "SnapshotSource", :shape "String"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :show-node-group-config) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-node-group-config)) #:http.request.field{:name "ShowNodeGroupConfig", :shape "BooleanOptional"}))))

(clojure.core/defn- req-authorize-cache-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"})]}))

(clojure.core/defn- req-modify-replication-group-shard-configuration-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}) (clojure.core/into (ser-integer (input :node-group-count)) #:http.request.field{:name "NodeGroupCount", :shape "Integer"}) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})]} (clojure.core/contains? input :resharding-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resharding-configuration-list (input :resharding-configuration)) #:http.request.field{:name "ReshardingConfiguration", :shape "ReshardingConfigurationList"})) (clojure.core/contains? input :node-groups-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-groups-to-remove-list (input :node-groups-to-remove)) #:http.request.field{:name "NodeGroupsToRemove", :shape "NodeGroupsToRemoveList"})) (clojure.core/contains? input :node-groups-to-retain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-node-groups-to-retain-list (input :node-groups-to-retain)) #:http.request.field{:name "NodeGroupsToRetain", :shape "NodeGroupsToRetainList"}))))

(clojure.core/defn- req-describe-replication-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})]} (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"}))))

(clojure.core/defn- req-describe-cache-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :show-cache-node-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-cache-node-info)) #:http.request.field{:name "ShowCacheNodeInfo", :shape "BooleanOptional"})) (clojure.core/contains? input :show-cache-clusters-not-in-replication-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :show-cache-clusters-not-in-replication-groups)) #:http.request.field{:name "ShowCacheClustersNotInReplicationGroups", :shape "BooleanOptional"}))))

(clojure.core/defn- req-reboot-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"}) (clojure.core/into (ser-cache-node-ids-list (input :cache-node-ids-to-reboot)) #:http.request.field{:name "CacheNodeIdsToReboot", :shape "CacheNodeIdsList"})]}))

(clojure.core/defn- req-create-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :cache-subnet-group-description)) #:http.request.field{:name "CacheSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]}))

(clojure.core/defn- req-create-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :az-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-az-mode (input :az-mode)) #:http.request.field{:name "AZMode", :shape "AZMode"})) (clojure.core/contains? input :auth-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :auth-token)) #:http.request.field{:name "AuthToken", :shape "String"})) (clojure.core/contains? input :preferred-availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-availability-zone)) #:http.request.field{:name "PreferredAvailabilityZone", :shape "String"})) (clojure.core/contains? input :snapshot-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-arns-list (input :snapshot-arns)) #:http.request.field{:name "SnapshotArns", :shape "SnapshotArnsList"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-ids-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdsList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :preferred-availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-preferred-availability-zone-list (input :preferred-availability-zones)) #:http.request.field{:name "PreferredAvailabilityZones", :shape "PreferredAvailabilityZoneList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :num-cache-nodes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :num-cache-nodes)) #:http.request.field{:name "NumCacheNodes", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :notification-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :notification-topic-arn)) #:http.request.field{:name "NotificationTopicArn", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :snapshot-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-window)) #:http.request.field{:name "SnapshotWindow", :shape "String"})) (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"})) (clojure.core/contains? input :cache-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})) (clojure.core/contains? input :snapshot-retention-limit) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :snapshot-retention-limit)) #:http.request.field{:name "SnapshotRetentionLimit", :shape "IntegerOptional"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :cache-security-group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cache-security-group-name-list (input :cache-security-group-names)) #:http.request.field{:name "CacheSecurityGroupNames", :shape "CacheSecurityGroupNameList"})) (clojure.core/contains? input :snapshot-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"}))))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-delete-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-delete-cache-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})]} (clojure.core/contains? input :final-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-snapshot-identifier)) #:http.request.field{:name "FinalSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-cache-security-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-name)) #:http.request.field{:name "SnapshotName", :shape "String"})]}))

(clojure.core/defn- req-list-allowed-node-type-modifications-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-cluster-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-cluster-id)) #:http.request.field{:name "CacheClusterId", :shape "String"})) (clojure.core/contains? input :replication-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-group-id)) #:http.request.field{:name "ReplicationGroupId", :shape "String"}))))

(clojure.core/defn- req-delete-cache-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"})]}))

(clojure.core/defn- req-delete-cache-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-cache-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :cache-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-subnet-group-name)) #:http.request.field{:name "CacheSubnetGroupName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-reserved-cache-nodes-offerings-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-cache-nodes-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})) (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]}))

(clojure.core/defn- req-revoke-cache-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-security-group-name)) #:http.request.field{:name "CacheSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"})]}))

(clojure.core/defn- req-reset-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameter-name-values) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameter-name-value-list (input :parameter-name-values)) #:http.request.field{:name "ParameterNameValues", :shape "ParameterNameValueList"}))))

(clojure.core/defn- req-modify-cache-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cache-parameter-group-name)) #:http.request.field{:name "CacheParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameter-name-value-list (input :parameter-name-values)) #:http.request.field{:name "ParameterNameValues", :shape "ParameterNameValueList"})]}))

(clojure.core/defn- req-describe-reserved-cache-nodes-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-cache-node-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-node-id)) #:http.request.field{:name "ReservedCacheNodeId", :shape "String"})) (clojure.core/contains? input :reserved-cache-nodes-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-cache-nodes-offering-id)) #:http.request.field{:name "ReservedCacheNodesOfferingId", :shape "String"})) (clojure.core/contains? input :cache-node-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cache-node-type)) #:http.request.field{:name "CacheNodeType", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-copy-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-snapshot-name)) #:http.request.field{:name "SourceSnapshotName", :shape "String"}) (clojure.core/into (ser-string (input :target-snapshot-name)) #:http.request.field{:name "TargetSnapshotName", :shape "String"})]} (clojure.core/contains? input :target-bucket) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-bucket)) #:http.request.field{:name "TargetBucket", :shape "String"}))))

(clojure.core/declare deser-node-group-member)

(clojure.core/declare deser-cache-security-group)

(clojure.core/declare deser-double)

(clojure.core/declare deser-parameters-list)

(clojure.core/declare deser-ec-2-security-group-list)

(clojure.core/declare deser-change-type)

(clojure.core/declare deser-cache-parameter-group)

(clojure.core/declare deser-security-group-membership-list)

(clojure.core/declare deser-replication-group-list)

(clojure.core/declare deser-reserved-cache-nodes-offering)

(clojure.core/declare deser-cache-engine-version-list)

(clojure.core/declare deser-slot-migration)

(clojure.core/declare deser-cache-node)

(clojure.core/declare deser-pending-automatic-failover-status)

(clojure.core/declare deser-replication-group)

(clojure.core/declare deser-snapshot-list)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-reserved-cache-node)

(clojure.core/declare deser-cache-subnet-group)

(clojure.core/declare deser-node-group-member-list)

(clojure.core/declare deser-reserved-cache-nodes-offering-list)

(clojure.core/declare deser-availability-zones-list)

(clojure.core/declare deser-node-snapshot-list)

(clojure.core/declare deser-event-list)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-cache-security-groups)

(clojure.core/declare deser-event)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-cache-cluster-list)

(clojure.core/declare deser-cache-engine-version)

(clojure.core/declare deser-cache-node-list)

(clojure.core/declare deser-node-group)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-cache-node-type-specific-value)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-cache-node-type-specific-parameters-list)

(clojure.core/declare deser-node-group-configuration)

(clojure.core/declare deser-ec-2-security-group)

(clojure.core/declare deser-cluster-id-list)

(clojure.core/declare deser-cache-node-ids-list)

(clojure.core/declare deser-automatic-failover-status)

(clojure.core/declare deser-replication-group-pending-modified-values)

(clojure.core/declare deser-allowed-node-group-id)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-resharding-status)

(clojure.core/declare deser-string)

(clojure.core/declare deser-parameter)

(clojure.core/declare deser-cache-node-type-specific-parameter)

(clojure.core/declare deser-snapshot)

(clojure.core/declare deser-t-stamp)

(clojure.core/declare deser-recurring-charge-list)

(clojure.core/declare deser-cache-cluster)

(clojure.core/declare deser-cache-security-group-membership)

(clojure.core/declare deser-endpoint)

(clojure.core/declare deser-cache-parameter-group-list)

(clojure.core/declare deser-security-group-membership)

(clojure.core/declare deser-node-snapshot)

(clojure.core/declare deser-reserved-cache-node-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-boolean-optional)

(clojure.core/declare deser-cache-node-type-specific-value-list)

(clojure.core/declare deser-cache-security-group-membership-list)

(clojure.core/declare deser-node-group-list)

(clojure.core/declare deser-notification-configuration)

(clojure.core/declare deser-cache-parameter-group-status)

(clojure.core/declare deser-aws-query-error-message)

(clojure.core/declare deser-engine-defaults)

(clojure.core/declare deser-integer-optional)

(clojure.core/declare deser-pending-modified-values)

(clojure.core/declare deser-node-type-list)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-cache-subnet-groups)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-node-group-member [input] (clojure.core/let [letvar343803 {"CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "CacheNodeId" (portkey.aws/search-for-tag input "CacheNodeId" :flattened? nil :xmlAttribute? nil), "ReadEndpoint" (portkey.aws/search-for-tag input "ReadEndpoint" :flattened? nil :xmlAttribute? nil), "PreferredAvailabilityZone" (portkey.aws/search-for-tag input "PreferredAvailabilityZone" :flattened? nil :xmlAttribute? nil), "CurrentRole" (portkey.aws/search-for-tag input "CurrentRole" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar343803 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar343803 ["CacheClusterId" :content]))) (letvar343803 "CacheNodeId") (clojure.core/assoc :cache-node-id (deser-string (clojure.core/get-in letvar343803 ["CacheNodeId" :content]))) (letvar343803 "ReadEndpoint") (clojure.core/assoc :read-endpoint (deser-endpoint (clojure.core/get-in letvar343803 ["ReadEndpoint" :content]))) (letvar343803 "PreferredAvailabilityZone") (clojure.core/assoc :preferred-availability-zone (deser-string (clojure.core/get-in letvar343803 ["PreferredAvailabilityZone" :content]))) (letvar343803 "CurrentRole") (clojure.core/assoc :current-role (deser-string (clojure.core/get-in letvar343803 ["CurrentRole" :content]))))))

(clojure.core/defn- deser-cache-security-group [input] (clojure.core/let [letvar343911 {"OwnerId" (portkey.aws/search-for-tag input "OwnerId" :flattened? nil :xmlAttribute? nil), "CacheSecurityGroupName" (portkey.aws/search-for-tag input "CacheSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroups" (portkey.aws/search-for-tag input "EC2SecurityGroups" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar343911 "OwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar343911 ["OwnerId" :content]))) (letvar343911 "CacheSecurityGroupName") (clojure.core/assoc :cache-security-group-name (deser-string (clojure.core/get-in letvar343911 ["CacheSecurityGroupName" :content]))) (letvar343911 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar343911 ["Description" :content]))) (letvar343911 "EC2SecurityGroups") (clojure.core/assoc :ec-2-security-groups (deser-ec-2-security-group-list (clojure.core/get-in letvar343911 ["EC2SecurityGroups" :content]))))))

(clojure.core/defn- deser-double [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter coll))) input))

(clojure.core/defn- deser-ec-2-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ec-2-security-group coll))) input))

(clojure.core/defn- deser-change-type [input] (clojure.core/get {"immediate" :immediate, "requires-reboot" :requiresreboot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-cache-parameter-group [input] (clojure.core/let [letvar344060 {"CacheParameterGroupName" (portkey.aws/search-for-tag input "CacheParameterGroupName" :flattened? nil :xmlAttribute? nil), "CacheParameterGroupFamily" (portkey.aws/search-for-tag input "CacheParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344060 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar344060 ["CacheParameterGroupName" :content]))) (letvar344060 "CacheParameterGroupFamily") (clojure.core/assoc :cache-parameter-group-family (deser-string (clojure.core/get-in letvar344060 ["CacheParameterGroupFamily" :content]))) (letvar344060 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar344060 ["Description" :content]))))))

(clojure.core/defn- deser-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group-membership coll))) input))

(clojure.core/defn- deser-replication-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-replication-group coll))) input))

(clojure.core/defn- deser-reserved-cache-nodes-offering [input] (clojure.core/let [letvar344202 {"ReservedCacheNodesOfferingId" (portkey.aws/search-for-tag input "ReservedCacheNodesOfferingId" :flattened? nil :xmlAttribute? nil), "CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344202 "ReservedCacheNodesOfferingId") (clojure.core/assoc :reserved-cache-nodes-offering-id (deser-string (clojure.core/get-in letvar344202 ["ReservedCacheNodesOfferingId" :content]))) (letvar344202 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar344202 ["CacheNodeType" :content]))) (letvar344202 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar344202 ["Duration" :content]))) (letvar344202 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar344202 ["FixedPrice" :content]))) (letvar344202 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar344202 ["UsagePrice" :content]))) (letvar344202 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar344202 ["ProductDescription" :content]))) (letvar344202 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar344202 ["OfferingType" :content]))) (letvar344202 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar344202 ["RecurringCharges" :content]))))))

(clojure.core/defn- deser-cache-engine-version-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-engine-version coll))) input))

(clojure.core/defn- deser-slot-migration [input] (clojure.core/let [letvar344327 {"ProgressPercentage" (portkey.aws/search-for-tag input "ProgressPercentage" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344327 "ProgressPercentage") (clojure.core/assoc :progress-percentage (deser-double (clojure.core/get-in letvar344327 ["ProgressPercentage" :content]))))))

(clojure.core/defn- deser-cache-node [input] (clojure.core/let [letvar344435 {"CacheNodeId" (portkey.aws/search-for-tag input "CacheNodeId" :flattened? nil :xmlAttribute? nil), "CacheNodeStatus" (portkey.aws/search-for-tag input "CacheNodeStatus" :flattened? nil :xmlAttribute? nil), "CacheNodeCreateTime" (portkey.aws/search-for-tag input "CacheNodeCreateTime" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "ParameterGroupStatus" (portkey.aws/search-for-tag input "ParameterGroupStatus" :flattened? nil :xmlAttribute? nil), "SourceCacheNodeId" (portkey.aws/search-for-tag input "SourceCacheNodeId" :flattened? nil :xmlAttribute? nil), "CustomerAvailabilityZone" (portkey.aws/search-for-tag input "CustomerAvailabilityZone" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344435 "CacheNodeId") (clojure.core/assoc :cache-node-id (deser-string (clojure.core/get-in letvar344435 ["CacheNodeId" :content]))) (letvar344435 "CacheNodeStatus") (clojure.core/assoc :cache-node-status (deser-string (clojure.core/get-in letvar344435 ["CacheNodeStatus" :content]))) (letvar344435 "CacheNodeCreateTime") (clojure.core/assoc :cache-node-create-time (deser-t-stamp (clojure.core/get-in letvar344435 ["CacheNodeCreateTime" :content]))) (letvar344435 "Endpoint") (clojure.core/assoc :endpoint (deser-endpoint (clojure.core/get-in letvar344435 ["Endpoint" :content]))) (letvar344435 "ParameterGroupStatus") (clojure.core/assoc :parameter-group-status (deser-string (clojure.core/get-in letvar344435 ["ParameterGroupStatus" :content]))) (letvar344435 "SourceCacheNodeId") (clojure.core/assoc :source-cache-node-id (deser-string (clojure.core/get-in letvar344435 ["SourceCacheNodeId" :content]))) (letvar344435 "CustomerAvailabilityZone") (clojure.core/assoc :customer-availability-zone (deser-string (clojure.core/get-in letvar344435 ["CustomerAvailabilityZone" :content]))))))

(clojure.core/defn- deser-pending-automatic-failover-status [input] (clojure.core/get {"enabled" :enabled, "disabled" :disabled} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-replication-group [input] (clojure.core/let [letvar344548 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "MemberClusters" (portkey.aws/search-for-tag input "MemberClusters" :flattened? nil :xmlAttribute? nil), "AutomaticFailover" (portkey.aws/search-for-tag input "AutomaticFailover" :flattened? nil :xmlAttribute? nil), "NodeGroups" (portkey.aws/search-for-tag input "NodeGroups" :flattened? nil :xmlAttribute? nil), "ConfigurationEndpoint" (portkey.aws/search-for-tag input "ConfigurationEndpoint" :flattened? nil :xmlAttribute? nil), "AuthTokenEnabled" (portkey.aws/search-for-tag input "AuthTokenEnabled" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "AtRestEncryptionEnabled" (portkey.aws/search-for-tag input "AtRestEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "ClusterEnabled" (portkey.aws/search-for-tag input "ClusterEnabled" :flattened? nil :xmlAttribute? nil), "TransitEncryptionEnabled" (portkey.aws/search-for-tag input "TransitEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "SnapshotWindow" (portkey.aws/search-for-tag input "SnapshotWindow" :flattened? nil :xmlAttribute? nil), "SnapshottingClusterId" (portkey.aws/search-for-tag input "SnapshottingClusterId" :flattened? nil :xmlAttribute? nil), "ReplicationGroupId" (portkey.aws/search-for-tag input "ReplicationGroupId" :flattened? nil :xmlAttribute? nil), "SnapshotRetentionLimit" (portkey.aws/search-for-tag input "SnapshotRetentionLimit" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344548 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar344548 ["CacheNodeType" :content]))) (letvar344548 "MemberClusters") (clojure.core/assoc :member-clusters (deser-cluster-id-list (clojure.core/get-in letvar344548 ["MemberClusters" :content]))) (letvar344548 "AutomaticFailover") (clojure.core/assoc :automatic-failover (deser-automatic-failover-status (clojure.core/get-in letvar344548 ["AutomaticFailover" :content]))) (letvar344548 "NodeGroups") (clojure.core/assoc :node-groups (deser-node-group-list (clojure.core/get-in letvar344548 ["NodeGroups" :content]))) (letvar344548 "ConfigurationEndpoint") (clojure.core/assoc :configuration-endpoint (deser-endpoint (clojure.core/get-in letvar344548 ["ConfigurationEndpoint" :content]))) (letvar344548 "AuthTokenEnabled") (clojure.core/assoc :auth-token-enabled (deser-boolean-optional (clojure.core/get-in letvar344548 ["AuthTokenEnabled" :content]))) (letvar344548 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar344548 ["Status" :content]))) (letvar344548 "AtRestEncryptionEnabled") (clojure.core/assoc :at-rest-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar344548 ["AtRestEncryptionEnabled" :content]))) (letvar344548 "ClusterEnabled") (clojure.core/assoc :cluster-enabled (deser-boolean-optional (clojure.core/get-in letvar344548 ["ClusterEnabled" :content]))) (letvar344548 "TransitEncryptionEnabled") (clojure.core/assoc :transit-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar344548 ["TransitEncryptionEnabled" :content]))) (letvar344548 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar344548 ["Description" :content]))) (letvar344548 "SnapshotWindow") (clojure.core/assoc :snapshot-window (deser-string (clojure.core/get-in letvar344548 ["SnapshotWindow" :content]))) (letvar344548 "SnapshottingClusterId") (clojure.core/assoc :snapshotting-cluster-id (deser-string (clojure.core/get-in letvar344548 ["SnapshottingClusterId" :content]))) (letvar344548 "ReplicationGroupId") (clojure.core/assoc :replication-group-id (deser-string (clojure.core/get-in letvar344548 ["ReplicationGroupId" :content]))) (letvar344548 "SnapshotRetentionLimit") (clojure.core/assoc :snapshot-retention-limit (deser-integer-optional (clojure.core/get-in letvar344548 ["SnapshotRetentionLimit" :content]))) (letvar344548 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-replication-group-pending-modified-values (clojure.core/get-in letvar344548 ["PendingModifiedValues" :content]))))))

(clojure.core/defn- deser-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot coll))) input))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar344673 {"SubnetIdentifier" (portkey.aws/search-for-tag input "SubnetIdentifier" :flattened? nil :xmlAttribute? nil), "SubnetAvailabilityZone" (portkey.aws/search-for-tag input "SubnetAvailabilityZone" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344673 "SubnetIdentifier") (clojure.core/assoc :subnet-identifier (deser-string (clojure.core/get-in letvar344673 ["SubnetIdentifier" :content]))) (letvar344673 "SubnetAvailabilityZone") (clojure.core/assoc :subnet-availability-zone (deser-availability-zone (clojure.core/get-in letvar344673 ["SubnetAvailabilityZone" :content]))))))

(clojure.core/defn- deser-reserved-cache-node [input] (clojure.core/let [letvar344781 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "StartTime" (portkey.aws/search-for-tag input "StartTime" :flattened? nil :xmlAttribute? nil), "CacheNodeCount" (portkey.aws/search-for-tag input "CacheNodeCount" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "ReservationARN" (portkey.aws/search-for-tag input "ReservationARN" :flattened? nil :xmlAttribute? nil), "ReservedCacheNodeId" (portkey.aws/search-for-tag input "ReservedCacheNodeId" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "State" (portkey.aws/search-for-tag input "State" :flattened? nil :xmlAttribute? nil), "ReservedCacheNodesOfferingId" (portkey.aws/search-for-tag input "ReservedCacheNodesOfferingId" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344781 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar344781 ["CacheNodeType" :content]))) (letvar344781 "StartTime") (clojure.core/assoc :start-time (deser-t-stamp (clojure.core/get-in letvar344781 ["StartTime" :content]))) (letvar344781 "CacheNodeCount") (clojure.core/assoc :cache-node-count (deser-integer (clojure.core/get-in letvar344781 ["CacheNodeCount" :content]))) (letvar344781 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar344781 ["FixedPrice" :content]))) (letvar344781 "ReservationARN") (clojure.core/assoc :reservation-arn (deser-string (clojure.core/get-in letvar344781 ["ReservationARN" :content]))) (letvar344781 "ReservedCacheNodeId") (clojure.core/assoc :reserved-cache-node-id (deser-string (clojure.core/get-in letvar344781 ["ReservedCacheNodeId" :content]))) (letvar344781 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar344781 ["Duration" :content]))) (letvar344781 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar344781 ["UsagePrice" :content]))) (letvar344781 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar344781 ["ProductDescription" :content]))) (letvar344781 "State") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar344781 ["State" :content]))) (letvar344781 "ReservedCacheNodesOfferingId") (clojure.core/assoc :reserved-cache-nodes-offering-id (deser-string (clojure.core/get-in letvar344781 ["ReservedCacheNodesOfferingId" :content]))) (letvar344781 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar344781 ["RecurringCharges" :content]))) (letvar344781 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar344781 ["OfferingType" :content]))))))

(clojure.core/defn- deser-cache-subnet-group [input] (clojure.core/let [letvar344889 {"CacheSubnetGroupName" (portkey.aws/search-for-tag input "CacheSubnetGroupName" :flattened? nil :xmlAttribute? nil), "CacheSubnetGroupDescription" (portkey.aws/search-for-tag input "CacheSubnetGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "Subnets" (portkey.aws/search-for-tag input "Subnets" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar344889 "CacheSubnetGroupName") (clojure.core/assoc :cache-subnet-group-name (deser-string (clojure.core/get-in letvar344889 ["CacheSubnetGroupName" :content]))) (letvar344889 "CacheSubnetGroupDescription") (clojure.core/assoc :cache-subnet-group-description (deser-string (clojure.core/get-in letvar344889 ["CacheSubnetGroupDescription" :content]))) (letvar344889 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar344889 ["VpcId" :content]))) (letvar344889 "Subnets") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar344889 ["Subnets" :content]))))))

(clojure.core/defn- deser-node-group-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-node-group-member coll))) input))

(clojure.core/defn- deser-reserved-cache-nodes-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-cache-nodes-offering coll))) input))

(clojure.core/defn- deser-availability-zones-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-node-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-node-snapshot coll))) input))

(clojure.core/defn- deser-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event coll))) input))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"cache-cluster" :cachecluster, "cache-parameter-group" :cacheparametergroup, "cache-security-group" :cachesecuritygroup, "cache-subnet-group" :cachesubnetgroup, "replication-group" :replicationgroup} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-cache-security-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-security-group coll))) input))

(clojure.core/defn- deser-event [input] (clojure.core/let [letvar345104 {"SourceIdentifier" (portkey.aws/search-for-tag input "SourceIdentifier" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "Date" (portkey.aws/search-for-tag input "Date" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345104 "SourceIdentifier") (clojure.core/assoc :source-identifier (deser-string (clojure.core/get-in letvar345104 ["SourceIdentifier" :content]))) (letvar345104 "SourceType") (clojure.core/assoc :source-type (deser-source-type (clojure.core/get-in letvar345104 ["SourceType" :content]))) (letvar345104 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar345104 ["Message" :content]))) (letvar345104 "Date") (clojure.core/assoc :date (deser-t-stamp (clojure.core/get-in letvar345104 ["Date" :content]))))))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar345212 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345212 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar345212 ["Name" :content]))))))

(clojure.core/defn- deser-cache-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-cluster coll))) input))

(clojure.core/defn- deser-cache-engine-version [input] (clojure.core/let [letvar345337 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "CacheParameterGroupFamily" (portkey.aws/search-for-tag input "CacheParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "CacheEngineDescription" (portkey.aws/search-for-tag input "CacheEngineDescription" :flattened? nil :xmlAttribute? nil), "CacheEngineVersionDescription" (portkey.aws/search-for-tag input "CacheEngineVersionDescription" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345337 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar345337 ["Engine" :content]))) (letvar345337 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar345337 ["EngineVersion" :content]))) (letvar345337 "CacheParameterGroupFamily") (clojure.core/assoc :cache-parameter-group-family (deser-string (clojure.core/get-in letvar345337 ["CacheParameterGroupFamily" :content]))) (letvar345337 "CacheEngineDescription") (clojure.core/assoc :cache-engine-description (deser-string (clojure.core/get-in letvar345337 ["CacheEngineDescription" :content]))) (letvar345337 "CacheEngineVersionDescription") (clojure.core/assoc :cache-engine-version-description (deser-string (clojure.core/get-in letvar345337 ["CacheEngineVersionDescription" :content]))))))

(clojure.core/defn- deser-cache-node-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-node coll))) input))

(clojure.core/defn- deser-node-group [input] (clojure.core/let [letvar345462 {"NodeGroupId" (portkey.aws/search-for-tag input "NodeGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "PrimaryEndpoint" (portkey.aws/search-for-tag input "PrimaryEndpoint" :flattened? nil :xmlAttribute? nil), "Slots" (portkey.aws/search-for-tag input "Slots" :flattened? nil :xmlAttribute? nil), "NodeGroupMembers" (portkey.aws/search-for-tag input "NodeGroupMembers" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345462 "NodeGroupId") (clojure.core/assoc :node-group-id (deser-string (clojure.core/get-in letvar345462 ["NodeGroupId" :content]))) (letvar345462 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar345462 ["Status" :content]))) (letvar345462 "PrimaryEndpoint") (clojure.core/assoc :primary-endpoint (deser-endpoint (clojure.core/get-in letvar345462 ["PrimaryEndpoint" :content]))) (letvar345462 "Slots") (clojure.core/assoc :slots (deser-string (clojure.core/get-in letvar345462 ["Slots" :content]))) (letvar345462 "NodeGroupMembers") (clojure.core/assoc :node-group-members (deser-node-group-member-list (clojure.core/get-in letvar345462 ["NodeGroupMembers" :content]))))))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar345570 {"RecurringChargeAmount" (portkey.aws/search-for-tag input "RecurringChargeAmount" :flattened? nil :xmlAttribute? nil), "RecurringChargeFrequency" (portkey.aws/search-for-tag input "RecurringChargeFrequency" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345570 "RecurringChargeAmount") (clojure.core/assoc :recurring-charge-amount (deser-double (clojure.core/get-in letvar345570 ["RecurringChargeAmount" :content]))) (letvar345570 "RecurringChargeFrequency") (clojure.core/assoc :recurring-charge-frequency (deser-string (clojure.core/get-in letvar345570 ["RecurringChargeFrequency" :content]))))))

(clojure.core/defn- deser-cache-node-type-specific-value [input] (clojure.core/let [letvar345678 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345678 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar345678 ["CacheNodeType" :content]))) (letvar345678 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar345678 ["Value" :content]))))))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-cache-node-type-specific-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-node-type-specific-parameter coll))) input))

(clojure.core/defn- deser-node-group-configuration [input] (clojure.core/let [letvar345820 {"NodeGroupId" (portkey.aws/search-for-tag input "NodeGroupId" :flattened? nil :xmlAttribute? nil), "Slots" (portkey.aws/search-for-tag input "Slots" :flattened? nil :xmlAttribute? nil), "ReplicaCount" (portkey.aws/search-for-tag input "ReplicaCount" :flattened? nil :xmlAttribute? nil), "PrimaryAvailabilityZone" (portkey.aws/search-for-tag input "PrimaryAvailabilityZone" :flattened? nil :xmlAttribute? nil), "ReplicaAvailabilityZones" (portkey.aws/search-for-tag input "ReplicaAvailabilityZones" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345820 "NodeGroupId") (clojure.core/assoc :node-group-id (deser-allowed-node-group-id (clojure.core/get-in letvar345820 ["NodeGroupId" :content]))) (letvar345820 "Slots") (clojure.core/assoc :slots (deser-string (clojure.core/get-in letvar345820 ["Slots" :content]))) (letvar345820 "ReplicaCount") (clojure.core/assoc :replica-count (deser-integer-optional (clojure.core/get-in letvar345820 ["ReplicaCount" :content]))) (letvar345820 "PrimaryAvailabilityZone") (clojure.core/assoc :primary-availability-zone (deser-string (clojure.core/get-in letvar345820 ["PrimaryAvailabilityZone" :content]))) (letvar345820 "ReplicaAvailabilityZones") (clojure.core/assoc :replica-availability-zones (deser-availability-zones-list (clojure.core/get-in letvar345820 ["ReplicaAvailabilityZones" :content]))))))

(clojure.core/defn- deser-ec-2-security-group [input] (clojure.core/let [letvar345928 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupName" (portkey.aws/search-for-tag input "EC2SecurityGroupName" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupOwnerId" (portkey.aws/search-for-tag input "EC2SecurityGroupOwnerId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar345928 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar345928 ["Status" :content]))) (letvar345928 "EC2SecurityGroupName") (clojure.core/assoc :ec-2-security-group-name (deser-string (clojure.core/get-in letvar345928 ["EC2SecurityGroupName" :content]))) (letvar345928 "EC2SecurityGroupOwnerId") (clojure.core/assoc :ec-2-security-group-owner-id (deser-string (clojure.core/get-in letvar345928 ["EC2SecurityGroupOwnerId" :content]))))))

(clojure.core/defn- deser-cluster-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-cache-node-ids-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-automatic-failover-status [input] (clojure.core/get {"enabled" :enabled, "disabled" :disabled, "enabling" :enabling, "disabling" :disabling} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-replication-group-pending-modified-values [input] (clojure.core/let [letvar346075 {"PrimaryClusterId" (portkey.aws/search-for-tag input "PrimaryClusterId" :flattened? nil :xmlAttribute? nil), "AutomaticFailoverStatus" (portkey.aws/search-for-tag input "AutomaticFailoverStatus" :flattened? nil :xmlAttribute? nil), "Resharding" (portkey.aws/search-for-tag input "Resharding" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346075 "PrimaryClusterId") (clojure.core/assoc :primary-cluster-id (deser-string (clojure.core/get-in letvar346075 ["PrimaryClusterId" :content]))) (letvar346075 "AutomaticFailoverStatus") (clojure.core/assoc :automatic-failover-status (deser-pending-automatic-failover-status (clojure.core/get-in letvar346075 ["AutomaticFailoverStatus" :content]))) (letvar346075 "Resharding") (clojure.core/assoc :resharding (deser-resharding-status (clojure.core/get-in letvar346075 ["Resharding" :content]))))))

(clojure.core/defn- deser-allowed-node-group-id [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-resharding-status [input] (clojure.core/let [letvar346190 {"SlotMigration" (portkey.aws/search-for-tag input "SlotMigration" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346190 "SlotMigration") (clojure.core/assoc :slot-migration (deser-slot-migration (clojure.core/get-in letvar346190 ["SlotMigration" :content]))))))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-parameter [input] (clojure.core/let [letvar346303 {"ChangeType" (portkey.aws/search-for-tag input "ChangeType" :flattened? nil :xmlAttribute? nil), "DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "ParameterValue" (portkey.aws/search-for-tag input "ParameterValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346303 "ChangeType") (clojure.core/assoc :change-type (deser-change-type (clojure.core/get-in letvar346303 ["ChangeType" :content]))) (letvar346303 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar346303 ["DataType" :content]))) (letvar346303 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar346303 ["ParameterName" :content]))) (letvar346303 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar346303 ["Source" :content]))) (letvar346303 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar346303 ["MinimumEngineVersion" :content]))) (letvar346303 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar346303 ["AllowedValues" :content]))) (letvar346303 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar346303 ["Description" :content]))) (letvar346303 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar346303 ["IsModifiable" :content]))) (letvar346303 "ParameterValue") (clojure.core/assoc :parameter-value (deser-string (clojure.core/get-in letvar346303 ["ParameterValue" :content]))))))

(clojure.core/defn- deser-cache-node-type-specific-parameter [input] (clojure.core/let [letvar346411 {"ChangeType" (portkey.aws/search-for-tag input "ChangeType" :flattened? nil :xmlAttribute? nil), "DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "CacheNodeTypeSpecificValues" (portkey.aws/search-for-tag input "CacheNodeTypeSpecificValues" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346411 "ChangeType") (clojure.core/assoc :change-type (deser-change-type (clojure.core/get-in letvar346411 ["ChangeType" :content]))) (letvar346411 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar346411 ["DataType" :content]))) (letvar346411 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar346411 ["ParameterName" :content]))) (letvar346411 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar346411 ["Source" :content]))) (letvar346411 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar346411 ["MinimumEngineVersion" :content]))) (letvar346411 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar346411 ["AllowedValues" :content]))) (letvar346411 "CacheNodeTypeSpecificValues") (clojure.core/assoc :cache-node-type-specific-values (deser-cache-node-type-specific-value-list (clojure.core/get-in letvar346411 ["CacheNodeTypeSpecificValues" :content]))) (letvar346411 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar346411 ["Description" :content]))) (letvar346411 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar346411 ["IsModifiable" :content]))))))

(clojure.core/defn- deser-snapshot [input] (clojure.core/let [letvar346519 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "CacheSubnetGroupName" (portkey.aws/search-for-tag input "CacheSubnetGroupName" :flattened? nil :xmlAttribute? nil), "NumNodeGroups" (portkey.aws/search-for-tag input "NumNodeGroups" :flattened? nil :xmlAttribute? nil), "NodeSnapshots" (portkey.aws/search-for-tag input "NodeSnapshots" :flattened? nil :xmlAttribute? nil), "PreferredAvailabilityZone" (portkey.aws/search-for-tag input "PreferredAvailabilityZone" :flattened? nil :xmlAttribute? nil), "AutomaticFailover" (portkey.aws/search-for-tag input "AutomaticFailover" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "CacheClusterCreateTime" (portkey.aws/search-for-tag input "CacheClusterCreateTime" :flattened? nil :xmlAttribute? nil), "NumCacheNodes" (portkey.aws/search-for-tag input "NumCacheNodes" :flattened? nil :xmlAttribute? nil), "SnapshotStatus" (portkey.aws/search-for-tag input "SnapshotStatus" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "SnapshotWindow" (portkey.aws/search-for-tag input "SnapshotWindow" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "TopicArn" (portkey.aws/search-for-tag input "TopicArn" :flattened? nil :xmlAttribute? nil), "SnapshotSource" (portkey.aws/search-for-tag input "SnapshotSource" :flattened? nil :xmlAttribute? nil), "ReplicationGroupId" (portkey.aws/search-for-tag input "ReplicationGroupId" :flattened? nil :xmlAttribute? nil), "CacheParameterGroupName" (portkey.aws/search-for-tag input "CacheParameterGroupName" :flattened? nil :xmlAttribute? nil), "SnapshotRetentionLimit" (portkey.aws/search-for-tag input "SnapshotRetentionLimit" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "ReplicationGroupDescription" (portkey.aws/search-for-tag input "ReplicationGroupDescription" :flattened? nil :xmlAttribute? nil), "SnapshotName" (portkey.aws/search-for-tag input "SnapshotName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346519 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar346519 ["CacheNodeType" :content]))) (letvar346519 "CacheSubnetGroupName") (clojure.core/assoc :cache-subnet-group-name (deser-string (clojure.core/get-in letvar346519 ["CacheSubnetGroupName" :content]))) (letvar346519 "NumNodeGroups") (clojure.core/assoc :num-node-groups (deser-integer-optional (clojure.core/get-in letvar346519 ["NumNodeGroups" :content]))) (letvar346519 "NodeSnapshots") (clojure.core/assoc :node-snapshots (deser-node-snapshot-list (clojure.core/get-in letvar346519 ["NodeSnapshots" :content]))) (letvar346519 "PreferredAvailabilityZone") (clojure.core/assoc :preferred-availability-zone (deser-string (clojure.core/get-in letvar346519 ["PreferredAvailabilityZone" :content]))) (letvar346519 "AutomaticFailover") (clojure.core/assoc :automatic-failover (deser-automatic-failover-status (clojure.core/get-in letvar346519 ["AutomaticFailover" :content]))) (letvar346519 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar346519 ["PreferredMaintenanceWindow" :content]))) (letvar346519 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar346519 ["CacheClusterId" :content]))) (letvar346519 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar346519 ["AutoMinorVersionUpgrade" :content]))) (letvar346519 "CacheClusterCreateTime") (clojure.core/assoc :cache-cluster-create-time (deser-t-stamp (clojure.core/get-in letvar346519 ["CacheClusterCreateTime" :content]))) (letvar346519 "NumCacheNodes") (clojure.core/assoc :num-cache-nodes (deser-integer-optional (clojure.core/get-in letvar346519 ["NumCacheNodes" :content]))) (letvar346519 "SnapshotStatus") (clojure.core/assoc :snapshot-status (deser-string (clojure.core/get-in letvar346519 ["SnapshotStatus" :content]))) (letvar346519 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar346519 ["EngineVersion" :content]))) (letvar346519 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar346519 ["Port" :content]))) (letvar346519 "SnapshotWindow") (clojure.core/assoc :snapshot-window (deser-string (clojure.core/get-in letvar346519 ["SnapshotWindow" :content]))) (letvar346519 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar346519 ["VpcId" :content]))) (letvar346519 "TopicArn") (clojure.core/assoc :topic-arn (deser-string (clojure.core/get-in letvar346519 ["TopicArn" :content]))) (letvar346519 "SnapshotSource") (clojure.core/assoc :snapshot-source (deser-string (clojure.core/get-in letvar346519 ["SnapshotSource" :content]))) (letvar346519 "ReplicationGroupId") (clojure.core/assoc :replication-group-id (deser-string (clojure.core/get-in letvar346519 ["ReplicationGroupId" :content]))) (letvar346519 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar346519 ["CacheParameterGroupName" :content]))) (letvar346519 "SnapshotRetentionLimit") (clojure.core/assoc :snapshot-retention-limit (deser-integer-optional (clojure.core/get-in letvar346519 ["SnapshotRetentionLimit" :content]))) (letvar346519 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar346519 ["Engine" :content]))) (letvar346519 "ReplicationGroupDescription") (clojure.core/assoc :replication-group-description (deser-string (clojure.core/get-in letvar346519 ["ReplicationGroupDescription" :content]))) (letvar346519 "SnapshotName") (clojure.core/assoc :snapshot-name (deser-string (clojure.core/get-in letvar346519 ["SnapshotName" :content]))))))

(clojure.core/defn- deser-t-stamp [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-recurring-charge-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-cache-cluster [input] (clojure.core/let [letvar346646 {"CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil), "CacheSubnetGroupName" (portkey.aws/search-for-tag input "CacheSubnetGroupName" :flattened? nil :xmlAttribute? nil), "CacheParameterGroup" (portkey.aws/search-for-tag input "CacheParameterGroup" :flattened? nil :xmlAttribute? nil), "PreferredAvailabilityZone" (portkey.aws/search-for-tag input "PreferredAvailabilityZone" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "SecurityGroups" (portkey.aws/search-for-tag input "SecurityGroups" :flattened? nil :xmlAttribute? nil), "ConfigurationEndpoint" (portkey.aws/search-for-tag input "ConfigurationEndpoint" :flattened? nil :xmlAttribute? nil), "AuthTokenEnabled" (portkey.aws/search-for-tag input "AuthTokenEnabled" :flattened? nil :xmlAttribute? nil), "CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "CacheClusterStatus" (portkey.aws/search-for-tag input "CacheClusterStatus" :flattened? nil :xmlAttribute? nil), "CacheSecurityGroups" (portkey.aws/search-for-tag input "CacheSecurityGroups" :flattened? nil :xmlAttribute? nil), "AtRestEncryptionEnabled" (portkey.aws/search-for-tag input "AtRestEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "CacheClusterCreateTime" (portkey.aws/search-for-tag input "CacheClusterCreateTime" :flattened? nil :xmlAttribute? nil), "NumCacheNodes" (portkey.aws/search-for-tag input "NumCacheNodes" :flattened? nil :xmlAttribute? nil), "TransitEncryptionEnabled" (portkey.aws/search-for-tag input "TransitEncryptionEnabled" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "ClientDownloadLandingPage" (portkey.aws/search-for-tag input "ClientDownloadLandingPage" :flattened? nil :xmlAttribute? nil), "SnapshotWindow" (portkey.aws/search-for-tag input "SnapshotWindow" :flattened? nil :xmlAttribute? nil), "ReplicationGroupId" (portkey.aws/search-for-tag input "ReplicationGroupId" :flattened? nil :xmlAttribute? nil), "SnapshotRetentionLimit" (portkey.aws/search-for-tag input "SnapshotRetentionLimit" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "NotificationConfiguration" (portkey.aws/search-for-tag input "NotificationConfiguration" :flattened? nil :xmlAttribute? nil), "CacheNodes" (portkey.aws/search-for-tag input "CacheNodes" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346646 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar346646 ["CacheNodeType" :content]))) (letvar346646 "CacheSubnetGroupName") (clojure.core/assoc :cache-subnet-group-name (deser-string (clojure.core/get-in letvar346646 ["CacheSubnetGroupName" :content]))) (letvar346646 "CacheParameterGroup") (clojure.core/assoc :cache-parameter-group (deser-cache-parameter-group-status (clojure.core/get-in letvar346646 ["CacheParameterGroup" :content]))) (letvar346646 "PreferredAvailabilityZone") (clojure.core/assoc :preferred-availability-zone (deser-string (clojure.core/get-in letvar346646 ["PreferredAvailabilityZone" :content]))) (letvar346646 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar346646 ["PreferredMaintenanceWindow" :content]))) (letvar346646 "SecurityGroups") (clojure.core/assoc :security-groups (deser-security-group-membership-list (clojure.core/get-in letvar346646 ["SecurityGroups" :content]))) (letvar346646 "ConfigurationEndpoint") (clojure.core/assoc :configuration-endpoint (deser-endpoint (clojure.core/get-in letvar346646 ["ConfigurationEndpoint" :content]))) (letvar346646 "AuthTokenEnabled") (clojure.core/assoc :auth-token-enabled (deser-boolean-optional (clojure.core/get-in letvar346646 ["AuthTokenEnabled" :content]))) (letvar346646 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar346646 ["CacheClusterId" :content]))) (letvar346646 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar346646 ["AutoMinorVersionUpgrade" :content]))) (letvar346646 "CacheClusterStatus") (clojure.core/assoc :cache-cluster-status (deser-string (clojure.core/get-in letvar346646 ["CacheClusterStatus" :content]))) (letvar346646 "CacheSecurityGroups") (clojure.core/assoc :cache-security-groups (deser-cache-security-group-membership-list (clojure.core/get-in letvar346646 ["CacheSecurityGroups" :content]))) (letvar346646 "AtRestEncryptionEnabled") (clojure.core/assoc :at-rest-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar346646 ["AtRestEncryptionEnabled" :content]))) (letvar346646 "CacheClusterCreateTime") (clojure.core/assoc :cache-cluster-create-time (deser-t-stamp (clojure.core/get-in letvar346646 ["CacheClusterCreateTime" :content]))) (letvar346646 "NumCacheNodes") (clojure.core/assoc :num-cache-nodes (deser-integer-optional (clojure.core/get-in letvar346646 ["NumCacheNodes" :content]))) (letvar346646 "TransitEncryptionEnabled") (clojure.core/assoc :transit-encryption-enabled (deser-boolean-optional (clojure.core/get-in letvar346646 ["TransitEncryptionEnabled" :content]))) (letvar346646 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar346646 ["EngineVersion" :content]))) (letvar346646 "ClientDownloadLandingPage") (clojure.core/assoc :client-download-landing-page (deser-string (clojure.core/get-in letvar346646 ["ClientDownloadLandingPage" :content]))) (letvar346646 "SnapshotWindow") (clojure.core/assoc :snapshot-window (deser-string (clojure.core/get-in letvar346646 ["SnapshotWindow" :content]))) (letvar346646 "ReplicationGroupId") (clojure.core/assoc :replication-group-id (deser-string (clojure.core/get-in letvar346646 ["ReplicationGroupId" :content]))) (letvar346646 "SnapshotRetentionLimit") (clojure.core/assoc :snapshot-retention-limit (deser-integer-optional (clojure.core/get-in letvar346646 ["SnapshotRetentionLimit" :content]))) (letvar346646 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar346646 ["Engine" :content]))) (letvar346646 "NotificationConfiguration") (clojure.core/assoc :notification-configuration (deser-notification-configuration (clojure.core/get-in letvar346646 ["NotificationConfiguration" :content]))) (letvar346646 "CacheNodes") (clojure.core/assoc :cache-nodes (deser-cache-node-list (clojure.core/get-in letvar346646 ["CacheNodes" :content]))) (letvar346646 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-pending-modified-values (clojure.core/get-in letvar346646 ["PendingModifiedValues" :content]))))))

(clojure.core/defn- deser-cache-security-group-membership [input] (clojure.core/let [letvar346754 {"CacheSecurityGroupName" (portkey.aws/search-for-tag input "CacheSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346754 "CacheSecurityGroupName") (clojure.core/assoc :cache-security-group-name (deser-string (clojure.core/get-in letvar346754 ["CacheSecurityGroupName" :content]))) (letvar346754 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar346754 ["Status" :content]))))))

(clojure.core/defn- deser-endpoint [input] (clojure.core/let [letvar346862 {"Address" (portkey.aws/search-for-tag input "Address" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346862 "Address") (clojure.core/assoc :address (deser-string (clojure.core/get-in letvar346862 ["Address" :content]))) (letvar346862 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar346862 ["Port" :content]))))))

(clojure.core/defn- deser-cache-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-parameter-group coll))) input))

(clojure.core/defn- deser-security-group-membership [input] (clojure.core/let [letvar346987 {"SecurityGroupId" (portkey.aws/search-for-tag input "SecurityGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar346987 "SecurityGroupId") (clojure.core/assoc :security-group-id (deser-string (clojure.core/get-in letvar346987 ["SecurityGroupId" :content]))) (letvar346987 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar346987 ["Status" :content]))))))

(clojure.core/defn- deser-node-snapshot [input] (clojure.core/let [letvar347095 {"CacheClusterId" (portkey.aws/search-for-tag input "CacheClusterId" :flattened? nil :xmlAttribute? nil), "NodeGroupId" (portkey.aws/search-for-tag input "NodeGroupId" :flattened? nil :xmlAttribute? nil), "CacheNodeId" (portkey.aws/search-for-tag input "CacheNodeId" :flattened? nil :xmlAttribute? nil), "NodeGroupConfiguration" (portkey.aws/search-for-tag input "NodeGroupConfiguration" :flattened? nil :xmlAttribute? nil), "CacheSize" (portkey.aws/search-for-tag input "CacheSize" :flattened? nil :xmlAttribute? nil), "CacheNodeCreateTime" (portkey.aws/search-for-tag input "CacheNodeCreateTime" :flattened? nil :xmlAttribute? nil), "SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar347095 "CacheClusterId") (clojure.core/assoc :cache-cluster-id (deser-string (clojure.core/get-in letvar347095 ["CacheClusterId" :content]))) (letvar347095 "NodeGroupId") (clojure.core/assoc :node-group-id (deser-string (clojure.core/get-in letvar347095 ["NodeGroupId" :content]))) (letvar347095 "CacheNodeId") (clojure.core/assoc :cache-node-id (deser-string (clojure.core/get-in letvar347095 ["CacheNodeId" :content]))) (letvar347095 "NodeGroupConfiguration") (clojure.core/assoc :node-group-configuration (deser-node-group-configuration (clojure.core/get-in letvar347095 ["NodeGroupConfiguration" :content]))) (letvar347095 "CacheSize") (clojure.core/assoc :cache-size (deser-string (clojure.core/get-in letvar347095 ["CacheSize" :content]))) (letvar347095 "CacheNodeCreateTime") (clojure.core/assoc :cache-node-create-time (deser-t-stamp (clojure.core/get-in letvar347095 ["CacheNodeCreateTime" :content]))) (letvar347095 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar347095 ["SnapshotCreateTime" :content]))))))

(clojure.core/defn- deser-reserved-cache-node-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-cache-node coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar347220 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar347220 "Key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar347220 ["Key" :content]))) (letvar347220 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar347220 ["Value" :content]))))))

(clojure.core/defn- deser-boolean-optional [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- deser-cache-node-type-specific-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-node-type-specific-value coll))) input))

(clojure.core/defn- deser-cache-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-security-group-membership coll))) input))

(clojure.core/defn- deser-node-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-node-group coll))) input))

(clojure.core/defn- deser-notification-configuration [input] (clojure.core/let [letvar347381 {"TopicArn" (portkey.aws/search-for-tag input "TopicArn" :flattened? nil :xmlAttribute? nil), "TopicStatus" (portkey.aws/search-for-tag input "TopicStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar347381 "TopicArn") (clojure.core/assoc :topic-arn (deser-string (clojure.core/get-in letvar347381 ["TopicArn" :content]))) (letvar347381 "TopicStatus") (clojure.core/assoc :topic-status (deser-string (clojure.core/get-in letvar347381 ["TopicStatus" :content]))))))

(clojure.core/defn- deser-cache-parameter-group-status [input] (clojure.core/let [letvar347489 {"CacheParameterGroupName" (portkey.aws/search-for-tag input "CacheParameterGroupName" :flattened? nil :xmlAttribute? nil), "ParameterApplyStatus" (portkey.aws/search-for-tag input "ParameterApplyStatus" :flattened? nil :xmlAttribute? nil), "CacheNodeIdsToReboot" (portkey.aws/search-for-tag input "CacheNodeIdsToReboot" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar347489 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar347489 ["CacheParameterGroupName" :content]))) (letvar347489 "ParameterApplyStatus") (clojure.core/assoc :parameter-apply-status (deser-string (clojure.core/get-in letvar347489 ["ParameterApplyStatus" :content]))) (letvar347489 "CacheNodeIdsToReboot") (clojure.core/assoc :cache-node-ids-to-reboot (deser-cache-node-ids-list (clojure.core/get-in letvar347489 ["CacheNodeIdsToReboot" :content]))))))

(clojure.core/defn- deser-aws-query-error-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-engine-defaults [input] (clojure.core/let [letvar347602 {"CacheParameterGroupFamily" (portkey.aws/search-for-tag input "CacheParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Marker" (portkey.aws/search-for-tag input "Marker" :flattened? nil :xmlAttribute? nil), "Parameters" (portkey.aws/search-for-tag input "Parameters" :flattened? nil :xmlAttribute? nil), "CacheNodeTypeSpecificParameters" (portkey.aws/search-for-tag input "CacheNodeTypeSpecificParameters" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar347602 "CacheParameterGroupFamily") (clojure.core/assoc :cache-parameter-group-family (deser-string (clojure.core/get-in letvar347602 ["CacheParameterGroupFamily" :content]))) (letvar347602 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347602 ["Marker" :content]))) (letvar347602 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar347602 ["Parameters" :content]))) (letvar347602 "CacheNodeTypeSpecificParameters") (clojure.core/assoc :cache-node-type-specific-parameters (deser-cache-node-type-specific-parameters-list (clojure.core/get-in letvar347602 ["CacheNodeTypeSpecificParameters" :content]))))))

(clojure.core/defn- deser-integer-optional [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-pending-modified-values [input] (clojure.core/let [letvar347712 {"NumCacheNodes" (portkey.aws/search-for-tag input "NumCacheNodes" :flattened? nil :xmlAttribute? nil), "CacheNodeIdsToRemove" (portkey.aws/search-for-tag input "CacheNodeIdsToRemove" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "CacheNodeType" (portkey.aws/search-for-tag input "CacheNodeType" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar347712 "NumCacheNodes") (clojure.core/assoc :num-cache-nodes (deser-integer-optional (clojure.core/get-in letvar347712 ["NumCacheNodes" :content]))) (letvar347712 "CacheNodeIdsToRemove") (clojure.core/assoc :cache-node-ids-to-remove (deser-cache-node-ids-list (clojure.core/get-in letvar347712 ["CacheNodeIdsToRemove" :content]))) (letvar347712 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar347712 ["EngineVersion" :content]))) (letvar347712 "CacheNodeType") (clojure.core/assoc :cache-node-type (deser-string (clojure.core/get-in letvar347712 ["CacheNodeType" :content]))))))

(clojure.core/defn- deser-node-type-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-cache-subnet-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cache-subnet-group coll))) input))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- response-cache-parameter-group-already-exists-fault ([input] (response-cache-parameter-group-already-exists-fault nil input)) ([resultWrapper347767 input] (clojure.core/let [rawinput347766 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347768 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-test-failover-not-available-fault ([input] (response-test-failover-not-available-fault nil input)) ([resultWrapper347770 input] (clojure.core/let [rawinput347769 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347771 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-decrease-replica-count-result ([input] (response-decrease-replica-count-result nil input)) ([resultWrapper347773 input] (clojure.core/let [rawinput347772 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347774 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput347772 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper347773)}] (clojure.core/cond-> {} (letvar347774 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar347774 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-snapshot-quota-exceeded-fault ([input] (response-snapshot-quota-exceeded-fault nil input)) ([resultWrapper347776 input] (clojure.core/let [rawinput347775 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347777 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-subnet-group-already-exists-fault ([input] (response-cache-subnet-group-already-exists-fault nil input)) ([resultWrapper347779 input] (clojure.core/let [rawinput347778 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347780 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cluster-quota-for-customer-exceeded-fault ([input] (response-cluster-quota-for-customer-exceeded-fault nil input)) ([resultWrapper347782 input] (clojure.core/let [rawinput347781 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347783 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-node-group-not-found-fault ([input] (response-node-group-not-found-fault nil input)) ([resultWrapper347785 input] (clojure.core/let [rawinput347784 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347786 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-security-group-not-found-fault ([input] (response-cache-security-group-not-found-fault nil input)) ([resultWrapper347788 input] (clojure.core/let [rawinput347787 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347789 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-purchase-reserved-cache-nodes-offering-result ([input] (response-purchase-reserved-cache-nodes-offering-result nil input)) ([resultWrapper347791 input] (clojure.core/let [rawinput347790 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347792 {"ReservedCacheNode" (portkey.aws/search-for-tag rawinput347790 "ReservedCacheNode" :flattened? nil :result-wrapper resultWrapper347791)}] (clojure.core/cond-> {} (letvar347792 "ReservedCacheNode") (clojure.core/assoc :reserved-cache-node (deser-reserved-cache-node (clojure.core/get-in letvar347792 ["ReservedCacheNode" :content])))))))

(clojure.core/defn- response-invalid-arn-fault ([input] (response-invalid-arn-fault nil input)) ([resultWrapper347794 input] (clojure.core/let [rawinput347793 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347795 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-not-found-fault ([input] (response-reserved-cache-node-not-found-fault nil input)) ([resultWrapper347797 input] (clojure.core/let [rawinput347796 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347798 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-subnet-group-quota-exceeded-fault ([input] (response-cache-subnet-group-quota-exceeded-fault nil input)) ([resultWrapper347800 input] (clojure.core/let [rawinput347799 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347801 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-quota-exceeded-fault ([input] (response-reserved-cache-node-quota-exceeded-fault nil input)) ([resultWrapper347803 input] (clojure.core/let [rawinput347802 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347804 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-cache-subnet-group-result ([input] (response-modify-cache-subnet-group-result nil input)) ([resultWrapper347806 input] (clojure.core/let [rawinput347805 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347807 {"CacheSubnetGroup" (portkey.aws/search-for-tag rawinput347805 "CacheSubnetGroup" :flattened? nil :result-wrapper resultWrapper347806)}] (clojure.core/cond-> {} (letvar347807 "CacheSubnetGroup") (clojure.core/assoc :cache-subnet-group (deser-cache-subnet-group (clojure.core/get-in letvar347807 ["CacheSubnetGroup" :content])))))))

(clojure.core/defn- response-allowed-node-type-modifications-message ([input] (response-allowed-node-type-modifications-message nil input)) ([resultWrapper347809 input] (clojure.core/let [rawinput347808 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347810 {"ScaleUpModifications" (portkey.aws/search-for-tag rawinput347808 "ScaleUpModifications" :flattened? nil :result-wrapper resultWrapper347809)}] (clojure.core/cond-> {} (letvar347810 "ScaleUpModifications") (clojure.core/assoc :scale-up-modifications (deser-node-type-list (clojure.core/get-in letvar347810 ["ScaleUpModifications" :content])))))))

(clojure.core/defn- response-revoke-cache-security-group-ingress-result ([input] (response-revoke-cache-security-group-ingress-result nil input)) ([resultWrapper347812 input] (clojure.core/let [rawinput347811 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347813 {"CacheSecurityGroup" (portkey.aws/search-for-tag rawinput347811 "CacheSecurityGroup" :flattened? nil :result-wrapper resultWrapper347812)}] (clojure.core/cond-> {} (letvar347813 "CacheSecurityGroup") (clojure.core/assoc :cache-security-group (deser-cache-security-group (clojure.core/get-in letvar347813 ["CacheSecurityGroup" :content])))))))

(clojure.core/defn- response-describe-snapshots-list-message ([input] (response-describe-snapshots-list-message nil input)) ([resultWrapper347815 input] (clojure.core/let [rawinput347814 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347816 {"Marker" (portkey.aws/search-for-tag rawinput347814 "Marker" :flattened? nil :result-wrapper resultWrapper347815), "Snapshots" (portkey.aws/search-for-tag rawinput347814 "Snapshots" :flattened? nil :result-wrapper resultWrapper347815)}] (clojure.core/cond-> {} (letvar347816 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347816 ["Marker" :content]))) (letvar347816 "Snapshots") (clojure.core/assoc :snapshots (deser-snapshot-list (clojure.core/get-in letvar347816 ["Snapshots" :content])))))))

(clojure.core/defn- response-cache-security-group-quota-exceeded-fault ([input] (response-cache-security-group-quota-exceeded-fault nil input)) ([resultWrapper347818 input] (clojure.core/let [rawinput347817 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347819 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-replication-group-not-found-fault ([input] (response-replication-group-not-found-fault nil input)) ([resultWrapper347821 input] (clojure.core/let [rawinput347820 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347822 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-details ([input] (response-cache-parameter-group-details nil input)) ([resultWrapper347824 input] (clojure.core/let [rawinput347823 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347825 {"Marker" (portkey.aws/search-for-tag rawinput347823 "Marker" :flattened? nil :result-wrapper resultWrapper347824), "Parameters" (portkey.aws/search-for-tag rawinput347823 "Parameters" :flattened? nil :result-wrapper resultWrapper347824), "CacheNodeTypeSpecificParameters" (portkey.aws/search-for-tag rawinput347823 "CacheNodeTypeSpecificParameters" :flattened? nil :result-wrapper resultWrapper347824)}] (clojure.core/cond-> {} (letvar347825 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347825 ["Marker" :content]))) (letvar347825 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar347825 ["Parameters" :content]))) (letvar347825 "CacheNodeTypeSpecificParameters") (clojure.core/assoc :cache-node-type-specific-parameters (deser-cache-node-type-specific-parameters-list (clojure.core/get-in letvar347825 ["CacheNodeTypeSpecificParameters" :content])))))))

(clojure.core/defn- response-invalid-vpc-network-state-fault ([input] (response-invalid-vpc-network-state-fault nil input)) ([resultWrapper347827 input] (clojure.core/let [rawinput347826 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347828 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-subnet-group-not-found-fault ([input] (response-cache-subnet-group-not-found-fault nil input)) ([resultWrapper347830 input] (clojure.core/let [rawinput347829 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347831 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-tag-quota-per-resource-exceeded ([input] (response-tag-quota-per-resource-exceeded nil input)) ([resultWrapper347833 input] (clojure.core/let [rawinput347832 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347834 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-already-exists-fault ([input] (response-authorization-already-exists-fault nil input)) ([resultWrapper347836 input] (clojure.core/let [rawinput347835 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347837 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-snapshot-feature-not-supported-fault ([input] (response-snapshot-feature-not-supported-fault nil input)) ([resultWrapper347839 input] (clojure.core/let [rawinput347838 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347840 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-cluster-already-exists-fault ([input] (response-cache-cluster-already-exists-fault nil input)) ([resultWrapper347842 input] (clojure.core/let [rawinput347841 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347843 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-cache-subnet-group-result ([input] (response-create-cache-subnet-group-result nil input)) ([resultWrapper347845 input] (clojure.core/let [rawinput347844 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347846 {"CacheSubnetGroup" (portkey.aws/search-for-tag rawinput347844 "CacheSubnetGroup" :flattened? nil :result-wrapper resultWrapper347845)}] (clojure.core/cond-> {} (letvar347846 "CacheSubnetGroup") (clojure.core/assoc :cache-subnet-group (deser-cache-subnet-group (clojure.core/get-in letvar347846 ["CacheSubnetGroup" :content])))))))

(clojure.core/defn- response-events-message ([input] (response-events-message nil input)) ([resultWrapper347848 input] (clojure.core/let [rawinput347847 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347849 {"Marker" (portkey.aws/search-for-tag rawinput347847 "Marker" :flattened? nil :result-wrapper resultWrapper347848), "Events" (portkey.aws/search-for-tag rawinput347847 "Events" :flattened? nil :result-wrapper resultWrapper347848)}] (clojure.core/cond-> {} (letvar347849 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347849 ["Marker" :content]))) (letvar347849 "Events") (clojure.core/assoc :events (deser-event-list (clojure.core/get-in letvar347849 ["Events" :content])))))))

(clojure.core/defn- response-invalid-snapshot-state-fault ([input] (response-invalid-snapshot-state-fault nil input)) ([resultWrapper347851 input] (clojure.core/let [rawinput347850 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347852 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-message ([input] (response-reserved-cache-node-message nil input)) ([resultWrapper347854 input] (clojure.core/let [rawinput347853 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347855 {"Marker" (portkey.aws/search-for-tag rawinput347853 "Marker" :flattened? nil :result-wrapper resultWrapper347854), "ReservedCacheNodes" (portkey.aws/search-for-tag rawinput347853 "ReservedCacheNodes" :flattened? nil :result-wrapper resultWrapper347854)}] (clojure.core/cond-> {} (letvar347855 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347855 ["Marker" :content]))) (letvar347855 "ReservedCacheNodes") (clojure.core/assoc :reserved-cache-nodes (deser-reserved-cache-node-list (clojure.core/get-in letvar347855 ["ReservedCacheNodes" :content])))))))

(clojure.core/defn- response-cache-subnet-quota-exceeded-fault ([input] (response-cache-subnet-quota-exceeded-fault nil input)) ([resultWrapper347857 input] (clojure.core/let [rawinput347856 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347858 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-node-already-exists-fault ([input] (response-reserved-cache-node-already-exists-fault nil input)) ([resultWrapper347860 input] (clojure.core/let [rawinput347859 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347861 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-increase-replica-count-result ([input] (response-increase-replica-count-result nil input)) ([resultWrapper347863 input] (clojure.core/let [rawinput347862 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347864 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput347862 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper347863)}] (clojure.core/cond-> {} (letvar347864 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar347864 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-test-failover-result ([input] (response-test-failover-result nil input)) ([resultWrapper347866 input] (clojure.core/let [rawinput347865 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347867 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput347865 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper347866)}] (clojure.core/cond-> {} (letvar347867 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar347867 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-delete-snapshot-result ([input] (response-delete-snapshot-result nil input)) ([resultWrapper347869 input] (clojure.core/let [rawinput347868 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347870 {"Snapshot" (portkey.aws/search-for-tag rawinput347868 "Snapshot" :flattened? nil :result-wrapper resultWrapper347869)}] (clojure.core/cond-> {} (letvar347870 "Snapshot") (clojure.core/assoc :snapshot (deser-snapshot (clojure.core/get-in letvar347870 ["Snapshot" :content])))))))

(clojure.core/defn- response-service-linked-role-not-found-fault ([input] (response-service-linked-role-not-found-fault nil input)) ([resultWrapper347872 input] (clojure.core/let [rawinput347871 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347873 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-snapshot-not-found-fault ([input] (response-snapshot-not-found-fault nil input)) ([resultWrapper347875 input] (clojure.core/let [rawinput347874 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347876 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-engine-default-parameters-result ([input] (response-describe-engine-default-parameters-result nil input)) ([resultWrapper347878 input] (clojure.core/let [rawinput347877 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347879 {"EngineDefaults" (portkey.aws/search-for-tag rawinput347877 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper347878)}] (clojure.core/cond-> {} (letvar347879 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar347879 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-authorization-not-found-fault ([input] (response-authorization-not-found-fault nil input)) ([resultWrapper347881 input] (clojure.core/let [rawinput347880 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347882 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-cache-nodes-offering-message ([input] (response-reserved-cache-nodes-offering-message nil input)) ([resultWrapper347884 input] (clojure.core/let [rawinput347883 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347885 {"Marker" (portkey.aws/search-for-tag rawinput347883 "Marker" :flattened? nil :result-wrapper resultWrapper347884), "ReservedCacheNodesOfferings" (portkey.aws/search-for-tag rawinput347883 "ReservedCacheNodesOfferings" :flattened? nil :result-wrapper resultWrapper347884)}] (clojure.core/cond-> {} (letvar347885 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347885 ["Marker" :content]))) (letvar347885 "ReservedCacheNodesOfferings") (clojure.core/assoc :reserved-cache-nodes-offerings (deser-reserved-cache-nodes-offering-list (clojure.core/get-in letvar347885 ["ReservedCacheNodesOfferings" :content])))))))

(clojure.core/defn- response-invalid-subnet ([input] (response-invalid-subnet nil input)) ([resultWrapper347887 input] (clojure.core/let [rawinput347886 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347888 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reboot-cache-cluster-result ([input] (response-reboot-cache-cluster-result nil input)) ([resultWrapper347890 input] (clojure.core/let [rawinput347889 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347891 {"CacheCluster" (portkey.aws/search-for-tag rawinput347889 "CacheCluster" :flattened? nil :result-wrapper resultWrapper347890)}] (clojure.core/cond-> {} (letvar347891 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar347891 ["CacheCluster" :content])))))))

(clojure.core/defn- response-subnet-in-use ([input] (response-subnet-in-use nil input)) ([resultWrapper347893 input] (clojure.core/let [rawinput347892 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347894 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-security-group-message ([input] (response-cache-security-group-message nil input)) ([resultWrapper347896 input] (clojure.core/let [rawinput347895 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347897 {"Marker" (portkey.aws/search-for-tag rawinput347895 "Marker" :flattened? nil :result-wrapper resultWrapper347896), "CacheSecurityGroups" (portkey.aws/search-for-tag rawinput347895 "CacheSecurityGroups" :flattened? nil :result-wrapper resultWrapper347896)}] (clojure.core/cond-> {} (letvar347897 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347897 ["Marker" :content]))) (letvar347897 "CacheSecurityGroups") (clojure.core/assoc :cache-security-groups (deser-cache-security-groups (clojure.core/get-in letvar347897 ["CacheSecurityGroups" :content])))))))

(clojure.core/defn- response-create-cache-security-group-result ([input] (response-create-cache-security-group-result nil input)) ([resultWrapper347899 input] (clojure.core/let [rawinput347898 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347900 {"CacheSecurityGroup" (portkey.aws/search-for-tag rawinput347898 "CacheSecurityGroup" :flattened? nil :result-wrapper resultWrapper347899)}] (clojure.core/cond-> {} (letvar347900 "CacheSecurityGroup") (clojure.core/assoc :cache-security-group (deser-cache-security-group (clojure.core/get-in letvar347900 ["CacheSecurityGroup" :content])))))))

(clojure.core/defn- response-invalid-cache-security-group-state-fault ([input] (response-invalid-cache-security-group-state-fault nil input)) ([resultWrapper347902 input] (clojure.core/let [rawinput347901 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347903 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-snapshot-result ([input] (response-create-snapshot-result nil input)) ([resultWrapper347905 input] (clojure.core/let [rawinput347904 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347906 {"Snapshot" (portkey.aws/search-for-tag rawinput347904 "Snapshot" :flattened? nil :result-wrapper resultWrapper347905)}] (clojure.core/cond-> {} (letvar347906 "Snapshot") (clojure.core/assoc :snapshot (deser-snapshot (clojure.core/get-in letvar347906 ["Snapshot" :content])))))))

(clojure.core/defn- response-modify-cache-cluster-result ([input] (response-modify-cache-cluster-result nil input)) ([resultWrapper347908 input] (clojure.core/let [rawinput347907 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347909 {"CacheCluster" (portkey.aws/search-for-tag rawinput347907 "CacheCluster" :flattened? nil :result-wrapper resultWrapper347908)}] (clojure.core/cond-> {} (letvar347909 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar347909 ["CacheCluster" :content])))))))

(clojure.core/defn- response-replication-group-already-exists-fault ([input] (response-replication-group-already-exists-fault nil input)) ([resultWrapper347911 input] (clojure.core/let [rawinput347910 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347912 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-replication-group-shard-configuration-result ([input] (response-modify-replication-group-shard-configuration-result nil input)) ([resultWrapper347914 input] (clojure.core/let [rawinput347913 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347915 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput347913 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper347914)}] (clojure.core/cond-> {} (letvar347915 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar347915 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-delete-cache-cluster-result ([input] (response-delete-cache-cluster-result nil input)) ([resultWrapper347917 input] (clojure.core/let [rawinput347916 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347918 {"CacheCluster" (portkey.aws/search-for-tag rawinput347916 "CacheCluster" :flattened? nil :result-wrapper resultWrapper347917)}] (clojure.core/cond-> {} (letvar347918 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar347918 ["CacheCluster" :content])))))))

(clojure.core/defn- response-tag-list-message ([input] (response-tag-list-message nil input)) ([resultWrapper347920 input] (clojure.core/let [rawinput347919 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347921 {"TagList" (portkey.aws/search-for-tag rawinput347919 "TagList" :flattened? nil :result-wrapper resultWrapper347920)}] (clojure.core/cond-> {} (letvar347921 "TagList") (clojure.core/assoc :tag-list (deser-tag-list (clojure.core/get-in letvar347921 ["TagList" :content])))))))

(clojure.core/defn- response-delete-replication-group-result ([input] (response-delete-replication-group-result nil input)) ([resultWrapper347923 input] (clojure.core/let [rawinput347922 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347924 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput347922 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper347923)}] (clojure.core/cond-> {} (letvar347924 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar347924 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-cache-subnet-group-in-use ([input] (response-cache-subnet-group-in-use nil input)) ([resultWrapper347926 input] (clojure.core/let [rawinput347925 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347927 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-replication-group-state-fault ([input] (response-invalid-replication-group-state-fault nil input)) ([resultWrapper347929 input] (clojure.core/let [rawinput347928 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347930 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-replication-group-result ([input] (response-create-replication-group-result nil input)) ([resultWrapper347932 input] (clojure.core/let [rawinput347931 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347933 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput347931 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper347932)}] (clojure.core/cond-> {} (letvar347933 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar347933 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-cache-cluster-message ([input] (response-cache-cluster-message nil input)) ([resultWrapper347935 input] (clojure.core/let [rawinput347934 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347936 {"Marker" (portkey.aws/search-for-tag rawinput347934 "Marker" :flattened? nil :result-wrapper resultWrapper347935), "CacheClusters" (portkey.aws/search-for-tag rawinput347934 "CacheClusters" :flattened? nil :result-wrapper resultWrapper347935)}] (clojure.core/cond-> {} (letvar347936 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347936 ["Marker" :content]))) (letvar347936 "CacheClusters") (clojure.core/assoc :cache-clusters (deser-cache-cluster-list (clojure.core/get-in letvar347936 ["CacheClusters" :content])))))))

(clojure.core/defn- response-node-quota-for-customer-exceeded-fault ([input] (response-node-quota-for-customer-exceeded-fault nil input)) ([resultWrapper347938 input] (clojure.core/let [rawinput347937 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347939 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-groups-message ([input] (response-cache-parameter-groups-message nil input)) ([resultWrapper347941 input] (clojure.core/let [rawinput347940 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347942 {"Marker" (portkey.aws/search-for-tag rawinput347940 "Marker" :flattened? nil :result-wrapper resultWrapper347941), "CacheParameterGroups" (portkey.aws/search-for-tag rawinput347940 "CacheParameterGroups" :flattened? nil :result-wrapper resultWrapper347941)}] (clojure.core/cond-> {} (letvar347942 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347942 ["Marker" :content]))) (letvar347942 "CacheParameterGroups") (clojure.core/assoc :cache-parameter-groups (deser-cache-parameter-group-list (clojure.core/get-in letvar347942 ["CacheParameterGroups" :content])))))))

(clojure.core/defn- response-create-cache-parameter-group-result ([input] (response-create-cache-parameter-group-result nil input)) ([resultWrapper347944 input] (clojure.core/let [rawinput347943 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347945 {"CacheParameterGroup" (portkey.aws/search-for-tag rawinput347943 "CacheParameterGroup" :flattened? nil :result-wrapper resultWrapper347944)}] (clojure.core/cond-> {} (letvar347945 "CacheParameterGroup") (clojure.core/assoc :cache-parameter-group (deser-cache-parameter-group (clojure.core/get-in letvar347945 ["CacheParameterGroup" :content])))))))

(clojure.core/defn- response-node-groups-per-replication-group-quota-exceeded-fault ([input] (response-node-groups-per-replication-group-quota-exceeded-fault nil input)) ([resultWrapper347947 input] (clojure.core/let [rawinput347946 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347948 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-parameter-combination-exception ([input] (response-invalid-parameter-combination-exception nil input)) ([resultWrapper347950 input] (clojure.core/let [rawinput347949 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347951 {"message" (portkey.aws/search-for-tag rawinput347949 "message" :flattened? nil :result-wrapper resultWrapper347950)}] (clojure.core/cond-> {} (letvar347951 "message") (clojure.core/assoc :message (deser-aws-query-error-message (clojure.core/get-in letvar347951 ["message" :content])))))))

(clojure.core/defn- response-invalid-cache-parameter-group-state-fault ([input] (response-invalid-cache-parameter-group-state-fault nil input)) ([resultWrapper347953 input] (clojure.core/let [rawinput347952 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347954 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-not-found-fault ([input] (response-cache-parameter-group-not-found-fault nil input)) ([resultWrapper347956 input] (clojure.core/let [rawinput347955 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347957 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-name-message ([input] (response-cache-parameter-group-name-message nil input)) ([resultWrapper347959 input] (clojure.core/let [rawinput347958 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347960 {"CacheParameterGroupName" (portkey.aws/search-for-tag rawinput347958 "CacheParameterGroupName" :flattened? nil :result-wrapper resultWrapper347959)}] (clojure.core/cond-> {} (letvar347960 "CacheParameterGroupName") (clojure.core/assoc :cache-parameter-group-name (deser-string (clojure.core/get-in letvar347960 ["CacheParameterGroupName" :content])))))))

(clojure.core/defn- response-create-cache-cluster-result ([input] (response-create-cache-cluster-result nil input)) ([resultWrapper347962 input] (clojure.core/let [rawinput347961 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347963 {"CacheCluster" (portkey.aws/search-for-tag rawinput347961 "CacheCluster" :flattened? nil :result-wrapper resultWrapper347962)}] (clojure.core/cond-> {} (letvar347963 "CacheCluster") (clojure.core/assoc :cache-cluster (deser-cache-cluster (clojure.core/get-in letvar347963 ["CacheCluster" :content])))))))

(clojure.core/defn- response-reserved-cache-nodes-offering-not-found-fault ([input] (response-reserved-cache-nodes-offering-not-found-fault nil input)) ([resultWrapper347965 input] (clojure.core/let [rawinput347964 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347966 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-cluster-not-found-fault ([input] (response-cache-cluster-not-found-fault nil input)) ([resultWrapper347968 input] (clojure.core/let [rawinput347967 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347969 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-security-group-already-exists-fault ([input] (response-cache-security-group-already-exists-fault nil input)) ([resultWrapper347971 input] (clojure.core/let [rawinput347970 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347972 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-copy-snapshot-result ([input] (response-copy-snapshot-result nil input)) ([resultWrapper347974 input] (clojure.core/let [rawinput347973 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347975 {"Snapshot" (portkey.aws/search-for-tag rawinput347973 "Snapshot" :flattened? nil :result-wrapper resultWrapper347974)}] (clojure.core/cond-> {} (letvar347975 "Snapshot") (clojure.core/assoc :snapshot (deser-snapshot (clojure.core/get-in letvar347975 ["Snapshot" :content])))))))

(clojure.core/defn- response-node-quota-for-cluster-exceeded-fault ([input] (response-node-quota-for-cluster-exceeded-fault nil input)) ([resultWrapper347977 input] (clojure.core/let [rawinput347976 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347978 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-replication-group-message ([input] (response-replication-group-message nil input)) ([resultWrapper347980 input] (clojure.core/let [rawinput347979 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347981 {"Marker" (portkey.aws/search-for-tag rawinput347979 "Marker" :flattened? nil :result-wrapper resultWrapper347980), "ReplicationGroups" (portkey.aws/search-for-tag rawinput347979 "ReplicationGroups" :flattened? nil :result-wrapper resultWrapper347980)}] (clojure.core/cond-> {} (letvar347981 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347981 ["Marker" :content]))) (letvar347981 "ReplicationGroups") (clojure.core/assoc :replication-groups (deser-replication-group-list (clojure.core/get-in letvar347981 ["ReplicationGroups" :content])))))))

(clojure.core/defn- response-tag-not-found-fault ([input] (response-tag-not-found-fault nil input)) ([resultWrapper347983 input] (clojure.core/let [rawinput347982 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347984 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-engine-version-message ([input] (response-cache-engine-version-message nil input)) ([resultWrapper347986 input] (clojure.core/let [rawinput347985 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347987 {"Marker" (portkey.aws/search-for-tag rawinput347985 "Marker" :flattened? nil :result-wrapper resultWrapper347986), "CacheEngineVersions" (portkey.aws/search-for-tag rawinput347985 "CacheEngineVersions" :flattened? nil :result-wrapper resultWrapper347986)}] (clojure.core/cond-> {} (letvar347987 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347987 ["Marker" :content]))) (letvar347987 "CacheEngineVersions") (clojure.core/assoc :cache-engine-versions (deser-cache-engine-version-list (clojure.core/get-in letvar347987 ["CacheEngineVersions" :content])))))))

(clojure.core/defn- response-cache-subnet-group-message ([input] (response-cache-subnet-group-message nil input)) ([resultWrapper347989 input] (clojure.core/let [rawinput347988 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347990 {"Marker" (portkey.aws/search-for-tag rawinput347988 "Marker" :flattened? nil :result-wrapper resultWrapper347989), "CacheSubnetGroups" (portkey.aws/search-for-tag rawinput347988 "CacheSubnetGroups" :flattened? nil :result-wrapper resultWrapper347989)}] (clojure.core/cond-> {} (letvar347990 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar347990 ["Marker" :content]))) (letvar347990 "CacheSubnetGroups") (clojure.core/assoc :cache-subnet-groups (deser-cache-subnet-groups (clojure.core/get-in letvar347990 ["CacheSubnetGroups" :content])))))))

(clojure.core/defn- response-invalid-parameter-value-exception ([input] (response-invalid-parameter-value-exception nil input)) ([resultWrapper347992 input] (clojure.core/let [rawinput347991 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347993 {"message" (portkey.aws/search-for-tag rawinput347991 "message" :flattened? nil :result-wrapper resultWrapper347992)}] (clojure.core/cond-> {} (letvar347993 "message") (clojure.core/assoc :message (deser-aws-query-error-message (clojure.core/get-in letvar347993 ["message" :content])))))))

(clojure.core/defn- response-no-operation-fault ([input] (response-no-operation-fault nil input)) ([resultWrapper347995 input] (clojure.core/let [rawinput347994 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347996 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-cache-cluster-capacity-fault ([input] (response-insufficient-cache-cluster-capacity-fault nil input)) ([resultWrapper347998 input] (clojure.core/let [rawinput347997 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar347999 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-api-call-rate-for-customer-exceeded-fault ([input] (response-api-call-rate-for-customer-exceeded-fault nil input)) ([resultWrapper348001 input] (clojure.core/let [rawinput348000 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar348002 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorize-cache-security-group-ingress-result ([input] (response-authorize-cache-security-group-ingress-result nil input)) ([resultWrapper348004 input] (clojure.core/let [rawinput348003 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar348005 {"CacheSecurityGroup" (portkey.aws/search-for-tag rawinput348003 "CacheSecurityGroup" :flattened? nil :result-wrapper resultWrapper348004)}] (clojure.core/cond-> {} (letvar348005 "CacheSecurityGroup") (clojure.core/assoc :cache-security-group (deser-cache-security-group (clojure.core/get-in letvar348005 ["CacheSecurityGroup" :content])))))))

(clojure.core/defn- response-modify-replication-group-result ([input] (response-modify-replication-group-result nil input)) ([resultWrapper348007 input] (clojure.core/let [rawinput348006 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar348008 {"ReplicationGroup" (portkey.aws/search-for-tag rawinput348006 "ReplicationGroup" :flattened? nil :result-wrapper resultWrapper348007)}] (clojure.core/cond-> {} (letvar348008 "ReplicationGroup") (clojure.core/assoc :replication-group (deser-replication-group (clojure.core/get-in letvar348008 ["ReplicationGroup" :content])))))))

(clojure.core/defn- response-invalid-cache-cluster-state-fault ([input] (response-invalid-cache-cluster-state-fault nil input)) ([resultWrapper348010 input] (clojure.core/let [rawinput348009 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar348011 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-snapshot-already-exists-fault ([input] (response-snapshot-already-exists-fault nil input)) ([resultWrapper348013 input] (clojure.core/let [rawinput348012 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar348014 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-cache-parameter-group-quota-exceeded-fault ([input] (response-cache-parameter-group-quota-exceeded-fault nil input)) ([resultWrapper348016 input] (clojure.core/let [rawinput348015 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar348017 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/read-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-member/current-role (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-member/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.node-group-member/cache-node-id :portkey.aws.elasticache.-2015-02-02.node-group-member/read-endpoint :portkey.aws.elasticache.-2015-02-02.node-group-member/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.node-group-member/current-role]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.test-failover-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.test-failover-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.test-failover-message/node-group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/engine-version :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/marker :portkey.aws.elasticache.-2015-02-02.describe-cache-engine-versions-message/default-only]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/retain-primary-cluster (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/replication-group-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/retain-primary-cluster :portkey.aws.elasticache.-2015-02-02.delete-replication-group-message/final-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group/ec-2-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/ec-2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group/owner-id :portkey.aws.elasticache.-2015-02-02.cache-security-group/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.cache-security-group/description :portkey.aws.elasticache.-2015-02-02.cache-security-group/ec-2-security-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/az-mode #{:crossaz "cross-az" :singleaz "single-az"})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec-2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/ec-2-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/change-type #{"immediate" :requiresreboot "requires-reboot" :immediate})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.cache-parameter-group/description]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/replication-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/cache-node-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/fixed-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/usage-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/product-description :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/offering-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering/recurring-charges]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-engine-version))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.slot-migration/progress-percentage (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/slot-migration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.slot-migration/progress-percentage]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/parameter-group-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/source-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node/customer-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-id :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-status :portkey.aws.elasticache.-2015-02-02.cache-node/cache-node-create-time :portkey.aws.elasticache.-2015-02-02/endpoint :portkey.aws.elasticache.-2015-02-02.cache-node/parameter-group-status :portkey.aws.elasticache.-2015-02-02.cache-node/source-cache-node-id :portkey.aws.elasticache.-2015-02-02.cache-node/customer-availability-zone]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status #{:disabled "enabled" "disabled" :enabled})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/cache-parameter-group-family] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/reserved-cache-node]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.create-cache-parameter-group-message/description] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.modify-cache-subnet-group-message/subnet-ids]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replica-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replica-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replicas-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/remove-replicas-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/new-replica-count :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replica-configuration :portkey.aws.elasticache.-2015-02-02.decrease-replica-count-message/replicas-to-remove]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/member-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cluster-id-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/cluster-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group/pending-modified-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group/cache-node-type :portkey.aws.elasticache.-2015-02-02.replication-group/member-clusters :portkey.aws.elasticache.-2015-02-02.replication-group/automatic-failover :portkey.aws.elasticache.-2015-02-02.replication-group/node-groups :portkey.aws.elasticache.-2015-02-02.replication-group/configuration-endpoint :portkey.aws.elasticache.-2015-02-02.replication-group/auth-token-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/status :portkey.aws.elasticache.-2015-02-02.replication-group/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/cluster-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.replication-group/description :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-window :portkey.aws.elasticache.-2015-02-02.replication-group/snapshotting-cluster-id :portkey.aws.elasticache.-2015-02-02.replication-group/replication-group-id :portkey.aws.elasticache.-2015-02-02.replication-group/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.replication-group/pending-modified-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zone))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.subnet/subnet-identifier :portkey.aws.elasticache.-2015-02-02.subnet/subnet-availability-zone]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/parameter-name-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/cache-parameter-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/source :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/fixed-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reservation-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/usage-price (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/state (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/recurring-charges (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-type :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/start-time :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/cache-node-count :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/fixed-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reservation-arn :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/duration :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/usage-price :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/product-description :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/state :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/recurring-charges :portkey.aws.elasticache.-2015-02-02.reserved-cache-node/offering-type]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/scale-up-modifications (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-type-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.allowed-node-type-modifications-message/scale-up-modifications]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/cache-node-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-nodes-offering-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.purchase-reserved-cache-nodes-offering-message/cache-node-count]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/vpc-id :portkey.aws.elasticache.-2015-02-02.cache-subnet-group/subnets]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-list-message/snapshots]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/resharding-configuration))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/new-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-type :portkey.aws.elasticache.-2015-02-02/az-mode :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/engine-version :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-status :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/apply-immediately :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-node-ids-to-remove :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.modify-cache-cluster-message/new-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/key-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-security-group-message/description] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/parameters :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-details/cache-node-type-specific-parameters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-member-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group-member))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshotting-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/engine-version :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-status :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshotting-cluster-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/apply-immediately :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/automatic-failover-enabled :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/replication-group-description :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/node-group-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-message/cache-security-group-names]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replica-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replica-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/new-replica-count :portkey.aws.elasticache.-2015-02-02.increase-replica-count-message/replica-configuration]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replicas-per-node-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-cache-cluster-a-zs (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/node-group-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/automatic-failover-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replication-group-description] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-node-groups :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auth-token :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-arns :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/replicas-per-node-group :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/tags :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/preferred-cache-cluster-a-zs :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine-version :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/port :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/node-group-configuration :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/automatic-failover-enabled :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/num-cache-clusters :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/engine :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.create-replication-group-message/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zones-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-snapshot))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-events-message/source-identifier :portkey.aws.elasticache.-2015-02-02/source-type :portkey.aws.elasticache.-2015-02-02.describe-events-message/start-time :portkey.aws.elasticache.-2015-02-02.describe-events-message/end-time :portkey.aws.elasticache.-2015-02-02.describe-events-message/duration :portkey.aws.elasticache.-2015-02-02.describe-events-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-events-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/show-node-group-config (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-name :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/snapshot-source :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/marker :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-snapshots-message/show-node-group-config]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.authorize-cache-security-group-ingress-message/ec-2-security-group-owner-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/event))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-group-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/resharding-configuration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-configuration-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-groups-to-remove-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-retain (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-groups-to-retain-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-group-count :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/apply-immediately] :opt-un [:portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/resharding-configuration :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-remove :portkey.aws.elasticache.-2015-02-02.modify-replication-group-shard-configuration-message/node-groups-to-retain]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-replication-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.events-message/events (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/event-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.events-message/marker :portkey.aws.elasticache.-2015-02-02.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/snapshot-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-snapshot-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-snapshot-message/cache-cluster-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/source-type #{:cacheparametergroup "cache-subnet-group" "cache-parameter-group" "cache-cluster" :replicationgroup "replication-group" "cache-security-group" :cachesubnetgroup :cachecluster :cachesecuritygroup})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/source-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.event/date (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.event/source-identifier :portkey.aws.elasticache.-2015-02-02/source-type :portkey.aws.elasticache.-2015-02-02.event/message :portkey.aws.elasticache.-2015-02-02.event/date]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.availability-zone/name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/reserved-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-node-message/reserved-cache-nodes]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-node-info (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-clusters-not-in-replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/marker :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-node-info :portkey.aws.elasticache.-2015-02-02.describe-cache-clusters-message/show-cache-clusters-not-in-replication-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-cluster))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-version-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine :portkey.aws.elasticache.-2015-02-02.cache-engine-version/engine-version :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-description :portkey.aws.elasticache.-2015-02-02.cache-engine-version/cache-engine-version-description]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/test-failover-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.reboot-cache-cluster-message/cache-node-ids-to-reboot] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/primary-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group/node-group-members (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-group-member-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group/node-group-id :portkey.aws.elasticache.-2015-02-02.node-group/status :portkey.aws.elasticache.-2015-02-02.node-group/primary-endpoint :portkey.aws.elasticache.-2015-02-02.node-group/slots :portkey.aws.elasticache.-2015-02-02.node-group/node-group-members]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/service-linked-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/cache-subnet-group-description :portkey.aws.elasticache.-2015-02-02.create-cache-subnet-group-message/subnet-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/double))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-amount :portkey.aws.elasticache.-2015-02-02.recurring-charge/recurring-charge-frequency]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/cache-node-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-value/value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auth-token (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-arns (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/snapshot-arns-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/security-group-ids (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/notification-topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-security-group-names (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02/az-mode :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auth-token :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-arns :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/security-group-ids :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/preferred-availability-zones :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/tags :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine-version :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/notification-topic-arn :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/port :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-window :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/replication-group-id :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/engine :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/cache-security-group-names :portkey.aws.elasticache.-2015-02-02.create-cache-cluster-message/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter-name-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-name :portkey.aws.elasticache.-2015-02-02.parameter-name-value/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/reserved-cache-nodes-offerings (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/marker :portkey.aws.elasticache.-2015-02-02.reserved-cache-nodes-offering-message/reserved-cache-nodes-offerings]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/tag))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-message/marker :portkey.aws.elasticache.-2015-02-02/cache-security-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/resource-name :portkey.aws.elasticache.-2015-02-02.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-parameter-group-message/cache-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/tag-list]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/remove-replicas-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/cache-clusters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster-message/marker :portkey.aws.elasticache.-2015-02-02.cache-cluster-message/cache-clusters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/cache-parameter-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/marker :portkey.aws.elasticache.-2015-02-02.cache-parameter-groups-message/cache-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/slots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/primary-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-group-configuration/node-group-id :portkey.aws.elasticache.-2015-02-02.node-group-configuration/slots :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-count :portkey.aws.elasticache.-2015-02-02.node-group-configuration/primary-availability-zone :portkey.aws.elasticache.-2015-02-02.node-group-configuration/replica-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/ec-2-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.ec-2-security-group/status :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.ec-2-security-group/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cluster-id-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/automatic-failover-status #{:disabled "enabled" :disabling :enabling "disabling" "enabling" "disabled" :enabled})

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/primary-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/automatic-failover-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/pending-automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/resharding (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/resharding-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/primary-cluster-id :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/automatic-failover-status :portkey.aws.elasticache.-2015-02-02.replication-group-pending-modified-values/resharding]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/key-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/resource-name :portkey.aws.elasticache.-2015-02-02.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__283178__auto__] (clojure.core/<= 1 (clojure.core/count s__283178__auto__))) (clojure.core/fn [s__283179__auto__] (clojure.core/< (clojure.core/count s__283179__auto__) 4)) (clojure.core/fn [s__283180__auto__] (clojure.core/re-matches #"\d+" s__283180__auto__))))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/slot-migration]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/change-type :portkey.aws.elasticache.-2015-02-02.parameter/data-type :portkey.aws.elasticache.-2015-02-02.parameter/parameter-name :portkey.aws.elasticache.-2015-02-02.parameter/source :portkey.aws.elasticache.-2015-02-02.parameter/minimum-engine-version :portkey.aws.elasticache.-2015-02-02.parameter/allowed-values :portkey.aws.elasticache.-2015-02-02.parameter/description :portkey.aws.elasticache.-2015-02-02.parameter/is-modifiable :portkey.aws.elasticache.-2015-02-02.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/data-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/cache-node-type-specific-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/change-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/data-type :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/parameter-name :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/source :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/minimum-engine-version :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/allowed-values :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/cache-node-type-specific-values :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/description :portkey.aws.elasticache.-2015-02-02.cache-node-type-specific-parameter/is-modifiable]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.resharding-configuration/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.resharding-configuration/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/availability-zones-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/resharding-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.resharding-configuration/node-group-id :portkey.aws.elasticache.-2015-02-02.resharding-configuration/preferred-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/final-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/cache-cluster-id] :opt-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-cluster-message/final-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-security-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-node-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/node-snapshots (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/node-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/automatic-failover (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/automatic-failover-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-source (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.snapshot/cache-node-type :portkey.aws.elasticache.-2015-02-02.snapshot/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.snapshot/num-node-groups :portkey.aws.elasticache.-2015-02-02.snapshot/node-snapshots :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.snapshot/automatic-failover :portkey.aws.elasticache.-2015-02-02.snapshot/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.snapshot/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.snapshot/cache-cluster-create-time :portkey.aws.elasticache.-2015-02-02.snapshot/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-status :portkey.aws.elasticache.-2015-02-02.snapshot/engine-version :portkey.aws.elasticache.-2015-02-02.snapshot/port :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-window :portkey.aws.elasticache.-2015-02-02.snapshot/vpc-id :portkey.aws.elasticache.-2015-02-02.snapshot/topic-arn :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-source :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-id :portkey.aws.elasticache.-2015-02-02.snapshot/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.snapshot/engine :portkey.aws.elasticache.-2015-02-02.snapshot/replication-group-description :portkey.aws.elasticache.-2015-02-02.snapshot/snapshot-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-combination-exception/message]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-snapshot-message/snapshot-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.list-allowed-node-type-modifications-message/replication-group-id]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-security-group-message/cache-security-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.delete-cache-subnet-group-message/cache-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-name-message/cache-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-parameter-group (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-availability-zone (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/configuration-endpoint (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/endpoint))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auth-token-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-security-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/at-rest-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/transit-encryption-enabled (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/client-download-landing-page (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-window (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/replication-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-retention-limit (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-node-type :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-parameter-group :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-availability-zone :portkey.aws.elasticache.-2015-02-02.cache-cluster/preferred-maintenance-window :portkey.aws.elasticache.-2015-02-02.cache-cluster/security-groups :portkey.aws.elasticache.-2015-02-02.cache-cluster/configuration-endpoint :portkey.aws.elasticache.-2015-02-02.cache-cluster/auth-token-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.cache-cluster/auto-minor-version-upgrade :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-status :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-security-groups :portkey.aws.elasticache.-2015-02-02.cache-cluster/at-rest-encryption-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-cluster-create-time :portkey.aws.elasticache.-2015-02-02.cache-cluster/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.cache-cluster/transit-encryption-enabled :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine-version :portkey.aws.elasticache.-2015-02-02.cache-cluster/client-download-landing-page :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-window :portkey.aws.elasticache.-2015-02-02.cache-cluster/replication-group-id :portkey.aws.elasticache.-2015-02-02.cache-cluster/snapshot-retention-limit :portkey.aws.elasticache.-2015-02-02.cache-cluster/engine :portkey.aws.elasticache.-2015-02-02/notification-configuration :portkey.aws.elasticache.-2015-02-02.cache-cluster/cache-nodes :portkey.aws.elasticache.-2015-02-02/pending-modified-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.cache-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-cluster]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/address (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.endpoint/port (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.endpoint/address :portkey.aws.elasticache.-2015-02-02.endpoint/port]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/snapshot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-groups-to-retain-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.replication-group-message/replication-groups (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replication-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.replication-group-message/marker :portkey.aws.elasticache.-2015-02-02.replication-group-message/replication-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-parameter-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/security-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.security-group-membership/status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.security-group-membership/security-group-id :portkey.aws.elasticache.-2015-02-02.security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/cache-subnet-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/cache-subnet-group-name :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-cache-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-cluster-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-size (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.node-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/t-stamp))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-cluster-id :portkey.aws.elasticache.-2015-02-02.node-snapshot/node-group-id :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-id :portkey.aws.elasticache.-2015-02-02/node-group-configuration :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-size :portkey.aws.elasticache.-2015-02-02.node-snapshot/cache-node-create-time :portkey.aws.elasticache.-2015-02-02.node-snapshot/snapshot-create-time]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/reserved-cache-node))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/key (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.tag/value (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.tag/key :portkey.aws.elasticache.-2015-02-02.tag/value]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/product-description :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/offering-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-offerings-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-value))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.list-tags-for-resource-message/resource-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-group-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/node-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-arn (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/notification-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-arn :portkey.aws.elasticache.-2015-02-02.notification-configuration/topic-status]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-node-ids-to-reboot (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/parameter-apply-status :portkey.aws.elasticache.-2015-02-02.cache-parameter-group-status/cache-node-ids-to-reboot]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/cache-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/cache-security-group-name :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-name :portkey.aws.elasticache.-2015-02-02.revoke-cache-security-group-ingress-message/ec-2-security-group-owner-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/boolean))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/cache-parameter-group-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/reset-all-parameters :portkey.aws.elasticache.-2015-02-02.reset-cache-parameter-group-message/parameter-name-values]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/aws-query-error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-parameter-group-family (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-node-type-specific-parameters (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-type-specific-parameters-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-parameter-group-family :portkey.aws.elasticache.-2015-02-02.engine-defaults/marker :portkey.aws.elasticache.-2015-02-02.engine-defaults/parameters :portkey.aws.elasticache.-2015-02-02.engine-defaults/cache-node-type-specific-parameters]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/node-group-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-group-id))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/new-replica-count (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.configure-shard/preferred-availability-zones (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/preferred-availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/configure-shard (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.configure-shard/node-group-id :portkey.aws.elasticache.-2015-02-02.configure-shard/new-replica-count] :opt-un [:portkey.aws.elasticache.-2015-02-02.configure-shard/preferred-availability-zones]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/cache-engine-versions (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/marker :portkey.aws.elasticache.-2015-02-02.cache-engine-version-message/cache-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/cache-parameter-group-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/parameter-name-values (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/parameter-name-value-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/cache-parameter-group-name :portkey.aws.elasticache.-2015-02-02.modify-cache-parameter-group-message/parameter-name-values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-node-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-nodes-offering-id (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/duration (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/product-description (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/offering-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/max-records (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-node-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/reserved-cache-nodes-offering-id :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/cache-node-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/duration :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/product-description :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/offering-type :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/max-records :portkey.aws.elasticache.-2015-02-02.describe-reserved-cache-nodes-message/marker]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.cache-subnet-group-message/marker :portkey.aws.elasticache.-2015-02-02/cache-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/aws-query-error-message))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.invalid-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/no-operation-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/num-cache-nodes (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/integer-optional))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-ids-to-remove (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-node-ids-list))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-type (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02.pending-modified-values/num-cache-nodes :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-ids-to-remove :portkey.aws.elasticache.-2015-02-02.pending-modified-values/engine-version :portkey.aws.elasticache.-2015-02-02.pending-modified-values/cache-node-type]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/source-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-snapshot-name (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-bucket (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/string))
(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/source-snapshot-name :portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-snapshot-name] :opt-un [:portkey.aws.elasticache.-2015-02-02.copy-snapshot-message/target-bucket]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/node-type-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/string))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/api-call-rate-for-customer-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/subnet))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/cache-security-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.elasticache.-2015-02-02/replication-group]))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/cache-subnet-group))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/replica-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.elasticache.-2015-02-02/configure-shard))

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.core/defn describe-cache-parameter-groups ([] (describe-cache-parameter-groups {})) ([describe-cache-parameter-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-cache-parameter-groups-message describe-cache-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheParameterGroupsResult", :http.request.configuration/action "DescribeCacheParameterGroups", :http.request.configuration/output-deser-fn response-cache-parameter-groups-message, :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-groups-message))

(clojure.core/defn modify-replication-group-shard-configuration ([modify-replication-group-shard-configuration-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-replication-group-shard-configuration-message modify-replication-group-shard-configuration-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyReplicationGroupShardConfigurationResult", :http.request.configuration/action "ModifyReplicationGroupShardConfiguration", :http.request.configuration/output-deser-fn response-modify-replication-group-shard-configuration-result, :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-replication-group-shard-configuration :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-shard-configuration-result))

(clojure.core/defn describe-cache-security-groups ([] (describe-cache-security-groups {})) ([describe-cache-security-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-cache-security-groups-message describe-cache-security-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-security-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheSecurityGroupsResult", :http.request.configuration/action "DescribeCacheSecurityGroups", :http.request.configuration/output-deser-fn response-cache-security-group-message, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-security-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-security-group-message))

(clojure.core/defn modify-cache-parameter-group ([modify-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-cache-parameter-group-message modify-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCacheParameterGroupResult", :http.request.configuration/action "ModifyCacheParameterGroup", :http.request.configuration/output-deser-fn response-cache-parameter-group-name-message, :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef modify-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn test-failover ([test-failover-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-test-failover-message test-failover-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/test-failover-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/test-failover-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "TestFailoverResult", :http.request.configuration/action "TestFailover", :http.request.configuration/output-deser-fn response-test-failover-result, :http.request.spec/error-spec {"APICallRateForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/api-call-rate-for-customer-exceeded-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/node-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "TestFailoverNotAvailableFault" :portkey.aws.elasticache.-2015-02-02/test-failover-not-available-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef test-failover :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/test-failover-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/test-failover-result))

(clojure.core/defn delete-cache-parameter-group ([delete-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-cache-parameter-group-message delete-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCacheParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-replication-group ([delete-replication-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-replication-group-message delete-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteReplicationGroupResult", :http.request.configuration/action "DeleteReplicationGroup", :http.request.configuration/output-deser-fn response-delete-replication-group-result, :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-replication-group-result))

(clojure.core/defn purchase-reserved-cache-nodes-offering ([purchase-reserved-cache-nodes-offering-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-purchase-reserved-cache-nodes-offering-message purchase-reserved-cache-nodes-offering-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PurchaseReservedCacheNodesOfferingResult", :http.request.configuration/action "PurchaseReservedCacheNodesOffering", :http.request.configuration/output-deser-fn response-purchase-reserved-cache-nodes-offering-result, :http.request.spec/error-spec {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "ReservedCacheNodeAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-already-exists-fault, "ReservedCacheNodeQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef purchase-reserved-cache-nodes-offering :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/purchase-reserved-cache-nodes-offering-result))

(clojure.core/defn describe-events ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventsResult", :http.request.configuration/action "DescribeEvents", :http.request.configuration/output-deser-fn response-events-message, :http.request.spec/error-spec {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/events-message))

(clojure.core/defn create-snapshot ([create-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-snapshot-message create-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateSnapshotResult", :http.request.configuration/action "CreateSnapshot", :http.request.configuration/output-deser-fn response-create-snapshot-result, :http.request.spec/error-spec {"SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-snapshot-result))

(clojure.core/defn increase-replica-count ([increase-replica-count-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-increase-replica-count-message increase-replica-count-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "IncreaseReplicaCountResult", :http.request.configuration/action "IncreaseReplicaCount", :http.request.configuration/output-deser-fn response-increase-replica-count-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "NoOperationFault" :portkey.aws.elasticache.-2015-02-02/no-operation-fault, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef increase-replica-count :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/increase-replica-count-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/increase-replica-count-result))

(clojure.core/defn describe-cache-engine-versions ([] (describe-cache-engine-versions {})) ([describe-cache-engine-versions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-cache-engine-versions-message describe-cache-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheEngineVersionsResult", :http.request.configuration/action "DescribeCacheEngineVersions", :http.request.configuration/output-deser-fn response-cache-engine-version-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-cache-engine-versions :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-engine-version-message))

(clojure.core/defn reset-cache-parameter-group ([reset-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reset-cache-parameter-group-message reset-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetCacheParameterGroupResult", :http.request.configuration/action "ResetCacheParameterGroup", :http.request.configuration/output-deser-fn response-cache-parameter-group-name-message, :http.request.spec/error-spec {"InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef reset-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reset-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-name-message))

(clojure.core/defn modify-replication-group ([modify-replication-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-replication-group-message modify-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyReplicationGroupResult", :http.request.configuration/action "ModifyReplicationGroup", :http.request.configuration/output-deser-fn response-modify-replication-group-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-replication-group-result))

(clojure.core/defn describe-replication-groups ([] (describe-replication-groups {})) ([describe-replication-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-replication-groups-message describe-replication-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/replication-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReplicationGroupsResult", :http.request.configuration/action "DescribeReplicationGroups", :http.request.configuration/output-deser-fn response-replication-group-message, :http.request.spec/error-spec {"ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-replication-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-replication-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/replication-group-message))

(clojure.core/defn reboot-cache-cluster ([reboot-cache-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reboot-cache-cluster-message reboot-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RebootCacheClusterResult", :http.request.configuration/action "RebootCacheCluster", :http.request.configuration/output-deser-fn response-reboot-cache-cluster-result, :http.request.spec/error-spec {"InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reboot-cache-cluster-result))

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListTagsForResourceResult", :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-engine-default-parameters ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultParametersResult", :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-parameters-result, :http.request.spec/error-spec {"InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-engine-default-parameters-result))

(clojure.core/defn describe-cache-clusters ([] (describe-cache-clusters {})) ([describe-cache-clusters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-cache-clusters-message describe-cache-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheClustersResult", :http.request.configuration/action "DescribeCacheClusters", :http.request.configuration/output-deser-fn response-cache-cluster-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-clusters :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-cluster-message))

(clojure.core/defn authorize-cache-security-group-ingress ([authorize-cache-security-group-ingress-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-authorize-cache-security-group-ingress-message authorize-cache-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AuthorizeCacheSecurityGroupIngressResult", :http.request.configuration/action "AuthorizeCacheSecurityGroupIngress", :http.request.configuration/output-deser-fn response-authorize-cache-security-group-ingress-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/authorization-already-exists-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef authorize-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/authorize-cache-security-group-ingress-result))

(clojure.core/defn create-cache-cluster ([create-cache-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-cache-cluster-message create-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheClusterResult", :http.request.configuration/action "CreateCacheCluster", :http.request.configuration/output-deser-fn response-create-cache-cluster-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "CacheClusterAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-already-exists-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault}})))))
(clojure.spec.alpha/fdef create-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-cluster-result))

(clojure.core/defn delete-cache-security-group ([delete-cache-security-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-cache-security-group-message delete-cache-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCacheSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-security-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-cache-subnet-group ([delete-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-cache-subnet-group-message delete-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCacheSubnetGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"CacheSubnetGroupInUse" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-in-use, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-snapshot ([delete-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-snapshot-message delete-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteSnapshotResult", :http.request.configuration/action "DeleteSnapshot", :http.request.configuration/output-deser-fn response-delete-snapshot-result, :http.request.spec/error-spec {"SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-snapshot-result))

(clojure.core/defn describe-cache-parameters ([describe-cache-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-cache-parameters-message describe-cache-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheParametersResult", :http.request.configuration/action "DescribeCacheParameters", :http.request.configuration/output-deser-fn response-cache-parameter-group-details, :http.request.spec/error-spec {"CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-cache-parameters :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/describe-cache-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-details))

(clojure.core/defn create-replication-group ([create-replication-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-replication-group-message create-replication-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-replication-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-replication-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateReplicationGroupResult", :http.request.configuration/action "CreateReplicationGroup", :http.request.configuration/output-deser-fn response-create-replication-group-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "ReplicationGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/replication-group-already-exists-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef create-replication-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-replication-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-replication-group-result))

(clojure.core/defn revoke-cache-security-group-ingress ([revoke-cache-security-group-ingress-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-revoke-cache-security-group-ingress-message revoke-cache-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RevokeCacheSecurityGroupIngressResult", :http.request.configuration/action "RevokeCacheSecurityGroupIngress", :http.request.configuration/output-deser-fn response-revoke-cache-security-group-ingress-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.elasticache.-2015-02-02/authorization-not-found-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef revoke-cache-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/revoke-cache-security-group-ingress-result))

(clojure.core/defn create-cache-subnet-group ([create-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-cache-subnet-group-message create-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheSubnetGroupResult", :http.request.configuration/action "CreateCacheSubnetGroup", :http.request.configuration/output-deser-fn response-create-cache-subnet-group-result, :http.request.spec/error-spec {"CacheSubnetGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-already-exists-fault, "CacheSubnetGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-quota-exceeded-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-subnet-group-result))

(clojure.core/defn describe-cache-subnet-groups ([] (describe-cache-subnet-groups {})) ([describe-cache-subnet-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-cache-subnet-groups-message describe-cache-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCacheSubnetGroupsResult", :http.request.configuration/action "DescribeCacheSubnetGroups", :http.request.configuration/output-deser-fn response-cache-subnet-group-message, :http.request.spec/error-spec {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-cache-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-cache-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-message))

(clojure.core/defn describe-snapshots ([] (describe-snapshots {})) ([describe-snapshots-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-snapshots-message describe-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeSnapshotsResult", :http.request.configuration/action "DescribeSnapshots", :http.request.configuration/output-deser-fn response-describe-snapshots-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-snapshots :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/describe-snapshots-list-message))

(clojure.core/defn decrease-replica-count ([decrease-replica-count-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-decrease-replica-count-message decrease-replica-count-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DecreaseReplicaCountResult", :http.request.configuration/action "DecreaseReplicaCount", :http.request.configuration/output-deser-fn response-decrease-replica-count-result, :http.request.spec/error-spec {"ClusterQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/cluster-quota-for-customer-exceeded-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "ServiceLinkedRoleNotFoundFault" :portkey.aws.elasticache.-2015-02-02/service-linked-role-not-found-fault, "InvalidReplicationGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-replication-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "NodeGroupsPerReplicationGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/node-groups-per-replication-group-quota-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "NoOperationFault" :portkey.aws.elasticache.-2015-02-02/no-operation-fault, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef decrease-replica-count :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/decrease-replica-count-result))

(clojure.core/defn modify-cache-cluster ([modify-cache-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-cache-cluster-message modify-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCacheClusterResult", :http.request.configuration/action "ModifyCacheCluster", :http.request.configuration/output-deser-fn response-modify-cache-cluster-result, :http.request.spec/error-spec {"CacheSecurityGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-vpc-network-state-fault, "InvalidCacheSecurityGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-security-group-state-fault, "NodeQuotaForCustomerExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-customer-exceeded-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "CacheParameterGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-not-found-fault, "CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "NodeQuotaForClusterExceededFault" :portkey.aws.elasticache.-2015-02-02/node-quota-for-cluster-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InsufficientCacheClusterCapacityFault" :portkey.aws.elasticache.-2015-02-02/insufficient-cache-cluster-capacity-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-cluster-result))

(clojure.core/defn copy-snapshot ([copy-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-snapshot-message copy-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopySnapshotResult", :http.request.configuration/action "CopySnapshot", :http.request.configuration/output-deser-fn response-copy-snapshot-result, :http.request.spec/error-spec {"SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidSnapshotStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-snapshot-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef copy-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/copy-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/copy-snapshot-result))

(clojure.core/defn modify-cache-subnet-group ([modify-cache-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-cache-subnet-group-message modify-cache-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCacheSubnetGroupResult", :http.request.configuration/action "ModifyCacheSubnetGroup", :http.request.configuration/output-deser-fn response-modify-cache-subnet-group-result, :http.request.spec/error-spec {"CacheSubnetGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-group-not-found-fault, "CacheSubnetQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-subnet-quota-exceeded-fault, "SubnetInUse" :portkey.aws.elasticache.-2015-02-02/subnet-in-use, "InvalidSubnet" :portkey.aws.elasticache.-2015-02-02/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-cache-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/modify-cache-subnet-group-result))

(clojure.core/defn create-cache-security-group ([create-cache-security-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-cache-security-group-message create-cache-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheSecurityGroupResult", :http.request.configuration/action "CreateCacheSecurityGroup", :http.request.configuration/output-deser-fn response-create-cache-security-group-result, :http.request.spec/error-spec {"CacheSecurityGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-already-exists-fault, "CacheSecurityGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-security-group-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef create-cache-security-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-security-group-result))

(clojure.core/defn remove-tags-from-resource ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveTagsFromResourceResult", :http.request.configuration/action "RemoveTagsFromResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault, "TagNotFoundFault" :portkey.aws.elasticache.-2015-02-02/tag-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/remove-tags-from-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn list-allowed-node-type-modifications ([] (list-allowed-node-type-modifications {})) ([list-allowed-node-type-modifications-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-list-allowed-node-type-modifications-message list-allowed-node-type-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListAllowedNodeTypeModificationsResult", :http.request.configuration/action "ListAllowedNodeTypeModifications", :http.request.configuration/output-deser-fn response-allowed-node-type-modifications-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "ReplicationGroupNotFoundFault" :portkey.aws.elasticache.-2015-02-02/replication-group-not-found-fault, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception}})))))
(clojure.spec.alpha/fdef list-allowed-node-type-modifications :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/list-allowed-node-type-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/allowed-node-type-modifications-message))

(clojure.core/defn create-cache-parameter-group ([create-cache-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-cache-parameter-group-message create-cache-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateCacheParameterGroupResult", :http.request.configuration/action "CreateCacheParameterGroup", :http.request.configuration/output-deser-fn response-create-cache-parameter-group-result, :http.request.spec/error-spec {"CacheParameterGroupQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-quota-exceeded-fault, "CacheParameterGroupAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/cache-parameter-group-already-exists-fault, "InvalidCacheParameterGroupStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-parameter-group-state-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef create-cache-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/create-cache-parameter-group-result))

(clojure.core/defn add-tags-to-resource ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AddTagsToResourceResult", :http.request.configuration/action "AddTagsToResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "SnapshotNotFoundFault" :portkey.aws.elasticache.-2015-02-02/snapshot-not-found-fault, "TagQuotaPerResourceExceeded" :portkey.aws.elasticache.-2015-02-02/tag-quota-per-resource-exceeded, "InvalidARNFault" :portkey.aws.elasticache.-2015-02-02/invalid-arn-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/add-tags-to-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/tag-list-message))

(clojure.core/defn describe-reserved-cache-nodes ([] (describe-reserved-cache-nodes {})) ([describe-reserved-cache-nodes-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-reserved-cache-nodes-message describe-reserved-cache-nodes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedCacheNodesResult", :http.request.configuration/action "DescribeReservedCacheNodes", :http.request.configuration/output-deser-fn response-reserved-cache-node-message, :http.request.spec/error-spec {"ReservedCacheNodeNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-node-message))

(clojure.core/defn describe-reserved-cache-nodes-offerings ([] (describe-reserved-cache-nodes-offerings {})) ([describe-reserved-cache-nodes-offerings-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-reserved-cache-nodes-offerings-message describe-reserved-cache-nodes-offerings-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedCacheNodesOfferingsResult", :http.request.configuration/action "DescribeReservedCacheNodesOfferings", :http.request.configuration/output-deser-fn response-reserved-cache-nodes-offering-message, :http.request.spec/error-spec {"ReservedCacheNodesOfferingNotFoundFault" :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-not-found-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef describe-reserved-cache-nodes-offerings :args (clojure.spec.alpha/? :portkey.aws.elasticache.-2015-02-02/describe-reserved-cache-nodes-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/reserved-cache-nodes-offering-message))

(clojure.core/defn delete-cache-cluster ([delete-cache-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-cache-cluster-message delete-cache-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.elasticache.-2015-02-02/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2015-02-02", :http.request.configuration/service-id "ElastiCache", :http.request.spec/input-spec :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteCacheClusterResult", :http.request.configuration/action "DeleteCacheCluster", :http.request.configuration/output-deser-fn response-delete-cache-cluster-result, :http.request.spec/error-spec {"CacheClusterNotFoundFault" :portkey.aws.elasticache.-2015-02-02/cache-cluster-not-found-fault, "InvalidCacheClusterStateFault" :portkey.aws.elasticache.-2015-02-02/invalid-cache-cluster-state-fault, "SnapshotAlreadyExistsFault" :portkey.aws.elasticache.-2015-02-02/snapshot-already-exists-fault, "SnapshotFeatureNotSupportedFault" :portkey.aws.elasticache.-2015-02-02/snapshot-feature-not-supported-fault, "SnapshotQuotaExceededFault" :portkey.aws.elasticache.-2015-02-02/snapshot-quota-exceeded-fault, "InvalidParameterValueException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-value-exception, "InvalidParameterCombinationException" :portkey.aws.elasticache.-2015-02-02/invalid-parameter-combination-exception}})))))
(clojure.spec.alpha/fdef delete-cache-cluster :args (clojure.spec.alpha/tuple :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.elasticache.-2015-02-02/delete-cache-cluster-result))
