(ns portkey.aws.greengrass.-2017-06-07 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "greengrass", :region "ap-northeast-1"},
    :ssl-common-name "greengrass.ap-northeast-1.amazonaws.com",
    :endpoint "https://greengrass.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "greengrass", :region "eu-west-1"},
    :ssl-common-name "greengrass.eu-west-1.amazonaws.com",
    :endpoint "https://greengrass.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "greengrass", :region "ap-southeast-2"},
    :ssl-common-name "greengrass.ap-southeast-2.amazonaws.com",
    :endpoint "https://greengrass.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "greengrass", :region "eu-central-1"},
    :ssl-common-name "greengrass.eu-central-1.amazonaws.com",
    :endpoint "https://greengrass.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "greengrass", :region "us-west-2"},
    :ssl-common-name "greengrass.us-west-2.amazonaws.com",
    :endpoint "https://greengrass.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "greengrass", :region "us-east-1"},
    :ssl-common-name "greengrass.us-east-1.amazonaws.com",
    :endpoint "https://greengrass.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-software-to-update)

(clojure.core/declare ser-device-definition-version)

(clojure.core/declare ser-list-of-connector)

(clojure.core/declare ser-deployment-type)

(clojure.core/declare ser-connector)

(clojure.core/declare ser-logger-level)

(clojure.core/declare ser-encoding-type)

(clojure.core/declare ser-connectivity-info)

(clojure.core/declare ser-permission)

(clojure.core/declare ser-logger-type)

(clojure.core/declare ser-list-of-subscription)

(clojure.core/declare ser-function-run-as-config)

(clojure.core/declare ser-string)

(clojure.core/declare ser-function-definition-version)

(clojure.core/declare ser-logger-definition-version)

(clojure.core/declare ser-update-targets)

(clojure.core/declare ser-list-of-device)

(clojure.core/declare ser-list-of-core)

(clojure.core/declare ser-s-3-machine-learning-model-resource-data)

(clojure.core/declare ser-update-targets-architecture)

(clojure.core/declare ser-group-version)

(clojure.core/declare ser-list-of-resource)

(clojure.core/declare ser-update-agent-log-level)

(clojure.core/declare ser-list-of-string)

(clojure.core/declare ser-boolean)

(clojure.core/declare ser-resource-definition-version)

(clojure.core/declare ser-list-of-function)

(clojure.core/declare ser-core-definition-version)

(clojure.core/declare ser-function-default-execution-config)

(clojure.core/declare ser-subscription-definition-version)

(clojure.core/declare ser-list-of-logger)

(clojure.core/declare ser-update-targets-operating-system)

(clojure.core/declare ser-list-of-resource-access-policy)

(clojure.core/declare ser-sage-maker-machine-learning-model-resource-data)

(clojure.core/declare ser-function-configuration)

(clojure.core/declare ser-function-configuration-environment)

(clojure.core/declare ser-subscription)

(clojure.core/declare ser-list-of-connectivity-info)

(clojure.core/declare ser-core)

(clojure.core/declare ser-resource)

(clojure.core/declare ser-group-owner-setting)

(clojure.core/declare ser-function-isolation-mode)

(clojure.core/declare ser-resource-data-container)

(clojure.core/declare ser-function)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-connector-definition-version)

(clojure.core/declare ser-local-volume-resource-data)

(clojure.core/declare ser-secrets-manager-secret-resource-data)

(clojure.core/declare ser-function-execution-config)

(clojure.core/declare ser-s-3-url-signer-role)

(clojure.core/declare ser-device)

(clojure.core/declare ser-logger-component)

(clojure.core/declare ser-function-default-config)

(clojure.core/declare ser-resource-access-policy)

(clojure.core/declare ser-local-device-resource-data)

(clojure.core/declare ser-map-of-string)

(clojure.core/declare ser-logger)

(clojure.core/defn- ser-software-to-update [input] #:http.request.field{:value (clojure.core/get {"core" "core", :core "core", "ota_agent" "ota_agent", :ota-agent "ota_agent"} input), :shape "SoftwareToUpdate"})

(clojure.core/defn- ser-device-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DeviceDefinitionVersion", :type "structure"} (clojure.core/contains? input :devices) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-device (input :devices)) #:http.request.field{:name "Devices", :shape "__listOfDevice"}))))

(clojure.core/defn- ser-list-of-connector [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-connector coll) #:http.request.field{:shape "Connector"}))) input), :shape "__listOfConnector", :type "list"})

(clojure.core/defn- ser-deployment-type [input] #:http.request.field{:value (clojure.core/get {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment", "ResetDeployment" "ResetDeployment", :reset-deployment "ResetDeployment", "ForceResetDeployment" "ForceResetDeployment", :force-reset-deployment "ForceResetDeployment"} input), :shape "DeploymentType"})

(clojure.core/defn- ser-connector [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Connector", :type "structure"} (clojure.core/contains? input :connector-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :connector-arn)) #:http.request.field{:name "ConnectorArn", :shape "__string"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-map-of-string (input :parameters)) #:http.request.field{:name "Parameters", :shape "__mapOf__string"}))))

(clojure.core/defn- ser-logger-level [input] #:http.request.field{:value (clojure.core/get {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"} input), :shape "LoggerLevel"})

(clojure.core/defn- ser-encoding-type [input] #:http.request.field{:value (clojure.core/get {"binary" "binary", :binary "binary", "json" "json", :json "json"} input), :shape "EncodingType"})

(clojure.core/defn- ser-connectivity-info [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ConnectivityInfo", :type "structure"} (clojure.core/contains? input :host-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-address)) #:http.request.field{:name "HostAddress", :shape "__string"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :metadata) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :metadata)) #:http.request.field{:name "Metadata", :shape "__string"})) (clojure.core/contains? input :port-number) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :port-number)) #:http.request.field{:name "PortNumber", :shape "__integer"}))))

(clojure.core/defn- ser-permission [input] #:http.request.field{:value (clojure.core/get {"ro" "ro", :ro "ro", "rw" "rw", :rw "rw"} input), :shape "Permission"})

(clojure.core/defn- ser-logger-type [input] #:http.request.field{:value (clojure.core/get {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :aws-cloud-watch "AWSCloudWatch"} input), :shape "LoggerType"})

(clojure.core/defn- ser-list-of-subscription [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-subscription coll) #:http.request.field{:shape "Subscription"}))) input), :shape "__listOfSubscription", :type "list"})

(clojure.core/defn- ser-function-run-as-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionRunAsConfig", :type "structure"} (clojure.core/contains? input :gid) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :gid)) #:http.request.field{:name "Gid", :shape "__integer"})) (clojure.core/contains? input :uid) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :uid)) #:http.request.field{:name "Uid", :shape "__integer"}))))

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "__string"})

(clojure.core/defn- ser-function-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionDefinitionVersion", :type "structure"} (clojure.core/contains? input :default-config) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-default-config (input :default-config)) #:http.request.field{:name "DefaultConfig", :shape "FunctionDefaultConfig"})) (clojure.core/contains? input :functions) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-function (input :functions)) #:http.request.field{:name "Functions", :shape "__listOfFunction"}))))

(clojure.core/defn- ser-logger-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LoggerDefinitionVersion", :type "structure"} (clojure.core/contains? input :loggers) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-logger (input :loggers)) #:http.request.field{:name "Loggers", :shape "__listOfLogger"}))))

(clojure.core/defn- ser-update-targets [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "__string"}))) input), :shape "UpdateTargets", :type "list"})

(clojure.core/defn- ser-list-of-device [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-device coll) #:http.request.field{:shape "Device"}))) input), :shape "__listOfDevice", :type "list"})

(clojure.core/defn- ser-list-of-core [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-core coll) #:http.request.field{:shape "Core"}))) input), :shape "__listOfCore", :type "list"})

(clojure.core/defn- ser-s-3-machine-learning-model-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "S3MachineLearningModelResourceData", :type "structure"} (clojure.core/contains? input :destination-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-path)) #:http.request.field{:name "DestinationPath", :shape "__string"})) (clojure.core/contains? input :s-3-uri) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-uri)) #:http.request.field{:name "S3Uri", :shape "__string"}))))

(clojure.core/defn- ser-update-targets-architecture [input] #:http.request.field{:value (clojure.core/get {"armv7l" "armv7l", :armv-7l "armv7l", "x86_64" "x86_64", :x-86-64 "x86_64", "aarch64" "aarch64", :aarch-64 "aarch64"} input), :shape "UpdateTargetsArchitecture"})

(clojure.core/defn- ser-group-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "GroupVersion", :type "structure"} (clojure.core/contains? input :connector-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :connector-definition-version-arn)) #:http.request.field{:name "ConnectorDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :core-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :core-definition-version-arn)) #:http.request.field{:name "CoreDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :device-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-definition-version-arn)) #:http.request.field{:name "DeviceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :function-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :function-definition-version-arn)) #:http.request.field{:name "FunctionDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :logger-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :logger-definition-version-arn)) #:http.request.field{:name "LoggerDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :resource-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-definition-version-arn)) #:http.request.field{:name "ResourceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :subscription-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-definition-version-arn)) #:http.request.field{:name "SubscriptionDefinitionVersionArn", :shape "__string"}))))

(clojure.core/defn- ser-list-of-resource [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resource coll) #:http.request.field{:shape "Resource"}))) input), :shape "__listOfResource", :type "list"})

(clojure.core/defn- ser-update-agent-log-level [input] #:http.request.field{:value (clojure.core/get {:warn "WARN", :trace "TRACE", "WARN" "WARN", :verbose "VERBOSE", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "NONE" "NONE", "TRACE" "TRACE", "DEBUG" "DEBUG", "VERBOSE" "VERBOSE", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO", :none "NONE"} input), :shape "UpdateAgentLogLevel"})

(clojure.core/defn- ser-list-of-string [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "__string"}))) input), :shape "__listOf__string", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "__boolean"})

(clojure.core/defn- ser-resource-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ResourceDefinitionVersion", :type "structure"} (clojure.core/contains? input :resources) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-resource (input :resources)) #:http.request.field{:name "Resources", :shape "__listOfResource"}))))

(clojure.core/defn- ser-list-of-function [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-function coll) #:http.request.field{:shape "Function"}))) input), :shape "__listOfFunction", :type "list"})

(clojure.core/defn- ser-core-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CoreDefinitionVersion", :type "structure"} (clojure.core/contains? input :cores) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-core (input :cores)) #:http.request.field{:name "Cores", :shape "__listOfCore"}))))

(clojure.core/defn- ser-function-default-execution-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionDefaultExecutionConfig", :type "structure"} (clojure.core/contains? input :isolation-mode) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-isolation-mode (input :isolation-mode)) #:http.request.field{:name "IsolationMode", :shape "FunctionIsolationMode"}))))

(clojure.core/defn- ser-subscription-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SubscriptionDefinitionVersion", :type "structure"} (clojure.core/contains? input :subscriptions) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-subscription (input :subscriptions)) #:http.request.field{:name "Subscriptions", :shape "__listOfSubscription"}))))

(clojure.core/defn- ser-list-of-logger [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-logger coll) #:http.request.field{:shape "Logger"}))) input), :shape "__listOfLogger", :type "list"})

(clojure.core/defn- ser-update-targets-operating-system [input] #:http.request.field{:value (clojure.core/get {"ubuntu" "ubuntu", :ubuntu "ubuntu", "raspbian" "raspbian", :raspbian "raspbian", "amazon_linux" "amazon_linux", :amazon-linux "amazon_linux"} input), :shape "UpdateTargetsOperatingSystem"})

(clojure.core/defn- ser-list-of-resource-access-policy [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resource-access-policy coll) #:http.request.field{:shape "ResourceAccessPolicy"}))) input), :shape "__listOfResourceAccessPolicy", :type "list"})

(clojure.core/defn- ser-sage-maker-machine-learning-model-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SageMakerMachineLearningModelResourceData", :type "structure"} (clojure.core/contains? input :destination-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-path)) #:http.request.field{:name "DestinationPath", :shape "__string"})) (clojure.core/contains? input :sage-maker-job-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sage-maker-job-arn)) #:http.request.field{:name "SageMakerJobArn", :shape "__string"}))))

(clojure.core/defn- ser-function-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionConfiguration", :type "structure"} (clojure.core/contains? input :encoding-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-encoding-type (input :encoding-type)) #:http.request.field{:name "EncodingType", :shape "EncodingType"})) (clojure.core/contains? input :environment) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-configuration-environment (input :environment)) #:http.request.field{:name "Environment", :shape "FunctionConfigurationEnvironment"})) (clojure.core/contains? input :exec-args) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :exec-args)) #:http.request.field{:name "ExecArgs", :shape "__string"})) (clojure.core/contains? input :executable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :executable)) #:http.request.field{:name "Executable", :shape "__string"})) (clojure.core/contains? input :memory-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :memory-size)) #:http.request.field{:name "MemorySize", :shape "__integer"})) (clojure.core/contains? input :pinned) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :pinned)) #:http.request.field{:name "Pinned", :shape "__boolean"})) (clojure.core/contains? input :timeout) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :timeout)) #:http.request.field{:name "Timeout", :shape "__integer"}))))

(clojure.core/defn- ser-function-configuration-environment [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionConfigurationEnvironment", :type "structure"} (clojure.core/contains? input :access-sysfs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :access-sysfs)) #:http.request.field{:name "AccessSysfs", :shape "__boolean"})) (clojure.core/contains? input :execution) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-execution-config (input :execution)) #:http.request.field{:name "Execution", :shape "FunctionExecutionConfig"})) (clojure.core/contains? input :resource-access-policies) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-resource-access-policy (input :resource-access-policies)) #:http.request.field{:name "ResourceAccessPolicies", :shape "__listOfResourceAccessPolicy"})) (clojure.core/contains? input :variables) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-map-of-string (input :variables)) #:http.request.field{:name "Variables", :shape "__mapOf__string"}))))

(clojure.core/defn- ser-subscription [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Subscription", :type "structure"} (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "__string"})) (clojure.core/contains? input :subject) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subject)) #:http.request.field{:name "Subject", :shape "__string"})) (clojure.core/contains? input :target) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target)) #:http.request.field{:name "Target", :shape "__string"}))))

(clojure.core/defn- ser-list-of-connectivity-info [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-connectivity-info coll) #:http.request.field{:shape "ConnectivityInfo"}))) input), :shape "__listOfConnectivityInfo", :type "list"})

(clojure.core/defn- ser-core [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Core", :type "structure"} (clojure.core/contains? input :certificate-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-arn)) #:http.request.field{:name "CertificateArn", :shape "__string"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :sync-shadow) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :sync-shadow)) #:http.request.field{:name "SyncShadow", :shape "__boolean"})) (clojure.core/contains? input :thing-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :thing-arn)) #:http.request.field{:name "ThingArn", :shape "__string"}))))

(clojure.core/defn- ser-resource [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Resource", :type "structure"} (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"})) (clojure.core/contains? input :resource-data-container) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-data-container (input :resource-data-container)) #:http.request.field{:name "ResourceDataContainer", :shape "ResourceDataContainer"}))))

(clojure.core/defn- ser-group-owner-setting [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "GroupOwnerSetting", :type "structure"} (clojure.core/contains? input :auto-add-group-owner) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :auto-add-group-owner)) #:http.request.field{:name "AutoAddGroupOwner", :shape "__boolean"})) (clojure.core/contains? input :group-owner) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-owner)) #:http.request.field{:name "GroupOwner", :shape "__string"}))))

(clojure.core/defn- ser-function-isolation-mode [input] #:http.request.field{:value (clojure.core/get {"GreengrassContainer" "GreengrassContainer", :greengrass-container "GreengrassContainer", "NoContainer" "NoContainer", :no-container "NoContainer"} input), :shape "FunctionIsolationMode"})

(clojure.core/defn- ser-resource-data-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ResourceDataContainer", :type "structure"} (clojure.core/contains? input :local-device-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-local-device-resource-data (input :local-device-resource-data)) #:http.request.field{:name "LocalDeviceResourceData", :shape "LocalDeviceResourceData"})) (clojure.core/contains? input :local-volume-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-local-volume-resource-data (input :local-volume-resource-data)) #:http.request.field{:name "LocalVolumeResourceData", :shape "LocalVolumeResourceData"})) (clojure.core/contains? input :s-3-machine-learning-model-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-s-3-machine-learning-model-resource-data (input :s-3-machine-learning-model-resource-data)) #:http.request.field{:name "S3MachineLearningModelResourceData", :shape "S3MachineLearningModelResourceData"})) (clojure.core/contains? input :sage-maker-machine-learning-model-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-sage-maker-machine-learning-model-resource-data (input :sage-maker-machine-learning-model-resource-data)) #:http.request.field{:name "SageMakerMachineLearningModelResourceData", :shape "SageMakerMachineLearningModelResourceData"})) (clojure.core/contains? input :secrets-manager-secret-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-secrets-manager-secret-resource-data (input :secrets-manager-secret-resource-data)) #:http.request.field{:name "SecretsManagerSecretResourceData", :shape "SecretsManagerSecretResourceData"}))))

(clojure.core/defn- ser-function [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Function", :type "structure"} (clojure.core/contains? input :function-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :function-arn)) #:http.request.field{:name "FunctionArn", :shape "__string"})) (clojure.core/contains? input :function-configuration) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-configuration (input :function-configuration)) #:http.request.field{:name "FunctionConfiguration", :shape "FunctionConfiguration"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"}))))

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "__integer"})

(clojure.core/defn- ser-connector-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ConnectorDefinitionVersion", :type "structure"} (clojure.core/contains? input :connectors) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-connector (input :connectors)) #:http.request.field{:name "Connectors", :shape "__listOfConnector"}))))

(clojure.core/defn- ser-local-volume-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LocalVolumeResourceData", :type "structure"} (clojure.core/contains? input :destination-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-path)) #:http.request.field{:name "DestinationPath", :shape "__string"})) (clojure.core/contains? input :group-owner-setting) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-owner-setting (input :group-owner-setting)) #:http.request.field{:name "GroupOwnerSetting", :shape "GroupOwnerSetting"})) (clojure.core/contains? input :source-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-path)) #:http.request.field{:name "SourcePath", :shape "__string"}))))

(clojure.core/defn- ser-secrets-manager-secret-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SecretsManagerSecretResourceData", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "ARN", :shape "__string"})) (clojure.core/contains? input :additional-staging-labels-to-download) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :additional-staging-labels-to-download)) #:http.request.field{:name "AdditionalStagingLabelsToDownload", :shape "__listOf__string"}))))

(clojure.core/defn- ser-function-execution-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionExecutionConfig", :type "structure"} (clojure.core/contains? input :isolation-mode) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-isolation-mode (input :isolation-mode)) #:http.request.field{:name "IsolationMode", :shape "FunctionIsolationMode"})) (clojure.core/contains? input :run-as) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-run-as-config (input :run-as)) #:http.request.field{:name "RunAs", :shape "FunctionRunAsConfig"}))))

(clojure.core/defn- ser-s-3-url-signer-role [input] #:http.request.field{:value input, :shape "S3UrlSignerRole"})

(clojure.core/defn- ser-device [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Device", :type "structure"} (clojure.core/contains? input :certificate-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-arn)) #:http.request.field{:name "CertificateArn", :shape "__string"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :sync-shadow) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :sync-shadow)) #:http.request.field{:name "SyncShadow", :shape "__boolean"})) (clojure.core/contains? input :thing-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :thing-arn)) #:http.request.field{:name "ThingArn", :shape "__string"}))))

(clojure.core/defn- ser-logger-component [input] #:http.request.field{:value (clojure.core/get {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"} input), :shape "LoggerComponent"})

(clojure.core/defn- ser-function-default-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionDefaultConfig", :type "structure"} (clojure.core/contains? input :execution) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-default-execution-config (input :execution)) #:http.request.field{:name "Execution", :shape "FunctionDefaultExecutionConfig"}))))

(clojure.core/defn- ser-resource-access-policy [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ResourceAccessPolicy", :type "structure"} (clojure.core/contains? input :permission) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission (input :permission)) #:http.request.field{:name "Permission", :shape "Permission"})) (clojure.core/contains? input :resource-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-id)) #:http.request.field{:name "ResourceId", :shape "__string"}))))

(clojure.core/defn- ser-local-device-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LocalDeviceResourceData", :type "structure"} (clojure.core/contains? input :group-owner-setting) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-owner-setting (input :group-owner-setting)) #:http.request.field{:name "GroupOwnerSetting", :shape "GroupOwnerSetting"})) (clojure.core/contains? input :source-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-path)) #:http.request.field{:name "SourcePath", :shape "__string"}))))

(clojure.core/defn- ser-map-of-string [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-string v) #:http.request.field{:map-info "value", :shape "__string"})])) input), :shape "__mapOf__string", :type "map"})

(clojure.core/defn- ser-logger [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Logger", :type "structure"} (clojure.core/contains? input :component) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-component (input :component)) #:http.request.field{:name "Component", :shape "LoggerComponent"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :level) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-level (input :level)) #:http.request.field{:name "Level", :shape "LoggerLevel"})) (clojure.core/contains? input :space) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :space)) #:http.request.field{:name "Space", :shape "__integer"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-type (input :type)) #:http.request.field{:name "Type", :shape "LoggerType"}))))

(clojure.core/defn- req-update-function-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-create-core-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-core-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "CoreDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-list-core-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-update-resource-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-create-core-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :cores) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-core (input :cores)) #:http.request.field{:name "Cores", :shape "__listOfCore"}))))

(clojure.core/defn- req-create-logger-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "LoggerDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-create-logger-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :loggers) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-logger (input :loggers)) #:http.request.field{:name "Loggers", :shape "__listOfLogger"}))))

(clojure.core/defn- req-associate-role-to-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "__string"}))))

(clojure.core/defn- req-create-device-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :devices) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-device (input :devices)) #:http.request.field{:name "Devices", :shape "__listOfDevice"}))))

(clojure.core/defn- req-get-bulk-deployment-status-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :bulk-deployment-id)) #:http.request.field{:name "BulkDeploymentId", :shape "__string", :location "uri", :location-name "BulkDeploymentId"})]}))

(clojure.core/defn- req-list-connector-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-device-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]}))

(clojure.core/defn- req-list-subscription-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-service-role-for-account-request [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-create-connector-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-connector-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "ConnectorDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-associate-service-role-to-account-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "__string"}))))

(clojure.core/defn- req-get-subscription-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"}) (clojure.core/into (ser-string (input :subscription-definition-version-id)) #:http.request.field{:name "SubscriptionDefinitionVersionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionVersionId"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-logger-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-core-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-resource-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-version-id)) #:http.request.field{:name "ResourceDefinitionVersionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionVersionId"}) (clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]}))

(clojure.core/defn- req-create-group-certificate-authority-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"}))))

(clojure.core/defn- req-list-resource-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-create-connector-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :connector-definition-id)) #:http.request.field{:name "ConnectorDefinitionId", :shape "__string", :location "uri", :location-name "ConnectorDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :connectors) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-connector (input :connectors)) #:http.request.field{:name "Connectors", :shape "__listOfConnector"}))))

(clojure.core/defn- req-get-function-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"}) (clojure.core/into (ser-string (input :function-definition-version-id)) #:http.request.field{:name "FunctionDefinitionVersionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionVersionId"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-associated-role-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-get-subscription-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]}))

(clojure.core/defn- req-get-device-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-version-id)) #:http.request.field{:name "DeviceDefinitionVersionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionVersionId"}) (clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-subscription-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-update-subscription-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-disassociate-role-from-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-list-group-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-device-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-update-connectivity-info-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :thing-name)) #:http.request.field{:name "ThingName", :shape "__string", :location "uri", :location-name "ThingName"})]} (clojure.core/contains? input :connectivity-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-connectivity-info (input :connectivity-info)) #:http.request.field{:name "ConnectivityInfo", :shape "__listOfConnectivityInfo"}))))

(clojure.core/defn- req-list-function-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-create-function-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "FunctionDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-list-logger-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-resource-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]}))

(clojure.core/defn- req-delete-function-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]}))

(clojure.core/defn- req-get-logger-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-version-id)) #:http.request.field{:name "LoggerDefinitionVersionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionVersionId"}) (clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-connector-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :connector-definition-id)) #:http.request.field{:name "ConnectorDefinitionId", :shape "__string", :location "uri", :location-name "ConnectorDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-deployments-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-create-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :deployment-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "__string"})) (clojure.core/contains? input :deployment-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-deployment-type (input :deployment-type)) #:http.request.field{:name "DeploymentType", :shape "DeploymentType"})) (clojure.core/contains? input :group-version-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-version-id)) #:http.request.field{:name "GroupVersionId", :shape "__string"}))))

(clojure.core/defn- req-delete-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-list-bulk-deployment-detailed-reports-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :bulk-deployment-id)) #:http.request.field{:name "BulkDeploymentId", :shape "__string", :location "uri", :location-name "BulkDeploymentId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-delete-subscription-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]}))

(clojure.core/defn- req-list-group-certificate-authorities-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-update-logger-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-delete-core-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]}))

(clojure.core/defn- req-update-group-certificate-configuration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :certificate-expiry-in-milliseconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-expiry-in-milliseconds)) #:http.request.field{:name "CertificateExpiryInMilliseconds", :shape "__string"}))))

(clojure.core/defn- req-get-deployment-status-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"}) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "__string", :location "uri", :location-name "DeploymentId"})]}))

(clojure.core/defn- req-create-group-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :function-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :function-definition-version-arn)) #:http.request.field{:name "FunctionDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :subscription-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-definition-version-arn)) #:http.request.field{:name "SubscriptionDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :device-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-definition-version-arn)) #:http.request.field{:name "DeviceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :logger-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :logger-definition-version-arn)) #:http.request.field{:name "LoggerDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :resource-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-definition-version-arn)) #:http.request.field{:name "ResourceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :connector-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :connector-definition-version-arn)) #:http.request.field{:name "ConnectorDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :core-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :core-definition-version-arn)) #:http.request.field{:name "CoreDefinitionVersionArn", :shape "__string"}))))

(clojure.core/defn- req-update-core-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-update-connector-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :connector-definition-id)) #:http.request.field{:name "ConnectorDefinitionId", :shape "__string", :location "uri", :location-name "ConnectorDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-core-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"}) (clojure.core/into (ser-string (input :core-definition-version-id)) #:http.request.field{:name "CoreDefinitionVersionId", :shape "__string", :location "uri", :location-name "CoreDefinitionVersionId"})]}))

(clojure.core/defn- req-stop-bulk-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :bulk-deployment-id)) #:http.request.field{:name "BulkDeploymentId", :shape "__string", :location "uri", :location-name "BulkDeploymentId"})]}))

(clojure.core/defn- req-start-bulk-deployment-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :execution-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :execution-role-arn)) #:http.request.field{:name "ExecutionRoleArn", :shape "__string"})) (clojure.core/contains? input :input-file-uri) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :input-file-uri)) #:http.request.field{:name "InputFileUri", :shape "__string"}))))

(clojure.core/defn- req-create-software-update-job-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :s-3-url-signer-role) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-s-3-url-signer-role (input :s-3-url-signer-role)) #:http.request.field{:name "S3UrlSignerRole", :shape "S3UrlSignerRole"})) (clojure.core/contains? input :software-to-update) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-software-to-update (input :software-to-update)) #:http.request.field{:name "SoftwareToUpdate", :shape "SoftwareToUpdate"})) (clojure.core/contains? input :update-agent-log-level) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-agent-log-level (input :update-agent-log-level)) #:http.request.field{:name "UpdateAgentLogLevel", :shape "UpdateAgentLogLevel"})) (clojure.core/contains? input :update-targets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-targets (input :update-targets)) #:http.request.field{:name "UpdateTargets", :shape "UpdateTargets"})) (clojure.core/contains? input :update-targets-architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-targets-architecture (input :update-targets-architecture)) #:http.request.field{:name "UpdateTargetsArchitecture", :shape "UpdateTargetsArchitecture"})) (clojure.core/contains? input :update-targets-operating-system) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-targets-operating-system (input :update-targets-operating-system)) #:http.request.field{:name "UpdateTargetsOperatingSystem", :shape "UpdateTargetsOperatingSystem"}))))

(clojure.core/defn- req-list-resource-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-device-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-reset-deployments-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "__boolean"}))))

(clojure.core/defn- req-delete-resource-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]}))

(clojure.core/defn- req-get-connector-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :connector-definition-id)) #:http.request.field{:name "ConnectorDefinitionId", :shape "__string", :location "uri", :location-name "ConnectorDefinitionId"})]}))

(clojure.core/defn- req-list-function-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-create-resource-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :resources) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-resource (input :resources)) #:http.request.field{:name "Resources", :shape "__listOfResource"}))))

(clojure.core/defn- req-get-logger-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]}))

(clojure.core/defn- req-create-group-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "GroupVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-group-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-version-id)) #:http.request.field{:name "GroupVersionId", :shape "__string", :location "uri", :location-name "GroupVersionId"}) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-disassociate-service-role-from-account-request [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-create-subscription-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :subscriptions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-subscription (input :subscriptions)) #:http.request.field{:name "Subscriptions", :shape "__listOfSubscription"}))))

(clojure.core/defn- req-get-group-certificate-configuration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-create-function-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :default-config) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-default-config (input :default-config)) #:http.request.field{:name "DefaultConfig", :shape "FunctionDefaultConfig"})) (clojure.core/contains? input :functions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-function (input :functions)) #:http.request.field{:name "Functions", :shape "__listOfFunction"}))))

(clojure.core/defn- req-get-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-delete-logger-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]}))

(clojure.core/defn- req-list-bulk-deployments-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-delete-connector-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :connector-definition-id)) #:http.request.field{:name "ConnectorDefinitionId", :shape "__string", :location "uri", :location-name "ConnectorDefinitionId"})]}))

(clojure.core/defn- req-delete-device-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]}))

(clojure.core/defn- req-create-subscription-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subscription-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "SubscriptionDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-update-device-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-core-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]}))

(clojure.core/defn- req-get-group-certificate-authority-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :certificate-authority-id)) #:http.request.field{:name "CertificateAuthorityId", :shape "__string", :location "uri", :location-name "CertificateAuthorityId"}) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-create-resource-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "ResourceDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-function-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]}))

(clojure.core/defn- req-create-device-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-device-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "DeviceDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-connectivity-info-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :thing-name)) #:http.request.field{:name "ThingName", :shape "__string", :location "uri", :location-name "ThingName"})]}))

(clojure.core/defn- req-get-connector-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :connector-definition-id)) #:http.request.field{:name "ConnectorDefinitionId", :shape "__string", :location "uri", :location-name "ConnectorDefinitionId"}) (clojure.core/into (ser-string (input :connector-definition-version-id)) #:http.request.field{:name "ConnectorDefinitionVersionId", :shape "__string", :location "uri", :location-name "ConnectorDefinitionVersionId"})]} (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-update-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/declare deser-device-definition-version)

(clojure.core/declare deser-list-of-connector)

(clojure.core/declare deser-group-certificate-authority-properties)

(clojure.core/declare deser-definition-information)

(clojure.core/declare deser-deployment)

(clojure.core/declare deser-deployment-type)

(clojure.core/declare deser-connector)

(clojure.core/declare deser-logger-level)

(clojure.core/declare deser-encoding-type)

(clojure.core/declare deser-connectivity-info)

(clojure.core/declare deser-permission)

(clojure.core/declare deser-list-of-group-information)

(clojure.core/declare deser-logger-type)

(clojure.core/declare deser-list-of-subscription)

(clojure.core/declare deser-function-run-as-config)

(clojure.core/declare deser-string)

(clojure.core/declare deser-function-definition-version)

(clojure.core/declare deser-logger-definition-version)

(clojure.core/declare deser-list-of-group-certificate-authority-properties)

(clojure.core/declare deser-bulk-deployment)

(clojure.core/declare deser-list-of-device)

(clojure.core/declare deser-list-of-core)

(clojure.core/declare deser-version-information)

(clojure.core/declare deser-bulk-deployments)

(clojure.core/declare deser-s-3-machine-learning-model-resource-data)

(clojure.core/declare deser-group-version)

(clojure.core/declare deser-group-information)

(clojure.core/declare deser-error-detail)

(clojure.core/declare deser-list-of-resource)

(clojure.core/declare deser-list-of-string)

(clojure.core/declare deser-boolean)

(clojure.core/declare deser-list-of-version-information)

(clojure.core/declare deser-resource-definition-version)

(clojure.core/declare deser-list-of-function)

(clojure.core/declare deser-core-definition-version)

(clojure.core/declare deser-function-default-execution-config)

(clojure.core/declare deser-subscription-definition-version)

(clojure.core/declare deser-list-of-logger)

(clojure.core/declare deser-bulk-deployment-results)

(clojure.core/declare deser-list-of-resource-access-policy)

(clojure.core/declare deser-sage-maker-machine-learning-model-resource-data)

(clojure.core/declare deser-function-configuration)

(clojure.core/declare deser-bulk-deployment-status)

(clojure.core/declare deser-function-configuration-environment)

(clojure.core/declare deser-error-details)

(clojure.core/declare deser-bulk-deployment-metrics)

(clojure.core/declare deser-subscription)

(clojure.core/declare deser-list-of-connectivity-info)

(clojure.core/declare deser-core)

(clojure.core/declare deser-list-of-definition-information)

(clojure.core/declare deser-resource)

(clojure.core/declare deser-group-owner-setting)

(clojure.core/declare deser-bulk-deployment-result)

(clojure.core/declare deser-function-isolation-mode)

(clojure.core/declare deser-resource-data-container)

(clojure.core/declare deser-function)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-connector-definition-version)

(clojure.core/declare deser-local-volume-resource-data)

(clojure.core/declare deser-secrets-manager-secret-resource-data)

(clojure.core/declare deser-function-execution-config)

(clojure.core/declare deser-device)

(clojure.core/declare deser-logger-component)

(clojure.core/declare deser-function-default-config)

(clojure.core/declare deser-resource-access-policy)

(clojure.core/declare deser-local-device-resource-data)

(clojure.core/declare deser-map-of-string)

(clojure.core/declare deser-logger)

(clojure.core/declare deser-deployments)

(clojure.core/defn- deser-device-definition-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "Devices") (clojure.core/assoc :devices (deser-list-of-device (input "Devices")))))

(clojure.core/defn- deser-list-of-connector [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-connector coll))) input))

(clojure.core/defn- deser-group-certificate-authority-properties [input] (clojure.core/cond-> {} (clojure.core/contains? input "GroupCertificateAuthorityArn") (clojure.core/assoc :group-certificate-authority-arn (deser-string (input "GroupCertificateAuthorityArn"))) (clojure.core/contains? input "GroupCertificateAuthorityId") (clojure.core/assoc :group-certificate-authority-id (deser-string (input "GroupCertificateAuthorityId")))))

(clojure.core/defn- deser-definition-information [input] (clojure.core/cond-> {} (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (input "CreationTimestamp"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (input "LastUpdatedTimestamp"))) (clojure.core/contains? input "LatestVersion") (clojure.core/assoc :latest-version (deser-string (input "LatestVersion"))) (clojure.core/contains? input "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (input "LatestVersionArn"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name")))))

(clojure.core/defn- deser-deployment [input] (clojure.core/cond-> {} (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-string (input "CreatedAt"))) (clojure.core/contains? input "DeploymentArn") (clojure.core/assoc :deployment-arn (deser-string (input "DeploymentArn"))) (clojure.core/contains? input "DeploymentId") (clojure.core/assoc :deployment-id (deser-string (input "DeploymentId"))) (clojure.core/contains? input "DeploymentType") (clojure.core/assoc :deployment-type (deser-deployment-type (input "DeploymentType"))) (clojure.core/contains? input "GroupArn") (clojure.core/assoc :group-arn (deser-string (input "GroupArn")))))

(clojure.core/defn- deser-deployment-type [input] (clojure.core/get {"NewDeployment" :new-deployment, "Redeployment" :redeployment, "ResetDeployment" :reset-deployment, "ForceResetDeployment" :force-reset-deployment} input))

(clojure.core/defn- deser-connector [input] (clojure.core/cond-> {} (clojure.core/contains? input "ConnectorArn") (clojure.core/assoc :connector-arn (deser-string (input "ConnectorArn"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "Parameters") (clojure.core/assoc :parameters (deser-map-of-string (input "Parameters")))))

(clojure.core/defn- deser-logger-level [input] (clojure.core/get {"DEBUG" :debug, "INFO" :info, "WARN" :warn, "ERROR" :error, "FATAL" :fatal} input))

(clojure.core/defn- deser-encoding-type [input] (clojure.core/get {"binary" :binary, "json" :json} input))

(clojure.core/defn- deser-connectivity-info [input] (clojure.core/cond-> {} (clojure.core/contains? input "HostAddress") (clojure.core/assoc :host-address (deser-string (input "HostAddress"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "Metadata") (clojure.core/assoc :metadata (deser-string (input "Metadata"))) (clojure.core/contains? input "PortNumber") (clojure.core/assoc :port-number (deser-integer (input "PortNumber")))))

(clojure.core/defn- deser-permission [input] (clojure.core/get {"ro" :ro, "rw" :rw} input))

(clojure.core/defn- deser-list-of-group-information [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-group-information coll))) input))

(clojure.core/defn- deser-logger-type [input] (clojure.core/get {"FileSystem" :file-system, "AWSCloudWatch" :aws-cloud-watch} input))

(clojure.core/defn- deser-list-of-subscription [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subscription coll))) input))

(clojure.core/defn- deser-function-run-as-config [input] (clojure.core/cond-> {} (clojure.core/contains? input "Gid") (clojure.core/assoc :gid (deser-integer (input "Gid"))) (clojure.core/contains? input "Uid") (clojure.core/assoc :uid (deser-integer (input "Uid")))))

(clojure.core/defn- deser-string [input] input)

(clojure.core/defn- deser-function-definition-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "DefaultConfig") (clojure.core/assoc :default-config (deser-function-default-config (input "DefaultConfig"))) (clojure.core/contains? input "Functions") (clojure.core/assoc :functions (deser-list-of-function (input "Functions")))))

(clojure.core/defn- deser-logger-definition-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "Loggers") (clojure.core/assoc :loggers (deser-list-of-logger (input "Loggers")))))

(clojure.core/defn- deser-list-of-group-certificate-authority-properties [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-group-certificate-authority-properties coll))) input))

(clojure.core/defn- deser-bulk-deployment [input] (clojure.core/cond-> {} (clojure.core/contains? input "BulkDeploymentArn") (clojure.core/assoc :bulk-deployment-arn (deser-string (input "BulkDeploymentArn"))) (clojure.core/contains? input "BulkDeploymentId") (clojure.core/assoc :bulk-deployment-id (deser-string (input "BulkDeploymentId"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-string (input "CreatedAt")))))

(clojure.core/defn- deser-list-of-device [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-device coll))) input))

(clojure.core/defn- deser-list-of-core [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-core coll))) input))

(clojure.core/defn- deser-version-information [input] (clojure.core/cond-> {} (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (input "CreationTimestamp"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "Version") (clojure.core/assoc :version (deser-string (input "Version")))))

(clojure.core/defn- deser-bulk-deployments [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-bulk-deployment coll))) input))

(clojure.core/defn- deser-s-3-machine-learning-model-resource-data [input] (clojure.core/cond-> {} (clojure.core/contains? input "DestinationPath") (clojure.core/assoc :destination-path (deser-string (input "DestinationPath"))) (clojure.core/contains? input "S3Uri") (clojure.core/assoc :s-3-uri (deser-string (input "S3Uri")))))

(clojure.core/defn- deser-group-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "ConnectorDefinitionVersionArn") (clojure.core/assoc :connector-definition-version-arn (deser-string (input "ConnectorDefinitionVersionArn"))) (clojure.core/contains? input "CoreDefinitionVersionArn") (clojure.core/assoc :core-definition-version-arn (deser-string (input "CoreDefinitionVersionArn"))) (clojure.core/contains? input "DeviceDefinitionVersionArn") (clojure.core/assoc :device-definition-version-arn (deser-string (input "DeviceDefinitionVersionArn"))) (clojure.core/contains? input "FunctionDefinitionVersionArn") (clojure.core/assoc :function-definition-version-arn (deser-string (input "FunctionDefinitionVersionArn"))) (clojure.core/contains? input "LoggerDefinitionVersionArn") (clojure.core/assoc :logger-definition-version-arn (deser-string (input "LoggerDefinitionVersionArn"))) (clojure.core/contains? input "ResourceDefinitionVersionArn") (clojure.core/assoc :resource-definition-version-arn (deser-string (input "ResourceDefinitionVersionArn"))) (clojure.core/contains? input "SubscriptionDefinitionVersionArn") (clojure.core/assoc :subscription-definition-version-arn (deser-string (input "SubscriptionDefinitionVersionArn")))))

(clojure.core/defn- deser-group-information [input] (clojure.core/cond-> {} (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (input "CreationTimestamp"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (input "LastUpdatedTimestamp"))) (clojure.core/contains? input "LatestVersion") (clojure.core/assoc :latest-version (deser-string (input "LatestVersion"))) (clojure.core/contains? input "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (input "LatestVersionArn"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name")))))

(clojure.core/defn- deser-error-detail [input] (clojure.core/cond-> {} (clojure.core/contains? input "DetailedErrorCode") (clojure.core/assoc :detailed-error-code (deser-string (input "DetailedErrorCode"))) (clojure.core/contains? input "DetailedErrorMessage") (clojure.core/assoc :detailed-error-message (deser-string (input "DetailedErrorMessage")))))

(clojure.core/defn- deser-list-of-resource [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-resource coll))) input))

(clojure.core/defn- deser-list-of-string [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-boolean [input] input)

(clojure.core/defn- deser-list-of-version-information [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-version-information coll))) input))

(clojure.core/defn- deser-resource-definition-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "Resources") (clojure.core/assoc :resources (deser-list-of-resource (input "Resources")))))

(clojure.core/defn- deser-list-of-function [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-function coll))) input))

(clojure.core/defn- deser-core-definition-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "Cores") (clojure.core/assoc :cores (deser-list-of-core (input "Cores")))))

(clojure.core/defn- deser-function-default-execution-config [input] (clojure.core/cond-> {} (clojure.core/contains? input "IsolationMode") (clojure.core/assoc :isolation-mode (deser-function-isolation-mode (input "IsolationMode")))))

(clojure.core/defn- deser-subscription-definition-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "Subscriptions") (clojure.core/assoc :subscriptions (deser-list-of-subscription (input "Subscriptions")))))

(clojure.core/defn- deser-list-of-logger [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-logger coll))) input))

(clojure.core/defn- deser-bulk-deployment-results [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-bulk-deployment-result coll))) input))

(clojure.core/defn- deser-list-of-resource-access-policy [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-resource-access-policy coll))) input))

(clojure.core/defn- deser-sage-maker-machine-learning-model-resource-data [input] (clojure.core/cond-> {} (clojure.core/contains? input "DestinationPath") (clojure.core/assoc :destination-path (deser-string (input "DestinationPath"))) (clojure.core/contains? input "SageMakerJobArn") (clojure.core/assoc :sage-maker-job-arn (deser-string (input "SageMakerJobArn")))))

(clojure.core/defn- deser-function-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "EncodingType") (clojure.core/assoc :encoding-type (deser-encoding-type (input "EncodingType"))) (clojure.core/contains? input "Environment") (clojure.core/assoc :environment (deser-function-configuration-environment (input "Environment"))) (clojure.core/contains? input "ExecArgs") (clojure.core/assoc :exec-args (deser-string (input "ExecArgs"))) (clojure.core/contains? input "Executable") (clojure.core/assoc :executable (deser-string (input "Executable"))) (clojure.core/contains? input "MemorySize") (clojure.core/assoc :memory-size (deser-integer (input "MemorySize"))) (clojure.core/contains? input "Pinned") (clojure.core/assoc :pinned (deser-boolean (input "Pinned"))) (clojure.core/contains? input "Timeout") (clojure.core/assoc :timeout (deser-integer (input "Timeout")))))

(clojure.core/defn- deser-bulk-deployment-status [input] (clojure.core/get {"Initializing" :initializing, "Running" :running, "Completed" :completed, "Stopping" :stopping, "Stopped" :stopped, "Failed" :failed} input))

(clojure.core/defn- deser-function-configuration-environment [input] (clojure.core/cond-> {} (clojure.core/contains? input "AccessSysfs") (clojure.core/assoc :access-sysfs (deser-boolean (input "AccessSysfs"))) (clojure.core/contains? input "Execution") (clojure.core/assoc :execution (deser-function-execution-config (input "Execution"))) (clojure.core/contains? input "ResourceAccessPolicies") (clojure.core/assoc :resource-access-policies (deser-list-of-resource-access-policy (input "ResourceAccessPolicies"))) (clojure.core/contains? input "Variables") (clojure.core/assoc :variables (deser-map-of-string (input "Variables")))))

(clojure.core/defn- deser-error-details [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-error-detail coll))) input))

(clojure.core/defn- deser-bulk-deployment-metrics [input] (clojure.core/cond-> {} (clojure.core/contains? input "InvalidInputRecords") (clojure.core/assoc :invalid-input-records (deser-integer (input "InvalidInputRecords"))) (clojure.core/contains? input "RecordsProcessed") (clojure.core/assoc :records-processed (deser-integer (input "RecordsProcessed"))) (clojure.core/contains? input "RetryAttempts") (clojure.core/assoc :retry-attempts (deser-integer (input "RetryAttempts")))))

(clojure.core/defn- deser-subscription [input] (clojure.core/cond-> {} (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "Source") (clojure.core/assoc :source (deser-string (input "Source"))) (clojure.core/contains? input "Subject") (clojure.core/assoc :subject (deser-string (input "Subject"))) (clojure.core/contains? input "Target") (clojure.core/assoc :target (deser-string (input "Target")))))

(clojure.core/defn- deser-list-of-connectivity-info [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-connectivity-info coll))) input))

(clojure.core/defn- deser-core [input] (clojure.core/cond-> {} (clojure.core/contains? input "CertificateArn") (clojure.core/assoc :certificate-arn (deser-string (input "CertificateArn"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "SyncShadow") (clojure.core/assoc :sync-shadow (deser-boolean (input "SyncShadow"))) (clojure.core/contains? input "ThingArn") (clojure.core/assoc :thing-arn (deser-string (input "ThingArn")))))

(clojure.core/defn- deser-list-of-definition-information [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-definition-information coll))) input))

(clojure.core/defn- deser-resource [input] (clojure.core/cond-> {} (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "ResourceDataContainer") (clojure.core/assoc :resource-data-container (deser-resource-data-container (input "ResourceDataContainer")))))

(clojure.core/defn- deser-group-owner-setting [input] (clojure.core/cond-> {} (clojure.core/contains? input "AutoAddGroupOwner") (clojure.core/assoc :auto-add-group-owner (deser-boolean (input "AutoAddGroupOwner"))) (clojure.core/contains? input "GroupOwner") (clojure.core/assoc :group-owner (deser-string (input "GroupOwner")))))

(clojure.core/defn- deser-bulk-deployment-result [input] (clojure.core/cond-> {} (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-string (input "CreatedAt"))) (clojure.core/contains? input "DeploymentArn") (clojure.core/assoc :deployment-arn (deser-string (input "DeploymentArn"))) (clojure.core/contains? input "DeploymentId") (clojure.core/assoc :deployment-id (deser-string (input "DeploymentId"))) (clojure.core/contains? input "DeploymentStatus") (clojure.core/assoc :deployment-status (deser-string (input "DeploymentStatus"))) (clojure.core/contains? input "DeploymentType") (clojure.core/assoc :deployment-type (deser-deployment-type (input "DeploymentType"))) (clojure.core/contains? input "ErrorDetails") (clojure.core/assoc :error-details (deser-error-details (input "ErrorDetails"))) (clojure.core/contains? input "ErrorMessage") (clojure.core/assoc :error-message (deser-string (input "ErrorMessage"))) (clojure.core/contains? input "GroupArn") (clojure.core/assoc :group-arn (deser-string (input "GroupArn")))))

(clojure.core/defn- deser-function-isolation-mode [input] (clojure.core/get {"GreengrassContainer" :greengrass-container, "NoContainer" :no-container} input))

(clojure.core/defn- deser-resource-data-container [input] (clojure.core/cond-> {} (clojure.core/contains? input "LocalDeviceResourceData") (clojure.core/assoc :local-device-resource-data (deser-local-device-resource-data (input "LocalDeviceResourceData"))) (clojure.core/contains? input "LocalVolumeResourceData") (clojure.core/assoc :local-volume-resource-data (deser-local-volume-resource-data (input "LocalVolumeResourceData"))) (clojure.core/contains? input "S3MachineLearningModelResourceData") (clojure.core/assoc :s-3-machine-learning-model-resource-data (deser-s-3-machine-learning-model-resource-data (input "S3MachineLearningModelResourceData"))) (clojure.core/contains? input "SageMakerMachineLearningModelResourceData") (clojure.core/assoc :sage-maker-machine-learning-model-resource-data (deser-sage-maker-machine-learning-model-resource-data (input "SageMakerMachineLearningModelResourceData"))) (clojure.core/contains? input "SecretsManagerSecretResourceData") (clojure.core/assoc :secrets-manager-secret-resource-data (deser-secrets-manager-secret-resource-data (input "SecretsManagerSecretResourceData")))))

(clojure.core/defn- deser-function [input] (clojure.core/cond-> {} (clojure.core/contains? input "FunctionArn") (clojure.core/assoc :function-arn (deser-string (input "FunctionArn"))) (clojure.core/contains? input "FunctionConfiguration") (clojure.core/assoc :function-configuration (deser-function-configuration (input "FunctionConfiguration"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id")))))

(clojure.core/defn- deser-integer [input] input)

(clojure.core/defn- deser-connector-definition-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "Connectors") (clojure.core/assoc :connectors (deser-list-of-connector (input "Connectors")))))

(clojure.core/defn- deser-local-volume-resource-data [input] (clojure.core/cond-> {} (clojure.core/contains? input "DestinationPath") (clojure.core/assoc :destination-path (deser-string (input "DestinationPath"))) (clojure.core/contains? input "GroupOwnerSetting") (clojure.core/assoc :group-owner-setting (deser-group-owner-setting (input "GroupOwnerSetting"))) (clojure.core/contains? input "SourcePath") (clojure.core/assoc :source-path (deser-string (input "SourcePath")))))

(clojure.core/defn- deser-secrets-manager-secret-resource-data [input] (clojure.core/cond-> {} (clojure.core/contains? input "ARN") (clojure.core/assoc :arn (deser-string (input "ARN"))) (clojure.core/contains? input "AdditionalStagingLabelsToDownload") (clojure.core/assoc :additional-staging-labels-to-download (deser-list-of-string (input "AdditionalStagingLabelsToDownload")))))

(clojure.core/defn- deser-function-execution-config [input] (clojure.core/cond-> {} (clojure.core/contains? input "IsolationMode") (clojure.core/assoc :isolation-mode (deser-function-isolation-mode (input "IsolationMode"))) (clojure.core/contains? input "RunAs") (clojure.core/assoc :run-as (deser-function-run-as-config (input "RunAs")))))

(clojure.core/defn- deser-device [input] (clojure.core/cond-> {} (clojure.core/contains? input "CertificateArn") (clojure.core/assoc :certificate-arn (deser-string (input "CertificateArn"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "SyncShadow") (clojure.core/assoc :sync-shadow (deser-boolean (input "SyncShadow"))) (clojure.core/contains? input "ThingArn") (clojure.core/assoc :thing-arn (deser-string (input "ThingArn")))))

(clojure.core/defn- deser-logger-component [input] (clojure.core/get {"GreengrassSystem" :greengrass-system, "Lambda" :lambda} input))

(clojure.core/defn- deser-function-default-config [input] (clojure.core/cond-> {} (clojure.core/contains? input "Execution") (clojure.core/assoc :execution (deser-function-default-execution-config (input "Execution")))))

(clojure.core/defn- deser-resource-access-policy [input] (clojure.core/cond-> {} (clojure.core/contains? input "Permission") (clojure.core/assoc :permission (deser-permission (input "Permission"))) (clojure.core/contains? input "ResourceId") (clojure.core/assoc :resource-id (deser-string (input "ResourceId")))))

(clojure.core/defn- deser-local-device-resource-data [input] (clojure.core/cond-> {} (clojure.core/contains? input "GroupOwnerSetting") (clojure.core/assoc :group-owner-setting (deser-group-owner-setting (input "GroupOwnerSetting"))) (clojure.core/contains? input "SourcePath") (clojure.core/assoc :source-path (deser-string (input "SourcePath")))))

(clojure.core/defn- deser-map-of-string [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-string v)])) input))

(clojure.core/defn- deser-logger [input] (clojure.core/cond-> {} (clojure.core/contains? input "Component") (clojure.core/assoc :component (deser-logger-component (input "Component"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "Level") (clojure.core/assoc :level (deser-logger-level (input "Level"))) (clojure.core/contains? input "Space") (clojure.core/assoc :space (deser-integer (input "Space"))) (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-logger-type (input "Type")))))

(clojure.core/defn- deser-deployments [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-deployment coll))) input))

(clojure.core/defn- response-update-resource-definition-response ([input] (response-update-resource-definition-response nil input)) ([resultWrapper183062 input] (clojure.core/let [rawinput183061 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183063 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-get-core-definition-version-response ([input] (response-get-core-definition-version-response nil input)) ([resultWrapper183065 input] (clojure.core/let [rawinput183064 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183066 {"Arn" (rawinput183064 "Arn"), "CreationTimestamp" (rawinput183064 "CreationTimestamp"), "Definition" (rawinput183064 "Definition"), "Id" (rawinput183064 "Id"), "NextToken" (rawinput183064 "NextToken"), "Version" (rawinput183064 "Version")}] (clojure.core/cond-> {} (letvar183066 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183066 ["Arn"]))) (letvar183066 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183066 ["CreationTimestamp"]))) (letvar183066 "Definition") (clojure.core/assoc :definition (deser-core-definition-version (clojure.core/get-in letvar183066 ["Definition"]))) (letvar183066 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183066 ["Id"]))) (letvar183066 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183066 ["NextToken"]))) (letvar183066 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183066 ["Version"])))))))

(clojure.core/defn- response-internal-server-error-exception ([input] (response-internal-server-error-exception nil input)) ([resultWrapper183068 input] (clojure.core/let [rawinput183067 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183069 {"ErrorDetails" (rawinput183067 "ErrorDetails"), "Message" (rawinput183067 "Message")}] (clojure.core/cond-> {} (letvar183069 "ErrorDetails") (clojure.core/assoc :error-details (deser-error-details (clojure.core/get-in letvar183069 ["ErrorDetails"]))) (letvar183069 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar183069 ["Message"])))))))

(clojure.core/defn- response-create-logger-definition-version-response ([input] (response-create-logger-definition-version-response nil input)) ([resultWrapper183071 input] (clojure.core/let [rawinput183070 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183072 {"Arn" (rawinput183070 "Arn"), "CreationTimestamp" (rawinput183070 "CreationTimestamp"), "Id" (rawinput183070 "Id"), "Version" (rawinput183070 "Version")}] (clojure.core/cond-> {} (letvar183072 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183072 ["Arn"]))) (letvar183072 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183072 ["CreationTimestamp"]))) (letvar183072 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183072 ["Id"]))) (letvar183072 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183072 ["Version"])))))))

(clojure.core/defn- response-delete-connector-definition-response ([input] (response-delete-connector-definition-response nil input)) ([resultWrapper183074 input] (clojure.core/let [rawinput183073 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183075 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-device-definition-version-response ([input] (response-create-device-definition-version-response nil input)) ([resultWrapper183077 input] (clojure.core/let [rawinput183076 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183078 {"Arn" (rawinput183076 "Arn"), "CreationTimestamp" (rawinput183076 "CreationTimestamp"), "Id" (rawinput183076 "Id"), "Version" (rawinput183076 "Version")}] (clojure.core/cond-> {} (letvar183078 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183078 ["Arn"]))) (letvar183078 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183078 ["CreationTimestamp"]))) (letvar183078 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183078 ["Id"]))) (letvar183078 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183078 ["Version"])))))))

(clojure.core/defn- response-get-function-definition-version-response ([input] (response-get-function-definition-version-response nil input)) ([resultWrapper183080 input] (clojure.core/let [rawinput183079 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183081 {"Arn" (rawinput183079 "Arn"), "CreationTimestamp" (rawinput183079 "CreationTimestamp"), "Definition" (rawinput183079 "Definition"), "Id" (rawinput183079 "Id"), "NextToken" (rawinput183079 "NextToken"), "Version" (rawinput183079 "Version")}] (clojure.core/cond-> {} (letvar183081 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183081 ["Arn"]))) (letvar183081 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183081 ["CreationTimestamp"]))) (letvar183081 "Definition") (clojure.core/assoc :definition (deser-function-definition-version (clojure.core/get-in letvar183081 ["Definition"]))) (letvar183081 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183081 ["Id"]))) (letvar183081 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183081 ["NextToken"]))) (letvar183081 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183081 ["Version"])))))))

(clojure.core/defn- response-delete-logger-definition-response ([input] (response-delete-logger-definition-response nil input)) ([resultWrapper183083 input] (clojure.core/let [rawinput183082 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183084 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-get-deployment-status-response ([input] (response-get-deployment-status-response nil input)) ([resultWrapper183086 input] (clojure.core/let [rawinput183085 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183087 {"DeploymentStatus" (rawinput183085 "DeploymentStatus"), "DeploymentType" (rawinput183085 "DeploymentType"), "ErrorDetails" (rawinput183085 "ErrorDetails"), "ErrorMessage" (rawinput183085 "ErrorMessage"), "UpdatedAt" (rawinput183085 "UpdatedAt")}] (clojure.core/cond-> {} (letvar183087 "DeploymentStatus") (clojure.core/assoc :deployment-status (deser-string (clojure.core/get-in letvar183087 ["DeploymentStatus"]))) (letvar183087 "DeploymentType") (clojure.core/assoc :deployment-type (deser-deployment-type (clojure.core/get-in letvar183087 ["DeploymentType"]))) (letvar183087 "ErrorDetails") (clojure.core/assoc :error-details (deser-error-details (clojure.core/get-in letvar183087 ["ErrorDetails"]))) (letvar183087 "ErrorMessage") (clojure.core/assoc :error-message (deser-string (clojure.core/get-in letvar183087 ["ErrorMessage"]))) (letvar183087 "UpdatedAt") (clojure.core/assoc :updated-at (deser-string (clojure.core/get-in letvar183087 ["UpdatedAt"])))))))

(clojure.core/defn- response-list-function-definition-versions-response ([input] (response-list-function-definition-versions-response nil input)) ([resultWrapper183089 input] (clojure.core/let [rawinput183088 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183090 {"NextToken" (rawinput183088 "NextToken"), "Versions" (rawinput183088 "Versions")}] (clojure.core/cond-> {} (letvar183090 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183090 ["NextToken"]))) (letvar183090 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183090 ["Versions"])))))))

(clojure.core/defn- response-bad-request-exception ([input] (response-bad-request-exception nil input)) ([resultWrapper183092 input] (clojure.core/let [rawinput183091 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183093 {"ErrorDetails" (rawinput183091 "ErrorDetails"), "Message" (rawinput183091 "Message")}] (clojure.core/cond-> {} (letvar183093 "ErrorDetails") (clojure.core/assoc :error-details (deser-error-details (clojure.core/get-in letvar183093 ["ErrorDetails"]))) (letvar183093 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar183093 ["Message"])))))))

(clojure.core/defn- response-create-resource-definition-response ([input] (response-create-resource-definition-response nil input)) ([resultWrapper183095 input] (clojure.core/let [rawinput183094 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183096 {"Arn" (rawinput183094 "Arn"), "CreationTimestamp" (rawinput183094 "CreationTimestamp"), "Id" (rawinput183094 "Id"), "LastUpdatedTimestamp" (rawinput183094 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183094 "LatestVersion"), "LatestVersionArn" (rawinput183094 "LatestVersionArn"), "Name" (rawinput183094 "Name")}] (clojure.core/cond-> {} (letvar183096 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183096 ["Arn"]))) (letvar183096 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183096 ["CreationTimestamp"]))) (letvar183096 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183096 ["Id"]))) (letvar183096 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183096 ["LastUpdatedTimestamp"]))) (letvar183096 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183096 ["LatestVersion"]))) (letvar183096 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183096 ["LatestVersionArn"]))) (letvar183096 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183096 ["Name"])))))))

(clojure.core/defn- response-list-resource-definition-versions-response ([input] (response-list-resource-definition-versions-response nil input)) ([resultWrapper183098 input] (clojure.core/let [rawinput183097 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183099 {"NextToken" (rawinput183097 "NextToken"), "Versions" (rawinput183097 "Versions")}] (clojure.core/cond-> {} (letvar183099 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183099 ["NextToken"]))) (letvar183099 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183099 ["Versions"])))))))

(clojure.core/defn- response-update-logger-definition-response ([input] (response-update-logger-definition-response nil input)) ([resultWrapper183101 input] (clojure.core/let [rawinput183100 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183102 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-subscription-definition-response ([input] (response-create-subscription-definition-response nil input)) ([resultWrapper183104 input] (clojure.core/let [rawinput183103 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183105 {"Arn" (rawinput183103 "Arn"), "CreationTimestamp" (rawinput183103 "CreationTimestamp"), "Id" (rawinput183103 "Id"), "LastUpdatedTimestamp" (rawinput183103 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183103 "LatestVersion"), "LatestVersionArn" (rawinput183103 "LatestVersionArn"), "Name" (rawinput183103 "Name")}] (clojure.core/cond-> {} (letvar183105 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183105 ["Arn"]))) (letvar183105 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183105 ["CreationTimestamp"]))) (letvar183105 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183105 ["Id"]))) (letvar183105 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183105 ["LastUpdatedTimestamp"]))) (letvar183105 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183105 ["LatestVersion"]))) (letvar183105 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183105 ["LatestVersionArn"]))) (letvar183105 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183105 ["Name"])))))))

(clojure.core/defn- response-list-connector-definitions-response ([input] (response-list-connector-definitions-response nil input)) ([resultWrapper183107 input] (clojure.core/let [rawinput183106 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183108 {"Definitions" (rawinput183106 "Definitions"), "NextToken" (rawinput183106 "NextToken")}] (clojure.core/cond-> {} (letvar183108 "Definitions") (clojure.core/assoc :definitions (deser-list-of-definition-information (clojure.core/get-in letvar183108 ["Definitions"]))) (letvar183108 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183108 ["NextToken"])))))))

(clojure.core/defn- response-list-function-definitions-response ([input] (response-list-function-definitions-response nil input)) ([resultWrapper183110 input] (clojure.core/let [rawinput183109 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183111 {"Definitions" (rawinput183109 "Definitions"), "NextToken" (rawinput183109 "NextToken")}] (clojure.core/cond-> {} (letvar183111 "Definitions") (clojure.core/assoc :definitions (deser-list-of-definition-information (clojure.core/get-in letvar183111 ["Definitions"]))) (letvar183111 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183111 ["NextToken"])))))))

(clojure.core/defn- response-get-device-definition-response ([input] (response-get-device-definition-response nil input)) ([resultWrapper183113 input] (clojure.core/let [rawinput183112 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183114 {"Arn" (rawinput183112 "Arn"), "CreationTimestamp" (rawinput183112 "CreationTimestamp"), "Id" (rawinput183112 "Id"), "LastUpdatedTimestamp" (rawinput183112 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183112 "LatestVersion"), "LatestVersionArn" (rawinput183112 "LatestVersionArn"), "Name" (rawinput183112 "Name")}] (clojure.core/cond-> {} (letvar183114 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183114 ["Arn"]))) (letvar183114 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183114 ["CreationTimestamp"]))) (letvar183114 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183114 ["Id"]))) (letvar183114 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183114 ["LastUpdatedTimestamp"]))) (letvar183114 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183114 ["LatestVersion"]))) (letvar183114 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183114 ["LatestVersionArn"]))) (letvar183114 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183114 ["Name"])))))))

(clojure.core/defn- response-create-connector-definition-version-response ([input] (response-create-connector-definition-version-response nil input)) ([resultWrapper183116 input] (clojure.core/let [rawinput183115 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183117 {"Arn" (rawinput183115 "Arn"), "CreationTimestamp" (rawinput183115 "CreationTimestamp"), "Id" (rawinput183115 "Id"), "Version" (rawinput183115 "Version")}] (clojure.core/cond-> {} (letvar183117 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183117 ["Arn"]))) (letvar183117 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183117 ["CreationTimestamp"]))) (letvar183117 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183117 ["Id"]))) (letvar183117 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183117 ["Version"])))))))

(clojure.core/defn- response-associate-service-role-to-account-response ([input] (response-associate-service-role-to-account-response nil input)) ([resultWrapper183119 input] (clojure.core/let [rawinput183118 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183120 {"AssociatedAt" (rawinput183118 "AssociatedAt")}] (clojure.core/cond-> {} (letvar183120 "AssociatedAt") (clojure.core/assoc :associated-at (deser-string (clojure.core/get-in letvar183120 ["AssociatedAt"])))))))

(clojure.core/defn- response-get-associated-role-response ([input] (response-get-associated-role-response nil input)) ([resultWrapper183122 input] (clojure.core/let [rawinput183121 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183123 {"AssociatedAt" (rawinput183121 "AssociatedAt"), "RoleArn" (rawinput183121 "RoleArn")}] (clojure.core/cond-> {} (letvar183123 "AssociatedAt") (clojure.core/assoc :associated-at (deser-string (clojure.core/get-in letvar183123 ["AssociatedAt"]))) (letvar183123 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar183123 ["RoleArn"])))))))

(clojure.core/defn- response-get-resource-definition-response ([input] (response-get-resource-definition-response nil input)) ([resultWrapper183125 input] (clojure.core/let [rawinput183124 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183126 {"Arn" (rawinput183124 "Arn"), "CreationTimestamp" (rawinput183124 "CreationTimestamp"), "Id" (rawinput183124 "Id"), "LastUpdatedTimestamp" (rawinput183124 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183124 "LatestVersion"), "LatestVersionArn" (rawinput183124 "LatestVersionArn"), "Name" (rawinput183124 "Name")}] (clojure.core/cond-> {} (letvar183126 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183126 ["Arn"]))) (letvar183126 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183126 ["CreationTimestamp"]))) (letvar183126 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183126 ["Id"]))) (letvar183126 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183126 ["LastUpdatedTimestamp"]))) (letvar183126 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183126 ["LatestVersion"]))) (letvar183126 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183126 ["LatestVersionArn"]))) (letvar183126 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183126 ["Name"])))))))

(clojure.core/defn- response-update-function-definition-response ([input] (response-update-function-definition-response nil input)) ([resultWrapper183128 input] (clojure.core/let [rawinput183127 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183129 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-get-group-certificate-authority-response ([input] (response-get-group-certificate-authority-response nil input)) ([resultWrapper183131 input] (clojure.core/let [rawinput183130 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183132 {"GroupCertificateAuthorityArn" (rawinput183130 "GroupCertificateAuthorityArn"), "GroupCertificateAuthorityId" (rawinput183130 "GroupCertificateAuthorityId"), "PemEncodedCertificate" (rawinput183130 "PemEncodedCertificate")}] (clojure.core/cond-> {} (letvar183132 "GroupCertificateAuthorityArn") (clojure.core/assoc :group-certificate-authority-arn (deser-string (clojure.core/get-in letvar183132 ["GroupCertificateAuthorityArn"]))) (letvar183132 "GroupCertificateAuthorityId") (clojure.core/assoc :group-certificate-authority-id (deser-string (clojure.core/get-in letvar183132 ["GroupCertificateAuthorityId"]))) (letvar183132 "PemEncodedCertificate") (clojure.core/assoc :pem-encoded-certificate (deser-string (clojure.core/get-in letvar183132 ["PemEncodedCertificate"])))))))

(clojure.core/defn- response-list-core-definitions-response ([input] (response-list-core-definitions-response nil input)) ([resultWrapper183134 input] (clojure.core/let [rawinput183133 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183135 {"Definitions" (rawinput183133 "Definitions"), "NextToken" (rawinput183133 "NextToken")}] (clojure.core/cond-> {} (letvar183135 "Definitions") (clojure.core/assoc :definitions (deser-list-of-definition-information (clojure.core/get-in letvar183135 ["Definitions"]))) (letvar183135 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183135 ["NextToken"])))))))

(clojure.core/defn- response-disassociate-role-from-group-response ([input] (response-disassociate-role-from-group-response nil input)) ([resultWrapper183137 input] (clojure.core/let [rawinput183136 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183138 {"DisassociatedAt" (rawinput183136 "DisassociatedAt")}] (clojure.core/cond-> {} (letvar183138 "DisassociatedAt") (clojure.core/assoc :disassociated-at (deser-string (clojure.core/get-in letvar183138 ["DisassociatedAt"])))))))

(clojure.core/defn- response-list-device-definition-versions-response ([input] (response-list-device-definition-versions-response nil input)) ([resultWrapper183140 input] (clojure.core/let [rawinput183139 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183141 {"NextToken" (rawinput183139 "NextToken"), "Versions" (rawinput183139 "Versions")}] (clojure.core/cond-> {} (letvar183141 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183141 ["NextToken"]))) (letvar183141 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183141 ["Versions"])))))))

(clojure.core/defn- response-get-group-response ([input] (response-get-group-response nil input)) ([resultWrapper183143 input] (clojure.core/let [rawinput183142 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183144 {"Arn" (rawinput183142 "Arn"), "CreationTimestamp" (rawinput183142 "CreationTimestamp"), "Id" (rawinput183142 "Id"), "LastUpdatedTimestamp" (rawinput183142 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183142 "LatestVersion"), "LatestVersionArn" (rawinput183142 "LatestVersionArn"), "Name" (rawinput183142 "Name")}] (clojure.core/cond-> {} (letvar183144 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183144 ["Arn"]))) (letvar183144 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183144 ["CreationTimestamp"]))) (letvar183144 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183144 ["Id"]))) (letvar183144 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183144 ["LastUpdatedTimestamp"]))) (letvar183144 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183144 ["LatestVersion"]))) (letvar183144 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183144 ["LatestVersionArn"]))) (letvar183144 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183144 ["Name"])))))))

(clojure.core/defn- response-update-connector-definition-response ([input] (response-update-connector-definition-response nil input)) ([resultWrapper183146 input] (clojure.core/let [rawinput183145 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183147 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-list-resource-definitions-response ([input] (response-list-resource-definitions-response nil input)) ([resultWrapper183149 input] (clojure.core/let [rawinput183148 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183150 {"Definitions" (rawinput183148 "Definitions"), "NextToken" (rawinput183148 "NextToken")}] (clojure.core/cond-> {} (letvar183150 "Definitions") (clojure.core/assoc :definitions (deser-list-of-definition-information (clojure.core/get-in letvar183150 ["Definitions"]))) (letvar183150 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183150 ["NextToken"])))))))

(clojure.core/defn- response-update-group-response ([input] (response-update-group-response nil input)) ([resultWrapper183152 input] (clojure.core/let [rawinput183151 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183153 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-update-group-certificate-configuration-response ([input] (response-update-group-certificate-configuration-response nil input)) ([resultWrapper183155 input] (clojure.core/let [rawinput183154 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183156 {"CertificateAuthorityExpiryInMilliseconds" (rawinput183154 "CertificateAuthorityExpiryInMilliseconds"), "CertificateExpiryInMilliseconds" (rawinput183154 "CertificateExpiryInMilliseconds"), "GroupId" (rawinput183154 "GroupId")}] (clojure.core/cond-> {} (letvar183156 "CertificateAuthorityExpiryInMilliseconds") (clojure.core/assoc :certificate-authority-expiry-in-milliseconds (deser-string (clojure.core/get-in letvar183156 ["CertificateAuthorityExpiryInMilliseconds"]))) (letvar183156 "CertificateExpiryInMilliseconds") (clojure.core/assoc :certificate-expiry-in-milliseconds (deser-string (clojure.core/get-in letvar183156 ["CertificateExpiryInMilliseconds"]))) (letvar183156 "GroupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar183156 ["GroupId"])))))))

(clojure.core/defn- response-list-groups-response ([input] (response-list-groups-response nil input)) ([resultWrapper183158 input] (clojure.core/let [rawinput183157 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183159 {"Groups" (rawinput183157 "Groups"), "NextToken" (rawinput183157 "NextToken")}] (clojure.core/cond-> {} (letvar183159 "Groups") (clojure.core/assoc :groups (deser-list-of-group-information (clojure.core/get-in letvar183159 ["Groups"]))) (letvar183159 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183159 ["NextToken"])))))))

(clojure.core/defn- response-create-subscription-definition-version-response ([input] (response-create-subscription-definition-version-response nil input)) ([resultWrapper183161 input] (clojure.core/let [rawinput183160 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183162 {"Arn" (rawinput183160 "Arn"), "CreationTimestamp" (rawinput183160 "CreationTimestamp"), "Id" (rawinput183160 "Id"), "Version" (rawinput183160 "Version")}] (clojure.core/cond-> {} (letvar183162 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183162 ["Arn"]))) (letvar183162 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183162 ["CreationTimestamp"]))) (letvar183162 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183162 ["Id"]))) (letvar183162 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183162 ["Version"])))))))

(clojure.core/defn- response-delete-group-response ([input] (response-delete-group-response nil input)) ([resultWrapper183164 input] (clojure.core/let [rawinput183163 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183165 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-associate-role-to-group-response ([input] (response-associate-role-to-group-response nil input)) ([resultWrapper183167 input] (clojure.core/let [rawinput183166 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183168 {"AssociatedAt" (rawinput183166 "AssociatedAt")}] (clojure.core/cond-> {} (letvar183168 "AssociatedAt") (clojure.core/assoc :associated-at (deser-string (clojure.core/get-in letvar183168 ["AssociatedAt"])))))))

(clojure.core/defn- response-get-connector-definition-version-response ([input] (response-get-connector-definition-version-response nil input)) ([resultWrapper183170 input] (clojure.core/let [rawinput183169 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183171 {"Arn" (rawinput183169 "Arn"), "CreationTimestamp" (rawinput183169 "CreationTimestamp"), "Definition" (rawinput183169 "Definition"), "Id" (rawinput183169 "Id"), "NextToken" (rawinput183169 "NextToken"), "Version" (rawinput183169 "Version")}] (clojure.core/cond-> {} (letvar183171 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183171 ["Arn"]))) (letvar183171 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183171 ["CreationTimestamp"]))) (letvar183171 "Definition") (clojure.core/assoc :definition (deser-connector-definition-version (clojure.core/get-in letvar183171 ["Definition"]))) (letvar183171 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183171 ["Id"]))) (letvar183171 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183171 ["NextToken"]))) (letvar183171 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183171 ["Version"])))))))

(clojure.core/defn- response-get-bulk-deployment-status-response ([input] (response-get-bulk-deployment-status-response nil input)) ([resultWrapper183173 input] (clojure.core/let [rawinput183172 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183174 {"BulkDeploymentMetrics" (rawinput183172 "BulkDeploymentMetrics"), "BulkDeploymentStatus" (rawinput183172 "BulkDeploymentStatus"), "CreatedAt" (rawinput183172 "CreatedAt"), "ErrorDetails" (rawinput183172 "ErrorDetails"), "ErrorMessage" (rawinput183172 "ErrorMessage")}] (clojure.core/cond-> {} (letvar183174 "BulkDeploymentMetrics") (clojure.core/assoc :bulk-deployment-metrics (deser-bulk-deployment-metrics (clojure.core/get-in letvar183174 ["BulkDeploymentMetrics"]))) (letvar183174 "BulkDeploymentStatus") (clojure.core/assoc :bulk-deployment-status (deser-bulk-deployment-status (clojure.core/get-in letvar183174 ["BulkDeploymentStatus"]))) (letvar183174 "CreatedAt") (clojure.core/assoc :created-at (deser-string (clojure.core/get-in letvar183174 ["CreatedAt"]))) (letvar183174 "ErrorDetails") (clojure.core/assoc :error-details (deser-error-details (clojure.core/get-in letvar183174 ["ErrorDetails"]))) (letvar183174 "ErrorMessage") (clojure.core/assoc :error-message (deser-string (clojure.core/get-in letvar183174 ["ErrorMessage"])))))))

(clojure.core/defn- response-get-core-definition-response ([input] (response-get-core-definition-response nil input)) ([resultWrapper183176 input] (clojure.core/let [rawinput183175 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183177 {"Arn" (rawinput183175 "Arn"), "CreationTimestamp" (rawinput183175 "CreationTimestamp"), "Id" (rawinput183175 "Id"), "LastUpdatedTimestamp" (rawinput183175 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183175 "LatestVersion"), "LatestVersionArn" (rawinput183175 "LatestVersionArn"), "Name" (rawinput183175 "Name")}] (clojure.core/cond-> {} (letvar183177 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183177 ["Arn"]))) (letvar183177 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183177 ["CreationTimestamp"]))) (letvar183177 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183177 ["Id"]))) (letvar183177 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183177 ["LastUpdatedTimestamp"]))) (letvar183177 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183177 ["LatestVersion"]))) (letvar183177 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183177 ["LatestVersionArn"]))) (letvar183177 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183177 ["Name"])))))))

(clojure.core/defn- response-get-logger-definition-version-response ([input] (response-get-logger-definition-version-response nil input)) ([resultWrapper183179 input] (clojure.core/let [rawinput183178 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183180 {"Arn" (rawinput183178 "Arn"), "CreationTimestamp" (rawinput183178 "CreationTimestamp"), "Definition" (rawinput183178 "Definition"), "Id" (rawinput183178 "Id"), "Version" (rawinput183178 "Version")}] (clojure.core/cond-> {} (letvar183180 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183180 ["Arn"]))) (letvar183180 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183180 ["CreationTimestamp"]))) (letvar183180 "Definition") (clojure.core/assoc :definition (deser-logger-definition-version (clojure.core/get-in letvar183180 ["Definition"]))) (letvar183180 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183180 ["Id"]))) (letvar183180 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183180 ["Version"])))))))

(clojure.core/defn- response-update-core-definition-response ([input] (response-update-core-definition-response nil input)) ([resultWrapper183182 input] (clojure.core/let [rawinput183181 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183183 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-update-device-definition-response ([input] (response-update-device-definition-response nil input)) ([resultWrapper183185 input] (clojure.core/let [rawinput183184 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183186 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-list-device-definitions-response ([input] (response-list-device-definitions-response nil input)) ([resultWrapper183188 input] (clojure.core/let [rawinput183187 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183189 {"Definitions" (rawinput183187 "Definitions"), "NextToken" (rawinput183187 "NextToken")}] (clojure.core/cond-> {} (letvar183189 "Definitions") (clojure.core/assoc :definitions (deser-list-of-definition-information (clojure.core/get-in letvar183189 ["Definitions"]))) (letvar183189 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183189 ["NextToken"])))))))

(clojure.core/defn- response-stop-bulk-deployment-response ([input] (response-stop-bulk-deployment-response nil input)) ([resultWrapper183191 input] (clojure.core/let [rawinput183190 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183192 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-device-definition-response ([input] (response-create-device-definition-response nil input)) ([resultWrapper183194 input] (clojure.core/let [rawinput183193 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183195 {"Arn" (rawinput183193 "Arn"), "CreationTimestamp" (rawinput183193 "CreationTimestamp"), "Id" (rawinput183193 "Id"), "LastUpdatedTimestamp" (rawinput183193 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183193 "LatestVersion"), "LatestVersionArn" (rawinput183193 "LatestVersionArn"), "Name" (rawinput183193 "Name")}] (clojure.core/cond-> {} (letvar183195 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183195 ["Arn"]))) (letvar183195 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183195 ["CreationTimestamp"]))) (letvar183195 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183195 ["Id"]))) (letvar183195 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183195 ["LastUpdatedTimestamp"]))) (letvar183195 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183195 ["LatestVersion"]))) (letvar183195 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183195 ["LatestVersionArn"]))) (letvar183195 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183195 ["Name"])))))))

(clojure.core/defn- response-list-connector-definition-versions-response ([input] (response-list-connector-definition-versions-response nil input)) ([resultWrapper183197 input] (clojure.core/let [rawinput183196 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183198 {"NextToken" (rawinput183196 "NextToken"), "Versions" (rawinput183196 "Versions")}] (clojure.core/cond-> {} (letvar183198 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183198 ["NextToken"]))) (letvar183198 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183198 ["Versions"])))))))

(clojure.core/defn- response-get-connector-definition-response ([input] (response-get-connector-definition-response nil input)) ([resultWrapper183200 input] (clojure.core/let [rawinput183199 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183201 {"Arn" (rawinput183199 "Arn"), "CreationTimestamp" (rawinput183199 "CreationTimestamp"), "Id" (rawinput183199 "Id"), "LastUpdatedTimestamp" (rawinput183199 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183199 "LatestVersion"), "LatestVersionArn" (rawinput183199 "LatestVersionArn"), "Name" (rawinput183199 "Name")}] (clojure.core/cond-> {} (letvar183201 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183201 ["Arn"]))) (letvar183201 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183201 ["CreationTimestamp"]))) (letvar183201 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183201 ["Id"]))) (letvar183201 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183201 ["LastUpdatedTimestamp"]))) (letvar183201 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183201 ["LatestVersion"]))) (letvar183201 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183201 ["LatestVersionArn"]))) (letvar183201 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183201 ["Name"])))))))

(clojure.core/defn- response-get-subscription-definition-version-response ([input] (response-get-subscription-definition-version-response nil input)) ([resultWrapper183203 input] (clojure.core/let [rawinput183202 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183204 {"Arn" (rawinput183202 "Arn"), "CreationTimestamp" (rawinput183202 "CreationTimestamp"), "Definition" (rawinput183202 "Definition"), "Id" (rawinput183202 "Id"), "NextToken" (rawinput183202 "NextToken"), "Version" (rawinput183202 "Version")}] (clojure.core/cond-> {} (letvar183204 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183204 ["Arn"]))) (letvar183204 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183204 ["CreationTimestamp"]))) (letvar183204 "Definition") (clojure.core/assoc :definition (deser-subscription-definition-version (clojure.core/get-in letvar183204 ["Definition"]))) (letvar183204 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183204 ["Id"]))) (letvar183204 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183204 ["NextToken"]))) (letvar183204 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183204 ["Version"])))))))

(clojure.core/defn- response-list-logger-definition-versions-response ([input] (response-list-logger-definition-versions-response nil input)) ([resultWrapper183206 input] (clojure.core/let [rawinput183205 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183207 {"NextToken" (rawinput183205 "NextToken"), "Versions" (rawinput183205 "Versions")}] (clojure.core/cond-> {} (letvar183207 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183207 ["NextToken"]))) (letvar183207 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183207 ["Versions"])))))))

(clojure.core/defn- response-list-logger-definitions-response ([input] (response-list-logger-definitions-response nil input)) ([resultWrapper183209 input] (clojure.core/let [rawinput183208 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183210 {"Definitions" (rawinput183208 "Definitions"), "NextToken" (rawinput183208 "NextToken")}] (clojure.core/cond-> {} (letvar183210 "Definitions") (clojure.core/assoc :definitions (deser-list-of-definition-information (clojure.core/get-in letvar183210 ["Definitions"]))) (letvar183210 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183210 ["NextToken"])))))))

(clojure.core/defn- response-get-service-role-for-account-response ([input] (response-get-service-role-for-account-response nil input)) ([resultWrapper183212 input] (clojure.core/let [rawinput183211 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183213 {"AssociatedAt" (rawinput183211 "AssociatedAt"), "RoleArn" (rawinput183211 "RoleArn")}] (clojure.core/cond-> {} (letvar183213 "AssociatedAt") (clojure.core/assoc :associated-at (deser-string (clojure.core/get-in letvar183213 ["AssociatedAt"]))) (letvar183213 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar183213 ["RoleArn"])))))))

(clojure.core/defn- response-list-group-versions-response ([input] (response-list-group-versions-response nil input)) ([resultWrapper183215 input] (clojure.core/let [rawinput183214 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183216 {"NextToken" (rawinput183214 "NextToken"), "Versions" (rawinput183214 "Versions")}] (clojure.core/cond-> {} (letvar183216 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183216 ["NextToken"]))) (letvar183216 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183216 ["Versions"])))))))

(clojure.core/defn- response-delete-function-definition-response ([input] (response-delete-function-definition-response nil input)) ([resultWrapper183218 input] (clojure.core/let [rawinput183217 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183219 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-get-group-certificate-configuration-response ([input] (response-get-group-certificate-configuration-response nil input)) ([resultWrapper183221 input] (clojure.core/let [rawinput183220 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183222 {"CertificateAuthorityExpiryInMilliseconds" (rawinput183220 "CertificateAuthorityExpiryInMilliseconds"), "CertificateExpiryInMilliseconds" (rawinput183220 "CertificateExpiryInMilliseconds"), "GroupId" (rawinput183220 "GroupId")}] (clojure.core/cond-> {} (letvar183222 "CertificateAuthorityExpiryInMilliseconds") (clojure.core/assoc :certificate-authority-expiry-in-milliseconds (deser-string (clojure.core/get-in letvar183222 ["CertificateAuthorityExpiryInMilliseconds"]))) (letvar183222 "CertificateExpiryInMilliseconds") (clojure.core/assoc :certificate-expiry-in-milliseconds (deser-string (clojure.core/get-in letvar183222 ["CertificateExpiryInMilliseconds"]))) (letvar183222 "GroupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar183222 ["GroupId"])))))))

(clojure.core/defn- response-get-connectivity-info-response ([input] (response-get-connectivity-info-response nil input)) ([resultWrapper183224 input] (clojure.core/let [rawinput183223 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183225 {"ConnectivityInfo" (rawinput183223 "ConnectivityInfo"), "message" (rawinput183223 "message")}] (clojure.core/cond-> {} (letvar183225 "ConnectivityInfo") (clojure.core/assoc :connectivity-info (deser-list-of-connectivity-info (clojure.core/get-in letvar183225 ["ConnectivityInfo"]))) (letvar183225 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar183225 ["message"])))))))

(clojure.core/defn- response-start-bulk-deployment-response ([input] (response-start-bulk-deployment-response nil input)) ([resultWrapper183227 input] (clojure.core/let [rawinput183226 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183228 {"BulkDeploymentArn" (rawinput183226 "BulkDeploymentArn"), "BulkDeploymentId" (rawinput183226 "BulkDeploymentId")}] (clojure.core/cond-> {} (letvar183228 "BulkDeploymentArn") (clojure.core/assoc :bulk-deployment-arn (deser-string (clojure.core/get-in letvar183228 ["BulkDeploymentArn"]))) (letvar183228 "BulkDeploymentId") (clojure.core/assoc :bulk-deployment-id (deser-string (clojure.core/get-in letvar183228 ["BulkDeploymentId"])))))))

(clojure.core/defn- response-delete-core-definition-response ([input] (response-delete-core-definition-response nil input)) ([resultWrapper183230 input] (clojure.core/let [rawinput183229 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183231 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-disassociate-service-role-from-account-response ([input] (response-disassociate-service-role-from-account-response nil input)) ([resultWrapper183233 input] (clojure.core/let [rawinput183232 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183234 {"DisassociatedAt" (rawinput183232 "DisassociatedAt")}] (clojure.core/cond-> {} (letvar183234 "DisassociatedAt") (clojure.core/assoc :disassociated-at (deser-string (clojure.core/get-in letvar183234 ["DisassociatedAt"])))))))

(clojure.core/defn- response-list-group-certificate-authorities-response ([input] (response-list-group-certificate-authorities-response nil input)) ([resultWrapper183236 input] (clojure.core/let [rawinput183235 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183237 {"GroupCertificateAuthorities" (rawinput183235 "GroupCertificateAuthorities")}] (clojure.core/cond-> {} (letvar183237 "GroupCertificateAuthorities") (clojure.core/assoc :group-certificate-authorities (deser-list-of-group-certificate-authority-properties (clojure.core/get-in letvar183237 ["GroupCertificateAuthorities"])))))))

(clojure.core/defn- response-create-software-update-job-response ([input] (response-create-software-update-job-response nil input)) ([resultWrapper183239 input] (clojure.core/let [rawinput183238 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183240 {"IotJobArn" (rawinput183238 "IotJobArn"), "IotJobId" (rawinput183238 "IotJobId")}] (clojure.core/cond-> {} (letvar183240 "IotJobArn") (clojure.core/assoc :iot-job-arn (deser-string (clojure.core/get-in letvar183240 ["IotJobArn"]))) (letvar183240 "IotJobId") (clojure.core/assoc :iot-job-id (deser-string (clojure.core/get-in letvar183240 ["IotJobId"])))))))

(clojure.core/defn- response-list-core-definition-versions-response ([input] (response-list-core-definition-versions-response nil input)) ([resultWrapper183242 input] (clojure.core/let [rawinput183241 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183243 {"NextToken" (rawinput183241 "NextToken"), "Versions" (rawinput183241 "Versions")}] (clojure.core/cond-> {} (letvar183243 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183243 ["NextToken"]))) (letvar183243 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183243 ["Versions"])))))))

(clojure.core/defn- response-create-group-certificate-authority-response ([input] (response-create-group-certificate-authority-response nil input)) ([resultWrapper183245 input] (clojure.core/let [rawinput183244 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183246 {"GroupCertificateAuthorityArn" (rawinput183244 "GroupCertificateAuthorityArn")}] (clojure.core/cond-> {} (letvar183246 "GroupCertificateAuthorityArn") (clojure.core/assoc :group-certificate-authority-arn (deser-string (clojure.core/get-in letvar183246 ["GroupCertificateAuthorityArn"])))))))

(clojure.core/defn- response-create-core-definition-version-response ([input] (response-create-core-definition-version-response nil input)) ([resultWrapper183248 input] (clojure.core/let [rawinput183247 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183249 {"Arn" (rawinput183247 "Arn"), "CreationTimestamp" (rawinput183247 "CreationTimestamp"), "Id" (rawinput183247 "Id"), "Version" (rawinput183247 "Version")}] (clojure.core/cond-> {} (letvar183249 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183249 ["Arn"]))) (letvar183249 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183249 ["CreationTimestamp"]))) (letvar183249 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183249 ["Id"]))) (letvar183249 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183249 ["Version"])))))))

(clojure.core/defn- response-list-subscription-definitions-response ([input] (response-list-subscription-definitions-response nil input)) ([resultWrapper183251 input] (clojure.core/let [rawinput183250 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183252 {"Definitions" (rawinput183250 "Definitions"), "NextToken" (rawinput183250 "NextToken")}] (clojure.core/cond-> {} (letvar183252 "Definitions") (clojure.core/assoc :definitions (deser-list-of-definition-information (clojure.core/get-in letvar183252 ["Definitions"]))) (letvar183252 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183252 ["NextToken"])))))))

(clojure.core/defn- response-get-group-version-response ([input] (response-get-group-version-response nil input)) ([resultWrapper183254 input] (clojure.core/let [rawinput183253 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183255 {"Arn" (rawinput183253 "Arn"), "CreationTimestamp" (rawinput183253 "CreationTimestamp"), "Definition" (rawinput183253 "Definition"), "Id" (rawinput183253 "Id"), "Version" (rawinput183253 "Version")}] (clojure.core/cond-> {} (letvar183255 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183255 ["Arn"]))) (letvar183255 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183255 ["CreationTimestamp"]))) (letvar183255 "Definition") (clojure.core/assoc :definition (deser-group-version (clojure.core/get-in letvar183255 ["Definition"]))) (letvar183255 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183255 ["Id"]))) (letvar183255 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183255 ["Version"])))))))

(clojure.core/defn- response-update-subscription-definition-response ([input] (response-update-subscription-definition-response nil input)) ([resultWrapper183257 input] (clojure.core/let [rawinput183256 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183258 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-get-device-definition-version-response ([input] (response-get-device-definition-version-response nil input)) ([resultWrapper183260 input] (clojure.core/let [rawinput183259 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183261 {"Arn" (rawinput183259 "Arn"), "CreationTimestamp" (rawinput183259 "CreationTimestamp"), "Definition" (rawinput183259 "Definition"), "Id" (rawinput183259 "Id"), "NextToken" (rawinput183259 "NextToken"), "Version" (rawinput183259 "Version")}] (clojure.core/cond-> {} (letvar183261 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183261 ["Arn"]))) (letvar183261 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183261 ["CreationTimestamp"]))) (letvar183261 "Definition") (clojure.core/assoc :definition (deser-device-definition-version (clojure.core/get-in letvar183261 ["Definition"]))) (letvar183261 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183261 ["Id"]))) (letvar183261 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183261 ["NextToken"]))) (letvar183261 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183261 ["Version"])))))))

(clojure.core/defn- response-get-resource-definition-version-response ([input] (response-get-resource-definition-version-response nil input)) ([resultWrapper183263 input] (clojure.core/let [rawinput183262 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183264 {"Arn" (rawinput183262 "Arn"), "CreationTimestamp" (rawinput183262 "CreationTimestamp"), "Definition" (rawinput183262 "Definition"), "Id" (rawinput183262 "Id"), "Version" (rawinput183262 "Version")}] (clojure.core/cond-> {} (letvar183264 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183264 ["Arn"]))) (letvar183264 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183264 ["CreationTimestamp"]))) (letvar183264 "Definition") (clojure.core/assoc :definition (deser-resource-definition-version (clojure.core/get-in letvar183264 ["Definition"]))) (letvar183264 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183264 ["Id"]))) (letvar183264 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183264 ["Version"])))))))

(clojure.core/defn- response-create-function-definition-version-response ([input] (response-create-function-definition-version-response nil input)) ([resultWrapper183266 input] (clojure.core/let [rawinput183265 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183267 {"Arn" (rawinput183265 "Arn"), "CreationTimestamp" (rawinput183265 "CreationTimestamp"), "Id" (rawinput183265 "Id"), "Version" (rawinput183265 "Version")}] (clojure.core/cond-> {} (letvar183267 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183267 ["Arn"]))) (letvar183267 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183267 ["CreationTimestamp"]))) (letvar183267 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183267 ["Id"]))) (letvar183267 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183267 ["Version"])))))))

(clojure.core/defn- response-list-subscription-definition-versions-response ([input] (response-list-subscription-definition-versions-response nil input)) ([resultWrapper183269 input] (clojure.core/let [rawinput183268 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183270 {"NextToken" (rawinput183268 "NextToken"), "Versions" (rawinput183268 "Versions")}] (clojure.core/cond-> {} (letvar183270 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183270 ["NextToken"]))) (letvar183270 "Versions") (clojure.core/assoc :versions (deser-list-of-version-information (clojure.core/get-in letvar183270 ["Versions"])))))))

(clojure.core/defn- response-create-group-response ([input] (response-create-group-response nil input)) ([resultWrapper183272 input] (clojure.core/let [rawinput183271 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183273 {"Arn" (rawinput183271 "Arn"), "CreationTimestamp" (rawinput183271 "CreationTimestamp"), "Id" (rawinput183271 "Id"), "LastUpdatedTimestamp" (rawinput183271 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183271 "LatestVersion"), "LatestVersionArn" (rawinput183271 "LatestVersionArn"), "Name" (rawinput183271 "Name")}] (clojure.core/cond-> {} (letvar183273 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183273 ["Arn"]))) (letvar183273 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183273 ["CreationTimestamp"]))) (letvar183273 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183273 ["Id"]))) (letvar183273 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183273 ["LastUpdatedTimestamp"]))) (letvar183273 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183273 ["LatestVersion"]))) (letvar183273 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183273 ["LatestVersionArn"]))) (letvar183273 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183273 ["Name"])))))))

(clojure.core/defn- response-list-deployments-response ([input] (response-list-deployments-response nil input)) ([resultWrapper183275 input] (clojure.core/let [rawinput183274 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183276 {"Deployments" (rawinput183274 "Deployments"), "NextToken" (rawinput183274 "NextToken")}] (clojure.core/cond-> {} (letvar183276 "Deployments") (clojure.core/assoc :deployments (deser-deployments (clojure.core/get-in letvar183276 ["Deployments"]))) (letvar183276 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183276 ["NextToken"])))))))

(clojure.core/defn- response-list-bulk-deployments-response ([input] (response-list-bulk-deployments-response nil input)) ([resultWrapper183278 input] (clojure.core/let [rawinput183277 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183279 {"BulkDeployments" (rawinput183277 "BulkDeployments"), "NextToken" (rawinput183277 "NextToken")}] (clojure.core/cond-> {} (letvar183279 "BulkDeployments") (clojure.core/assoc :bulk-deployments (deser-bulk-deployments (clojure.core/get-in letvar183279 ["BulkDeployments"]))) (letvar183279 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183279 ["NextToken"])))))))

(clojure.core/defn- response-reset-deployments-response ([input] (response-reset-deployments-response nil input)) ([resultWrapper183281 input] (clojure.core/let [rawinput183280 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183282 {"DeploymentArn" (rawinput183280 "DeploymentArn"), "DeploymentId" (rawinput183280 "DeploymentId")}] (clojure.core/cond-> {} (letvar183282 "DeploymentArn") (clojure.core/assoc :deployment-arn (deser-string (clojure.core/get-in letvar183282 ["DeploymentArn"]))) (letvar183282 "DeploymentId") (clojure.core/assoc :deployment-id (deser-string (clojure.core/get-in letvar183282 ["DeploymentId"])))))))

(clojure.core/defn- response-create-deployment-response ([input] (response-create-deployment-response nil input)) ([resultWrapper183284 input] (clojure.core/let [rawinput183283 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183285 {"DeploymentArn" (rawinput183283 "DeploymentArn"), "DeploymentId" (rawinput183283 "DeploymentId")}] (clojure.core/cond-> {} (letvar183285 "DeploymentArn") (clojure.core/assoc :deployment-arn (deser-string (clojure.core/get-in letvar183285 ["DeploymentArn"]))) (letvar183285 "DeploymentId") (clojure.core/assoc :deployment-id (deser-string (clojure.core/get-in letvar183285 ["DeploymentId"])))))))

(clojure.core/defn- response-get-logger-definition-response ([input] (response-get-logger-definition-response nil input)) ([resultWrapper183287 input] (clojure.core/let [rawinput183286 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183288 {"Arn" (rawinput183286 "Arn"), "CreationTimestamp" (rawinput183286 "CreationTimestamp"), "Id" (rawinput183286 "Id"), "LastUpdatedTimestamp" (rawinput183286 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183286 "LatestVersion"), "LatestVersionArn" (rawinput183286 "LatestVersionArn"), "Name" (rawinput183286 "Name")}] (clojure.core/cond-> {} (letvar183288 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183288 ["Arn"]))) (letvar183288 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183288 ["CreationTimestamp"]))) (letvar183288 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183288 ["Id"]))) (letvar183288 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183288 ["LastUpdatedTimestamp"]))) (letvar183288 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183288 ["LatestVersion"]))) (letvar183288 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183288 ["LatestVersionArn"]))) (letvar183288 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183288 ["Name"])))))))

(clojure.core/defn- response-delete-subscription-definition-response ([input] (response-delete-subscription-definition-response nil input)) ([resultWrapper183290 input] (clojure.core/let [rawinput183289 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183291 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-get-subscription-definition-response ([input] (response-get-subscription-definition-response nil input)) ([resultWrapper183293 input] (clojure.core/let [rawinput183292 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183294 {"Arn" (rawinput183292 "Arn"), "CreationTimestamp" (rawinput183292 "CreationTimestamp"), "Id" (rawinput183292 "Id"), "LastUpdatedTimestamp" (rawinput183292 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183292 "LatestVersion"), "LatestVersionArn" (rawinput183292 "LatestVersionArn"), "Name" (rawinput183292 "Name")}] (clojure.core/cond-> {} (letvar183294 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183294 ["Arn"]))) (letvar183294 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183294 ["CreationTimestamp"]))) (letvar183294 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183294 ["Id"]))) (letvar183294 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183294 ["LastUpdatedTimestamp"]))) (letvar183294 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183294 ["LatestVersion"]))) (letvar183294 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183294 ["LatestVersionArn"]))) (letvar183294 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183294 ["Name"])))))))

(clojure.core/defn- response-create-logger-definition-response ([input] (response-create-logger-definition-response nil input)) ([resultWrapper183296 input] (clojure.core/let [rawinput183295 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183297 {"Arn" (rawinput183295 "Arn"), "CreationTimestamp" (rawinput183295 "CreationTimestamp"), "Id" (rawinput183295 "Id"), "LastUpdatedTimestamp" (rawinput183295 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183295 "LatestVersion"), "LatestVersionArn" (rawinput183295 "LatestVersionArn"), "Name" (rawinput183295 "Name")}] (clojure.core/cond-> {} (letvar183297 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183297 ["Arn"]))) (letvar183297 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183297 ["CreationTimestamp"]))) (letvar183297 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183297 ["Id"]))) (letvar183297 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183297 ["LastUpdatedTimestamp"]))) (letvar183297 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183297 ["LatestVersion"]))) (letvar183297 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183297 ["LatestVersionArn"]))) (letvar183297 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183297 ["Name"])))))))

(clojure.core/defn- response-create-group-version-response ([input] (response-create-group-version-response nil input)) ([resultWrapper183299 input] (clojure.core/let [rawinput183298 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183300 {"Arn" (rawinput183298 "Arn"), "CreationTimestamp" (rawinput183298 "CreationTimestamp"), "Id" (rawinput183298 "Id"), "Version" (rawinput183298 "Version")}] (clojure.core/cond-> {} (letvar183300 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183300 ["Arn"]))) (letvar183300 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183300 ["CreationTimestamp"]))) (letvar183300 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183300 ["Id"]))) (letvar183300 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183300 ["Version"])))))))

(clojure.core/defn- response-create-core-definition-response ([input] (response-create-core-definition-response nil input)) ([resultWrapper183302 input] (clojure.core/let [rawinput183301 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183303 {"Arn" (rawinput183301 "Arn"), "CreationTimestamp" (rawinput183301 "CreationTimestamp"), "Id" (rawinput183301 "Id"), "LastUpdatedTimestamp" (rawinput183301 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183301 "LatestVersion"), "LatestVersionArn" (rawinput183301 "LatestVersionArn"), "Name" (rawinput183301 "Name")}] (clojure.core/cond-> {} (letvar183303 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183303 ["Arn"]))) (letvar183303 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183303 ["CreationTimestamp"]))) (letvar183303 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183303 ["Id"]))) (letvar183303 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183303 ["LastUpdatedTimestamp"]))) (letvar183303 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183303 ["LatestVersion"]))) (letvar183303 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183303 ["LatestVersionArn"]))) (letvar183303 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183303 ["Name"])))))))

(clojure.core/defn- response-list-bulk-deployment-detailed-reports-response ([input] (response-list-bulk-deployment-detailed-reports-response nil input)) ([resultWrapper183305 input] (clojure.core/let [rawinput183304 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183306 {"Deployments" (rawinput183304 "Deployments"), "NextToken" (rawinput183304 "NextToken")}] (clojure.core/cond-> {} (letvar183306 "Deployments") (clojure.core/assoc :deployments (deser-bulk-deployment-results (clojure.core/get-in letvar183306 ["Deployments"]))) (letvar183306 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar183306 ["NextToken"])))))))

(clojure.core/defn- response-create-function-definition-response ([input] (response-create-function-definition-response nil input)) ([resultWrapper183308 input] (clojure.core/let [rawinput183307 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183309 {"Arn" (rawinput183307 "Arn"), "CreationTimestamp" (rawinput183307 "CreationTimestamp"), "Id" (rawinput183307 "Id"), "LastUpdatedTimestamp" (rawinput183307 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183307 "LatestVersion"), "LatestVersionArn" (rawinput183307 "LatestVersionArn"), "Name" (rawinput183307 "Name")}] (clojure.core/cond-> {} (letvar183309 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183309 ["Arn"]))) (letvar183309 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183309 ["CreationTimestamp"]))) (letvar183309 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183309 ["Id"]))) (letvar183309 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183309 ["LastUpdatedTimestamp"]))) (letvar183309 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183309 ["LatestVersion"]))) (letvar183309 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183309 ["LatestVersionArn"]))) (letvar183309 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183309 ["Name"])))))))

(clojure.core/defn- response-update-connectivity-info-response ([input] (response-update-connectivity-info-response nil input)) ([resultWrapper183311 input] (clojure.core/let [rawinput183310 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183312 {"message" (rawinput183310 "message"), "Version" (rawinput183310 "Version")}] (clojure.core/cond-> {} (letvar183312 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar183312 ["message"]))) (letvar183312 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183312 ["Version"])))))))

(clojure.core/defn- response-get-function-definition-response ([input] (response-get-function-definition-response nil input)) ([resultWrapper183314 input] (clojure.core/let [rawinput183313 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183315 {"Arn" (rawinput183313 "Arn"), "CreationTimestamp" (rawinput183313 "CreationTimestamp"), "Id" (rawinput183313 "Id"), "LastUpdatedTimestamp" (rawinput183313 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183313 "LatestVersion"), "LatestVersionArn" (rawinput183313 "LatestVersionArn"), "Name" (rawinput183313 "Name")}] (clojure.core/cond-> {} (letvar183315 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183315 ["Arn"]))) (letvar183315 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183315 ["CreationTimestamp"]))) (letvar183315 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183315 ["Id"]))) (letvar183315 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183315 ["LastUpdatedTimestamp"]))) (letvar183315 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183315 ["LatestVersion"]))) (letvar183315 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183315 ["LatestVersionArn"]))) (letvar183315 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183315 ["Name"])))))))

(clojure.core/defn- response-delete-resource-definition-response ([input] (response-delete-resource-definition-response nil input)) ([resultWrapper183317 input] (clojure.core/let [rawinput183316 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183318 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-resource-definition-version-response ([input] (response-create-resource-definition-version-response nil input)) ([resultWrapper183320 input] (clojure.core/let [rawinput183319 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183321 {"Arn" (rawinput183319 "Arn"), "CreationTimestamp" (rawinput183319 "CreationTimestamp"), "Id" (rawinput183319 "Id"), "Version" (rawinput183319 "Version")}] (clojure.core/cond-> {} (letvar183321 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183321 ["Arn"]))) (letvar183321 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183321 ["CreationTimestamp"]))) (letvar183321 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183321 ["Id"]))) (letvar183321 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar183321 ["Version"])))))))

(clojure.core/defn- response-create-connector-definition-response ([input] (response-create-connector-definition-response nil input)) ([resultWrapper183323 input] (clojure.core/let [rawinput183322 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183324 {"Arn" (rawinput183322 "Arn"), "CreationTimestamp" (rawinput183322 "CreationTimestamp"), "Id" (rawinput183322 "Id"), "LastUpdatedTimestamp" (rawinput183322 "LastUpdatedTimestamp"), "LatestVersion" (rawinput183322 "LatestVersion"), "LatestVersionArn" (rawinput183322 "LatestVersionArn"), "Name" (rawinput183322 "Name")}] (clojure.core/cond-> {} (letvar183324 "Arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar183324 ["Arn"]))) (letvar183324 "CreationTimestamp") (clojure.core/assoc :creation-timestamp (deser-string (clojure.core/get-in letvar183324 ["CreationTimestamp"]))) (letvar183324 "Id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar183324 ["Id"]))) (letvar183324 "LastUpdatedTimestamp") (clojure.core/assoc :last-updated-timestamp (deser-string (clojure.core/get-in letvar183324 ["LastUpdatedTimestamp"]))) (letvar183324 "LatestVersion") (clojure.core/assoc :latest-version (deser-string (clojure.core/get-in letvar183324 ["LatestVersion"]))) (letvar183324 "LatestVersionArn") (clojure.core/assoc :latest-version-arn (deser-string (clojure.core/get-in letvar183324 ["LatestVersionArn"]))) (letvar183324 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar183324 ["Name"])))))))

(clojure.core/defn- response-delete-device-definition-response ([input] (response-delete-device-definition-response nil input)) ([resultWrapper183326 input] (clojure.core/let [rawinput183325 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar183327 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/software-to-update #{"ota_agent" :core "core" :ota-agent})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device-definition-version/devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/function-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/next-token :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/error-details :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-connector (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/connector))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-arn :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/empty (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/definition-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.definition-information/arn :portkey.aws.greengrass.-2017-06-07.definition-information/creation-timestamp :portkey.aws.greengrass.-2017-06-07.definition-information/id :portkey.aws.greengrass.-2017-06-07.definition-information/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version-arn :portkey.aws.greengrass.-2017-06-07.definition-information/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/core-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-connector-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-resource-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-resource-definition-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-resource-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-resource-definition-request/resource-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-resource-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/next-token :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/deployment-status :portkey.aws.greengrass.-2017-06-07/deployment-type :portkey.aws.greengrass.-2017-06-07/error-details :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/error-message :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/updated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/core-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/logger-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/device-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.deployment/created-at :portkey.aws.greengrass.-2017-06-07.deployment/deployment-arn :portkey.aws.greengrass.-2017-06-07.deployment/deployment-id :portkey.aws.greengrass.-2017-06-07/deployment-type :portkey.aws.greengrass.-2017-06-07.deployment/group-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-bulk-deployment-status-request/bulk-deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-bulk-deployment-status-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-bulk-deployment-status-request/bulk-deployment-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-connector-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-connector-definitions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-connector-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bad-request-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/error-details :portkey.aws.greengrass.-2017-06-07.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/arn :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/id :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-resource-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-request/device-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment-type #{"ResetDeployment" :force-reset-deployment :new-deployment "Redeployment" :reset-deployment "NewDeployment" :redeployment "ForceResetDeployment"})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connector/connector-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connector/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connector/parameters (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/map-of-string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/connector (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.connector/connector-arn :portkey.aws.greengrass.-2017-06-07.connector/id :portkey.aws.greengrass.-2017-06-07.connector/parameters]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-resource-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/subscription-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-level #{:warn "WARN" :debug "ERROR" :fatal "DEBUG" "FATAL" :info :error "INFO"})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/encoding-type #{"json" :binary "binary" :json})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/connectivity-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.connectivity-info/host-address :portkey.aws.greengrass.-2017-06-07.connectivity-info/id :portkey.aws.greengrass.-2017-06-07.connectivity-info/metadata :portkey.aws.greengrass.-2017-06-07.connectivity-info/port-number]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/connector-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-connector-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-connector-definition-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-connector-definition-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-connector-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/permission #{:rw "rw" "ro" :ro})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-version-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-connector-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-connector-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-connector-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-information))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/logger-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-type #{:aws-cloud-watch "AWSCloudWatch" "FileSystem" :file-system})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-response/arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/id :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/subscription))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-run-as-config/gid (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-run-as-config/uid (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-run-as-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-run-as-config/gid :portkey.aws.greengrass.-2017-06-07.function-run-as-config/uid]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-request/resource-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-resource-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-request/resource-definition-version-id :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-request/resource-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-connector-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/associated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-response/associated-at :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/amzn-client-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/arn :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/id :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-resource-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-resource-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-request/resource-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-resource-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-arn :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-id :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/pem-encoded-certificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-request/connector-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-request/connectors (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connector))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-connector-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-request/connector-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-connector-definition-version-request/connectors]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/disassociated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-id :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-version-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-definition-version/default-config (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-default-config))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-definition-version/default-config :portkey.aws.greengrass.-2017-06-07.function-definition-version/functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger-definition-version/loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/subscription-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-version-id :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/subscription-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-response/arn :portkey.aws.greengrass.-2017-06-07.get-group-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/id :portkey.aws.greengrass.-2017-06-07.get-group-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-group-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connector-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-resource-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-resource-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-resource-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/group-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-response/groups :portkey.aws.greengrass.-2017-06-07.list-groups-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment/bulk-deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment/bulk-deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bulk-deployment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.bulk-deployment/bulk-deployment-arn :portkey.aws.greengrass.-2017-06-07.bulk-deployment/bulk-deployment-id :portkey.aws.greengrass.-2017-06-07.bulk-deployment/created-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-targets (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/string))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-authority-expiry-in-milliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-expiry-in-milliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/group-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/associated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/connector-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connector-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/next-token :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/thing-name] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/connectivity-info]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/device))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/core))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-bulk-deployment-status-response/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-bulk-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-bulk-deployment-status-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/bulk-deployment-metrics :portkey.aws.greengrass.-2017-06-07/bulk-deployment-status :portkey.aws.greengrass.-2017-06-07.get-bulk-deployment-status-response/created-at :portkey.aws.greengrass.-2017-06-07/error-details :portkey.aws.greengrass.-2017-06-07.get-bulk-deployment-status-response/error-message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/version-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.version-information/arn :portkey.aws.greengrass.-2017-06-07.version-information/creation-timestamp :portkey.aws.greengrass.-2017-06-07.version-information/id :portkey.aws.greengrass.-2017-06-07.version-information/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-response/arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/id :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bulk-deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/bulk-deployment))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/function-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.s-3-machine-learning-model-resource-data/destination-path (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.s-3-machine-learning-model-resource-data/s-3-uri (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/s-3-machine-learning-model-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.s-3-machine-learning-model-resource-data/destination-path :portkey.aws.greengrass.-2017-06-07.s-3-machine-learning-model-resource-data/s-3-uri]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-targets-architecture #{:armv-7l "armv7l" "x86_64" "aarch64" :x-86-64 :aarch-64})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/stop-bulk-deployment-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-response/arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/id :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/connector-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/resource-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-version/connector-definition-version-arn :portkey.aws.greengrass.-2017-06-07.group-version/core-definition-version-arn :portkey.aws.greengrass.-2017-06-07.group-version/device-definition-version-arn :portkey.aws.greengrass.-2017-06-07.group-version/function-definition-version-arn :portkey.aws.greengrass.-2017-06-07.group-version/logger-definition-version-arn :portkey.aws.greengrass.-2017-06-07.group-version/resource-definition-version-arn :portkey.aws.greengrass.-2017-06-07.group-version/subscription-definition-version-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-resource-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-resource-definition-request/resource-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-information/arn :portkey.aws.greengrass.-2017-06-07.group-information/creation-timestamp :portkey.aws.greengrass.-2017-06-07.group-information/id :portkey.aws.greengrass.-2017-06-07.group-information/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.group-information/latest-version :portkey.aws.greengrass.-2017-06-07.group-information/latest-version-arn :portkey.aws.greengrass.-2017-06-07.group-information/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-connector-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/function-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connector-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/arn :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/id :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-connector-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-code :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/next-token :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-resource (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/resource))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-version-id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/associated-at :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-agent-log-level #{:warn :trace "WARN" :verbose :debug "ERROR" :fatal "NONE" "TRACE" "DEBUG" "VERBOSE" "FATAL" :info :error "INFO" :none})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/group-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-request/connector-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-connector-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-request/connector-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-connector-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/connectivity-info :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/string))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/max-results :portkey.aws.greengrass.-2017-06-07.list-deployments-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-response/bulk-deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-response/bulk-deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/start-bulk-deployment-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-response/bulk-deployment-arn :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-response/bulk-deployment-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/version-information))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.resource-definition-version/resources (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/resource-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.resource-definition-version/resources]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/function))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/disassociated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/group-certificate-authorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core-definition-version/cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-deployment-request/deployment-id :portkey.aws.greengrass.-2017-06-07/deployment-type :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-version-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-default-execution-config/isolation-mode (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-isolation-mode))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-default-execution-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-default-execution-config/isolation-mode]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-software-update-job-response/iot-job-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-software-update-job-response/iot-job-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-software-update-job-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-software-update-job-response/iot-job-arn :portkey.aws.greengrass.-2017-06-07.create-software-update-job-response/iot-job-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription-definition-version/subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-group-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-request/bulk-deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-bulk-deployment-detailed-reports-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-request/bulk-deployment-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-request/max-results :portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/subscription-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/group-certificate-authority-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/logger))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-targets-operating-system #{"ubuntu" "raspbian" :raspbian :amazon-linux "amazon_linux" :ubuntu})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/logger-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/core-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/group-id :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/deployment-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/resource-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/connector-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/function-definition-version-arn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/subscription-definition-version-arn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/device-definition-version-arn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/logger-definition-version-arn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/resource-definition-version-arn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/connector-definition-version-arn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-group-version-request/core-definition-version-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/core-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connector-definition-request/connector-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connector-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connector-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-connector-definition-request/connector-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connector-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-group-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-group-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-group-version-response/id :portkey.aws.greengrass.-2017-06-07.get-group-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-id :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-version-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.stop-bulk-deployment-request/bulk-deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/stop-bulk-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.stop-bulk-deployment-request/bulk-deployment-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/next-token :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bulk-deployment-results (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/bulk-deployment-result))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/resource-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-resource-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/definition :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.get-resource-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-request/execution-role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-request/input-file-uri (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/start-bulk-deployment-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-request/execution-role-arn :portkey.aws.greengrass.-2017-06-07.start-bulk-deployment-request/input-file-uri]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-resource-access-policy (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/resource-access-policy))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.sage-maker-machine-learning-model-resource-data/destination-path (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.sage-maker-machine-learning-model-resource-data/sage-maker-job-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/sage-maker-machine-learning-model-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.sage-maker-machine-learning-model-resource-data/destination-path :portkey.aws.greengrass.-2017-06-07.sage-maker-machine-learning-model-resource-data/sage-maker-job-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-software-update-job-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-software-update-job-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-software-update-job-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07/s-3-url-signer-role :portkey.aws.greengrass.-2017-06-07/software-to-update :portkey.aws.greengrass.-2017-06-07/update-agent-log-level :portkey.aws.greengrass.-2017-06-07/update-targets :portkey.aws.greengrass.-2017-06-07/update-targets-architecture :portkey.aws.greengrass.-2017-06-07/update-targets-operating-system]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-resource-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-resource-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-resource-definitions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-resource-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/encoding-type :portkey.aws.greengrass.-2017-06-07.function-configuration/environment :portkey.aws.greengrass.-2017-06-07.function-configuration/exec-args :portkey.aws.greengrass.-2017-06-07.function-configuration/executable :portkey.aws.greengrass.-2017-06-07.function-configuration/memory-size :portkey.aws.greengrass.-2017-06-07.function-configuration/pinned :portkey.aws.greengrass.-2017-06-07.function-configuration/timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/device-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-request/max-results :portkey.aws.greengrass.-2017-06-07.list-groups-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.reset-deployments-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.reset-deployments-request/force (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.reset-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/reset-deployments-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.reset-deployments-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.reset-deployments-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.reset-deployments-request/force]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/next-token :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/timestamp-iso-8601 clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-resource-definition-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-resource-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-resource-definition-request/resource-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bulk-deployment-status #{"Failed" :initializing :completed :running :stopping :stopped "Stopping" "Running" "Stopped" "Completed" "Initializing" :failed})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-request/connector-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connector-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-connector-definition-request/connector-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/access-sysfs (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/execution (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-execution-config))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/resource-access-policies (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-resource-access-policy))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/map-of-string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration-environment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration-environment/access-sysfs :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/execution :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/resource-access-policies :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-response/arn :portkey.aws.greengrass.-2017-06-07.create-group-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/id :portkey.aws.greengrass.-2017-06-07.create-group-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-group-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/error-detail))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/max-results :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-request/resources (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-resource-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-request/resource-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-request/resources]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-metrics/invalid-input-records (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-metrics/records-processed (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-metrics/retry-attempts (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bulk-deployment-metrics (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.bulk-deployment-metrics/invalid-input-records :portkey.aws.greengrass.-2017-06-07.bulk-deployment-metrics/records-processed :portkey.aws.greengrass.-2017-06-07.bulk-deployment-metrics/retry-attempts]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/logger-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription/id :portkey.aws.greengrass.-2017-06-07.subscription/source :portkey.aws.greengrass.-2017-06-07.subscription/subject :portkey.aws.greengrass.-2017-06-07.subscription/target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-group-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-group-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/connectivity-info))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core/certificate-arn :portkey.aws.greengrass.-2017-06-07.core/id :portkey.aws.greengrass.-2017-06-07.core/sync-shadow :portkey.aws.greengrass.-2017-06-07.core/thing-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-version-id :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscription-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/definition-information))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/deployments :portkey.aws.greengrass.-2017-06-07.list-deployments-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.resource/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.resource/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/resource (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.resource/id :portkey.aws.greengrass.-2017-06-07.resource/name :portkey.aws.greengrass.-2017-06-07/resource-data-container]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-owner-setting/auto-add-group-owner (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-owner-setting/group-owner (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-owner-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-owner-setting/auto-add-group-owner :portkey.aws.greengrass.-2017-06-07.group-owner-setting/group-owner]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bulk-deployment-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/created-at :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/deployment-arn :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/deployment-id :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/deployment-status :portkey.aws.greengrass.-2017-06-07/deployment-type :portkey.aws.greengrass.-2017-06-07/error-details :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/error-message :portkey.aws.greengrass.-2017-06-07.bulk-deployment-result/group-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-isolation-mode #{:greengrass-container "NoContainer" "GreengrassContainer" :no-container})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/resource-data-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/local-device-resource-data :portkey.aws.greengrass.-2017-06-07/local-volume-resource-data :portkey.aws.greengrass.-2017-06-07/s-3-machine-learning-model-resource-data :portkey.aws.greengrass.-2017-06-07/sage-maker-machine-learning-model-resource-data :portkey.aws.greengrass.-2017-06-07/secrets-manager-secret-resource-data]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/default-config (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-default-config))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/function-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/default-config :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function/function-arn :portkey.aws.greengrass.-2017-06-07/function-configuration :portkey.aws.greengrass.-2017-06-07.function/id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-bulk-deployments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/bulk-deployments :portkey.aws.greengrass.-2017-06-07.list-bulk-deployments-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connector-definition-version/connectors (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connector))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/connector-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.connector-definition-version/connectors]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.reset-deployments-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.reset-deployments-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/reset-deployments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.reset-deployments-response/deployment-arn :portkey.aws.greengrass.-2017-06-07.reset-deployments-response/deployment-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/timestamp-unix clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-arn :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/logger-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-bulk-deployments-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-bulk-deployments-request/max-results :portkey.aws.greengrass.-2017-06-07.list-bulk-deployments-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-connector-definition-request/connector-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-connector-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-connector-definition-request/connector-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/device-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.local-volume-resource-data/destination-path (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.local-volume-resource-data/source-path (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/local-volume-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.local-volume-resource-data/destination-path :portkey.aws.greengrass.-2017-06-07/group-owner-setting :portkey.aws.greengrass.-2017-06-07.local-volume-resource-data/source-path]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.secrets-manager-secret-resource-data/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.secrets-manager-secret-resource-data/additional-staging-labels-to-download (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/secrets-manager-secret-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.secrets-manager-secret-resource-data/arn :portkey.aws.greengrass.-2017-06-07.secrets-manager-secret-resource-data/additional-staging-labels-to-download]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/device-definition-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-request/core-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/certificate-authority-id :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-execution-config/isolation-mode (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-isolation-mode))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-execution-config/run-as (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-run-as-config))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-execution-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-execution-config/isolation-mode :portkey.aws.greengrass.-2017-06-07.function-execution-config/run-as]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/resource-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-resource-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-resource-definition-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-resource-definition-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-resource-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/s-3-url-signer-role (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device/certificate-arn :portkey.aws.greengrass.-2017-06-07.device/id :portkey.aws.greengrass.-2017-06-07.device/sync-shadow :portkey.aws.greengrass.-2017-06-07.device/thing-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-component #{:greengrass-system :lambda "Lambda" "GreengrassSystem"})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-default-config/execution (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-default-execution-config))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-default-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-default-config/execution]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-request/function-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.resource-access-policy/resource-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/resource-access-policy (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/permission :portkey.aws.greengrass.-2017-06-07.resource-access-policy/resource-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-request/amzn-client-token :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/initial-version :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/thing-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-group-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-group-version-response/id :portkey.aws.greengrass.-2017-06-07.create-group-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-definitions-response/definitions :portkey.aws.greengrass.-2017-06-07.list-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.local-device-resource-data/source-path (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/local-device-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/group-owner-setting :portkey.aws.greengrass.-2017-06-07.local-device-resource-data/source-path]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-response/arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/id :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/general-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/error-details :portkey.aws.greengrass.-2017-06-07.general-error/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-response/deployments (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/bulk-deployment-results))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-bulk-deployment-detailed-reports-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-response/deployments :portkey.aws.greengrass.-2017-06-07.list-bulk-deployment-detailed-reports-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-request/connector-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-request/connector-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connector-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-request/connector-definition-id :portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-request/connector-definition-version-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connector-definition-version-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-response/arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/id :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/message :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-response/arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/id :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/group-id] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/map-of-string (clojure.spec.alpha/map-of :portkey.aws.greengrass.-2017-06-07/string :portkey.aws.greengrass.-2017-06-07/string))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-resource-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/arn :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/id :portkey.aws.greengrass.-2017-06-07.create-resource-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-connector-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/arn :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/creation-timestamp :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/id :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/last-updated-timestamp :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/latest-version :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/latest-version-arn :portkey.aws.greengrass.-2017-06-07.create-connector-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger/component :portkey.aws.greengrass.-2017-06-07.logger/id :portkey.aws.greengrass.-2017-06-07.logger/level :portkey.aws.greengrass.-2017-06-07.logger/space :portkey.aws.greengrass.-2017-06-07.logger/type]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/deployment))

(clojure.core/defn update-connector-definition "Updates a connector definition." ([update-connector-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-connector-definition-request update-connector-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-connector-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors/{ConnectorDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-connector-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateConnectorDefinition", :http.request.configuration/output-deser-fn response-update-connector-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-connector-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-connector-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-connector-definition-response))

(clojure.core/defn create-connector-definition "Creates a connector definition. You may provide the initial version of the\nconnector definition now or use ''CreateConnectorDefinitionVersion'' at a later\ntime." ([] (create-connector-definition {})) ([create-connector-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-connector-definition-request create-connector-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-connector-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-connector-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateConnectorDefinition", :http.request.configuration/output-deser-fn response-create-connector-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-connector-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-connector-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-connector-definition-response))

(clojure.core/defn create-device-definition "Creates a device definition. You may provide the initial version of the device\ndefinition now or use ''CreateDeviceDefinitionVersion'' at a later time." ([] (create-device-definition {})) ([create-device-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-device-definition-request create-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDeviceDefinition", :http.request.configuration/output-deser-fn response-create-device-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-device-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-device-definition-response))

(clojure.core/defn get-function-definition "Retrieves information about a Lambda function definition, including its creation\ntime and latest version." ([get-function-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-function-definition-request get-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetFunctionDefinition", :http.request.configuration/output-deser-fn response-get-function-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-function-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-function-definition-response))

(clojure.core/defn delete-group "Deletes a group." ([delete-group-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-group-request delete-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteGroup", :http.request.configuration/output-deser-fn response-delete-group-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-group-response))

(clojure.core/defn create-device-definition-version "Creates a version of a device definition that has already been defined." ([create-device-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-device-definition-version-request create-device-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDeviceDefinitionVersion", :http.request.configuration/output-deser-fn response-create-device-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-device-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response))

(clojure.core/defn list-logger-definitions "Retrieves a list of logger definitions." ([] (list-logger-definitions {})) ([list-logger-definitions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-logger-definitions-request list-logger-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListLoggerDefinitions", :http.request.configuration/output-deser-fn response-list-logger-definitions-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-logger-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response))

(clojure.core/defn list-function-definitions "Retrieves a list of Lambda function definitions." ([] (list-function-definitions {})) ([list-function-definitions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-function-definitions-request list-function-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListFunctionDefinitions", :http.request.configuration/output-deser-fn response-list-function-definitions-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-function-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response))

(clojure.core/defn create-function-definition "Creates a Lambda function definition which contains a list of Lambda functions\nand their configurations to be used in a group. You can create an initial\nversion of the definition by providing a list of Lambda functions and their\nconfigurations now, or use ''CreateFunctionDefinitionVersion'' later." ([] (create-function-definition {})) ([create-function-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-function-definition-request create-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateFunctionDefinition", :http.request.configuration/output-deser-fn response-create-function-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-function-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-function-definition-response))

(clojure.core/defn get-resource-definition-version "Retrieves information about a resource definition version, including which\nresources are included in the version." ([get-resource-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-resource-definition-version-request get-resource-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-resource-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-resource-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetResourceDefinitionVersion", :http.request.configuration/output-deser-fn response-get-resource-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-resource-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-resource-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-resource-definition-version-response))

(clojure.core/defn delete-connector-definition "Deletes a connector definition." ([delete-connector-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-connector-definition-request delete-connector-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-connector-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors/{ConnectorDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-connector-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteConnectorDefinition", :http.request.configuration/output-deser-fn response-delete-connector-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-connector-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-connector-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-connector-definition-response))

(clojure.core/defn list-connector-definitions "Retrieves a list of connector definitions." ([] (list-connector-definitions {})) ([list-connector-definitions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-connector-definitions-request list-connector-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-connector-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-connector-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListConnectorDefinitions", :http.request.configuration/output-deser-fn response-list-connector-definitions-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-connector-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-connector-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-connector-definitions-response))

(clojure.core/defn create-core-definition "Creates a core definition. You may provide the initial version of the core\ndefinition now or use ''CreateCoreDefinitionVersion'' at a later time.\nGreengrass groups must each contain exactly one Greengrass core." ([] (create-core-definition {})) ([create-core-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-core-definition-request create-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateCoreDefinition", :http.request.configuration/output-deser-fn response-create-core-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-core-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-core-definition-response))

(clojure.core/defn list-groups "Retrieves a list of groups." ([] (list-groups {})) ([list-groups-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-groups-request list-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-groups-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-groups-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListGroups", :http.request.configuration/output-deser-fn response-list-groups-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-groups :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-groups-response))

(clojure.core/defn create-logger-definition "Creates a logger definition. You may provide the initial version of the logger\ndefinition now or use ''CreateLoggerDefinitionVersion'' at a later time." ([] (create-logger-definition {})) ([create-logger-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-logger-definition-request create-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateLoggerDefinition", :http.request.configuration/output-deser-fn response-create-logger-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-logger-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response))

(clojure.core/defn update-resource-definition "Updates a resource definition." ([update-resource-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-resource-definition-request update-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateResourceDefinition", :http.request.configuration/output-deser-fn response-update-resource-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-resource-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-resource-definition-response))

(clojure.core/defn get-subscription-definition-version "Retrieves information about a subscription definition version." ([get-subscription-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-subscription-definition-version-request get-subscription-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetSubscriptionDefinitionVersion", :http.request.configuration/output-deser-fn response-get-subscription-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-subscription-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response))

(clojure.core/defn list-function-definition-versions "Lists the versions of a Lambda function definition." ([list-function-definition-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-function-definition-versions-request list-function-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListFunctionDefinitionVersions", :http.request.configuration/output-deser-fn response-list-function-definition-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-function-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response))

(clojure.core/defn update-logger-definition "Updates a logger definition." ([update-logger-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-logger-definition-request update-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateLoggerDefinition", :http.request.configuration/output-deser-fn response-update-logger-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-logger-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response))

(clojure.core/defn disassociate-service-role-from-account "Disassociates the service role from your account. Without a service role,\ndeployments will not work." ([] (disassociate-service-role-from-account {})) ([disassociate-service-role-from-account-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-disassociate-service-role-from-account-request disassociate-service-role-from-account-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/servicerole", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisassociateServiceRoleFromAccount", :http.request.configuration/output-deser-fn response-disassociate-service-role-from-account-response, :http.request.spec/error-spec {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef disassociate-service-role-from-account :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response))

(clojure.core/defn reset-deployments "Resets a group's deployments." ([reset-deployments-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-reset-deployments-request reset-deployments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/reset-deployments-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments/$reset", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/reset-deployments-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ResetDeployments", :http.request.configuration/output-deser-fn response-reset-deployments-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef reset-deployments :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/reset-deployments-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/reset-deployments-response))

(clojure.core/defn create-subscription-definition-version "Creates a version of a subscription definition which has already been defined." ([create-subscription-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-subscription-definition-version-request create-subscription-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSubscriptionDefinitionVersion", :http.request.configuration/output-deser-fn response-create-subscription-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-subscription-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response))

(clojure.core/defn delete-subscription-definition "Deletes a subscription definition." ([delete-subscription-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-subscription-definition-request delete-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSubscriptionDefinition", :http.request.configuration/output-deser-fn response-delete-subscription-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-subscription-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response))

(clojure.core/defn create-logger-definition-version "Creates a version of a logger definition that has already been defined." ([create-logger-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-logger-definition-version-request create-logger-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateLoggerDefinitionVersion", :http.request.configuration/output-deser-fn response-create-logger-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-logger-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response))

(clojure.core/defn delete-logger-definition "Deletes a logger definition." ([delete-logger-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-logger-definition-request delete-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteLoggerDefinition", :http.request.configuration/output-deser-fn response-delete-logger-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-logger-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response))

(clojure.core/defn get-subscription-definition "Retrieves information about a subscription definition." ([get-subscription-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-subscription-definition-request get-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetSubscriptionDefinition", :http.request.configuration/output-deser-fn response-get-subscription-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-subscription-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response))

(clojure.core/defn update-group-certificate-configuration "Updates the Certificate expiry time for a group." ([update-group-certificate-configuration-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-group-certificate-configuration-request update-group-certificate-configuration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateGroupCertificateConfiguration", :http.request.configuration/output-deser-fn response-update-group-certificate-configuration-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef update-group-certificate-configuration :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response))

(clojure.core/defn create-deployment "Creates a deployment. ''CreateDeployment'' requests are idempotent with respect\nto the ''X-Amzn-Client-Token'' token and the request parameters." ([create-deployment-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-deployment-request create-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-deployment-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDeployment", :http.request.configuration/output-deser-fn response-create-deployment-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-deployment :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-deployment-response))

(clojure.core/defn delete-device-definition "Deletes a device definition." ([delete-device-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-device-definition-request delete-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDeviceDefinition", :http.request.configuration/output-deser-fn response-delete-device-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-device-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response))

(clojure.core/defn list-subscription-definitions "Retrieves a list of subscription definitions." ([] (list-subscription-definitions {})) ([list-subscription-definitions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-subscription-definitions-request list-subscription-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListSubscriptionDefinitions", :http.request.configuration/output-deser-fn response-list-subscription-definitions-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-subscription-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response))

(clojure.core/defn stop-bulk-deployment "Stops the execution of a bulk deployment. This action returns a status of\n''Stopping'' until the deployment is stopped. You cannot start a new bulk\ndeployment while a previous deployment is in the ''Stopping'' state. This action\ndoesn't rollback completed deployments or cancel pending deployments." ([stop-bulk-deployment-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-stop-bulk-deployment-request stop-bulk-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/stop-bulk-deployment-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/bulk/deployments/{BulkDeploymentId}/$stop", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/stop-bulk-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StopBulkDeployment", :http.request.configuration/output-deser-fn response-stop-bulk-deployment-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef stop-bulk-deployment :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/stop-bulk-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/stop-bulk-deployment-response))

(clojure.core/defn list-group-versions "Lists the versions of a group." ([list-group-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-group-versions-request list-group-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-group-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-group-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListGroupVersions", :http.request.configuration/output-deser-fn response-list-group-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-group-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-group-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-group-versions-response))

(clojure.core/defn create-software-update-job "Creates a software update for a core or group of cores (specified as an IoT\nthing group.) Use this to update the OTA Agent as well as the Greengrass core\nsoftware. It makes use of the IoT Jobs feature which provides additional\ncommands to manage a Greengrass core software update job." ([] (create-software-update-job {})) ([create-software-update-job-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-software-update-job-request create-software-update-job-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-software-update-job-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/updates", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-software-update-job-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSoftwareUpdateJob", :http.request.configuration/output-deser-fn response-create-software-update-job-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef create-software-update-job :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-software-update-job-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-software-update-job-response))

(clojure.core/defn list-subscription-definition-versions "Lists the versions of a subscription definition." ([list-subscription-definition-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-subscription-definition-versions-request list-subscription-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListSubscriptionDefinitionVersions", :http.request.configuration/output-deser-fn response-list-subscription-definition-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-subscription-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response))

(clojure.core/defn list-logger-definition-versions "Lists the versions of a logger definition." ([list-logger-definition-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-logger-definition-versions-request list-logger-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListLoggerDefinitionVersions", :http.request.configuration/output-deser-fn response-list-logger-definition-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-logger-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response))

(clojure.core/defn get-associated-role "Retrieves the role associated with a particular group." ([get-associated-role-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-associated-role-request get-associated-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-associated-role-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/role", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-associated-role-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetAssociatedRole", :http.request.configuration/output-deser-fn response-get-associated-role-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-associated-role :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-associated-role-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-associated-role-response))

(clojure.core/defn get-group "Retrieves information about a group." ([get-group-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-group-request get-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetGroup", :http.request.configuration/output-deser-fn response-get-group-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-response))

(clojure.core/defn update-group "Updates a group." ([update-group-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-group-request update-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateGroup", :http.request.configuration/output-deser-fn response-update-group-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-group-response))

(clojure.core/defn get-group-certificate-authority "Retreives the CA associated with a group. Returns the public key of the CA." ([get-group-certificate-authority-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-group-certificate-authority-request get-group-certificate-authority-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetGroupCertificateAuthority", :http.request.configuration/output-deser-fn response-get-group-certificate-authority-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-group-certificate-authority :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response))

(clojure.core/defn get-core-definition "Retrieves information about a core definition version." ([get-core-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-core-definition-request get-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetCoreDefinition", :http.request.configuration/output-deser-fn response-get-core-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-core-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-core-definition-response))

(clojure.core/defn create-connector-definition-version "Creates a version of a connector definition which has already been defined." ([create-connector-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-connector-definition-version-request create-connector-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-connector-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-connector-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateConnectorDefinitionVersion", :http.request.configuration/output-deser-fn response-create-connector-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-connector-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-connector-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-connector-definition-version-response))

(clojure.core/defn get-connector-definition "Retrieves information about a connector definition." ([get-connector-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-connector-definition-request get-connector-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-connector-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors/{ConnectorDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-connector-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetConnectorDefinition", :http.request.configuration/output-deser-fn response-get-connector-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-connector-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-connector-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-connector-definition-response))

(clojure.core/defn create-resource-definition "Creates a resource definition which contains a list of resources to be used in a\ngroup. You can create an initial version of the definition by providing a list\nof resources now, or use ''CreateResourceDefinitionVersion'' later." ([] (create-resource-definition {})) ([create-resource-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-resource-definition-request create-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateResourceDefinition", :http.request.configuration/output-deser-fn response-create-resource-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-resource-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-resource-definition-response))

(clojure.core/defn get-bulk-deployment-status "Returns the status of a bulk deployment." ([get-bulk-deployment-status-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-bulk-deployment-status-request get-bulk-deployment-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-bulk-deployment-status-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/bulk/deployments/{BulkDeploymentId}/status", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-bulk-deployment-status-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetBulkDeploymentStatus", :http.request.configuration/output-deser-fn response-get-bulk-deployment-status-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-bulk-deployment-status :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-bulk-deployment-status-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-bulk-deployment-status-response))

(clojure.core/defn create-resource-definition-version "Creates a version of a resource definition that has already been defined." ([create-resource-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-resource-definition-version-request create-resource-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-resource-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-resource-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateResourceDefinitionVersion", :http.request.configuration/output-deser-fn response-create-resource-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-resource-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-resource-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-resource-definition-version-response))

(clojure.core/defn list-core-definitions "Retrieves a list of core definitions." ([] (list-core-definitions {})) ([list-core-definitions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-core-definitions-request list-core-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListCoreDefinitions", :http.request.configuration/output-deser-fn response-list-core-definitions-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-core-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response))

(clojure.core/defn get-deployment-status "Returns the status of a deployment." ([get-deployment-status-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-deployment-status-request get-deployment-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDeploymentStatus", :http.request.configuration/output-deser-fn response-get-deployment-status-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-deployment-status :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response))

(clojure.core/defn get-connectivity-info "Retrieves the connectivity information for a core." ([get-connectivity-info-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-connectivity-info-request get-connectivity-info-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/things/{ThingName}/connectivityInfo", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetConnectivityInfo", :http.request.configuration/output-deser-fn response-get-connectivity-info-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-connectivity-info :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response))

(clojure.core/defn get-device-definition "Retrieves information about a device definition." ([get-device-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-device-definition-request get-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDeviceDefinition", :http.request.configuration/output-deser-fn response-get-device-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-device-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-device-definition-response))

(clojure.core/defn list-resource-definition-versions "Lists the versions of a resource definition." ([list-resource-definition-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-resource-definition-versions-request list-resource-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-resource-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-resource-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListResourceDefinitionVersions", :http.request.configuration/output-deser-fn response-list-resource-definition-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-resource-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-resource-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-resource-definition-versions-response))

(clojure.core/defn list-deployments "Returns a history of deployments for the group." ([list-deployments-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-deployments-request list-deployments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-deployments-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-deployments-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListDeployments", :http.request.configuration/output-deser-fn response-list-deployments-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-deployments :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-deployments-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-deployments-response))

(clojure.core/defn create-group-version "Creates a version of a group which has already been defined." ([create-group-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-group-version-request create-group-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-group-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-group-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateGroupVersion", :http.request.configuration/output-deser-fn response-create-group-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-group-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-group-version-response))

(clojure.core/defn get-device-definition-version "Retrieves information about a device definition version." ([get-device-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-device-definition-version-request get-device-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDeviceDefinitionVersion", :http.request.configuration/output-deser-fn response-get-device-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-device-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response))

(clojure.core/defn update-function-definition "Updates a Lambda function definition." ([update-function-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-function-definition-request update-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateFunctionDefinition", :http.request.configuration/output-deser-fn response-update-function-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-function-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-function-definition-response))

(clojure.core/defn list-resource-definitions "Retrieves a list of resource definitions." ([] (list-resource-definitions {})) ([list-resource-definitions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-resource-definitions-request list-resource-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-resource-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-resource-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListResourceDefinitions", :http.request.configuration/output-deser-fn response-list-resource-definitions-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-resource-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-resource-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-resource-definitions-response))

(clojure.core/defn delete-function-definition "Deletes a Lambda function definition." ([delete-function-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-function-definition-request delete-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteFunctionDefinition", :http.request.configuration/output-deser-fn response-delete-function-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-function-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response))

(clojure.core/defn list-core-definition-versions "Lists the versions of a core definition." ([list-core-definition-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-core-definition-versions-request list-core-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListCoreDefinitionVersions", :http.request.configuration/output-deser-fn response-list-core-definition-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-core-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response))

(clojure.core/defn start-bulk-deployment "Deploys multiple groups in one operation. This action starts the bulk deployment\nof a specified set of group versions. Each group version deployment will be\ntriggered with an adaptive rate that has a fixed upper limit. We recommend that\nyou include an ''X-Amzn-Client-Token'' token in every ''StartBulkDeployment''\nrequest. These requests are idempotent with respect to the token and the request\nparameters." ([] (start-bulk-deployment {})) ([start-bulk-deployment-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-start-bulk-deployment-request start-bulk-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/start-bulk-deployment-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/bulk/deployments", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/start-bulk-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StartBulkDeployment", :http.request.configuration/output-deser-fn response-start-bulk-deployment-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef start-bulk-deployment :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/start-bulk-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/start-bulk-deployment-response))

(clojure.core/defn list-bulk-deployment-detailed-reports "Gets a paginated list of the deployments that have been started in a bulk\ndeployment operation, and their current deployment status." ([list-bulk-deployment-detailed-reports-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-bulk-deployment-detailed-reports-request list-bulk-deployment-detailed-reports-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-bulk-deployment-detailed-reports-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/bulk/deployments/{BulkDeploymentId}/detailed-reports", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-bulk-deployment-detailed-reports-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListBulkDeploymentDetailedReports", :http.request.configuration/output-deser-fn response-list-bulk-deployment-detailed-reports-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-bulk-deployment-detailed-reports :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-bulk-deployment-detailed-reports-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-bulk-deployment-detailed-reports-response))

(clojure.core/defn list-group-certificate-authorities "Retrieves the current CAs for a group." ([list-group-certificate-authorities-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-group-certificate-authorities-request list-group-certificate-authorities-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListGroupCertificateAuthorities", :http.request.configuration/output-deser-fn response-list-group-certificate-authorities-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef list-group-certificate-authorities :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response))

(clojure.core/defn get-logger-definition "Retrieves information about a logger definition." ([get-logger-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-logger-definition-request get-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetLoggerDefinition", :http.request.configuration/output-deser-fn response-get-logger-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-logger-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response))

(clojure.core/defn update-device-definition "Updates a device definition." ([update-device-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-device-definition-request update-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateDeviceDefinition", :http.request.configuration/output-deser-fn response-update-device-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-device-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-device-definition-response))

(clojure.core/defn get-resource-definition "Retrieves information about a resource definition, including its creation time\nand latest version." ([get-resource-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-resource-definition-request get-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetResourceDefinition", :http.request.configuration/output-deser-fn response-get-resource-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-resource-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-resource-definition-response))

(clojure.core/defn delete-resource-definition "Deletes a resource definition." ([delete-resource-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-resource-definition-request delete-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteResourceDefinition", :http.request.configuration/output-deser-fn response-delete-resource-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-resource-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-resource-definition-response))

(clojure.core/defn list-connector-definition-versions "Lists the versions of a connector definition, which are containers for\nconnectors. Connectors run on the Greengrass core and contain built-in\nintegration with local infrastructure, device protocols, AWS, and other cloud\nservices." ([list-connector-definition-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-connector-definition-versions-request list-connector-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-connector-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-connector-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListConnectorDefinitionVersions", :http.request.configuration/output-deser-fn response-list-connector-definition-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-connector-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-connector-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-connector-definition-versions-response))

(clojure.core/defn create-group-certificate-authority "Creates a CA for the group. If a CA already exists, it will rotate the existing\nCA." ([create-group-certificate-authority-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-group-certificate-authority-request create-group-certificate-authority-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateGroupCertificateAuthority", :http.request.configuration/output-deser-fn response-create-group-certificate-authority-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef create-group-certificate-authority :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response))

(clojure.core/defn create-function-definition-version "Creates a version of a Lambda function definition that has already been defined." ([create-function-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-function-definition-version-request create-function-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateFunctionDefinitionVersion", :http.request.configuration/output-deser-fn response-create-function-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-function-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response))

(clojure.core/defn get-core-definition-version "Retrieves information about a core definition version." ([get-core-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-core-definition-version-request get-core-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetCoreDefinitionVersion", :http.request.configuration/output-deser-fn response-get-core-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-core-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response))

(clojure.core/defn get-function-definition-version "Retrieves information about a Lambda function definition version, including\nwhich Lambda functions are included in the version and their configurations." ([get-function-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-function-definition-version-request get-function-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetFunctionDefinitionVersion", :http.request.configuration/output-deser-fn response-get-function-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-function-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response))

(clojure.core/defn update-core-definition "Updates a core definition." ([update-core-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-core-definition-request update-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateCoreDefinition", :http.request.configuration/output-deser-fn response-update-core-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-core-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-core-definition-response))

(clojure.core/defn associate-role-to-group "Associates a role with a group. Your Greengrass core will use the role to access\nAWS cloud services. The role's permissions should allow Greengrass core Lambda\nfunctions to perform actions against the cloud." ([associate-role-to-group-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-associate-role-to-group-request associate-role-to-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/role", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssociateRoleToGroup", :http.request.configuration/output-deser-fn response-associate-role-to-group-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef associate-role-to-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response))

(clojure.core/defn associate-service-role-to-account "Associates a role with your account. AWS IoT Greengrass will use the role to\naccess your Lambda functions and AWS IoT resources. This is necessary for\ndeployments to succeed. The role must have at least minimum permissions in the\npolicy ''AWSGreengrassResourceAccessRolePolicy''." ([] (associate-service-role-to-account {})) ([associate-service-role-to-account-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-associate-service-role-to-account-request associate-service-role-to-account-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/servicerole", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssociateServiceRoleToAccount", :http.request.configuration/output-deser-fn response-associate-service-role-to-account-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef associate-service-role-to-account :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response))

(clojure.core/defn update-subscription-definition "Updates a subscription definition." ([update-subscription-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-subscription-definition-request update-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateSubscriptionDefinition", :http.request.configuration/output-deser-fn response-update-subscription-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-subscription-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response))

(clojure.core/defn update-connectivity-info "Updates the connectivity information for the core. Any devices that belong to\nthe group which has this core will receive this information in order to find the\nlocation of the core and connect to it." ([update-connectivity-info-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-connectivity-info-request update-connectivity-info-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/things/{ThingName}/connectivityInfo", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateConnectivityInfo", :http.request.configuration/output-deser-fn response-update-connectivity-info-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef update-connectivity-info :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response))

(clojure.core/defn create-group "Creates a group. You may provide the initial version of the group or use\n''CreateGroupVersion'' at a later time. Tip: You can use the ''gg_group_setup''\npackage (https://github.com/awslabs/aws-greengrass-group-setup) as a library or\ncommand-line application to create and deploy Greengrass groups." ([] (create-group {})) ([create-group-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-group-request create-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateGroup", :http.request.configuration/output-deser-fn response-create-group-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-group :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-group-response))

(clojure.core/defn create-subscription-definition "Creates a subscription definition. You may provide the initial version of the\nsubscription definition now or use ''CreateSubscriptionDefinitionVersion'' at a\nlater time." ([] (create-subscription-definition {})) ([create-subscription-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-subscription-definition-request create-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateSubscriptionDefinition", :http.request.configuration/output-deser-fn response-create-subscription-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-subscription-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response))

(clojure.core/defn get-group-version "Retrieves information about a group version." ([get-group-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-group-version-request get-group-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-group-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/versions/{GroupVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-group-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetGroupVersion", :http.request.configuration/output-deser-fn response-get-group-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-group-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-version-response))

(clojure.core/defn get-service-role-for-account "Retrieves the service role that is attached to your account." ([] (get-service-role-for-account {})) ([get-service-role-for-account-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-service-role-for-account-request get-service-role-for-account-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/servicerole", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetServiceRoleForAccount", :http.request.configuration/output-deser-fn response-get-service-role-for-account-response, :http.request.spec/error-spec {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-service-role-for-account :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response))

(clojure.core/defn get-connector-definition-version "Retrieves information about a connector definition version, including the\nconnectors that the version contains. Connectors are prebuilt modules that\ninteract with local infrastructure, device protocols, AWS, and other cloud\nservices." ([get-connector-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-connector-definition-version-request get-connector-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-connector-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions/{ConnectorDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-connector-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetConnectorDefinitionVersion", :http.request.configuration/output-deser-fn response-get-connector-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-connector-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-connector-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-connector-definition-version-response))

(clojure.core/defn get-group-certificate-configuration "Retrieves the current configuration for the CA used by the group." ([get-group-certificate-configuration-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-group-certificate-configuration-request get-group-certificate-configuration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetGroupCertificateConfiguration", :http.request.configuration/output-deser-fn response-get-group-certificate-configuration-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-group-certificate-configuration :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response))

(clojure.core/defn delete-core-definition "Deletes a core definition." ([delete-core-definition-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-core-definition-request delete-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteCoreDefinition", :http.request.configuration/output-deser-fn response-delete-core-definition-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-core-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response))

(clojure.core/defn get-logger-definition-version "Retrieves information about a logger definition version." ([get-logger-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-logger-definition-version-request get-logger-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetLoggerDefinitionVersion", :http.request.configuration/output-deser-fn response-get-logger-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-logger-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response))

(clojure.core/defn list-bulk-deployments "Returns a list of bulk deployments." ([] (list-bulk-deployments {})) ([list-bulk-deployments-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-bulk-deployments-request list-bulk-deployments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-bulk-deployments-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/bulk/deployments", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-bulk-deployments-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListBulkDeployments", :http.request.configuration/output-deser-fn response-list-bulk-deployments-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-bulk-deployments :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-bulk-deployments-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-bulk-deployments-response))

(clojure.core/defn list-device-definition-versions "Lists the versions of a device definition." ([list-device-definition-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-device-definition-versions-request list-device-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListDeviceDefinitionVersions", :http.request.configuration/output-deser-fn response-list-device-definition-versions-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-device-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response))

(clojure.core/defn create-core-definition-version "Creates a version of a core definition that has already been defined. Greengrass\ngroups must each contain exactly one Greengrass core." ([create-core-definition-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-core-definition-version-request create-core-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateCoreDefinitionVersion", :http.request.configuration/output-deser-fn response-create-core-definition-version-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-core-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response))

(clojure.core/defn disassociate-role-from-group "Disassociates the role from a group." ([disassociate-role-from-group-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-disassociate-role-from-group-request disassociate-role-from-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/role", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisassociateRoleFromGroup", :http.request.configuration/output-deser-fn response-disassociate-role-from-group-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef disassociate-role-from-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response))

(clojure.core/defn list-device-definitions "Retrieves a list of device definitions." ([] (list-device-definitions {})) ([list-device-definitions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-device-definitions-request list-device-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass.-2017-06-07/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id "Greengrass", :http.request.spec/input-spec :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListDeviceDefinitions", :http.request.configuration/output-deser-fn response-list-device-definitions-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-device-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response))
