(ns portkey.step1-req-generation
  (:require [cheshire.core :as json]
            [clojure.java.io :as io]
            [clojure.test :refer :all]
            [net.cgrand.xforms :as x]
            [portkey.aws :as aws]
            [portkey.awsgen :as gen :refer :all]))

;; Keep it here but no longer in used
;; Used it to validate ser-fns but it seems too complex on the long run
(defmacro deftest-aws-ser [name {:keys [description-schema shape-to-test apply-on-protocols inputs expected-result]}]  
  `(deftest ~name
     (doseq [protocol# ~apply-on-protocols
             input#    ~inputs
             :let      [description-schema# (assoc-in ~description-schema ["metadata" "protocol"] protocol#)
                        _#                  (doseq [shape# (keys (description-schema# "shapes"))]
                                              (eval (gen/generate-serialization-declare shape#)))
                        ser-fns#            (into {}
                                                  (map (fn [[sh#]]
                                                         [sh# (eval (gen/generate-serialization-function description-schema# sh#))]))
                                                  (get description-schema# "shapes"))
                        serialization-fun#  (ser-fns# ~shape-to-test)]]
       (is (= ~expected-result (serialization-fun# input#))))))


(defmacro deftest-aws-request
  "Test whether the request payload that is generated by request-fn
  generates proper body as generated by aws cli.
  Don't send any request, expected-result is taken from aws cli results."    
  ([name {:keys [user-input lib-ns request-fn method body-fun expected-result] :as test-input}]
   `(deftest-aws-request ~name nil ~test-input))
  ([name doc-string? {:keys [user-input lib-ns request-fn method body-fun expected-result]}]
   (assert (-> doc-string? (some-fn string? nil?)) "doc-string? must be a string or nil")
   `(deftest ~name
      ~doc-string?
      (let [request-fn# (var-get (ns-resolve (find-ns (quote ~lib-ns))
                                             (quote ~request-fn)))]
        (is (= ~expected-result
               (-> ~user-input
                   request-fn#
                   (assoc :http.request.configuration/method ~method)
                   ~body-fun
                   :ring.request
                   :body)))))))


;;;;;;;;;;;;;;;;
;; TEST BEGIN ;;
;;;;;;;;;;;;;;;;


;; REST-XML protocol :
;; we should look at how this types generates xml considering all options (flattened, xml-attribute, xml-order...) :
;; - list
;; - map
;; - structure

    
(deftest-aws-request simple-s3-request
  "Simple s3 request on create-bucket-configuration with structured
  type."
  {:method          :post
   :user-input      {:create-bucket-configuration {:location-constraint "eu-west-1"}}
   :request-fn      req-create-bucket-request
   :body-fun        aws/params-to-body-rest-xml
   :lib-ns          portkey.aws.s3
   :expected-result "<?xml version=\"1.0\" encoding=\"UTF-8\"?><CreateBucketConfiguration xmlns:a=\"http://s3.amazonaws.com/doc/2006-03-01/\"><LocationConstraint>eu-west-1</LocationConstraint></CreateBucketConfiguration>"} )
